import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest18 {

    public static boolean debug = false;

    @Test
    public void test09001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09001");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        boolean boolean11 = locale7.hasExtensions();
        java.util.Set<java.lang.Character> charSet12 = locale7.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uce90\ub098\ub2e4" + "'", str9, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charSet12);
    }

    @Test
    public void test09002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09002");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D6 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D6, (double) (byte) 100, vector3D8);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D3, vector3D8);
        double double11 = vector3D3.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D19, (double) (byte) 100, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D16, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D37, (double) (byte) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D34, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D21, (double) (byte) 1, vector3D29, (double) (short) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D3, vector3D21);
        double double44 = vector3D3.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Vector3D vector3D46 = vector3D3.subtract(vector3D45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test09003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09003");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray10 = new char[] { '4', 'a', ' ', ' ' };
        printWriter4.write(charArray10);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.lang.String str16 = locale12.getDisplayLanguage(locale13);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintWriter printWriter40 = printWriter23.format(locale28, "YZY", (java.lang.Object[]) doubleArray39);
        java.io.PrintWriter printWriter41 = printWriter4.printf(locale13, "ko-KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream44 = new java.io.PrintStream("ko-KR");
        printStream44.close();
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream44, false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter47);
        printWriter47.println((float) (byte) -1);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter47, true);
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter55 = printWriter47.printf("KR", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream57 = new java.io.PrintStream("ko-KR");
        printStream57.close();
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream57, false);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter60);
        char[] charArray64 = new char[] { ' ', 'x' };
        printWriter61.write(charArray64);
        printWriter47.println(charArray64);
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.lang.String str69 = locale67.getDisplayScript(locale68);
        java.lang.String str70 = locale68.getVariant();
        java.lang.String[] strArray73 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray73);
        java.io.PrintWriter printWriter75 = printWriter47.printf(locale68, "English", (java.lang.Object[]) strArray73);
        java.io.PrintWriter printWriter76 = printWriter41.printf("\u97d3\u6587", (java.lang.Object[]) strArray73);
        printWriter76.print((int) (byte) 1);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , x]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printWriter76);
    }

    @Test
    public void test09004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09004");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder8 = builder6.setLanguage("KR");
        java.util.Locale.Builder builder10 = builder6.setLanguage("KOR");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale15 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale.setDefault(category16, locale17);
        java.lang.String str20 = locale15.getDisplayName(locale17);
        java.lang.String str21 = locale17.getDisplayName();
        java.lang.String str22 = locale12.getDisplayLanguage(locale17);
        java.lang.String str23 = locale11.getDisplayVariant(locale12);
        java.lang.String str24 = locale12.getISO3Language();
        java.lang.String str25 = locale12.toLanguageTag();
        java.lang.String str26 = locale12.toLanguageTag();
        java.lang.String str27 = locale12.getVariant();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "kor_DE");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587)" + "'", str20, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "eng" + "'", str24, "eng");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en-CA" + "'", str25, "en-CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en-CA" + "'", str26, "en-CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test09005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09005");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        printStream1.print(0L);
        printStream1.println((int) (byte) -1);
        printStream1.flush();
        printStream1.println((int) 'x');
        printStream1.println(false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test09006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09006");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((float) (byte) 100);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream16 = printStream11.format(locale13, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        printStream11.println(10.0f);
        printStream11.println((float) 100);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        printWriter5.println((java.lang.Object) printStream24);
        org.apache.commons.math.geometry.RotationOrder rotationOrder26 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotationOrder26.getA3();
        printStream24.print((java.lang.Object) rotationOrder26);
        org.apache.commons.math.geometry.Vector3D vector3D29 = rotationOrder26.getA3();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation(rotationOrder26, (-1040.0d), 0.9999500037496876d, 18.416257194840895d);
        double double34 = rotation33.getQ0();
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(rotationOrder26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-0.2451123036241922d) + "'", double34 == (-0.2451123036241922d));
    }

    @Test
    public void test09007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09007");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray11 = rotation10.getMatrix();
        java.io.PrintStream printStream12 = printStream1.printf("fra", (java.lang.Object[]) doubleArray11);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder13.setExtension('u', "");
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale22 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale.setDefault(category23, locale24);
        java.lang.String str27 = locale22.getDisplayName(locale24);
        java.lang.String str28 = locale24.getDisplayName();
        java.lang.String str29 = locale19.getDisplayLanguage(locale24);
        java.util.Locale.Builder builder30 = builder13.setLocale(locale19);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter36);
        java.lang.String[] strArray39 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter40 = printWriter37.printf("ko-KR", (java.lang.Object[]) strArray39);
        java.io.PrintStream printStream41 = printStream1.printf(locale19, "TWN", (java.lang.Object[]) strArray39);
        boolean boolean42 = printStream41.checkError();
        java.io.PrintStream printStream44 = printStream41.append((java.lang.CharSequence) "ZYX");
        printStream44.print((float) 100L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u97d3\u6587)" + "'", str27, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English" + "'", str29, "English");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(printStream44);
    }

    @Test
    public void test09008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09008");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(2.9461951539013636d, (double) 0.0f, 52.0d, (double) 10, false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ0();
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double19 = rotation18.getQ0();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation11.applyTo(rotation18);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D24, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotation11.applyInverseTo(vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D33 = rotation11.getAxis();
        org.apache.commons.math.geometry.Rotation rotation34 = rotation5.applyTo(rotation11);
        double double35 = rotation11.getQ3();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
    }

    @Test
    public void test09009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09009");
        java.util.Locale locale2 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str3 = locale2.getDisplayVariant();
        java.lang.String str4 = locale2.getDisplayScript();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder10 = builder5.setExtension('u', "");
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale14 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale.setDefault(category15, locale16);
        java.lang.String str19 = locale14.getDisplayName(locale16);
        java.lang.String str20 = locale16.getDisplayName();
        java.lang.String str21 = locale11.getDisplayLanguage(locale16);
        java.util.Locale.Builder builder22 = builder5.setLocale(locale11);
        java.util.Locale locale23 = locale11.stripExtensions();
        java.lang.String str24 = locale2.getDisplayLanguage(locale11);
        java.lang.String str25 = locale2.getDisplayScript();
        java.lang.String str26 = locale2.getCountry();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u97d3\u6587)" + "'", str19, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zxz_fran\347ais" + "'", str24, "zxz_fran\347ais");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str26, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
    }

    @Test
    public void test09010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09010");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale4.getDisplayScript(locale5);
        java.lang.String str7 = locale3.getDisplayLanguage(locale4);
        java.lang.String str8 = locale0.getDisplayName(locale3);
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale.setDefault(category9, locale12);
        java.lang.String str17 = locale12.getDisplayVariant();
        java.lang.String str18 = locale12.getDisplayName();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale19.getISO3Language();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getLanguage();
        java.lang.String str23 = locale12.getDisplayScript(locale19);
        java.lang.String str24 = locale3.getDisplayLanguage(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = locale3.getUnicodeLocaleType("org.apache.commons.math.geometry.NotARotationMatrixException: de-DE");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.geometry.NotARotationMatrixException: de-DE");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fran\347ais" + "'", str7, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais" + "'", str8, "anglais");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ita" + "'", str20, "ita");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "French" + "'", str24, "French");
    }

    @Test
    public void test09011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09011");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((int) (short) -1);
        printWriter5.close();
        printWriter5.print((int) (byte) -1);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double19 = rotation18.getQ1();
        double double20 = rotation18.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D30 = vector3D22.subtract((double) 10L, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotation18.applyInverseTo(vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = vector3D31.orthogonal();
        printWriter5.println((java.lang.Object) vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D37, (double) (byte) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D45 = vector3D37.subtract((double) 10L, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D53, (double) (byte) 100, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D50, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D44.subtract((double) 0, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D69 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D70 = vector3D62.subtract((double) 10L, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D75 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D70, (double) 10L, vector3D74);
        org.apache.commons.math.geometry.Vector3D vector3D79 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D82 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D79, (double) (byte) 100, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D84 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D86 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D87 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D84, (double) (byte) 100, vector3D86);
        org.apache.commons.math.geometry.Vector3D vector3D88 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D81, vector3D86);
        org.apache.commons.math.geometry.Vector3D vector3D91 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D93 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D94 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D91, (double) (byte) 100, vector3D93);
        org.apache.commons.math.geometry.Vector3D vector3D95 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D81, (double) 0.0f, vector3D93);
        double double96 = vector3D95.getX();
        org.apache.commons.math.geometry.Vector3D vector3D97 = new org.apache.commons.math.geometry.Vector3D((double) '4', vector3D44, (double) (short) 1, vector3D75, (double) (-1L), vector3D95);
        org.apache.commons.math.geometry.Vector3D vector3D98 = vector3D32.subtract((double) (short) -1, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D99 = vector3D75.orthogonal();
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D93);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D98);
        org.junit.Assert.assertNotNull(vector3D99);
    }

    @Test
    public void test09012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09012");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D18, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation5.applyInverseTo(vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation5.getAxis();
        org.apache.commons.math.geometry.RotationOrder rotationOrder28 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str29 = rotationOrder28.toString();
        org.apache.commons.math.geometry.Vector3D vector3D30 = rotationOrder28.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D32 = vector3D30.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = rotation39.applyTo(vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D30, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D27, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D(1.7607846147136124d, (double) (byte) -1);
        org.apache.commons.math.geometry.Rotation rotation59 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double60 = rotation59.getQ1();
        double double61 = rotation59.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D63, (double) (byte) 100, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D71 = vector3D63.subtract((double) 10L, vector3D70);
        org.apache.commons.math.geometry.Vector3D vector3D72 = rotation59.applyInverseTo(vector3D70);
        org.apache.commons.math.geometry.Vector3D vector3D73 = vector3D52.subtract(1.7607846147136124d, vector3D70);
        double double74 = vector3D73.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D75 = vector3D47.add(1.722120065185129d, vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D76 = vector3D73.orthogonal();
        double double77 = vector3D73.getDelta();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(rotationOrder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZXZ" + "'", str29, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 52.0d + "'", double61 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-1.2792393947944187d) + "'", double74 == (-1.2792393947944187d));
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.2792393947944187d) + "'", double77 == (-1.2792393947944187d));
    }

    @Test
    public void test09013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09013");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder0.setLanguage("fra");
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale13 = builder10.build();
        java.util.Locale.Builder builder14 = builder10.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.setRegion("");
        java.util.Locale locale17 = builder14.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fra_CA_#u-fra");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fra");
    }

    @Test
    public void test09014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09014");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintStream printStream4 = printStream1.append('a');
        printStream4.println('#');
        org.junit.Assert.assertNotNull(printStream4);
    }

    @Test
    public void test09015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09015");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: cinese (Cina)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09016");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayLanguage(locale2);
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet7 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str10 = locale0.getDisplayName(locale9);
        java.lang.String str11 = locale0.getISO3Language();
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter16.println((float) (byte) -1);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter16, true);
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter24 = printWriter16.printf("KR", (java.lang.Object[]) strArray23);
        printWriter24.print((double) 0.0f);
        printWriter24.println("zxz (KO_KR)");
        printWriter24.write(0);
        java.io.PrintWriter printWriter32 = printWriter24.append('a');
        printWriter32.print((float) 'x');
        java.util.Locale locale37 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        boolean boolean40 = locale39.hasExtensions();
        java.util.Locale.setDefault(category38, locale39);
        java.lang.String str42 = locale37.getDisplayName(locale39);
        java.lang.String str43 = locale39.getDisplayName();
        java.io.PrintStream printStream46 = new java.io.PrintStream("ko-KR");
        printStream46.close();
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String[] strArray50 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream51 = printStream46.format(locale48, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray50);
        java.io.PrintStream printStream53 = new java.io.PrintStream((java.io.OutputStream) printStream46, false);
        printStream46.println(10.0f);
        java.lang.String[] strArray58 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray58);
        java.io.PrintStream printStream60 = printStream46.format("\u97d3\u6587", (java.lang.Object[]) strArray58);
        java.io.PrintWriter printWriter61 = printWriter32.printf(locale39, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) strArray58);
        java.lang.String str62 = locale0.getDisplayName(locale39);
        java.lang.String str63 = locale39.getDisplayVariant();
        java.util.Locale locale66 = new java.util.Locale("zho", "zxz_FRAN\347AIS");
        java.lang.String str67 = locale39.getDisplayLanguage(locale66);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(printWriter32);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u97d3\u6587)" + "'", str42, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "English" + "'", str43, "English");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals(locale66.toString(), "zho_ZXZ_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English" + "'", str67, "English");
    }

    @Test
    public void test09017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09017");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream10.print("Chinesisch (China)");
        printStream10.println((int) 'x');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
    }

    @Test
    public void test09018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09018");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder8 = builder6.setLanguage("KR");
        java.util.Locale.Builder builder10 = builder6.setLanguage("KOR");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale15 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale.setDefault(category16, locale17);
        java.lang.String str20 = locale15.getDisplayName(locale17);
        java.lang.String str21 = locale17.getDisplayName();
        java.lang.String str22 = locale12.getDisplayLanguage(locale17);
        java.lang.String str23 = locale11.getDisplayVariant(locale12);
        java.lang.Class<?> wildcardClass24 = locale11.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "kor_DE");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587)" + "'", str20, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test09019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09019");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("Italian");
        printWriter1.close();
    }

    @Test
    public void test09020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09020");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter5.println((float) (byte) -1);
        printWriter5.print('a');
        java.util.Locale locale12 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter5.print((java.lang.Object) locale12);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D16.negate();
        org.apache.commons.math.geometry.Vector3D vector3D22 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D29, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D39, (double) (byte) 100, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D45, (double) (byte) 100, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D47, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D34, (double) (byte) 1, vector3D42, (double) (short) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D34.negate();
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D34);
        double double58 = vector3D34.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D59 = vector3D22.subtract((double) (short) -1, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D60 = vector3D16.add((double) (byte) 0, vector3D34);
        double double61 = vector3D60.getY();
        printWriter5.println((java.lang.Object) double61);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException68);
        java.lang.Object[] objArray70 = mathException68.getArguments();
        java.io.PrintStream printStream73 = new java.io.PrintStream("ko-KR");
        printStream73.close();
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter((java.io.OutputStream) printStream73, false);
        java.io.PrintWriter printWriter77 = new java.io.PrintWriter((java.io.Writer) printWriter76);
        java.lang.String[] strArray79 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter80 = printWriter77.printf("ko-KR", (java.lang.Object[]) strArray79);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException81 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray79);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("German", objArray70, (java.lang.Throwable) notARotationMatrixException81);
        java.io.PrintWriter printWriter83 = printWriter5.printf("\uc911\uad6d\uc5b4", objArray70);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException84 = new org.apache.commons.math.geometry.NotARotationMatrixException("en", objArray70);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) notARotationMatrixException84);
        java.lang.String str86 = notARotationMatrixException84.getPattern();
        java.lang.String[] strArray88 = java.util.Locale.getISOCountries();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException89 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d", (java.lang.Object[]) strArray88);
        notARotationMatrixException84.addSuppressed((java.lang.Throwable) notARotationMatrixException89);
        java.lang.String str91 = notARotationMatrixException89.toString();
        org.junit.Assert.assertEquals(locale12.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-0.13715201283077028d) + "'", double61 == (-0.13715201283077028d));
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "en" + "'", str86, "en");
        org.junit.Assert.assertNotNull(strArray88);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\uc911\uad6d" + "'", str91, "\uc911\uad6d");
    }

    @Test
    public void test09021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09021");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D7, vector3D12);
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray22 = rotation21.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D24, (double) (byte) 100, vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D26, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotation21.applyInverseTo(vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D34, vector3D35);
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D45, (double) (byte) 100, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation43.applyTo(vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D50 = vector3D45.negate();
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        double double53 = vector3D52.getY();
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D7, (double) ' ', vector3D34, (double) (-1.0f), vector3D50, (double) 10.0f, vector3D52);
        printStream1.print((java.lang.Object) ' ');
        java.lang.String[] strArray57 = java.util.Locale.getISOLanguages();
        java.io.PrintStream printStream58 = printStream1.format("\uce90\ub098\ub2e4", (java.lang.Object[]) strArray57);
        printStream1.write((int) (byte) 1);
        printStream1.print('a');
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(printStream58);
    }

    @Test
    public void test09022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09022");
        org.apache.commons.math.geometry.Vector3D vector3D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation2 = new org.apache.commons.math.geometry.Rotation(vector3D0, (-55.797888673382836d));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09023");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        printWriter9.flush();
    }

    @Test
    public void test09024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09024");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("TWN");
        java.io.PrintWriter printWriter3 = printWriter1.append('#');
        printWriter3.println("CHN");
        printWriter3.println();
        printWriter3.println((long) (byte) -1);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ko-KR");
        printStream10.println((float) (-1));
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10);
        printStream10.print(0L);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream10);
        printWriter16.print((int) (byte) 10);
        java.util.Locale locale20 = new java.util.Locale("TW");
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (short) 1, 1.7607846147136124d, 1.0d, false);
        org.apache.commons.math.geometry.Rotation rotation29 = rotation28.revert();
        double[][] doubleArray30 = rotation29.getMatrix();
        double[][] doubleArray31 = rotation29.getMatrix();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("eng", (java.lang.Object[]) doubleArray31, (java.lang.Throwable) mathException34);
        java.io.PrintWriter printWriter37 = printWriter16.format(locale20, "chinese (china) (ALLEMAND)", (java.lang.Object[]) doubleArray31);
        java.lang.Object[] objArray39 = null;
        java.io.PrintWriter printWriter40 = printWriter3.printf(locale20, "japon\350s", objArray39);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertEquals(locale20.toString(), "tw");
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter40);
    }

    @Test
    public void test09025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09025");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        char[] charArray13 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream6.println(charArray13);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream6, true);
        printWriter16.print((int) '4');
        printWriter16.print((long) (byte) 100);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter26);
        printWriter27.print((long) (short) 100);
        printWriter27.print((int) 'u');
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter36);
        printWriter36.println((float) (byte) -1);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter36, true);
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter44 = printWriter36.printf("KR", (java.lang.Object[]) strArray43);
        java.io.PrintStream printStream46 = new java.io.PrintStream("ko-KR");
        printStream46.close();
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream46, false);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.Writer) printWriter49);
        char[] charArray53 = new char[] { ' ', 'x' };
        printWriter50.write(charArray53);
        printWriter36.println(charArray53);
        printWriter27.print(charArray53);
        printWriter27.print((int) (byte) 0);
        java.util.Locale.Category category59 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.util.Locale.setDefault(category59, locale60);
        java.util.Locale locale63 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale63);
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.util.Locale locale66 = java.util.Locale.TAIWAN;
        java.lang.String str67 = locale65.getDisplayScript(locale66);
        java.lang.String str68 = locale63.getDisplayLanguage(locale66);
        java.util.Locale.setDefault(category59, locale66);
        org.apache.commons.math.geometry.Rotation rotation76 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray77 = rotation76.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D79 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D82 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D79, (double) (byte) 100, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D84 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D86 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D87 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D84, (double) (byte) 100, vector3D86);
        org.apache.commons.math.geometry.Vector3D vector3D88 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D81, vector3D86);
        org.apache.commons.math.geometry.Vector3D vector3D89 = rotation76.applyInverseTo(vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D90 = rotation76.getAxis();
        org.apache.commons.math.geometry.Rotation rotation91 = rotation76.revert();
        org.apache.commons.math.geometry.Rotation rotation92 = rotation76.revert();
        org.apache.commons.math.geometry.Rotation rotation93 = rotation92.revert();
        org.apache.commons.math.geometry.Rotation rotation94 = rotation92.revert();
        double[][] doubleArray95 = rotation92.getMatrix();
        java.io.PrintWriter printWriter96 = printWriter27.printf(locale66, "ZYX", (java.lang.Object[]) doubleArray95);
        java.io.PrintWriter printWriter97 = printWriter16.format("italiano", (java.lang.Object[]) doubleArray95);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, a, #, x]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ , x]");
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.FORMAT + "'", category59.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u97d3\u6587" + "'", str68, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(rotation91);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertNotNull(rotation93);
        org.junit.Assert.assertNotNull(rotation94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(printWriter96);
        org.junit.Assert.assertNotNull(printWriter97);
    }

    @Test
    public void test09026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09026");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("Italian", "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09027");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("xyx (ZH-TW,org.apache.commons.math.geometry.NotARotationMatrixException: x-lvariant-TWN)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=xyx(zh-tw");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09028");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        boolean boolean11 = locale7.hasExtensions();
        java.lang.String str12 = locale7.getLanguage();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder17 = builder13.setLanguage("ZXZ");
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder19 = builder13.setLocale(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder21 = builder13.setLocale(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale20.getDisplayLanguage();
        java.lang.String str24 = locale20.getLanguage();
        java.lang.String str25 = locale7.getDisplayScript(locale20);
        java.lang.String str26 = locale20.getCountry();
        java.lang.String str27 = locale20.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uce90\ub098\ub2e4" + "'", str9, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en" + "'", str12, "en");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc601\uc5b4" + "'", str23, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en" + "'", str24, "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CA" + "'", str26, "CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc601\uc5b4" + "'", str27, "\uc601\uc5b4");
    }

    @Test
    public void test09029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09029");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ZXZ");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ZXZ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09030");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter29.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray40);
        printWriter29.println("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str46 = locale45.getDisplayVariant();
        java.util.Locale locale47 = locale45.stripExtensions();
        java.io.PrintStream printStream50 = new java.io.PrintStream("ko-KR");
        printStream50.close();
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream55 = printStream50.format(locale52, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream57 = new java.io.PrintStream((java.io.OutputStream) printStream50, false);
        printStream50.println(10.0f);
        java.lang.String[] strArray62 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray62);
        java.io.PrintStream printStream64 = printStream50.format("\u97d3\u6587", (java.lang.Object[]) strArray62);
        java.io.PrintStream printStream66 = new java.io.PrintStream((java.io.OutputStream) printStream50, false);
        java.util.Locale locale67 = null;
        org.apache.commons.math.geometry.Rotation rotation74 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation80 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double81 = rotation80.getQ0();
        org.apache.commons.math.geometry.Rotation rotation82 = rotation74.applyInverseTo(rotation80);
        org.apache.commons.math.geometry.Vector3D vector3D83 = rotation80.getAxis();
        double double84 = rotation80.getQ1();
        double[][] doubleArray85 = rotation80.getMatrix();
        java.io.PrintStream printStream86 = printStream66.printf(locale67, "United States", (java.lang.Object[]) doubleArray85);
        java.io.PrintWriter printWriter87 = printWriter29.printf(locale47, "KR", (java.lang.Object[]) doubleArray85);
        java.io.PrintWriter printWriter89 = printWriter87.append('#');
        printWriter89.write(100);
        printWriter89.flush();
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 52.0d + "'", double81 == 52.0d);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(printStream86);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printWriter89);
    }

    @Test
    public void test09031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09031");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        double double22 = rotation15.getAngle();
        org.apache.commons.math.geometry.RotationOrder rotationOrder23 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation(rotationOrder23, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Rotation rotation28 = rotation15.applyTo(rotation27);
        org.apache.commons.math.geometry.RotationOrder rotationOrder29 = org.apache.commons.math.geometry.RotationOrder.ZYX;
        double[] doubleArray30 = rotation27.getAngles(rotationOrder29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotationOrder29.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D32 = vector3D31.orthogonal();
        double double33 = vector3D32.getY();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(rotationOrder23);
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(rotationOrder29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-0.6995216443485193, -0.786766130769684, 1.0349958982147882]");
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test09032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09032");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = printStream1.append(' ');
        printStream31.println((-2000.0d));
        printStream31.println("zxz (KO_KR)");
        printStream31.println(true);
        java.util.Locale locale39 = new java.util.Locale("ZXY");
        printStream31.println((java.lang.Object) "ZXY");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertEquals(locale39.toString(), "zxy");
    }

    @Test
    public void test09033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09033");
        java.util.Locale locale2 = new java.util.Locale("german_KOR", "French");
        java.lang.String str3 = locale2.getDisplayVariant();
        java.lang.String str4 = locale2.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale2.getUnicodeLocaleType("\uc911\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.MathException: ????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "german_kor_FRENCH");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test09034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09034");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test09035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09035");
        java.io.PrintStream printStream2 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream4 = printStream2.append(' ');
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        char[] charArray13 = new char[] { ' ', 'x' };
        printWriter10.write(charArray13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.lang.String str18 = locale15.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray26 = rotation25.getMatrix();
        java.io.PrintWriter printWriter27 = printWriter10.format(locale15, "YZY", (java.lang.Object[]) doubleArray26);
        printWriter27.print((-1L));
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.lang.String str31 = locale30.getScript();
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray43 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException44 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray43);
        java.lang.Throwable[] throwableArray45 = notARotationMatrixException44.getSuppressed();
        java.io.PrintWriter printWriter46 = printWriter27.printf(locale30, "CHN", (java.lang.Object[]) throwableArray45);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("\u97d3\u6587)");
        java.lang.String str49 = locale30.getDisplayVariant(locale48);
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray52);
        java.lang.Object[] objArray54 = mathException53.getArguments();
        java.io.PrintStream printStream55 = printStream4.format(locale48, "\u97d3\u6587)", objArray54);
        printStream4.print(false);
        printStream4.println();
        printStream4.flush();
        java.io.PrintStream printStream62 = new java.io.PrintStream("ko-KR");
        printStream62.close();
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter((java.io.OutputStream) printStream62, false);
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.Writer) printWriter65);
        char[] charArray69 = new char[] { ' ', 'x' };
        printWriter66.write(charArray69);
        printWriter66.write((int) (byte) 1);
        printWriter66.print((int) (short) 0);
        printWriter66.println("org.apache.commons.math.MathException: ZXZ");
        printWriter66.println('4');
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray90 = mathException89.getSuppressed();
        mathException88.addSuppressed((java.lang.Throwable) mathException89);
        java.lang.Object[] objArray92 = mathException88.getArguments();
        java.lang.Throwable[] throwableArray93 = mathException88.getSuppressed();
        java.io.PrintWriter printWriter94 = printWriter66.printf("\ub300\ud55c\ubbfc\uad6d", (java.lang.Object[]) throwableArray93);
        java.io.PrintStream printStream95 = printStream4.format("", (java.lang.Object[]) throwableArray93);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("inglese", (java.lang.Object[]) throwableArray93);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , x]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[ , x]");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(printWriter94);
        org.junit.Assert.assertNotNull(printStream95);
    }

    @Test
    public void test09036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09036");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Italy", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale6, locale7, locale8, locale9, locale10, locale11, locale13, locale14, locale15 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList17, filteringMode19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale26, locale27, locale28, locale29, locale30, locale31, locale33, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList37, filteringMode39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.lang.String str52 = locale51.getDisplayLanguage();
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale46, locale47, locale48, locale49, locale50, locale51, locale53, locale54, locale55 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList57, filteringMode59);
        java.util.Locale locale61 = java.util.Locale.lookup(languageRangeList42, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale locale62 = java.util.Locale.lookup(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList60);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode39.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode59.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNull(locale61);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertNotNull(localeList63);
    }

    @Test
    public void test09037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09037");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        printStream1.print(false);
        printStream1.flush();
        java.util.Locale locale12 = new java.util.Locale("org.apache.commons.math.MathException: ko_KR");
        java.lang.String str13 = locale12.getScript();
        java.lang.String str14 = locale12.getDisplayVariant();
        java.io.PrintStream printStream18 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream18.println((float) 100L);
        printStream18.print((double) (byte) 1);
        java.io.PrintStream printStream25 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream25.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray35 = rotation34.getMatrix();
        java.io.PrintStream printStream36 = printStream25.printf("fra", (java.lang.Object[]) doubleArray35);
        java.io.PrintStream printStream37 = printStream18.format("", (java.lang.Object[]) doubleArray35);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException38 = new org.apache.commons.math.geometry.NotARotationMatrixException("\u82f1\u56fd", (java.lang.Object[]) doubleArray35);
        java.io.PrintStream printStream39 = printStream1.format(locale12, "\u82f1\u8a9e", (java.lang.Object[]) doubleArray35);
        java.lang.Object obj40 = null;
        printStream1.println(obj40);
        java.io.PrintStream printStream43 = printStream1.append('4');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertEquals(locale12.toString(), "org.apache.commons.math.mathexception: ko_kr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printStream43);
    }

    @Test
    public void test09038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09038");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream4, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        char[] charArray13 = new char[] { '4', 'a', ' ', ' ' };
        printWriter7.write(charArray13);
        printStream1.print(charArray13);
        java.lang.CharSequence charSequence16 = null;
        java.io.PrintStream printStream17 = printStream1.append(charSequence16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray23, (java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray28 = mathException27.getSuppressed();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray23, (java.lang.Throwable) mathException27);
        java.lang.Throwable[] throwableArray30 = mathException27.getSuppressed();
        java.io.PrintStream printStream31 = printStream19.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray30);
        printStream31.println((long) 0);
        java.io.PrintStream printStream35 = new java.io.PrintStream("ko-KR");
        printStream35.close();
        java.util.Locale locale37 = java.util.Locale.UK;
        java.lang.String[] strArray39 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream40 = printStream35.format(locale37, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray39);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream35, false);
        printStream35.println(10.0f);
        java.io.PrintStream printStream47 = new java.io.PrintStream("ko-KR");
        printStream47.close();
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream47, false);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.Writer) printWriter50);
        printWriter51.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation60 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray61 = rotation60.getMatrix();
        java.io.PrintWriter printWriter62 = printWriter51.format("en", (java.lang.Object[]) doubleArray61);
        java.io.PrintStream printStream63 = printStream35.printf("YZY", (java.lang.Object[]) doubleArray61);
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream63);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) -1 };
        printStream63.write(byteArray67);
        printStream31.write(byteArray67);
        printStream1.write(byteArray67, (int) (short) 0, (int) (short) -1);
        java.io.PrintStream printStream74 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream74.close();
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, -1]");
    }

    @Test
    public void test09039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09039");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.print(100.0f);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15, false);
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String[] strArray25 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream26 = printStream21.format(locale23, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray25);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream21, false);
        printStream21.println(10.0f);
        java.lang.String[] strArray33 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33);
        java.io.PrintStream printStream35 = printStream21.format("\u97d3\u6587", (java.lang.Object[]) strArray33);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) -1 };
        printStream35.write(byteArray39);
        printStream15.write(byteArray39, (-1), 0);
        printStream15.println();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, -1]");
    }

    @Test
    public void test09040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09040");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("french");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Collection<java.lang.String> strCollection5 = null;
        java.lang.String str6 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strCollection5);
        java.lang.String[] strArray20 = new java.lang.String[] { "org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uce90\ub098\ub2e4", "org.apache.commons.math.geometry.NotARotationMatrixException: ", "YZY", "\u97d3\u6587", "en_CA", "English", "TWN", "\u97d3\u6587", "zxz_FRAN\347AIS", "org.apache.commons.math.MathException: ZXZ", "KR", "ko-KR" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList21);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleKeys();
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("TW");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap32);
        java.util.Collection<java.util.Locale> localeCollection34 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.parse("ko-KR", strMap36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList37, strMap38);
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = locale40.getDisplayName();
        boolean boolean42 = locale40.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayLanguage();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.lang.String str47 = locale45.getDisplayScript(locale46);
        java.lang.String str48 = locale43.getDisplayLanguage(locale45);
        java.util.Locale locale49 = locale43.stripExtensions();
        java.lang.String str50 = locale49.getScript();
        java.lang.String str51 = locale40.getDisplayCountry(locale49);
        java.util.Set<java.lang.String> strSet52 = locale49.getUnicodeLocaleKeys();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.parse("ja", strMap54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList55, strMap56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList55, strMap58);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = java.util.Locale.GERMANY;
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.lang.String str69 = locale68.getDisplayLanguage();
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale63, locale64, locale65, locale66, locale67, locale68, locale70, locale71, locale72 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList74, filteringMode76);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter(languageRangeList55, (java.util.Collection<java.util.Locale>) localeList74, filteringMode78);
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList37, (java.util.Collection<java.lang.String>) strSet52, filteringMode78);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter(languageRangeList33, localeCollection34, filteringMode78);
        java.util.Locale.FilteringMode filteringMode82 = null;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList81, filteringMode82);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap84 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList85 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap84);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "tw");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u82f1\u6587" + "'", str41, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode76.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode78.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(languageRangeList85);
    }

    @Test
    public void test09041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09041");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test09042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09042");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.Object obj19 = locale17.clone();
        printStream15.println((java.lang.Object) locale17);
        printStream15.println();
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream28 = printStream23.format(locale25, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream23, false);
        printStream23.println(10.0f);
        java.io.PrintStream printStream35 = new java.io.PrintStream("ko-KR");
        printStream35.close();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream35, false);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.Writer) printWriter38);
        printWriter39.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray49 = rotation48.getMatrix();
        java.io.PrintWriter printWriter50 = printWriter39.format("en", (java.lang.Object[]) doubleArray49);
        java.io.PrintStream printStream51 = printStream23.printf("YZY", (java.lang.Object[]) doubleArray49);
        printStream51.print(1.2220476682666177d);
        printStream51.println(false);
        boolean boolean56 = printStream51.checkError();
        java.io.PrintStream printStream58 = printStream51.append((java.lang.CharSequence) "XZX");
        byte[] byteArray60 = new byte[] { (byte) -1 };
        printStream51.write(byteArray60, (int) ' ', (int) 'u');
        printStream15.write(byteArray60);
        printStream15.println((-0.08806429469916818d));
        printStream15.println((int) (byte) 1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ja" + "'", str18, "ja");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "ja");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "ja");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1]");
    }

    @Test
    public void test09043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09043");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((double) (short) 1, (-60.912721436461325d));
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Rotation rotation8 = new org.apache.commons.math.geometry.Rotation(vector3D6, (-1.63942416E8d));
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D2.subtract(0.567725116225552d, vector3D6);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(vector3D2, 0.0d);
        org.apache.commons.math.geometry.Rotation rotation17 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double18 = rotation17.getQ0();
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double25 = rotation24.getQ0();
        org.apache.commons.math.geometry.Rotation rotation26 = rotation17.applyTo(rotation24);
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D28, (double) (byte) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D30, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D38 = rotation17.applyInverseTo(vector3D30);
        org.apache.commons.math.geometry.Rotation rotation44 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double45 = rotation44.getQ0();
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double52 = rotation51.getQ0();
        org.apache.commons.math.geometry.Rotation rotation53 = rotation44.applyTo(rotation51);
        org.apache.commons.math.geometry.Rotation rotation54 = rotation44.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder55 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation59 = new org.apache.commons.math.geometry.Rotation(rotationOrder55, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation60 = rotation54.applyTo(rotation59);
        double double61 = rotation54.getAngle();
        org.apache.commons.math.geometry.Rotation rotation62 = rotation17.applyInverseTo(rotation54);
        double double63 = rotation62.getQ3();
        org.apache.commons.math.geometry.Rotation rotation69 = new org.apache.commons.math.geometry.Rotation((double) 0L, 3.141592653589793d, (-3.141592653589793d), (double) (-1L), false);
        org.apache.commons.math.geometry.Rotation rotation75 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D77 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D79 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D80 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D77, (double) (byte) 100, vector3D79);
        org.apache.commons.math.geometry.Vector3D vector3D81 = rotation75.applyTo(vector3D77);
        double double82 = rotation75.getAngle();
        double double83 = rotation75.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D86 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D88 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D89 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D86, (double) (byte) 100, vector3D88);
        org.apache.commons.math.geometry.Vector3D vector3D93 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D94 = vector3D86.subtract((double) 10L, vector3D93);
        org.apache.commons.math.geometry.Vector3D vector3D95 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D93);
        org.apache.commons.math.geometry.Vector3D vector3D96 = rotation75.applyTo(vector3D95);
        org.apache.commons.math.geometry.Rotation rotation97 = rotation69.applyInverseTo(rotation75);
        org.apache.commons.math.geometry.Rotation rotation98 = rotation62.applyTo(rotation69);
        org.apache.commons.math.geometry.Rotation rotation99 = rotation11.applyTo(rotation69);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(rotationOrder55);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1040.0d) + "'", double63 == (-1040.0d));
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertNotNull(vector3D96);
        org.junit.Assert.assertNotNull(rotation97);
        org.junit.Assert.assertNotNull(rotation98);
        org.junit.Assert.assertNotNull(rotation99);
    }

    @Test
    public void test09044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09044");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation16.getAxis();
        printWriter4.print((java.lang.Object) rotation16);
        printWriter4.close();
        printWriter4.flush();
        printWriter4.print("org.apache.commons.math.MathException: ITA");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D18);
    }

    @Test
    public void test09045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09045");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((double) 'u', 1.6704649792860586d, (-0.995037190209989d));
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D14 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D8, (double) 0L, vector3D13);
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D(52.0d, Double.NaN, (double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D20 = vector3D14.subtract(0.9999500037496876d, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D21 = vector3D3.add(10.099504938362077d, vector3D19);
        double double22 = vector3D21.getY();
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test09046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09046");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getISO3Language();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale0.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale0.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ita" + "'", str1, "ita");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
    }

    @Test
    public void test09047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09047");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.removeUnicodeLocaleAttribute("\uc911\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.geometry.NotARotationMatrixException: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test09048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09048");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getDisplayLanguage(locale6);
        java.lang.String str10 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale14 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale15.getDisplayLanguage(locale18);
        java.lang.String str21 = locale14.getDisplayVariant(locale18);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.lang.String str26 = locale14.getDisplayVariant(locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale.setDefault(locale29);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "francese" + "'", str10, "francese");
        org.junit.Assert.assertEquals(locale14.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587" + "'", str20, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
    }

    @Test
    public void test09049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09049");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        printWriter29.print((long) '#');
        printWriter29.print((long) '4');
        printWriter29.println((int) (short) -1);
        java.io.PrintWriter printWriter37 = printWriter29.append((java.lang.CharSequence) "Twi");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter37);
    }

    @Test
    public void test09050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09050");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException3);
        java.lang.String[] strArray8 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray8, (java.lang.Throwable) mathException10);
        java.lang.String str12 = mathException11.getPattern();
        mathException6.addSuppressed((java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("zxz", (java.lang.Throwable) mathException6);
        java.io.PrintStream printStream17 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream17.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintStream printStream28 = printStream17.printf("fra", (java.lang.Object[]) doubleArray27);
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder34 = builder29.setExtension('u', "");
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale38 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        boolean boolean41 = locale40.hasExtensions();
        java.util.Locale.setDefault(category39, locale40);
        java.lang.String str43 = locale38.getDisplayName(locale40);
        java.lang.String str44 = locale40.getDisplayName();
        java.lang.String str45 = locale35.getDisplayLanguage(locale40);
        java.util.Locale.Builder builder46 = builder29.setLocale(locale35);
        java.io.PrintStream printStream49 = new java.io.PrintStream("ko-KR");
        printStream49.close();
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream49, false);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.Writer) printWriter52);
        java.lang.String[] strArray55 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter56 = printWriter53.printf("ko-KR", (java.lang.Object[]) strArray55);
        java.io.PrintStream printStream57 = printStream17.printf(locale35, "TWN", (java.lang.Object[]) strArray55);
        java.lang.String[] strArray60 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray60);
        java.io.PrintStream printStream62 = printStream17.printf("CA", (java.lang.Object[]) strArray60);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        java.lang.Throwable[] throwableArray67 = mathException65.getSuppressed();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) throwableArray67);
        java.io.PrintStream printStream69 = printStream62.printf("\u52a0\u62ff\u5927", (java.lang.Object[]) throwableArray67);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException70 = new org.apache.commons.math.geometry.NotARotationMatrixException("\u7fa9\u5927\u5229\u6587", (java.lang.Object[]) throwableArray67);
        mathException14.addSuppressed((java.lang.Throwable) notARotationMatrixException70);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException14);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("de-DE", (java.lang.Throwable) mathException14);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZXZ" + "'", str12, "ZXZ");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u97d3\u6587)" + "'", str43, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English" + "'", str44, "English");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English" + "'", str45, "English");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(printStream69);
    }

    @Test
    public void test09051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09051");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        java.io.PrintStream printStream87 = printStream85.append('4');
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream85, false);
        java.io.PrintStream printStream91 = printStream85.append('4');
        java.io.PrintStream printStream93 = printStream85.append(' ');
        printStream85.print((double) ' ');
        printStream85.println();
        printStream85.println();
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test09052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09052");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "\u7f8e\u570b");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09053");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter18.print((long) (short) 100);
        printWriter18.print((int) 'u');
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream24, false);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter27);
        printWriter28.print((long) (short) 100);
        printWriter28.print((int) 'u');
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        printWriter37.println((float) (byte) -1);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter37, true);
        java.lang.String[] strArray44 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter45 = printWriter37.printf("KR", (java.lang.Object[]) strArray44);
        java.io.PrintStream printStream47 = new java.io.PrintStream("ko-KR");
        printStream47.close();
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream47, false);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.Writer) printWriter50);
        char[] charArray54 = new char[] { ' ', 'x' };
        printWriter51.write(charArray54);
        printWriter37.println(charArray54);
        printWriter28.print(charArray54);
        printWriter18.write(charArray54);
        printStream1.println(charArray54);
        printStream1.println(false);
        printStream1.print((float) 10L);
        java.io.PrintStream printStream66 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream66.println((float) 100L);
        printStream66.println((float) 10L);
        byte[] byteArray75 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        printStream66.write(byteArray75);
        java.io.PrintStream printStream77 = new java.io.PrintStream((java.io.OutputStream) printStream66);
        java.util.Locale.Category category78 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale79 = java.util.Locale.getDefault(category78);
        java.util.Locale locale80 = java.util.Locale.ENGLISH;
        java.lang.String str81 = locale80.getDisplayName();
        boolean boolean82 = locale80.hasExtensions();
        java.util.Locale.setDefault(category78, locale80);
        java.util.Locale locale84 = java.util.Locale.getDefault(category78);
        java.util.Locale locale85 = java.util.Locale.getDefault(category78);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray88 = mathException87.getSuppressed();
        java.io.PrintStream printStream89 = printStream66.format(locale85, "", (java.lang.Object[]) throwableArray88);
        java.io.PrintStream printStream90 = printStream1.printf("\u4e2d\u6587 (JA)", (java.lang.Object[]) throwableArray88);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ , x]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[100, -1, 10, 1]");
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category78.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "English" + "'", str81, "English");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(printStream89);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test09054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09054");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de_DE");
        printWriter1.flush();
        printWriter1.println(0.0f);
        printWriter1.println((int) (short) 0);
        printWriter1.close();
        char[] charArray8 = null;
        printWriter1.write(charArray8, (int) '4', (int) 'u');
    }

    @Test
    public void test09055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09055");
        java.util.Locale locale2 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.lang.String str6 = locale5.getDisplayName();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category3);
        java.util.Locale locale13 = new java.util.Locale("org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uc911\uad6d\uc5b4", "Italy");
        java.util.Locale.setDefault(category3, locale13);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale15.getDisplayLanguage(locale17);
        java.util.Locale locale21 = locale15.stripExtensions();
        java.lang.String str22 = locale15.getDisplayLanguage();
        java.util.Locale locale23 = locale15.stripExtensions();
        java.util.Set<java.lang.String> strSet24 = locale15.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category3, locale15);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder26.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder30 = builder26.setLanguage("ZXZ");
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder32 = builder26.setLocale(locale31);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder34 = builder26.setLocale(locale33);
        java.lang.String str35 = locale33.getDisplayCountry();
        java.util.Locale.setDefault(category3, locale33);
        java.lang.String str37 = locale2.getDisplayVariant(locale33);
        java.util.Set<java.lang.String> strSet38 = locale33.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale2.toString(), "zxz_KO_KR");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English" + "'", str6, "English");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Canada" + "'", str35, "Canada");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
    }

    @Test
    public void test09056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09056");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((int) (short) -1);
        printWriter5.close();
        printWriter5.print((int) (byte) -1);
        printWriter5.println((long) (byte) 1);
        printWriter5.print(false);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.lang.String str20 = locale18.getDisplayScript(locale19);
        java.lang.String str21 = locale17.getDisplayLanguage(locale18);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        java.lang.Object[] objArray25 = mathException23.getArguments();
        java.io.PrintWriter printWriter26 = printWriter5.printf(locale17, "eng", objArray25);
        printWriter26.flush();
        java.lang.String[] strArray32 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray32, (java.lang.Throwable) mathException34);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException36 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray32);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR", (java.lang.Throwable) notARotationMatrixException36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray39 = mathException38.getSuppressed();
        java.io.PrintWriter printWriter40 = printWriter26.printf("", (java.lang.Object[]) throwableArray39);
        char[] charArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter40.println(charArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais" + "'", str21, "fran\347ais");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printWriter40);
    }

    @Test
    public void test09057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09057");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) (byte) -1, (double) 1L, (double) (short) 10, 1.7607846147136124d, true);
        double double6 = rotation5.getAngle();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D16 = vector3D8.subtract((double) 10L, vector3D15);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation30 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double31 = rotation30.getQ0();
        org.apache.commons.math.geometry.Rotation rotation32 = rotation23.applyTo(rotation30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotation23.applyInverseTo(vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = vector3D8.add((-0.0d), vector3D33);
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double49 = rotation48.getQ0();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation42.applyInverseTo(rotation48);
        org.apache.commons.math.geometry.Vector3D vector3D51 = rotation48.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D52 = vector3D33.add(1.3660691819214432d, vector3D51);
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation(vector3D33, 1.0d);
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D33.scalarMultiply((-1040.0d));
        org.apache.commons.math.geometry.Rotation rotation58 = new org.apache.commons.math.geometry.Rotation(vector3D56, (-40.752877659587945d));
        org.apache.commons.math.geometry.Rotation rotation59 = rotation5.applyTo(rotation58);
        org.apache.commons.math.geometry.RotationOrder rotationOrder60 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotationOrder60.getA3();
        org.apache.commons.math.geometry.Rotation rotation65 = new org.apache.commons.math.geometry.Rotation(rotationOrder60, (-3.141592653589793d), (double) ' ', (double) '4');
        org.apache.commons.math.geometry.Rotation rotation69 = new org.apache.commons.math.geometry.Rotation(rotationOrder60, (double) (short) 100, (-0.13715201283077028d), (-1.63942416E8d));
        double[] doubleArray70 = rotation5.getAngles(rotationOrder60);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.9461951539013636d + "'", double6 == 2.9461951539013636d);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(rotation59);
        org.junit.Assert.assertNotNull(rotationOrder60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-2.8113603159823026, 0.22571268714891624, -2.9800225955345656]");
    }

    @Test
    public void test09058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09058");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        printStream1.close();
        printStream1.print(1);
        printStream1.write((int) (short) 100);
        printStream1.print(false);
        printStream1.flush();
        printStream1.print("\uc774\ud0c8\ub9ac\uc544\uc5b4");
    }

    @Test
    public void test09059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09059");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        printWriter1.println(1.0d);
        printWriter1.println((long) 'u');
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter1, true);
        printWriter1.println((long) (-1));
        printWriter1.close();
        printWriter1.write("it");
        java.io.PrintWriter printWriter14 = printWriter1.append((java.lang.CharSequence) "\u7fa9\u5927\u5229\u6587)");
        printWriter14.println(false);
        org.junit.Assert.assertNotNull(printWriter14);
    }

    @Test
    public void test09060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09060");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((int) (short) -1);
        printWriter5.close();
        printWriter5.println(' ');
        printWriter5.close();
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        printStream15.close();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream15, false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter18);
        char[] charArray24 = new char[] { '4', 'a', ' ', ' ' };
        printWriter18.write(charArray24);
        printWriter18.write((int) (short) 100);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter18);
        printWriter18.println((double) 'a');
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = locale31.getCountry();
        java.io.PrintStream printStream36 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream36.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation45 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray46 = rotation45.getMatrix();
        java.io.PrintStream printStream47 = printStream36.printf("fra", (java.lang.Object[]) doubleArray46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR", (java.lang.Object[]) doubleArray46);
        java.io.PrintWriter printWriter49 = printWriter18.format(locale31, "x-lvariant-TWN", (java.lang.Object[]) doubleArray46);
        printWriter5.print((java.lang.Object) printWriter18);
        printWriter18.flush();
        printWriter18.println('x');
        printWriter18.flush();
        java.lang.String[] strArray58 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray58, (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray58, (java.lang.Throwable) mathException62);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray66 = mathException65.getSuppressed();
        mathException64.addSuppressed((java.lang.Throwable) mathException65);
        java.lang.Object[] objArray68 = mathException65.getArguments();
        java.io.PrintWriter printWriter69 = printWriter18.printf("Allemagne", objArray68);
        printWriter69.println(false);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "KR" + "'", str32, "KR");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test09061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09061");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        printWriter5.println('#');
        org.apache.commons.math.geometry.RotationOrder rotationOrder18 = org.apache.commons.math.geometry.RotationOrder.YZX;
        printWriter5.println((java.lang.Object) rotationOrder18);
        org.apache.commons.math.geometry.Vector3D vector3D20 = rotationOrder18.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D21 = rotationOrder18.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D22 = rotationOrder18.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D23 = rotationOrder18.getA2();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
    }

    @Test
    public void test09062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09062");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getISO3Language();
        java.lang.String str3 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "KOR" + "'", str3, "KOR");
    }

    @Test
    public void test09063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09063");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.close();
        java.util.Locale locale8 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter5.println((java.lang.Object) locale8);
        printWriter5.print('a');
        printWriter5.println("Allemagne");
        printWriter5.print(1.5598399219115324d);
        org.junit.Assert.assertEquals(locale8.toString(), "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test09064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09064");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale18 = null;
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double32 = rotation31.getQ0();
        org.apache.commons.math.geometry.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotation31.getAxis();
        double double35 = rotation31.getQ1();
        double[][] doubleArray36 = rotation31.getMatrix();
        java.io.PrintStream printStream37 = printStream17.printf(locale18, "United States", (java.lang.Object[]) doubleArray36);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream17);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("ZYX");
        java.util.Locale locale41 = locale40.stripExtensions();
        java.util.Locale locale44 = new java.util.Locale("zho", "und");
        java.lang.String str45 = locale40.getDisplayVariant(locale44);
        java.io.PrintStream printStream49 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray53 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray53, (java.lang.Throwable) mathException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray58 = mathException57.getSuppressed();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray53, (java.lang.Throwable) mathException57);
        java.lang.Throwable[] throwableArray60 = mathException57.getSuppressed();
        java.io.PrintStream printStream61 = printStream49.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) throwableArray60);
        java.io.PrintStream printStream63 = printStream17.format(locale44, "Italian", (java.lang.Object[]) throwableArray60);
        java.lang.Class<?> wildcardClass64 = locale44.getClass();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zyx");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zyx");
        org.junit.Assert.assertEquals(locale44.toString(), "zho_UND");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test09065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09065");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.close();
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = locale13.getCountry();
        java.lang.String[] strArray17 = java.util.Locale.getISOCountries();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException18 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d", (java.lang.Object[]) strArray17);
        java.io.PrintStream printStream19 = printStream1.format(locale13, "\uce90\ub098\ub2e4", (java.lang.Object[]) strArray17);
        printStream19.flush();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CA" + "'", str14, "CA");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(printStream19);
    }

    @Test
    public void test09066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09066");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder8.setRegion("");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getVariant();
        java.util.Locale.Builder builder15 = builder10.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.addUnicodeLocaleAttribute("XZY");
        java.util.Locale.Builder builder19 = builder16.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.setExtension('#', "org.apache.commons.math.geometry.notarotationmatrixexception:  (ZXZ_FRAN\347AIS)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test09067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09067");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("tw_US", "YZX");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: YZX");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09068");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ (KO_KR)", "\uc601\uc5b4\uce90\ub098\ub2e4)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ????? (??????)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09069");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayLanguage(locale3);
        java.lang.String str6 = locale0.getScript();
        java.lang.String str7 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u97d3\u6587" + "'", str5, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "kor" + "'", str7, "kor");
    }

    @Test
    public void test09070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09070");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "\ub3c5\uc77c\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.geometry.NotARotationMatrixException: ????????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09071");
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D3, (double) (byte) 100, vector3D5);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D5, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D5, (double) 0.0f, vector3D17);
        double double20 = vector3D19.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D27, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D37, (double) (byte) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D45, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D32, (double) (byte) 1, vector3D40, (double) (short) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D32.negate();
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D19, (double) 100L, vector3D55);
        double double57 = vector3D55.getNorm();
        double double58 = vector3D55.getDelta();
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test09072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09072");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("English (Canada)");
    }

    @Test
    public void test09073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09073");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) 0L, 3.141592653589793d, (-3.141592653589793d), (double) (-1L), false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = rotation11.applyTo(vector3D13);
        double double18 = rotation11.getAngle();
        double double19 = rotation11.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D30 = vector3D22.subtract((double) 10L, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotation11.applyTo(vector3D31);
        org.apache.commons.math.geometry.Rotation rotation33 = rotation5.applyInverseTo(rotation11);
        double double34 = rotation11.getQ2();
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test09074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09074");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder9 = builder0.setExtension('a', "und");
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale.setDefault(category11, locale13);
        java.util.Locale.setDefault(category10, locale13);
        java.util.Locale locale18 = java.util.Locale.CHINA;
        java.lang.String str19 = locale13.getDisplayScript(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.util.Locale.Builder builder21 = builder0.setLocale(locale18);
        java.lang.String str22 = locale18.toLanguageTag();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc911\uad6d" + "'", str20, "\uc911\uad6d");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-CN" + "'", str22, "zh-CN");
    }

    @Test
    public void test09075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09075");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        double double12 = rotation5.getAngle();
        double double13 = rotation5.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D24 = vector3D16.subtract((double) 10L, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation5.applyTo(vector3D25);
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation(vector3D25, (-0.0d));
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double42 = rotation41.getQ0();
        org.apache.commons.math.geometry.Rotation rotation43 = rotation34.applyTo(rotation41);
        org.apache.commons.math.geometry.Rotation rotation44 = rotation28.applyTo(rotation41);
        org.apache.commons.math.geometry.Rotation rotation45 = rotation41.revert();
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray52 = rotation51.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D59, (double) (byte) 100, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D56, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D64 = rotation51.applyInverseTo(vector3D56);
        org.apache.commons.math.geometry.Rotation rotation70 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double71 = rotation70.getQ1();
        double double72 = rotation70.getQ0();
        org.apache.commons.math.geometry.Rotation rotation73 = rotation51.applyInverseTo(rotation70);
        org.apache.commons.math.geometry.Rotation rotation79 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double80 = rotation79.getQ1();
        org.apache.commons.math.geometry.Rotation rotation81 = rotation70.applyInverseTo(rotation79);
        org.apache.commons.math.geometry.Rotation rotation82 = rotation45.applyTo(rotation81);
        org.apache.commons.math.geometry.Vector3D vector3D86 = new org.apache.commons.math.geometry.Vector3D((-3.141592653589793d), 0.0d, (double) 10L);
        org.apache.commons.math.geometry.Rotation rotation88 = new org.apache.commons.math.geometry.Rotation(vector3D86, 100.0d);
        double double89 = rotation88.getQ1();
        org.apache.commons.math.geometry.Rotation rotation90 = rotation45.applyTo(rotation88);
        double double91 = rotation45.getQ0();
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 52.0d + "'", double72 == 52.0d);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.0d + "'", double80 == 100.0d);
        org.junit.Assert.assertNotNull(rotation81);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-0.07863815249432443d) + "'", double89 == (-0.07863815249432443d));
        org.junit.Assert.assertNotNull(rotation90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + (-52.0d) + "'", double91 == (-52.0d));
    }

    @Test
    public void test09076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09076");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder17 = builder4.setLanguage("fr");
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("eng");
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder24 = builder20.setLanguage("ZXZ");
        java.util.Locale.Builder builder25 = builder20.clear();
        java.util.Locale.Builder builder26 = builder20.clear();
        java.util.Locale.Builder builder28 = builder26.removeUnicodeLocaleAttribute("YZY");
        java.util.Locale locale29 = builder28.build();
        java.util.Locale.Builder builder30 = builder17.setLocale(locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder30.setLanguageTag("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str11, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str14, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test09077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09077");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = locale3.hasExtensions();
        java.util.Locale.setDefault(category2, locale3);
        java.lang.String str6 = locale0.getDisplayScript(locale3);
        java.util.Locale locale7 = locale3.stripExtensions();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = locale10.getDisplayName();
        boolean boolean12 = locale10.hasExtensions();
        java.util.Locale.setDefault(category8, locale10);
        java.util.Locale locale14 = java.util.Locale.getDefault(category8);
        java.util.Locale locale18 = new java.util.Locale("org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uc911\uad6d\uc5b4", "Italy");
        java.util.Locale.setDefault(category8, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category8);
        java.lang.String str21 = locale7.getDisplayCountry(locale20);
        java.lang.String str22 = locale7.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English" + "'", str11, "English");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test09078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09078");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, 0.0d);
    }

    @Test
    public void test09079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09079");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("TWN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12, locale13, locale15, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("ja", strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList27, strMap28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList27, strMap30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.lang.String str36 = locale34.getDisplayScript(locale35);
        java.lang.String str37 = locale32.getDisplayLanguage(locale34);
        java.util.Locale.setDefault(locale32);
        java.util.Set<java.lang.String> strSet39 = locale32.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList31, (java.util.Collection<java.lang.String>) strSet39);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale44, locale45, locale46, locale47, locale48, locale49, locale51, locale52, locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList55, filteringMode57);
        java.lang.String[] strArray62 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        java.lang.String str65 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strList63);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.lang.String str75 = locale74.getDisplayLanguage();
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale69, locale70, locale71, locale72, locale73, locale74, locale76, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList80, filteringMode82);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList80, filteringMode84);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet39, filteringMode84);
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strList86, filteringMode87);
        java.util.Locale locale89 = java.util.Locale.GERMAN;
        java.lang.String str90 = locale89.getDisplayLanguage();
        java.lang.String str91 = locale89.getDisplayName();
        java.lang.String str92 = locale89.getScript();
        java.util.Set<java.lang.String> strSet93 = locale89.getUnicodeLocaleKeys();
        java.lang.String str94 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode57.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + filteringMode87 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode87.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "de");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "German" + "'", str90, "German");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "German" + "'", str91, "German");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test09080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09080");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print(1.2220476682666177d);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        printWriter24.println((float) (byte) -1);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter24, true);
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter32 = printWriter24.printf("KR", (java.lang.Object[]) strArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        char[] charArray41 = new char[] { ' ', 'x' };
        printWriter38.write(charArray41);
        printWriter24.println(charArray41);
        printWriter19.write(charArray41, 0, 1);
        printWriter12.print(charArray41);
        printWriter12.print((float) (byte) 100);
        printWriter12.print((double) (short) 10);
        printWriter12.print((float) (byte) 1);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , x]");
    }

    @Test
    public void test09081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09081");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter5.println((float) (byte) -1);
        printWriter5.print('a');
        java.util.Locale locale12 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter5.print((java.lang.Object) locale12);
        java.lang.String str14 = locale12.getDisplayName();
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale12.getDisplayName();
        boolean boolean17 = locale12.hasExtensions();
        java.lang.String str18 = locale0.getDisplayVariant(locale12);
        java.util.Set<java.lang.String> strSet19 = locale12.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals(locale12.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str14, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str16, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test09082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09082");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation22 = rotation15.applyTo(rotation21);
        org.apache.commons.math.geometry.RotationOrder rotationOrder24 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotationOrder24.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D31, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D31, (double) 0.0f, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D45.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) '#', vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation15.applyTo(vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((-5.440211108893697d), (double) ' ');
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D47.subtract(0.9981326374477802d, vector3D53);
        double double55 = vector3D53.getNorm();
        org.apache.commons.math.geometry.RotationOrder rotationOrder57 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation61 = new org.apache.commons.math.geometry.Rotation(rotationOrder57, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotationOrder57.getA1();
        java.lang.String str63 = rotationOrder57.toString();
        java.lang.String str64 = rotationOrder57.toString();
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotationOrder57.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D66 = vector3D53.add((-0.09966865249116204d), vector3D65);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation22);
        org.junit.Assert.assertNotNull(rotationOrder24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(rotationOrder57);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "XYZ" + "'", str63, "XYZ");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "XYZ" + "'", str64, "XYZ");
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
    }

    @Test
    public void test09083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09083");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        printWriter1.println(1.0d);
        printWriter1.write((int) '4');
        java.io.PrintStream printStream8 = new java.io.PrintStream("ko-KR");
        printStream8.close();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream8, false);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter11);
        printWriter12.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray22 = rotation21.getMatrix();
        java.io.PrintWriter printWriter23 = printWriter12.format("en", (java.lang.Object[]) doubleArray22);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.lang.String str27 = locale24.getLanguage();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = mathException30.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException33 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray32);
        java.io.PrintWriter printWriter34 = printWriter12.format(locale24, "ZXZ", (java.lang.Object[]) throwableArray32);
        java.io.PrintWriter printWriter35 = printWriter1.format("\ub3c5\uc77c", (java.lang.Object[]) throwableArray32);
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        printWriter40.print((double) (byte) 100);
        printWriter40.println();
        printWriter40.close();
        java.io.PrintStream printStream47 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream47.println((float) 100L);
        printStream47.println((float) 10L);
        byte[] byteArray56 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        printStream47.write(byteArray56);
        java.io.PrintStream printStream58 = new java.io.PrintStream((java.io.OutputStream) printStream47);
        java.io.PrintStream printStream60 = new java.io.PrintStream("ko-KR");
        printStream60.close();
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream60, false);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.Writer) printWriter63);
        char[] charArray67 = new char[] { ' ', 'x' };
        printWriter64.write(charArray67);
        java.io.PrintWriter printWriter70 = printWriter64.append((java.lang.CharSequence) "Canada");
        boolean boolean71 = printWriter70.checkError();
        java.io.PrintStream printStream73 = new java.io.PrintStream("ko-KR");
        printStream73.close();
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter((java.io.OutputStream) printStream73, false);
        java.io.PrintStream printStream78 = printStream73.append((java.lang.CharSequence) "en");
        printStream73.print((int) ' ');
        printStream73.println((double) 100.0f);
        java.io.PrintStream printStream84 = new java.io.PrintStream("ko-KR");
        printStream84.close();
        java.io.PrintWriter printWriter87 = new java.io.PrintWriter((java.io.OutputStream) printStream84, false);
        java.io.PrintWriter printWriter88 = new java.io.PrintWriter((java.io.Writer) printWriter87);
        char[] charArray91 = new char[] { ' ', 'x' };
        printWriter88.write(charArray91);
        printStream73.print(charArray91);
        printWriter70.write(charArray91);
        printStream47.println(charArray91);
        printWriter40.print(charArray91);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write(charArray91, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en" + "'", str27, "en");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100, -1, 10, 1]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[ , x]");
    }

    @Test
    public void test09084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09084");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((float) (byte) 100);
        printWriter5.close();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter11);
    }

    @Test
    public void test09085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09085");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str20 = locale13.getDisplayScript(locale19);
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream22, false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter25);
        printWriter26.close();
        java.util.Locale locale29 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter26.println((java.lang.Object) locale29);
        java.util.Set<java.lang.Character> charSet31 = locale29.getExtensionKeys();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder37 = builder32.setExtension('u', "");
        java.util.Locale.Builder builder39 = builder37.setVariant("");
        java.util.Locale locale40 = builder39.build();
        java.lang.String str41 = locale29.getDisplayName(locale40);
        java.lang.String str42 = locale13.getDisplayName(locale40);
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale46 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category47 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        boolean boolean49 = locale48.hasExtensions();
        java.util.Locale.setDefault(category47, locale48);
        java.lang.String str51 = locale46.getDisplayName(locale48);
        java.lang.String str52 = locale40.getDisplayVariant(locale46);
        java.util.Set<java.lang.String> strSet53 = locale46.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale29.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str41, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "German (Germany)" + "'", str42, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category47.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u97d3\u6587)" + "'", str51, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
    }

    @Test
    public void test09086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09086");
        java.lang.String[] strArray1 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray1, (java.lang.Throwable) mathException3);
        java.lang.String[] strArray8 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray8, (java.lang.Throwable) mathException10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray8, (java.lang.Throwable) mathException12);
        java.lang.Throwable[] throwableArray15 = mathException12.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException16 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray15);
        mathException4.addSuppressed((java.lang.Throwable) notARotationMatrixException16);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException20);
        notARotationMatrixException16.addSuppressed((java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) notARotationMatrixException16);
        java.lang.Class<?> wildcardClass24 = notARotationMatrixException16.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test09087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09087");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("US");
        java.util.Locale.Builder builder4 = builder0.setLanguage("CAN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setRegion("Chinook");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Chinook [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test09088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09088");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.lang.String str16 = locale7.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale7.getUnicodeLocaleType("canada");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: canada");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French" + "'", str11, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test09089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09089");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.lang.String str3 = locale1.getDisplayScript(locale2);
        java.lang.String str4 = locale0.getDisplayLanguage(locale1);
        java.lang.String str5 = locale1.getDisplayLanguage();
        java.lang.String str6 = locale1.getDisplayLanguage();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("en-GB", strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale13, locale14, locale15, locale16, locale17, locale18, locale20, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        java.lang.String[] strArray31 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayLanguage();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray50 = new java.util.Locale[] { locale40, locale41, locale42, locale43, locale44, locale45, locale47, locale48, locale49 };
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList51, filteringMode53);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter(languageRangeList36, (java.util.Collection<java.util.Locale>) localeList51);
        java.util.Locale locale56 = java.util.Locale.lookup(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList51);
        boolean boolean57 = locale1.equals((java.lang.Object) localeList51);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fran\347ais" + "'", str4, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "French" + "'", str5, "French");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French" + "'", str6, "French");
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode26.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode53.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09090");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("ko-kr");
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale locale9 = builder6.build();
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale locale11 = builder6.build();
        java.util.Locale.Builder builder13 = builder6.removeUnicodeLocaleAttribute("ita");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguageTag("South Korea");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: South Korea [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09091");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getDisplayName();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale0.getDisplayVariant(locale3);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale7.getDisplayLanguage(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getDisplayVariant();
        java.lang.String str15 = locale3.getDisplayName(locale11);
        java.lang.String str16 = locale3.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanisch" + "'", str15, "Japanisch");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test09092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09092");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("DEU");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "deu" + "'", str2, "deu");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test09093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09093");
        org.apache.commons.math.geometry.Rotation rotation8 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double9 = rotation8.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D10 = rotation8.getAxis();
        double double11 = rotation8.getQ2();
        double[][] doubleArray12 = rotation8.getMatrix();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException13 = new org.apache.commons.math.geometry.NotARotationMatrixException("YXZ", (java.lang.Object[]) doubleArray12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("Chinese (Taiwan)", (java.lang.Object[]) doubleArray12);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("US", (java.lang.Object[]) doubleArray12);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
    }

    @Test
    public void test09094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09094");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) -1 };
        printStream15.write(byteArray19);
        boolean boolean21 = printStream15.checkError();
        printStream15.println(' ');
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream30 = printStream25.format(locale27, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream25, false);
        printStream25.println(10.0f);
        java.lang.String[] strArray37 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37);
        java.io.PrintStream printStream39 = printStream25.format("\u97d3\u6587", (java.lang.Object[]) strArray37);
        printStream25.println((long) (short) 1);
        java.io.PrintStream printStream43 = printStream25.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.io.PrintStream printStream45 = new java.io.PrintStream("ko-KR");
        printStream45.close();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream45, false);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter48);
        char[] charArray52 = new char[] { ' ', 'x' };
        printWriter49.write(charArray52);
        java.io.PrintWriter printWriter55 = printWriter49.append((java.lang.CharSequence) "Canada");
        boolean boolean56 = printWriter55.checkError();
        java.io.PrintStream printStream58 = new java.io.PrintStream("ko-KR");
        printStream58.close();
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.OutputStream) printStream58, false);
        java.io.PrintStream printStream63 = printStream58.append((java.lang.CharSequence) "en");
        printStream58.print((int) ' ');
        printStream58.println((double) 100.0f);
        java.io.PrintStream printStream69 = new java.io.PrintStream("ko-KR");
        printStream69.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream69, false);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter72);
        char[] charArray76 = new char[] { ' ', 'x' };
        printWriter73.write(charArray76);
        printStream58.print(charArray76);
        printWriter55.write(charArray76);
        printStream25.print(charArray76);
        printStream15.print(charArray76);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[ , x]");
    }

    @Test
    public void test09095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09095");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) 1);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D15, (double) (byte) 1, vector3D23, (double) (short) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D15.negate();
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D15);
        double double39 = vector3D15.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D41 = vector3D15.scalarMultiply((double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D52 = vector3D44.subtract((double) 10L, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D44.scalarMultiply((double) 0);
        org.apache.commons.math.geometry.Vector3D vector3D55 = vector3D15.add((double) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D(0.576230023474905d, vector3D3, (-0.18625021851313195d), vector3D15);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
    }

    @Test
    public void test09096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09096");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.write((int) (byte) 1);
        printWriter5.print((int) (short) 0);
        printWriter5.println("org.apache.commons.math.MathException: ZXZ");
        printWriter5.println('4');
        printWriter5.println((long) (short) 1);
        printWriter5.write("DEU");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
    }

    @Test
    public void test09097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09097");
        java.util.Locale locale2 = new java.util.Locale("\u4e2d\u6587", "ja");
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayScript();
        java.lang.String str7 = locale4.getISO3Language();
        java.util.Locale locale8 = locale4.stripExtensions();
        java.lang.String str9 = locale2.getDisplayScript(locale4);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale.setDefault(category11, locale13);
        java.lang.String str17 = locale10.getDisplayVariant(locale13);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        java.lang.String str20 = locale13.getDisplayCountry(locale18);
        java.lang.String str21 = locale18.getDisplayVariant();
        java.lang.String str22 = locale18.getDisplayVariant();
        java.lang.String str23 = locale4.getDisplayCountry(locale18);
        java.lang.String str24 = locale4.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "\u4e2d\u6587_JA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
    }

    @Test
    public void test09098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09098");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)", "\ud504\ub791\uc2a4\uc5b4,KR)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Italian (?????????,KR)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09099");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.println(true);
        printWriter5.println(9610.932890332206d);
        printWriter5.write("Italy");
        printWriter5.println(0.567725116225552d);
        java.util.Locale locale18 = null;
        java.lang.String[] strArray24 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray24);
        java.lang.Object[] objArray26 = mathException25.getArguments();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("ja", objArray26);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException28 = new org.apache.commons.math.geometry.NotARotationMatrixException("GB", objArray26);
        java.io.PrintStream printStream30 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream30.println((float) 100L);
        printStream30.println((float) 10L);
        printStream30.println(' ');
        printStream30.print((double) 1.0f);
        printStream30.print((float) 1L);
        printStream30.println(false);
        java.lang.String[] strArray45 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray45, (java.lang.Throwable) mathException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray45, (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        mathException51.addSuppressed((java.lang.Throwable) mathException52);
        printStream30.println((java.lang.Object) mathException51);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("Deutsch", objArray26, (java.lang.Throwable) mathException51);
        java.io.PrintWriter printWriter57 = printWriter5.format(locale18, "", objArray26);
        printWriter5.println('x');
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test09100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09100");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("CA", "en-ca_TWN_ko-KR");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: en-ca_TWN_ko-KR");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09101");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder13 = builder10.addUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale.Builder builder19 = builder14.clear();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale22.getDisplayLanguage(locale26);
        java.util.Locale.Builder builder28 = builder14.setLocale(locale26);
        java.util.Locale.Builder builder30 = builder14.setLanguageTag("Canada");
        java.util.Locale.Builder builder32 = builder14.setLanguage("it");
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        printWriter38.println('a');
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder45 = builder41.setLanguage("ZXZ");
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder47 = builder41.setLocale(locale46);
        java.lang.Object[] objArray49 = null;
        java.io.PrintWriter printWriter50 = printWriter38.format(locale46, "TWN", objArray49);
        java.util.Set<java.lang.String> strSet51 = locale46.getUnicodeLocaleKeys();
        java.lang.String str52 = locale46.getDisplayCountry();
        java.util.Locale.Builder builder53 = builder32.setLocale(locale46);
        java.util.Locale.Builder builder54 = builder32.clearExtensions();
        java.util.Locale.Builder builder57 = builder54.setExtension('a', "ko-KR");
        java.util.Locale locale58 = builder54.build();
        java.util.Locale.Builder builder59 = builder10.setLocale(locale58);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder62 = builder59.setUnicodeLocaleKeyword("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", "zh_CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ???????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Germany" + "'", str52, "Germany");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE_#a-ko-kr");
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test09102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09102");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        printStream1.print(false);
        java.io.PrintStream printStream94 = printStream1.append('a');
        printStream1.flush();
        java.io.PrintWriter printWriter96 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter96.println();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertNotNull(printStream94);
    }

    @Test
    public void test09103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09103");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        printStream1.close();
        printStream1.print(1);
        printStream1.write((int) (short) 100);
        printStream1.flush();
        java.io.PrintStream printStream15 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream15.println((float) 100L);
        printStream15.println((float) 10L);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        printStream15.write(byteArray24);
        printStream1.write(byteArray24, (int) (short) -1, (int) 'a');
        printStream1.println(' ');
        printStream1.println((float) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, -1, 10, 1]");
    }

    @Test
    public void test09104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09104");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("ko-kr");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("italian-x-lvariant-CHN");
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder11 = builder6.setVariant("");
        java.util.Locale.Builder builder12 = builder6.clearExtensions();
        java.util.Locale.Builder builder13 = builder6.clearExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder17 = builder13.setLocale(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.setVariant("Catalan (FRAN\347AIS,fran\347ais)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Catalan (FRANc?AIS,franc?ais) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test09105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09105");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        printWriter5.print((int) 'u');
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter14);
        printWriter14.println((float) (byte) -1);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter14, true);
        java.lang.String[] strArray21 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter22 = printWriter14.printf("KR", (java.lang.Object[]) strArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream24, false);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter27);
        char[] charArray31 = new char[] { ' ', 'x' };
        printWriter28.write(charArray31);
        printWriter14.println(charArray31);
        printWriter5.print(charArray31);
        printWriter5.println(false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , x]");
    }

    @Test
    public void test09106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09106");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation5.applyInverseTo(rotation21);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ1();
        double double31 = rotation29.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D41 = vector3D33.subtract((double) 10L, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D42 = rotation29.applyInverseTo(vector3D40);
        org.apache.commons.math.geometry.Rotation rotation43 = rotation5.applyInverseTo(rotation29);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation29.getAxis();
        double double45 = rotation29.getQ0();
        double double46 = rotation29.getQ2();
        org.apache.commons.math.geometry.Rotation rotation47 = rotation29.revert();
        java.io.PrintStream printStream49 = new java.io.PrintStream("ko-KR");
        printStream49.close();
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream49, false);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.Writer) printWriter52);
        java.lang.String[] strArray55 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter56 = printWriter53.printf("ko-KR", (java.lang.Object[]) strArray55);
        printWriter56.println(0.0d);
        printWriter56.write(0);
        java.io.PrintWriter printWriter62 = printWriter56.append('4');
        printWriter62.print((double) 'a');
        printWriter62.print((double) (short) 100);
        printWriter62.print(true);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter((java.io.Writer) printWriter62, true);
        printWriter70.println();
        boolean boolean72 = printWriter70.checkError();
        printWriter70.println((long) 0);
        org.apache.commons.math.geometry.Rotation rotation80 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double81 = rotation80.getQ1();
        double double82 = rotation80.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D84 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D86 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D87 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D84, (double) (byte) 100, vector3D86);
        org.apache.commons.math.geometry.Vector3D vector3D91 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D92 = vector3D84.subtract((double) 10L, vector3D91);
        org.apache.commons.math.geometry.Vector3D vector3D93 = rotation80.applyInverseTo(vector3D91);
        double double94 = rotation80.getQ0();
        org.apache.commons.math.geometry.Rotation rotation95 = rotation80.revert();
        printWriter70.print((java.lang.Object) rotation95);
        org.apache.commons.math.geometry.Rotation rotation97 = rotation47.applyTo(rotation95);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 52.0d + "'", double82 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 52.0d + "'", double94 == 52.0d);
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertNotNull(rotation97);
    }

    @Test
    public void test09107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09107");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println(' ');
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        char[] charArray19 = new char[] { ' ', 'x' };
        printWriter16.write(charArray19);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.lang.String str24 = locale21.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter16.format(locale21, "YZY", (java.lang.Object[]) doubleArray32);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException34 = new org.apache.commons.math.geometry.NotARotationMatrixException("ko-KR", (java.lang.Object[]) doubleArray32);
        java.io.PrintStream printStream35 = printStream1.format("\uc911\uad6d\uc5b4", (java.lang.Object[]) doubleArray32);
        java.io.PrintStream printStream36 = new java.io.PrintStream((java.io.OutputStream) printStream35);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , x]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en" + "'", str24, "en");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(printStream35);
    }

    @Test
    public void test09108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09108");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder9 = builder5.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale10 = builder5.build();
        java.util.Locale.Builder builder12 = builder5.setLanguage("fra");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test09109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09109");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u97d3\u6587)");
        printStream1.println('u');
        java.util.Locale locale4 = null;
        java.io.PrintStream printStream8 = new java.io.PrintStream("ko-KR");
        printStream8.close();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream8, false);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter11);
        java.lang.String[] strArray14 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter15 = printWriter12.printf("ko-KR", (java.lang.Object[]) strArray14);
        printWriter15.println(0.0d);
        printWriter15.write(0);
        java.io.PrintWriter printWriter21 = printWriter15.append('4');
        printWriter21.print((double) 'a');
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale24.getDisplayVariant(locale25);
        java.io.PrintStream printStream31 = new java.io.PrintStream("ko-KR");
        printStream31.close();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream31, false);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter34);
        printWriter34.println((float) (byte) -1);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.Writer) printWriter34, true);
        java.lang.String[] strArray41 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter42 = printWriter34.printf("KR", (java.lang.Object[]) strArray41);
        java.io.PrintWriter printWriter43 = printWriter21.printf(locale25, "French", (java.lang.Object[]) strArray41);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException44 = new org.apache.commons.math.geometry.NotARotationMatrixException("zho", (java.lang.Object[]) strArray41);
        java.io.PrintStream printStream45 = printStream1.format(locale4, "\u5fb7\u6587", (java.lang.Object[]) strArray41);
        printStream1.println((float) (byte) -1);
        printStream1.println((float) 'x');
        printStream1.print((long) 0);
        java.io.PrintStream printStream53 = printStream1.append('x');
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printStream53);
    }

    @Test
    public void test09110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09110");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        printStream15.println("XYZ");
        printStream15.println();
        printStream15.print(0.0f);
        java.io.PrintStream printStream23 = printStream15.append('u');
        printStream15.print((int) (short) 0);
        java.util.Locale locale27 = new java.util.Locale("\uc601\uc5b4");
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.Object[] objArray30 = null;
        java.io.PrintStream printStream31 = printStream15.format(locale27, "\uc911\uad6d\uc5b4", objArray30);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream31, false);
        printStream31.print(0.3338737790442066d);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertEquals(locale27.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test09111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09111");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter13.println(10L);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        printWriter20.print((double) (byte) 100);
        printWriter20.println();
        printWriter20.println('#');
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double33 = rotation32.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotation32.getAxis();
        printWriter20.print((java.lang.Object) rotation32);
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        char[] charArray44 = new char[] { ' ', 'x' };
        printWriter41.write(charArray44);
        printWriter20.write(charArray44);
        printWriter13.write(charArray44);
        printWriter13.flush();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , x]");
    }

    @Test
    public void test09112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09112");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("YZY");
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("cinese");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder8.build();
        java.lang.String str10 = locale9.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test09113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09113");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        double double12 = rotation5.getAngle();
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D17, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D35, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D22, (double) (byte) 1, vector3D30, (double) (short) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation5.applyTo(vector3D40);
        double double45 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double52 = rotation51.getQ0();
        org.apache.commons.math.geometry.Rotation rotation58 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double59 = rotation58.getQ0();
        org.apache.commons.math.geometry.Rotation rotation60 = rotation51.applyTo(rotation58);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotation51.applyInverseTo(vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotation5.applyTo(vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D67 = new org.apache.commons.math.geometry.Vector3D((-12804.0d), (-0.5440211108893699d), 100.0d);
        org.apache.commons.math.geometry.Vector3D vector3D68 = rotation5.applyTo(vector3D67);
        org.apache.commons.math.geometry.Rotation rotation69 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation71 = rotation5.applyTo(rotation70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 52.0d + "'", double59 == 52.0d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation69);
    }

    @Test
    public void test09114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09114");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double7 = rotation6.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double14 = rotation13.getQ0();
        org.apache.commons.math.geometry.Rotation rotation15 = rotation6.applyTo(rotation13);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D19, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation6.applyInverseTo(vector3D19);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = rotation34.applyTo(vector3D36);
        double double41 = rotation34.getAngle();
        double double42 = rotation34.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D45, (double) (byte) 100, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D53 = vector3D45.subtract((double) 10L, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D55 = rotation34.applyTo(vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D27.subtract(0.8414709848078965d, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D(0.6311497403463439d, vector3D56);
        double double58 = vector3D57.getDelta();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.6141083579401581d) + "'", double58 == (-0.6141083579401581d));
    }

    @Test
    public void test09115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09115");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder20 = builder14.setLocale(locale19);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder22 = builder14.setLocale(locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale21);
        java.lang.String str25 = locale21.getDisplayVariant();
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray29, (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray29, (java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray36 = mathException33.getSuppressed();
        java.io.PrintWriter printWriter37 = printWriter13.format(locale21, "ita", (java.lang.Object[]) throwableArray36);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.Writer) printWriter37, true);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        printWriter40.print("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ZXZ");
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(printWriter37);
    }

    @Test
    public void test09116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09116");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = printStream1.append(' ');
        printStream1.print((long) 'a');
        java.io.PrintStream printStream35 = printStream1.append((java.lang.CharSequence) "CA");
        printStream35.println('a');
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException42 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray41);
        java.io.PrintStream printStream43 = printStream35.format("ko", (java.lang.Object[]) throwableArray41);
        printStream43.print("TWN");
        printStream43.print('x');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream43);
    }

    @Test
    public void test09117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09117");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (short) 100, (double) 'x', 10.0d);
        org.apache.commons.math.geometry.RotationOrder rotationOrder6 = org.apache.commons.math.geometry.RotationOrder.YXZ;
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder6.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder6.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder6.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D10 = rotationOrder6.getA2();
        double double11 = vector3D10.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D12 = rotation5.applyTo(vector3D10);
        double double13 = vector3D12.getAlpha();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(rotationOrder6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-2.8268238353953943d) + "'", double13 == (-2.8268238353953943d));
    }

    @Test
    public void test09118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09118");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        java.io.PrintStream printStream87 = printStream85.append('4');
        printStream87.println((float) (byte) 10);
        printStream87.write((int) 'a');
        printStream87.println(true);
        printStream87.print((int) (byte) 0);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream87);
    }

    @Test
    public void test09119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09119");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print((double) 0.0f);
        printWriter12.println("zxz (KO_KR)");
        printWriter12.write(0);
        printWriter12.println((-1.2792393947944187d));
        boolean boolean21 = printWriter12.checkError();
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray33 = mathException30.getSuppressed();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ko_KR", (java.lang.Object[]) throwableArray33);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException35 = new org.apache.commons.math.geometry.NotARotationMatrixException("TW", (java.lang.Object[]) throwableArray33);
        java.lang.String str36 = notARotationMatrixException35.getPattern();
        java.lang.String str37 = notARotationMatrixException35.getPattern();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException((java.lang.Throwable) notARotationMatrixException35);
        java.lang.Throwable[] throwableArray39 = notARotationMatrixException35.getSuppressed();
        printWriter12.println((java.lang.Object) notARotationMatrixException35);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "TW" + "'", str36, "TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TW" + "'", str37, "TW");
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test09120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09120");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale1.getDisplayCountry(locale2);
        java.lang.String str4 = locale0.getDisplayVariant(locale1);
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder9 = builder5.setLanguage("ZXZ");
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder11 = builder5.setLocale(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder13 = builder5.setLocale(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.lang.String str15 = locale12.getDisplayLanguage();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.lang.String str18 = locale16.getDisplayScript(locale17);
        java.util.Locale locale21 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str22 = locale16.getDisplayLanguage(locale21);
        java.lang.String str23 = locale12.getDisplayVariant(locale21);
        java.lang.String str24 = locale1.getDisplayName(locale12);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        java.lang.String str30 = locale25.getDisplayLanguage(locale27);
        java.util.Locale locale31 = locale25.stripExtensions();
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        printWriter38.close();
        java.util.Locale locale41 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter38.println((java.lang.Object) locale41);
        java.lang.String str43 = locale31.getDisplayCountry(locale41);
        java.lang.String str44 = locale31.getDisplayName();
        java.lang.String str45 = locale1.getDisplayScript(locale31);
        java.util.Set<java.lang.String> strSet46 = locale31.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Canada" + "'", str14, "Canada");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals(locale21.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French" + "'", str22, "French");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(locale41.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
    }

    @Test
    public void test09121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09121");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(1.7607846147136124d, 100.0d, 102.8131477408346d);
    }

    @Test
    public void test09122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09122");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)", "germany");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: germany");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09123");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray11 = rotation10.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D15, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D23 = rotation10.applyInverseTo(vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D29, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D39, (double) (byte) 100, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D45, (double) (byte) 100, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D47, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D34, (double) (byte) 1, vector3D42, (double) (short) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D34.negate();
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D34);
        double double58 = vector3D34.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D15, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotation4.applyInverseTo(vector3D15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation62 = new org.apache.commons.math.geometry.Rotation(vector3D15, 0.008332851123444342d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: zero norm for rotation axis");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
    }

    @Test
    public void test09124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09124");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder8 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension('a', "zxz_fran\347ais_ITALIAN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: franc?ais [at index 4]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test09125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09125");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D18, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation5.applyInverseTo(vector3D18);
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double33 = rotation32.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double40 = rotation39.getQ0();
        org.apache.commons.math.geometry.Rotation rotation41 = rotation32.applyTo(rotation39);
        org.apache.commons.math.geometry.Rotation rotation42 = rotation32.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder43 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation(rotationOrder43, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation48 = rotation42.applyTo(rotation47);
        double double49 = rotation42.getAngle();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation5.applyInverseTo(rotation42);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.Rotation rotation57 = new org.apache.commons.math.geometry.Rotation((double) 0L, 3.141592653589793d, (-3.141592653589793d), (double) (-1L), false);
        org.apache.commons.math.geometry.Rotation rotation63 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotation63.applyTo(vector3D65);
        double double70 = rotation63.getAngle();
        double double71 = rotation63.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D82 = vector3D74.subtract((double) 10L, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D83 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D84 = rotation63.applyTo(vector3D83);
        org.apache.commons.math.geometry.Rotation rotation85 = rotation57.applyInverseTo(rotation63);
        org.apache.commons.math.geometry.Rotation rotation86 = rotation50.applyTo(rotation57);
        double[][] doubleArray87 = rotation50.getMatrix();
        double double88 = rotation50.getQ3();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertNotNull(rotation42);
        org.junit.Assert.assertNotNull(rotationOrder43);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1040.0d) + "'", double51 == (-1040.0d));
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-1040.0d) + "'", double88 == (-1040.0d));
    }

    @Test
    public void test09126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09126");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale5.getDisplayLanguage(locale9);
        java.lang.String str11 = locale5.getISO3Country();
        java.lang.String str12 = locale1.getDisplayLanguage(locale5);
        java.util.Locale locale13 = locale5.stripExtensions();
        java.lang.String str14 = locale13.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "French" + "'", str12, "French");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test09127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09127");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D12, (double) (byte) 100, vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D9, vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D19, (double) (byte) 100, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D27, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D14, (double) (byte) 1, vector3D22, (double) (short) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D36 = vector3D14.negate();
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D14.negate();
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D14);
        org.apache.commons.math.geometry.Rotation rotation44 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation50 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray51 = rotation50.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D53, (double) (byte) 100, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D58, (double) (byte) 100, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D55, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotation50.applyInverseTo(vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D64 = rotation50.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotation44.applyInverseTo(vector3D64);
        double double66 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D38, vector3D64);
        printStream3.println((java.lang.Object) vector3D64);
        printStream3.println((int) (short) 0);
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-0.0d) + "'", double66 == (-0.0d));
    }

    @Test
    public void test09128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09128");
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String[] strArray9 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream10 = printStream5.format(locale7, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray9);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream5, false);
        printStream5.println(10.0f);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        printWriter21.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation30 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray31 = rotation30.getMatrix();
        java.io.PrintWriter printWriter32 = printWriter21.format("en", (java.lang.Object[]) doubleArray31);
        java.io.PrintStream printStream33 = printStream5.printf("YZY", (java.lang.Object[]) doubleArray31);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray31);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("zxz (KO_KR)", (java.lang.Object[]) doubleArray31);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray39 = mathException38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = mathException38.getSuppressed();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException38);
        java.lang.Object[] objArray42 = mathException41.getArguments();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("ita", (java.lang.Object[]) doubleArray31, (java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("\uc601\uc5b4\uc601\uad6d)", (java.lang.Throwable) mathException41);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
    }

    @Test
    public void test09129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09129");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = printWriter5.append((java.lang.CharSequence) "ko-KR");
        java.util.Locale locale10 = null;
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter17.println((float) (byte) -1);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter17, true);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double37 = rotation36.getQ0();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation29.applyTo(rotation36);
        double double39 = rotation29.getQ0();
        double double40 = rotation29.getQ0();
        double[][] doubleArray41 = rotation29.getMatrix();
        java.io.PrintWriter printWriter42 = printWriter22.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray41);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray46, (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray51 = mathException50.getSuppressed();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray46, (java.lang.Throwable) mathException50);
        java.lang.Throwable[] throwableArray53 = mathException50.getSuppressed();
        java.io.PrintWriter printWriter54 = printWriter42.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray53);
        printWriter42.write("fran\347ais");
        printWriter42.print((int) (byte) 10);
        java.io.PrintStream printStream61 = new java.io.PrintStream("ko-KR");
        printStream61.close();
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.OutputStream) printStream61, false);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter((java.io.Writer) printWriter64);
        char[] charArray68 = new char[] { ' ', 'x' };
        printWriter65.write(charArray68);
        printWriter65.write((int) (byte) 1);
        printWriter65.print((int) (short) 0);
        printWriter65.println("org.apache.commons.math.MathException: ZXZ");
        printWriter65.println('4');
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray80 = mathException79.getSuppressed();
        java.lang.Object[] objArray81 = mathException79.getArguments();
        java.io.PrintWriter printWriter82 = printWriter65.printf("\u97d3\u6587)", objArray81);
        java.io.PrintWriter printWriter83 = printWriter42.format("de_DE", objArray81);
        org.apache.commons.math.geometry.RotationOrder rotationOrder86 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D87 = rotationOrder86.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D88 = rotationOrder86.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D89 = rotationOrder86.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D90 = rotationOrder86.getA3();
        org.apache.commons.math.geometry.Rotation rotation94 = new org.apache.commons.math.geometry.Rotation(rotationOrder86, (-0.09950371902099892d), (double) (-1), (double) ' ');
        double[][] doubleArray95 = rotation94.getMatrix();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException96 = new org.apache.commons.math.geometry.NotARotationMatrixException("zxz (FRAN\347AIS)", (java.lang.Object[]) doubleArray95);
        java.io.PrintWriter printWriter97 = printWriter42.format("germany", (java.lang.Object[]) doubleArray95);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException98 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc77c\ubcf8\uc5b4", (java.lang.Object[]) doubleArray95);
        java.io.PrintWriter printWriter99 = printWriter5.printf(locale10, "org.apache.commons.math.geometry.NotARotationMatrixException: Canada", (java.lang.Object[]) doubleArray95);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertNotNull(rotationOrder86);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(printWriter97);
        org.junit.Assert.assertNotNull(printWriter99);
    }

    @Test
    public void test09130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09130");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.write((int) (byte) 1);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter20 = printWriter17.printf("ko-KR", (java.lang.Object[]) strArray19);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        double double26 = vector3D24.getNorm();
        printWriter17.println((java.lang.Object) vector3D24);
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        printStream32.close();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream32, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter35);
        char[] charArray41 = new char[] { '4', 'a', ' ', ' ' };
        printWriter35.write(charArray41);
        printStream29.print(charArray41);
        printWriter17.print(charArray41);
        printWriter5.println(charArray41);
        printWriter5.println("zxz_fran\347ais");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[4, a,  ,  ]");
    }

    @Test
    public void test09131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09131");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        java.io.PrintStream printStream19 = printStream1.append((java.lang.CharSequence) "\uc601\uc5b4");
        printStream1.println(true);
        printStream1.println((-2.5575191894877256d));
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream27 = printStream1.append((java.lang.CharSequence) "hi!", (int) (short) -1, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream19);
    }

    @Test
    public void test09132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09132");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print((double) 0.0f);
        printWriter12.println("zxz (KO_KR)");
        printWriter12.write(0);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter12);
        // The following exception was thrown during execution in test generation
        try {
            printWriter19.write("en_CA", (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 36");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
    }

    @Test
    public void test09133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09133");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        java.io.PrintWriter printWriter92 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter92.println((float) 1L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test09134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09134");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream6, true);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintStream printStream11 = printStream8.append('#');
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test09135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09135");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Japanese" + "'", str2, "Japanese");
    }

    @Test
    public void test09136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09136");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getISO3Country();
        java.util.Locale locale7 = new java.util.Locale("French");
        java.lang.String str8 = locale0.getDisplayName(locale7);
        java.lang.String str9 = locale7.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale7.toString(), "french");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English" + "'", str8, "English");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test09137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09137");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        printWriter4.print((int) (byte) -1);
        printWriter4.println(false);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("German");
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("Chinese", (java.lang.Throwable) mathException17);
        java.lang.Object[] objArray19 = mathException17.getArguments();
        java.io.PrintWriter printWriter20 = printWriter4.printf("org.apache.commons.math.MathException: x-lvariant-TWN", objArray19);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test09138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09138");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream10.flush();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException16);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException17);
        java.lang.Throwable[] throwableArray19 = mathException17.getSuppressed();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("de-DE", (java.lang.Object[]) throwableArray19);
        java.io.PrintStream printStream21 = printStream10.format("Etats-Unis", (java.lang.Object[]) throwableArray19);
        printStream21.print("\uc911\uad6d");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printStream21);
    }

    @Test
    public void test09139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09139");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream8 = printStream3.format(locale5, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream3, false);
        printStream3.println(10.0f);
        java.lang.String[] strArray15 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray15);
        java.io.PrintStream printStream17 = printStream3.format("\u97d3\u6587", (java.lang.Object[]) strArray15);
        printStream3.flush();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        printWriter20.write((int) (byte) 10);
        char[] charArray26 = new char[] { 'a', '4', 'a' };
        printWriter20.print(charArray26);
        printStream1.print(charArray26);
        java.io.PrintStream printStream31 = new java.io.PrintStream("ko-KR");
        printStream31.close();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream31, false);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter34);
        printWriter35.println('a');
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder38.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder42 = builder38.setLanguage("ZXZ");
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder44 = builder38.setLocale(locale43);
        java.lang.Object[] objArray46 = null;
        java.io.PrintWriter printWriter47 = printWriter35.format(locale43, "TWN", objArray46);
        printWriter47.println();
        java.io.PrintWriter printWriter50 = printWriter47.append((java.lang.CharSequence) "ZXZ");
        java.lang.String[] strArray54 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray54, (java.lang.Throwable) mathException57);
        java.io.PrintWriter printWriter59 = printWriter50.format("german", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream60 = printStream1.printf("KOR", (java.lang.Object[]) strArray54);
        printStream1.write((int) (short) -1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, 4, a]");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printStream60);
    }

    @Test
    public void test09140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09140");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = rotation5.applyInverseTo(rotation11);
        org.apache.commons.math.geometry.Vector3D vector3D14 = rotation11.getAxis();
        double double15 = rotation11.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D20, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D38, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D25, (double) (byte) 1, vector3D33, (double) (short) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D25.negate();
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = vector3D47.subtract(vector3D52);
        double double54 = vector3D52.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D58, (double) (byte) 100, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D63, (double) (byte) 100, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D60, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D70, (double) (byte) 100, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D79 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D76, (double) (byte) 100, vector3D78);
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D83 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D84 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D81, (double) (byte) 100, vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D85 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D78, vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D86 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D65, (double) (byte) 1, vector3D73, (double) (short) 100, vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D87 = vector3D52.subtract((double) (byte) -1, vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D88 = rotation11.applyInverseTo(vector3D83);
        double double89 = rotation11.getAngle();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(rotation13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test09141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09141");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation5.applyInverseTo(rotation21);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double37 = rotation36.getQ0();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation29.applyTo(rotation36);
        org.apache.commons.math.geometry.Rotation rotation39 = rotation29.revert();
        org.apache.commons.math.geometry.Rotation rotation45 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double46 = rotation45.getQ0();
        org.apache.commons.math.geometry.Rotation rotation47 = rotation29.applyInverseTo(rotation45);
        double double48 = rotation47.getAngle();
        org.apache.commons.math.geometry.Rotation rotation49 = rotation23.applyInverseTo(rotation47);
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double56 = rotation55.getQ1();
        double double57 = rotation55.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D59, (double) (byte) 100, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D67 = vector3D59.subtract((double) 10L, vector3D66);
        org.apache.commons.math.geometry.Vector3D vector3D68 = rotation55.applyInverseTo(vector3D66);
        org.apache.commons.math.geometry.Vector3D vector3D69 = vector3D68.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D70 = rotation49.applyInverseTo(vector3D69);
        double[][] doubleArray71 = rotation49.getMatrix();
        org.apache.commons.math.geometry.RotationOrder rotationOrder72 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str73 = rotationOrder72.toString();
        org.apache.commons.math.geometry.Vector3D vector3D74 = rotationOrder72.getA2();
        java.lang.String str75 = rotationOrder72.toString();
        org.apache.commons.math.geometry.Rotation rotation79 = new org.apache.commons.math.geometry.Rotation(rotationOrder72, 1.2220476682666177d, 0.0d, (double) (short) 10);
        org.apache.commons.math.geometry.Rotation rotation83 = new org.apache.commons.math.geometry.Rotation(rotationOrder72, (-0.0d), (double) (short) 100, (double) '4');
        org.apache.commons.math.geometry.Rotation rotation84 = rotation83.revert();
        org.apache.commons.math.geometry.Rotation rotation85 = rotation49.applyTo(rotation84);
        org.apache.commons.math.geometry.Rotation rotation86 = rotation85.revert();
        double double87 = rotation85.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 52.0d + "'", double46 == 52.0d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(rotationOrder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "YZY" + "'", str73, "YZY");
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "YZY" + "'", str75, "YZY");
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.02341900642789E8d + "'", double87 == 1.02341900642789E8d);
    }

    @Test
    public void test09142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09142");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(0.6573286897539247d, 1.7932371536978438d);
    }

    @Test
    public void test09143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09143");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.lang.String str3 = locale2.getDisplayName();
        boolean boolean4 = locale2.hasExtensions();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = new java.util.Locale("org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uc911\uad6d\uc5b4", "Italy");
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.lang.String str17 = locale12.getDisplayLanguage(locale14);
        java.util.Locale locale18 = locale12.stripExtensions();
        java.lang.String str19 = locale12.getDisplayLanguage();
        java.util.Locale locale20 = locale12.stripExtensions();
        java.util.Set<java.lang.String> strSet21 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder27 = builder23.setLanguage("ZXZ");
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder29 = builder23.setLocale(locale28);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder31 = builder23.setLocale(locale30);
        java.lang.String str32 = locale30.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale30);
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str35 = locale34.getScript();
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.getDefault(category36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayScript(locale38);
        java.lang.String str40 = locale34.getDisplayName(locale37);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ko-KR");
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        printWriter45.println((float) (byte) -1);
        printWriter45.print('a');
        java.util.Locale locale52 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter45.print((java.lang.Object) locale52);
        java.lang.String str54 = locale52.getDisplayName();
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str56 = locale52.getDisplayCountry();
        java.lang.String str57 = locale34.getDisplayVariant(locale52);
        java.util.Set<java.lang.String> strSet58 = locale52.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale52);
        java.lang.String str60 = locale52.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "English" + "'", str3, "English");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Canada" + "'", str32, "Canada");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category36.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese (Taiwan)" + "'", str40, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals(locale52.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str54, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str60, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test09144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09144");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        printStream13.println((long) 0);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        char[] charArray29 = new char[] { '4', 'a', ' ', ' ' };
        printWriter23.write(charArray29);
        printStream17.print(charArray29);
        printStream13.println(charArray29);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        printStream13.print((long) 'u');
        printStream13.flush();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, a,  ,  ]");
    }

    @Test
    public void test09145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09145");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        printStream1.print('a');
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        boolean boolean21 = printWriter20.checkError();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test09146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09146");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        byte[] byteArray10 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        printStream1.write(byteArray10);
        printStream1.println((int) (byte) 0);
        printStream1.close();
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter20.print((long) (short) 100);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter20, true);
        java.io.PrintWriter printWriter26 = printWriter20.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter28 = printWriter26.append(' ');
        printWriter28.print('u');
        printWriter28.println('a');
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        java.lang.String[] strArray40 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter41 = printWriter38.printf("ko-KR", (java.lang.Object[]) strArray40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        double double47 = vector3D45.getNorm();
        printWriter38.println((java.lang.Object) vector3D45);
        printWriter38.println('#');
        java.io.PrintStream printStream52 = new java.io.PrintStream("ko-KR");
        printStream52.close();
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream57 = printStream52.format(locale54, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray56);
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream52, false);
        printStream52.println(10.0f);
        java.io.PrintStream printStream64 = new java.io.PrintStream("ko-KR");
        printStream64.close();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream64, false);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.Writer) printWriter67);
        printWriter68.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation77 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray78 = rotation77.getMatrix();
        java.io.PrintWriter printWriter79 = printWriter68.format("en", (java.lang.Object[]) doubleArray78);
        java.io.PrintStream printStream80 = printStream52.printf("YZY", (java.lang.Object[]) doubleArray78);
        java.io.PrintStream printStream82 = new java.io.PrintStream("ko-KR");
        printStream82.close();
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter((java.io.OutputStream) printStream82, false);
        java.io.PrintWriter printWriter86 = new java.io.PrintWriter((java.io.Writer) printWriter85);
        char[] charArray89 = new char[] { ' ', 'x' };
        printWriter86.write(charArray89);
        printStream52.println(charArray89);
        printWriter38.write(charArray89);
        printWriter28.print(charArray89);
        printStream1.println(charArray89);
        printStream1.println((float) 1L);
        printStream1.print(0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100, -1, 10, 1]");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[ , x]");
    }

    @Test
    public void test09147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09147");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        printStream90.print((double) (byte) 0);
        printStream90.flush();
        java.io.PrintWriter printWriter95 = new java.io.PrintWriter((java.io.OutputStream) printStream90, true);
        java.io.PrintStream printStream97 = new java.io.PrintStream((java.io.OutputStream) printStream90, true);
        printStream97.println((long) 1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test09148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09148");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation16.getAxis();
        printWriter4.print((java.lang.Object) rotation16);
        printWriter4.close();
        printWriter4.flush();
        printWriter4.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.io.PrintStream printStream25 = new java.io.PrintStream("org.apache.commons.math.MathException: fra");
        printStream25.println(false);
        printWriter23.println((java.lang.Object) printStream25);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D18);
    }

    @Test
    public void test09149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09149");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        printStream1.print(false);
        printStream1.flush();
        printStream1.println((float) '4');
        printStream1.println(false);
        printStream1.print(false);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale.setDefault(category19, locale20);
        java.lang.String str23 = locale17.getDisplayScript(locale20);
        java.io.PrintStream printStream27 = new java.io.PrintStream("ko-KR");
        printStream27.close();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream27, false);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter30);
        printWriter30.println((float) (byte) -1);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter30, true);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter38 = printWriter30.printf("KR", (java.lang.Object[]) strArray37);
        java.io.PrintStream printStream40 = new java.io.PrintStream("ko-KR");
        printStream40.close();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream40, false);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.Writer) printWriter43);
        char[] charArray47 = new char[] { ' ', 'x' };
        printWriter44.write(charArray47);
        printWriter30.println(charArray47);
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = locale50.getDisplayScript(locale51);
        java.lang.String str53 = locale51.getVariant();
        java.lang.String[] strArray56 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray56);
        java.io.PrintWriter printWriter58 = printWriter30.printf(locale51, "English", (java.lang.Object[]) strArray56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("\u6cd5\u6587", (java.lang.Object[]) strArray56);
        java.io.PrintStream printStream60 = printStream1.printf(locale17, "org.apache.commons.math.geometry.NotARotationMatrixException: ja", (java.lang.Object[]) strArray56);
        java.lang.String str61 = locale17.getISO3Country();
        java.lang.String str62 = locale17.getDisplayCountry();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ , x]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test09150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09150");
        org.apache.commons.math.geometry.Rotation rotation8 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (short) 1, 1.7607846147136124d, 1.0d, false);
        org.apache.commons.math.geometry.Rotation rotation9 = rotation8.revert();
        double[][] doubleArray10 = rotation9.getMatrix();
        double[][] doubleArray11 = rotation9.getMatrix();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("eng", (java.lang.Object[]) doubleArray11, (java.lang.Throwable) mathException14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", (java.lang.Object[]) doubleArray11);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("\u4e2d\u56fd\u8a9e", (java.lang.Object[]) doubleArray11);
        org.junit.Assert.assertNotNull(rotation9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
    }

    @Test
    public void test09151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09151");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.print((double) (byte) 1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream8.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation17 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray18 = rotation17.getMatrix();
        java.io.PrintStream printStream19 = printStream8.printf("fra", (java.lang.Object[]) doubleArray18);
        java.io.PrintStream printStream20 = printStream1.format("", (java.lang.Object[]) doubleArray18);
        java.io.PrintStream printStream22 = printStream20.append('u');
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("en_CA");
        java.io.PrintWriter printWriter26 = printWriter24.append('#');
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.io.PrintStream printStream31 = new java.io.PrintStream("ko-KR");
        printStream31.close();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream31, false);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter34);
        char[] charArray40 = new char[] { '4', 'a', ' ', ' ' };
        printWriter34.write(charArray40);
        printStream28.print(charArray40);
        printWriter26.write(charArray40);
        printStream22.print(charArray40);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[4, a,  ,  ]");
    }

    @Test
    public void test09152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09152");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream6, true);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        java.io.PrintStream printStream11 = printStream8.append('u');
        printStream8.print((float) 'u');
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream11);
    }

    @Test
    public void test09153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09153");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = printStream1.append(' ');
        printStream1.print((long) 'a');
        java.io.PrintStream printStream35 = printStream1.append((java.lang.CharSequence) "CA");
        printStream35.print('4');
        java.io.PrintStream printStream39 = printStream35.append((java.lang.CharSequence) "org.apache.commons.math.geometry.NotARotationMatrixException: x-lvariant-TWN");
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream39);
        printWriter40.print('#');
        printWriter40.print(false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream39);
    }

    @Test
    public void test09154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09154");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream10.print("Chinesisch (China)");
        boolean boolean13 = printStream10.checkError();
        java.io.PrintStream printStream15 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream17 = printStream15.append((java.lang.CharSequence) "ko-KR");
        printStream17.println(' ');
        printStream17.print((long) (short) -1);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream28 = printStream23.format(locale25, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream23, false);
        printStream23.println(10.0f);
        java.lang.String[] strArray35 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35);
        java.io.PrintStream printStream37 = printStream23.format("\u97d3\u6587", (java.lang.Object[]) strArray35);
        printStream37.close();
        java.io.PrintStream printStream40 = printStream37.append('x');
        printStream37.println();
        java.io.PrintStream printStream43 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream43.println((float) 100L);
        printStream43.println((float) 10L);
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        printStream43.write(byteArray52);
        printStream37.write(byteArray52, (int) 'a', 10);
        printStream17.write(byteArray52);
        printStream10.write(byteArray52);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100, -1, 10, 1]");
    }

    @Test
    public void test09155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09155");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, (double) (byte) 100, vector3D4);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D4, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D22, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D9, (double) (byte) 1, vector3D17, (double) (short) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D31 = vector3D9.negate();
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D31.subtract(vector3D36);
        double double38 = vector3D37.getDelta();
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test09156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09156");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.Object[] objArray11 = null;
        java.io.PrintStream printStream12 = printStream8.format(locale9, "\uc911\uad6d\uc5b4", objArray11);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream8, false);
        printWriter14.println((double) (byte) 0);
        printWriter14.println(true);
        java.io.PrintWriter printWriter20 = printWriter14.append('4');
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream22, false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter25);
        printWriter25.print((double) (byte) 100);
        printWriter25.println();
        java.io.PrintStream printStream31 = new java.io.PrintStream("ko-KR");
        printStream31.close();
        java.util.Locale locale33 = java.util.Locale.UK;
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream36 = printStream31.format(locale33, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray35);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream31, false);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream38);
        printWriter39.print((float) (short) 10);
        printWriter25.println((java.lang.Object) printWriter39);
        printWriter25.println();
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.Writer) printWriter25);
        printWriter25.println("\ud504\ub791\uc2a4\uc5b4");
        printWriter25.println();
        java.io.PrintStream printStream49 = new java.io.PrintStream("ko-KR");
        printStream49.close();
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream49, false);
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.Writer) printWriter52);
        printWriter53.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation62 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray63 = rotation62.getMatrix();
        java.io.PrintWriter printWriter64 = printWriter53.format("en", (java.lang.Object[]) doubleArray63);
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale65.getDisplayCountry(locale66);
        java.lang.String str68 = locale65.getLanguage();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray72 = mathException71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = mathException71.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException74 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray73);
        java.io.PrintWriter printWriter75 = printWriter53.format(locale65, "ZXZ", (java.lang.Object[]) throwableArray73);
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter78 = printWriter53.format("\u97d3\u6587", (java.lang.Object[]) strArray77);
        java.io.PrintStream printStream80 = new java.io.PrintStream("ko-KR");
        printStream80.close();
        java.io.PrintWriter printWriter83 = new java.io.PrintWriter((java.io.OutputStream) printStream80, false);
        java.io.PrintStream printStream85 = printStream80.append((java.lang.CharSequence) "en");
        char[] charArray92 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream85.println(charArray92);
        printWriter78.write(charArray92, (int) (byte) 1, (int) (byte) 1);
        printWriter25.write(charArray92);
        printWriter14.print(charArray92);
        printWriter14.println();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "en" + "'", str68, "en");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[a,  , #, a, #, x]");
    }

    @Test
    public void test09157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09157");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        printWriter5.print((-0.6999730706914942d));
        printWriter5.close();
        org.junit.Assert.assertNotNull(printWriter11);
    }

    @Test
    public void test09158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09158");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray2 = mathException1.getSuppressed();
        java.lang.Throwable[] throwableArray3 = mathException1.getSuppressed();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException1);
        java.lang.String str5 = mathException4.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.MathException: ja" + "'", str5, "org.apache.commons.math.MathException: ja");
    }

    @Test
    public void test09159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09159");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D23 = rotation20.applyTo(vector3D22);
        double double24 = vector3D22.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D39 = vector3D38.negate();
        org.apache.commons.math.geometry.Vector3D vector3D40 = vector3D28.subtract(vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = vector3D22.subtract(vector3D40);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.5707963267948966d) + "'", double24 == (-1.5707963267948966d));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
    }

    @Test
    public void test09160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09160");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayLanguage(locale2);
        java.lang.String str6 = locale2.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.lang.String str8 = locale2.getDisplayVariant(locale7);
        java.lang.String str9 = locale2.toLanguageTag();
        java.lang.String str10 = locale2.getDisplayLanguage();
        java.lang.String str11 = locale2.getDisplayScript();
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French" + "'", str6, "French");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr" + "'", str9, "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test09161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09161");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ub300\ub9cc");
        java.lang.String str2 = locale1.getISO3Country();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test09162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09162");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, (double) (byte) 100, vector3D4);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D4, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D22, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D9, (double) (byte) 1, vector3D17, (double) (short) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D31 = vector3D9.negate();
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D31.subtract(vector3D36);
        double double38 = vector3D36.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D44, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D60, (double) (byte) 100, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D62, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D49, (double) (byte) 1, vector3D57, (double) (short) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D71 = vector3D36.subtract((double) (byte) -1, vector3D67);
        double double72 = vector3D67.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D74 = vector3D67.subtract(vector3D73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation76 = new org.apache.commons.math.geometry.Rotation(vector3D67, 0.4501390212658092d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: zero norm for rotation axis");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
    }

    @Test
    public void test09163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09163");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation5.applyInverseTo(rotation21);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ1();
        double double31 = rotation29.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D41 = vector3D33.subtract((double) 10L, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D42 = rotation29.applyInverseTo(vector3D40);
        org.apache.commons.math.geometry.Rotation rotation43 = rotation5.applyInverseTo(rotation29);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation29.getAxis();
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation(vector3D44, (-1.2792393947944187d));
        org.apache.commons.math.geometry.RotationOrder rotationOrder47 = org.apache.commons.math.geometry.RotationOrder.YXZ;
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotationOrder47.getA2();
        double[] doubleArray49 = rotation46.getAngles(rotationOrder47);
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double56 = rotation55.getQ0();
        org.apache.commons.math.geometry.Rotation rotation62 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double63 = rotation62.getQ0();
        org.apache.commons.math.geometry.Rotation rotation64 = rotation55.applyTo(rotation62);
        org.apache.commons.math.geometry.Rotation rotation65 = rotation55.revert();
        org.apache.commons.math.geometry.Rotation rotation71 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double72 = rotation71.getQ0();
        org.apache.commons.math.geometry.Rotation rotation73 = rotation55.applyInverseTo(rotation71);
        org.apache.commons.math.geometry.Rotation rotation74 = rotation46.applyTo(rotation55);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(rotationOrder47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.23512885134907166, 1.2631341477778097, 0.3201522898198668]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 52.0d + "'", double63 == 52.0d);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 52.0d + "'", double72 == 52.0d);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(rotation74);
    }

    @Test
    public void test09164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09164");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        java.io.PrintStream printStream9 = printStream1.append('#');
        boolean boolean10 = printStream1.checkError();
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        printWriter15.println((float) (byte) -1);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter15, true);
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream22, false);
        java.io.PrintStream printStream27 = printStream22.append((java.lang.CharSequence) "en");
        char[] charArray34 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream27.println(charArray34);
        printWriter15.println(charArray34);
        printStream1.println(charArray34);
        printStream1.println(' ');
        printStream1.print(' ');
        printStream1.println('u');
        printStream1.print(false);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, a, #, x]");
    }

    @Test
    public void test09165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09165");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.lang.String str3 = locale2.getDisplayName();
        boolean boolean4 = locale2.hasExtensions();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = new java.util.Locale("org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uc911\uad6d\uc5b4", "Italy");
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getISO3Language();
        boolean boolean15 = locale13.hasExtensions();
        java.util.Locale locale18 = new java.util.Locale("\u97d3\u6587", "\ub3c5\uc77c\uc5b4");
        java.lang.String str19 = locale13.getDisplayCountry(locale18);
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        printWriter24.println((float) (byte) -1);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter24, true);
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter32 = printWriter24.printf("KR", (java.lang.Object[]) strArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        char[] charArray41 = new char[] { ' ', 'x' };
        printWriter38.write(charArray41);
        printWriter24.println(charArray41);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = locale44.getDisplayScript(locale45);
        java.lang.String str47 = locale45.getVariant();
        java.lang.String[] strArray50 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray50);
        java.io.PrintWriter printWriter52 = printWriter24.printf(locale45, "English", (java.lang.Object[]) strArray50);
        java.lang.String str53 = locale45.getScript();
        java.lang.String str54 = locale45.getCountry();
        java.lang.String str55 = locale13.getDisplayLanguage(locale45);
        java.lang.String str56 = locale13.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale13);
        java.lang.Class<?> wildcardClass58 = locale13.getClass();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "anglais" + "'", str3, "anglais");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ita" + "'", str14, "ita");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "\u97d3\u6587\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Italy" + "'", str19, "Italy");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , x]");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "TW" + "'", str54, "TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str55, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test09166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09166");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("China");
        java.lang.String[] strArray4 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray4, (java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray9 = mathException8.getSuppressed();
        boolean boolean10 = languageRange1.equals((java.lang.Object) mathException8);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09167");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale12 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale.setDefault(category13, locale14);
        java.lang.String str17 = locale12.getDisplayName(locale14);
        java.lang.String str18 = locale14.getDisplayName();
        java.lang.String str19 = locale9.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder20 = builder7.setLocale(locale14);
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder24 = builder20.setLanguage("ita");
        java.util.Locale locale25 = builder20.build();
        java.util.Locale.Builder builder27 = builder20.setLanguageTag("de-DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u97d3\u6587)" + "'", str17, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English" + "'", str18, "English");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English" + "'", str19, "English");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ita");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test09168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09168");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.println((float) (-1));
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println("tw");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        printStream9.flush();
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream17 = printStream12.format(locale14, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 1, (byte) -1 };
        printStream19.write(byteArray25);
        printStream9.write(byteArray25);
        printStream1.write(byteArray25);
        printStream1.print('u');
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException38);
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray43, (java.lang.Throwable) mathException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray43, (java.lang.Throwable) mathException47);
        java.lang.Throwable[] throwableArray50 = mathException47.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException51 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray50);
        mathException39.addSuppressed((java.lang.Throwable) notARotationMatrixException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException39);
        java.lang.Throwable[] throwableArray54 = mathException53.getSuppressed();
        java.io.PrintStream printStream55 = printStream32.printf("DE_DE", (java.lang.Object[]) throwableArray54);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 1, -1]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(printStream55);
    }

    @Test
    public void test09169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09169");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder6 = builder2.setLanguage("ZXZ");
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder8 = builder2.setLocale(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder10 = builder2.setLocale(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleKeys();
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter20.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray30 = rotation29.getMatrix();
        java.io.PrintWriter printWriter31 = printWriter20.format("en", (java.lang.Object[]) doubleArray30);
        java.io.PrintStream printStream32 = printStream1.format(locale9, "French", (java.lang.Object[]) doubleArray30);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37, (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray37, (java.lang.Throwable) mathException41);
        java.lang.Throwable[] throwableArray44 = mathException41.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException45 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray44);
        java.lang.Throwable[] throwableArray46 = notARotationMatrixException45.getSuppressed();
        java.io.PrintStream printStream47 = printStream32.format("YZY", (java.lang.Object[]) throwableArray46);
        printStream32.print(10);
        java.io.PrintStream printStream51 = printStream32.append((java.lang.CharSequence) "\u97d3\u6587)");
        printStream32.print(true);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.parse("zho", strMap55);
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.getDefault(category57);
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags(languageRangeList56, (java.util.Collection<java.lang.String>) strSet60);
        printStream32.print((java.lang.Object) strList61);
        java.io.PrintStream printStream63 = new java.io.PrintStream((java.io.OutputStream) printStream32);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream66 = new java.io.PrintStream((java.io.OutputStream) printStream32, false, "Japanese");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Japanese");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(strList61);
    }

    @Test
    public void test09170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09170");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException12);
        java.io.PrintWriter printWriter14 = printWriter4.printf("it", (java.lang.Object[]) strArray10);
        printWriter4.println("ZXZ");
        printWriter4.println("German");
        printWriter4.println((float) '4');
        printWriter4.print((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printWriter14);
    }

    @Test
    public void test09171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09171");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("xyx (ZH-TW,org.apache.commons.math.geometry.NotARotationMatrixException: x-lvariant-TWN)", "Chine");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Chine");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09172");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D11, (double) (byte) 100, vector3D13);
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D19 = vector3D11.subtract((double) 10L, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D19, (double) 10L, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = vector3D24.negate();
        org.apache.commons.math.geometry.RotationOrder rotationOrder27 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D28 = rotationOrder27.getA1();
        org.apache.commons.math.geometry.Rotation rotation35 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double36 = rotation35.getQ0();
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double43 = rotation42.getQ0();
        org.apache.commons.math.geometry.Rotation rotation44 = rotation35.applyTo(rotation42);
        org.apache.commons.math.geometry.Rotation rotation45 = rotation35.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder46 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation50 = new org.apache.commons.math.geometry.Rotation(rotationOrder46, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation51 = rotation45.applyTo(rotation50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D53 = rotation50.applyTo(vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D53.negate();
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 100, vector3D28, 1.4070751110264852d, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D25.add(vector3D55);
        double double57 = org.apache.commons.math.geometry.Vector3D.angle(vector3D8, vector3D55);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(rotationOrder27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 52.0d + "'", double43 == 52.0d);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotationOrder46);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.011716141877645815d + "'", double57 == 0.011716141877645815d);
    }

    @Test
    public void test09173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09173");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) -1 };
        printStream15.write(byteArray19);
        boolean boolean21 = printStream15.checkError();
        printStream15.print('4');
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray27, (java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray32 = mathException30.getSuppressed();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        java.io.PrintStream printStream35 = printStream15.printf("\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)", (java.lang.Object[]) throwableArray34);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(printStream35);
    }

    @Test
    public void test09174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09174");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        printWriter9.print("\u97d3\u6587");
        java.io.PrintWriter printWriter13 = printWriter9.append((java.lang.CharSequence) "org.apache.commons.math.MathException: ");
        printWriter13.println((int) ' ');
        printWriter13.flush();
        printWriter13.println(true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test09175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09175");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 10, (byte) 10 };
        printStream1.write(byteArray91);
        printStream1.println(false);
        java.io.PrintStream printStream96 = printStream1.append('#');
        printStream1.print("de_de");
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1, 100, -1, 10, 10]");
        org.junit.Assert.assertNotNull(printStream96);
    }

    @Test
    public void test09176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09176");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder9 = builder4.setLanguage("ja");
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Locale locale11 = locale10.stripExtensions();
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter16.println((float) (byte) -1);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter16, true);
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter24 = printWriter16.printf("KR", (java.lang.Object[]) strArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("ko-KR");
        printStream26.close();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter29);
        char[] charArray33 = new char[] { ' ', 'x' };
        printWriter30.write(charArray33);
        printWriter16.println(charArray33);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.lang.String str38 = locale36.getDisplayScript(locale37);
        java.lang.String str39 = locale37.getVariant();
        java.lang.String[] strArray42 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter16.printf(locale37, "English", (java.lang.Object[]) strArray42);
        java.lang.String str45 = locale37.getScript();
        java.lang.String str46 = locale10.getDisplayLanguage(locale37);
        java.util.Locale.Builder builder47 = builder9.setLocale(locale37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder49 = builder9.removeUnicodeLocaleAttribute("italian-x-lvariant-CHN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: italian-x-lvariant-CHN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ , x]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u97d3\u6587" + "'", str46, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test09177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09177");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.7035975447302918d), (double) '#', (-0.09950371902099892d));
        double double7 = rotation6.getQ3();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double14 = rotation13.getQ0();
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double21 = rotation20.getQ0();
        org.apache.commons.math.geometry.Rotation rotation22 = rotation13.applyTo(rotation20);
        org.apache.commons.math.geometry.Rotation rotation23 = rotation13.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder24 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation(rotationOrder24, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation29 = rotation23.applyTo(rotation28);
        org.apache.commons.math.geometry.Rotation rotation30 = rotation6.applyTo(rotation29);
        double double31 = rotation6.getQ3();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.9314590104177871d + "'", double7 == 0.9314590104177871d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(rotation22);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertNotNull(rotationOrder24);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.9314590104177871d + "'", double31 == 0.9314590104177871d);
    }

    @Test
    public void test09178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09178");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder9 = builder4.setVariant("");
        java.util.Locale.Builder builder10 = builder4.clearExtensions();
        java.util.Locale locale11 = builder4.build();
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category12, locale15);
        java.util.Locale locale17 = java.util.Locale.getDefault(category12);
        java.util.Locale locale18 = java.util.Locale.getDefault(category12);
        java.util.Locale locale19 = java.util.Locale.getDefault(category12);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("US");
        java.lang.String str22 = locale19.getDisplayLanguage(locale21);
        java.util.Locale.Builder builder23 = builder4.setLocale(locale21);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale15.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "us");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zxz" + "'", str22, "zxz");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test09179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09179");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        printStream85.println((int) (byte) -1);
        java.lang.Object[] objArray89 = null;
        java.io.PrintStream printStream90 = printStream85.format("", objArray89);
        printStream90.print(100);
        java.io.PrintStream printStream94 = printStream90.append('u');
        printStream90.println((java.lang.Object) (-0.021228800916801634d));
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream99 = new java.io.PrintStream((java.io.OutputStream) printStream90, false, "\u7fa9\u5927\u5229\u6587)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: germany (????)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertNotNull(printStream94);
    }

    @Test
    public void test09180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09180");
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D4, (double) (byte) 100, vector3D6);
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D6, vector3D11);
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray21 = rotation20.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D28, (double) (byte) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D25, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = rotation20.applyInverseTo(vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D33, vector3D34);
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation42.applyTo(vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D49 = vector3D44.negate();
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        double double52 = vector3D51.getY();
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D6, (double) ' ', vector3D33, (double) (-1.0f), vector3D49, (double) 10.0f, vector3D51);
        double double54 = vector3D33.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((-1.0d), vector3D33);
        org.apache.commons.math.geometry.RotationOrder rotationOrder56 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D57 = rotationOrder56.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D58 = rotationOrder56.getA2();
        org.apache.commons.math.geometry.Rotation rotation64 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotation64.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D67, (double) (byte) 100, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D75 = vector3D67.subtract((double) 10L, vector3D74);
        org.apache.commons.math.geometry.Vector3D vector3D77 = vector3D67.scalarMultiply((double) 0);
        org.apache.commons.math.geometry.Vector3D vector3D78 = vector3D65.subtract(vector3D67);
        org.apache.commons.math.geometry.Rotation rotation79 = new org.apache.commons.math.geometry.Rotation(vector3D58, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D33, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((-0.6692079985630428d), vector3D33);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D80);
    }

    @Test
    public void test09181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09181");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream7, false);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter10);
        printWriter11.println('a');
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder20 = builder14.setLocale(locale19);
        java.lang.Object[] objArray22 = null;
        java.io.PrintWriter printWriter23 = printWriter11.format(locale19, "TWN", objArray22);
        java.util.Set<java.lang.String> strSet24 = locale19.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder25 = builder3.setLocale(locale19);
        java.util.Locale.Builder builder28 = builder25.setExtension('x', "us");
        java.lang.Class<?> wildcardClass29 = builder25.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test09182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09182");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.flush();
        java.util.Locale locale9 = java.util.Locale.PRC;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale12.getDisplayCountry(locale16);
        java.lang.String str18 = locale16.getISO3Country();
        java.lang.String str19 = locale9.getDisplayName(locale16);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double27 = rotation26.getQ0();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double34 = rotation33.getQ0();
        org.apache.commons.math.geometry.Rotation rotation35 = rotation26.applyTo(rotation33);
        double[][] doubleArray36 = rotation33.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double43 = rotation42.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation42.getAxis();
        org.apache.commons.math.geometry.Rotation rotation45 = rotation33.applyTo(rotation42);
        double[][] doubleArray46 = rotation45.getMatrix();
        java.io.PrintWriter printWriter47 = printWriter4.format(locale16, "CAN", (java.lang.Object[]) doubleArray46);
        printWriter47.print((-0.8230677854004599d));
        printWriter47.write("catalan");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ITA" + "'", str18, "ITA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "cinese (Cina)" + "'", str19, "cinese (Cina)");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(printWriter47);
    }

    @Test
    public void test09183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09183");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(9610.932890332206d, 24.248711305964285d, (-35.58615424643666d));
    }

    @Test
    public void test09184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09184");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) (byte) 1, (double) 1.0f, 0.0d, 1.0d, true);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ0();
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double19 = rotation18.getQ0();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation11.applyTo(rotation18);
        double double21 = rotation11.getQ0();
        double double22 = rotation11.getQ0();
        double[][] doubleArray23 = rotation11.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation24 = rotation5.applyInverseTo(rotation11);
        org.apache.commons.math.geometry.Rotation rotation30 = new org.apache.commons.math.geometry.Rotation(0.567725116225552d, (-1.63942416E8d), (-0.6692079985630428d), (double) (byte) -1, false);
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D34, (double) 0L, vector3D39);
        double double41 = vector3D40.getY();
        double double42 = vector3D40.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotation30.applyTo(vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation11.applyInverseTo(vector3D43);
        double double45 = rotation11.getQ3();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
    }

    @Test
    public void test09185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09185");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter5.println((float) (byte) -1);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        printWriter10.println();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter10, false);
        printWriter10.println((float) 'a');
        printWriter10.print(' ');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str24 = locale22.getDisplayScript(locale23);
        java.lang.String str25 = locale21.getDisplayLanguage(locale22);
        java.lang.String str26 = locale18.getDisplayName(locale21);
        java.util.Set<java.lang.String> strSet27 = locale18.getUnicodeLocaleKeys();
        java.lang.String[] strArray30 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray30);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.io.PrintWriter printWriter33 = printWriter10.format(locale18, "cor\351en (Cor\351e du Sud)", (java.lang.Object[]) throwableArray32);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37);
        java.lang.Object[] objArray39 = mathException38.getArguments();
        java.lang.String str40 = mathException38.getPattern();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("ITA", (java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("japon\350s", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) mathException44);
        java.lang.Throwable[] throwableArray46 = mathException44.getSuppressed();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException44);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fran\347ais" + "'", str25, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "anglais" + "'", str26, "anglais");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ZXZ" + "'", str40, "ZXZ");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test09186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09186");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("DEU");
        double double2 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test09187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09187");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print("XYZ");
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale.setDefault(category13, locale15);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale15.getDisplayLanguage(locale19);
        java.lang.String str21 = locale15.getISO3Country();
        java.lang.String str22 = locale11.getDisplayLanguage(locale15);
        java.util.Locale locale23 = locale15.stripExtensions();
        java.lang.String[] strArray27 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray27, (java.lang.Throwable) mathException30);
        java.io.PrintWriter printWriter32 = printWriter4.format(locale23, "", (java.lang.Object[]) strArray27);
        printWriter4.println(false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French" + "'", str22, "French");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printWriter32);
    }

    @Test
    public void test09188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09188");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D10);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double25 = rotation24.getQ1();
        double double26 = rotation24.getQ0();
        org.apache.commons.math.geometry.Rotation rotation27 = rotation5.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double34 = rotation33.getQ1();
        org.apache.commons.math.geometry.Rotation rotation35 = rotation24.applyInverseTo(rotation33);
        double double36 = rotation33.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.plusJ;
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray44 = rotation43.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D46, (double) (byte) 100, vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D51, (double) (byte) 100, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D48, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D56 = rotation43.applyInverseTo(vector3D48);
        double double57 = vector3D48.getX();
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D37.subtract(vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotation33.applyInverseTo(vector3D37);
        double double60 = vector3D37.getX();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test09189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09189");
        java.util.Locale locale1 = new java.util.Locale("ita");
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        boolean boolean4 = locale3.hasExtensions();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale.setDefault(category6, locale7);
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getDisplayScript();
        java.util.Locale.setDefault(category2, locale7);
        java.util.Locale locale13 = java.util.Locale.getDefault(category2);
        java.io.PrintStream printStream15 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale19 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        boolean boolean22 = locale21.hasExtensions();
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str24 = locale19.getDisplayName(locale21);
        java.lang.String str25 = locale21.getDisplayName();
        java.lang.String str26 = locale16.getDisplayLanguage(locale21);
        printStream15.println((java.lang.Object) locale21);
        java.lang.String str28 = locale21.getCountry();
        java.util.Locale.setDefault(category2, locale21);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        boolean boolean32 = locale30.hasExtensions();
        java.util.Locale.setDefault(category2, locale30);
        java.lang.String str34 = locale1.getDisplayCountry(locale30);
        org.junit.Assert.assertEquals(locale1.toString(), "ita");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u97d3\u6587)" + "'", str24, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English" + "'", str25, "English");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "English" + "'", str26, "English");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test09190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09190");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter13.println((-1.0f));
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        char[] charArray26 = new char[] { '4', 'a', ' ', ' ' };
        printWriter20.write(charArray26);
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        char[] charArray38 = new char[] { '4', 'a', ' ', ' ' };
        printWriter32.write(charArray38);
        printWriter20.write(charArray38);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ko-KR");
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        printWriter45.println((float) (byte) -1);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.Writer) printWriter45, true);
        org.apache.commons.math.geometry.Rotation rotation57 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double58 = rotation57.getQ0();
        org.apache.commons.math.geometry.Rotation rotation64 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double65 = rotation64.getQ0();
        org.apache.commons.math.geometry.Rotation rotation66 = rotation57.applyTo(rotation64);
        double double67 = rotation57.getQ0();
        double double68 = rotation57.getQ0();
        double[][] doubleArray69 = rotation57.getMatrix();
        java.io.PrintWriter printWriter70 = printWriter50.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray69);
        printWriter70.write("zxz_FRAN\347AIS", (int) (byte) 10, 0);
        java.io.PrintStream printStream76 = new java.io.PrintStream("ko-KR");
        printStream76.close();
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.OutputStream) printStream76, false);
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter((java.io.Writer) printWriter79);
        char[] charArray83 = new char[] { ' ', 'x' };
        printWriter80.write(charArray83);
        printWriter70.println(charArray83);
        printWriter20.print(charArray83);
        printWriter13.println(charArray83);
        org.apache.commons.math.geometry.RotationOrder rotationOrder88 = org.apache.commons.math.geometry.RotationOrder.XZX;
        java.lang.String str89 = rotationOrder88.toString();
        org.apache.commons.math.geometry.Vector3D vector3D90 = rotationOrder88.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D92 = vector3D90.scalarMultiply(0.8190610670960571d);
        printWriter13.print((java.lang.Object) 0.8190610670960571d);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[4, a,  ,  ]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 52.0d + "'", double58 == 52.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 52.0d + "'", double65 == 52.0d);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 52.0d + "'", double67 == 52.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.0d + "'", double68 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[ , x]");
        org.junit.Assert.assertNotNull(rotationOrder88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "XZX" + "'", str89, "XZX");
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D92);
    }

    @Test
    public void test09191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09191");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation5.applyInverseTo(rotation21);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double37 = rotation36.getQ0();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation29.applyTo(rotation36);
        org.apache.commons.math.geometry.Rotation rotation39 = rotation29.revert();
        org.apache.commons.math.geometry.Rotation rotation45 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double46 = rotation45.getQ0();
        org.apache.commons.math.geometry.Rotation rotation47 = rotation29.applyInverseTo(rotation45);
        double double48 = rotation47.getAngle();
        org.apache.commons.math.geometry.Rotation rotation49 = rotation23.applyInverseTo(rotation47);
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double56 = rotation55.getQ1();
        double double57 = rotation55.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D59, (double) (byte) 100, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D67 = vector3D59.subtract((double) 10L, vector3D66);
        org.apache.commons.math.geometry.Vector3D vector3D68 = rotation55.applyInverseTo(vector3D66);
        org.apache.commons.math.geometry.Vector3D vector3D69 = vector3D68.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D70 = rotation49.applyInverseTo(vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D71 = vector3D70.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D72 = vector3D71.orthogonal();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 52.0d + "'", double46 == 52.0d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
    }

    @Test
    public void test09192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09192");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "ko-KR");
        printStream3.println(' ');
        printStream3.print(false);
        printStream3.print(true);
        org.junit.Assert.assertNotNull(printStream3);
    }

    @Test
    public void test09193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09193");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(0.011716141877645815d, 93.91862714046292d);
    }

    @Test
    public void test09194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09194");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.flush();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter19.flush();
        printWriter19.println((int) 'x');
        printWriter19.println((-0.995037190209989d));
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter28 = printWriter19.append((java.lang.CharSequence) "zh-CN", (int) 'x', (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test09195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09195");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.lang.String str12 = locale11.getISO3Language();
        boolean boolean13 = locale11.hasExtensions();
        java.util.Locale locale16 = new java.util.Locale("\u97d3\u6587", "\ub3c5\uc77c\uc5b4");
        java.lang.String str17 = locale11.getDisplayCountry(locale16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter22.println((float) (byte) -1);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter30 = printWriter22.printf("KR", (java.lang.Object[]) strArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        printStream32.close();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream32, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter35);
        char[] charArray39 = new char[] { ' ', 'x' };
        printWriter36.write(charArray39);
        printWriter22.println(charArray39);
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = locale42.getDisplayScript(locale43);
        java.lang.String str45 = locale43.getVariant();
        java.lang.String[] strArray48 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray48);
        java.io.PrintWriter printWriter50 = printWriter22.printf(locale43, "English", (java.lang.Object[]) strArray48);
        java.lang.String str51 = locale43.getScript();
        java.lang.String str52 = locale43.getCountry();
        java.lang.String str53 = locale11.getDisplayLanguage(locale43);
        java.util.Locale.Builder builder54 = builder10.setLocale(locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder56 = builder54.setLanguage("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ita" + "'", str12, "ita");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "\u97d3\u6587\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italy" + "'", str17, "Italy");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , x]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "TW" + "'", str52, "TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str53, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test09196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09196");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        printStream15.println("XYZ");
        printStream15.println();
        printStream15.print(0.0f);
        java.io.PrintStream printStream23 = printStream15.append('u');
        printStream15.print((int) (short) 0);
        java.util.Locale locale27 = new java.util.Locale("\uc601\uc5b4");
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.Object[] objArray30 = null;
        java.io.PrintStream printStream31 = printStream15.format(locale27, "\uc911\uad6d\uc5b4", objArray30);
        java.lang.String str32 = locale27.getDisplayName();
        java.lang.String str34 = locale27.getExtension('a');
        java.util.Locale locale36 = new java.util.Locale("org.apache.commons.math.mathexception: ko_kr");
        java.lang.String str37 = locale27.getDisplayLanguage(locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertEquals(locale27.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4" + "'", str32, "\uc601\uc5b4");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals(locale36.toString(), "org.apache.commons.math.mathexception: ko_kr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc601\uc5b4" + "'", str37, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(strSet38);
    }

    @Test
    public void test09197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09197");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D10);
        double double19 = rotation5.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D20 = rotation5.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((-1.0d), (double) (byte) 100);
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation(vector3D23, (double) 100L);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) 10, (double) 1.0f, (double) 0L, 1.4070751110264852d, true);
        org.apache.commons.math.geometry.Rotation rotation32 = rotation25.applyTo(rotation31);
        double double33 = rotation25.getAngle();
        org.apache.commons.math.geometry.Rotation rotation34 = rotation5.applyTo(rotation25);
        org.apache.commons.math.geometry.RotationOrder rotationOrder36 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation(rotationOrder36, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D41 = rotationOrder36.getA2();
        double double42 = vector3D41.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((-52.0d), vector3D41);
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray50 = rotation49.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D52, (double) (byte) 100, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D54, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotation49.applyInverseTo(vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D62, vector3D63);
        org.apache.commons.math.geometry.RotationOrder rotationOrder66 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D67 = rotationOrder66.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D71, (double) (byte) 100, vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D79 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D76, (double) (byte) 100, vector3D78);
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D73, vector3D78);
        org.apache.commons.math.geometry.Vector3D vector3D83 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D85 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D86 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D83, (double) (byte) 100, vector3D85);
        org.apache.commons.math.geometry.Vector3D vector3D87 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D73, (double) 0.0f, vector3D85);
        org.apache.commons.math.geometry.Vector3D vector3D89 = vector3D87.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D90 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D67, (double) '#', vector3D89);
        org.apache.commons.math.geometry.Vector3D vector3D91 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D64, vector3D90);
        org.apache.commons.math.geometry.Vector3D vector3D92 = vector3D90.orthogonal();
        double double93 = org.apache.commons.math.geometry.Vector3D.angle(vector3D43, vector3D92);
        org.apache.commons.math.geometry.Vector3D vector3D94 = rotation5.applyInverseTo(vector3D92);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.5309649148733836d + "'", double33 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(rotationOrder36);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(rotationOrder66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 3.141592653589793d + "'", double93 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D94);
    }

    @Test
    public void test09198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09198");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\uc911\uad6d\uc5b4\ub300\ub9cc))", "\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ?????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09199");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 10, (byte) 10 };
        printStream1.write(byteArray91);
        printStream1.println(false);
        java.io.PrintStream printStream96 = printStream1.append('#');
        java.io.PrintStream printStream98 = printStream96.append('u');
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1, 100, -1, 10, 10]");
        org.junit.Assert.assertNotNull(printStream96);
        org.junit.Assert.assertNotNull(printStream98);
    }

    @Test
    public void test09200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09200");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.lang.String str3 = locale1.getDisplayScript(locale2);
        java.lang.String str4 = locale0.getDisplayLanguage(locale1);
        java.util.Set<java.lang.String> strSet5 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fran\347ais" + "'", str4, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test09201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09201");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("English (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=english(org.apache.commons.math.mathexception)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09202");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        printStream1.print((double) 1.0f);
        printStream1.print((float) 1L);
        printStream1.println(false);
        printStream1.print((long) (byte) -1);
        printStream1.println();
        java.lang.String[] strArray22 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray22, (java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray22, (java.lang.Throwable) mathException26);
        java.lang.Throwable[] throwableArray29 = mathException26.getSuppressed();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("ko_KR", (java.lang.Object[]) throwableArray29);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException31 = new org.apache.commons.math.geometry.NotARotationMatrixException("TW", (java.lang.Object[]) throwableArray29);
        java.io.PrintStream printStream32 = printStream1.printf("US", (java.lang.Object[]) throwableArray29);
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException37);
        java.lang.String str39 = mathException37.getPattern();
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintStream printStream41 = printStream32.format("\ub300\ub9cc", (java.lang.Object[]) throwableArray40);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream41, false);
        java.io.PrintStream printStream45 = printStream41.append((java.lang.CharSequence) "\uc774\ud0c8\ub9ac\uc544\uc5b4\ud504\ub791\uc2a4\uc5b4,KR)");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ko_KR" + "'", str39, "ko_KR");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test09203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09203");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print("");
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale.setDefault(category9, locale12);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray24 = rotation23.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotation23.applyInverseTo(vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation23.getAxis();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation23.revert();
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintStream printStream40 = printStream1.format(locale12, "KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream42 = printStream1.append('u');
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.util.Locale locale45 = locale43.stripExtensions();
        java.io.PrintStream printStream48 = new java.io.PrintStream("ko-KR");
        printStream48.close();
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream48, false);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter51);
        printWriter51.println((float) (byte) -1);
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.Writer) printWriter51, true);
        java.lang.String[] strArray58 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter59 = printWriter51.printf("KR", (java.lang.Object[]) strArray58);
        java.io.PrintStream printStream60 = printStream1.printf(locale43, "United Kingdom", (java.lang.Object[]) strArray58);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double68 = rotation67.getQ0();
        org.apache.commons.math.geometry.Rotation rotation74 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double75 = rotation74.getQ0();
        org.apache.commons.math.geometry.Rotation rotation76 = rotation67.applyTo(rotation74);
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D78, (double) (byte) 100, vector3D80);
        org.apache.commons.math.geometry.Vector3D vector3D83 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D85 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D86 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D83, (double) (byte) 100, vector3D85);
        org.apache.commons.math.geometry.Vector3D vector3D87 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D80, vector3D85);
        org.apache.commons.math.geometry.Vector3D vector3D88 = rotation67.applyInverseTo(vector3D80);
        org.apache.commons.math.geometry.Rotation rotation89 = rotation67.revert();
        double[][] doubleArray90 = rotation89.getMatrix();
        java.io.PrintStream printStream91 = printStream1.format("ko_KR", (java.lang.Object[]) doubleArray90);
        boolean boolean92 = printStream1.checkError();
        printStream1.print('a');
        printStream1.flush();
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.0d + "'", double68 == 52.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 52.0d + "'", double75 == 52.0d);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test09204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09204");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale3.getDisplayCountry(locale10);
        java.lang.String str13 = locale3.getVariant();
        java.lang.String str14 = locale3.getCountry();
        boolean boolean15 = locale3.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09205");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        printStream1.flush();
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream3.flush();
        printStream3.print((-5.539714827914696d));
        java.io.PrintStream printStream8 = printStream3.append('u');
        printStream3.print('4');
        org.junit.Assert.assertNotNull(printStream8);
    }

    @Test
    public void test09206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09206");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray10 = new char[] { '4', 'a', ' ', ' ' };
        printWriter4.write(charArray10);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.lang.String str16 = locale12.getDisplayLanguage(locale13);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintWriter printWriter40 = printWriter23.format(locale28, "YZY", (java.lang.Object[]) doubleArray39);
        java.io.PrintWriter printWriter41 = printWriter4.printf(locale13, "ko-KR", (java.lang.Object[]) doubleArray39);
        printWriter41.write(0);
        printWriter41.close();
        java.util.Locale.Category category45 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.util.Locale locale47 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale47);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale49.getDisplayScript(locale50);
        java.lang.String str52 = locale47.getDisplayLanguage(locale50);
        java.util.Locale.setDefault(category45, locale50);
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = locale54.getCountry();
        java.lang.String str56 = locale50.getDisplayCountry(locale54);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException61);
        java.lang.Throwable[] throwableArray63 = mathException61.getSuppressed();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException61);
        java.lang.Throwable[] throwableArray65 = mathException64.getSuppressed();
        java.io.PrintWriter printWriter66 = printWriter41.printf(locale50, "org.apache.commons.math.MathException: ITA", (java.lang.Object[]) throwableArray65);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        java.io.PrintWriter printWriter70 = printWriter68.append('#');
        java.io.PrintStream printStream72 = new java.io.PrintStream("ko-KR");
        printStream72.close();
        java.io.PrintWriter printWriter75 = new java.io.PrintWriter((java.io.OutputStream) printStream72, false);
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter((java.io.Writer) printWriter75);
        printWriter75.println((float) (byte) -1);
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter((java.io.Writer) printWriter75, true);
        java.io.PrintStream printStream82 = new java.io.PrintStream("ko-KR");
        printStream82.close();
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter((java.io.OutputStream) printStream82, false);
        java.io.PrintStream printStream87 = printStream82.append((java.lang.CharSequence) "en");
        char[] charArray94 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream87.println(charArray94);
        printWriter75.println(charArray94);
        printWriter70.println(charArray94);
        printWriter66.print(charArray94);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.FORMAT + "'", category45.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u97d3\u6587" + "'", str52, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "US" + "'", str55, "US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Taiwan" + "'", str56, "Taiwan");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray94), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray94), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray94), "[a,  , #, a, #, x]");
    }

    @Test
    public void test09207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09207");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale1.getExtension('x');
        java.lang.String str7 = locale1.getDisplayScript();
        java.lang.String str8 = locale1.getVariant();
        java.lang.String str9 = locale1.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en" + "'", str9, "en");
    }

    @Test
    public void test09208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09208");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        printStream1.print("eng");
        printStream1.println('4');
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream24 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray29 = new char[] { ' ', 'a', '#', 'a' };
        printStream24.println(charArray29);
        java.io.PrintStream printStream32 = printStream24.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream24, false);
        printStream24.close();
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = locale36.getCountry();
        java.lang.String[] strArray40 = java.util.Locale.getISOCountries();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException41 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d", (java.lang.Object[]) strArray40);
        java.io.PrintStream printStream42 = printStream24.format(locale36, "\uce90\ub098\ub2e4", (java.lang.Object[]) strArray40);
        java.lang.String[] strArray45 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray45);
        java.lang.Object[] objArray47 = mathException46.getArguments();
        java.io.PrintStream printStream48 = printStream22.printf(locale36, "Etats-Unis", objArray47);
        printStream22.flush();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CA" + "'", str37, "CA");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream48);
    }

    @Test
    public void test09209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09209");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter5.println();
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "\uce90\ub098\ub2e4");
        printWriter5.println(true);
        boolean boolean14 = printWriter5.checkError();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09210");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter5.print("Canada");
        printWriter5.print('x');
    }

    @Test
    public void test09211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09211");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("german");
        printWriter1.println('#');
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.Writer) printWriter1);
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream11 = printStream6.format(locale8, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray10);
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream6, false);
        printStream6.println(10.0f);
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.io.PrintStream printStream34 = printStream6.printf("YZY", (java.lang.Object[]) doubleArray32);
        java.io.PrintStream printStream36 = printStream6.append(' ');
        printStream6.print((long) 'a');
        java.io.PrintStream printStream40 = printStream6.append((java.lang.CharSequence) "CA");
        java.io.PrintStream printStream43 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream43.println((float) 100L);
        printStream43.println((float) 10L);
        byte[] byteArray52 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        printStream43.write(byteArray52);
        java.io.PrintStream printStream54 = new java.io.PrintStream((java.io.OutputStream) printStream43);
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.getDefault(category55);
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = locale57.getDisplayName();
        boolean boolean59 = locale57.hasExtensions();
        java.util.Locale.setDefault(category55, locale57);
        java.util.Locale locale61 = java.util.Locale.getDefault(category55);
        java.util.Locale locale62 = java.util.Locale.getDefault(category55);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray65 = mathException64.getSuppressed();
        java.io.PrintStream printStream66 = printStream43.format(locale62, "", (java.lang.Object[]) throwableArray65);
        java.io.PrintStream printStream67 = printStream6.printf("ZXZ", (java.lang.Object[]) throwableArray65);
        java.io.PrintStream printStream69 = new java.io.PrintStream("ko-KR");
        printStream69.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream69, false);
        java.io.PrintStream printStream74 = printStream69.append((java.lang.CharSequence) "en");
        printStream69.print((int) ' ');
        printStream69.println((double) 100.0f);
        java.io.PrintStream printStream80 = new java.io.PrintStream("ko-KR");
        printStream80.close();
        java.io.PrintWriter printWriter83 = new java.io.PrintWriter((java.io.OutputStream) printStream80, false);
        java.io.PrintWriter printWriter84 = new java.io.PrintWriter((java.io.Writer) printWriter83);
        char[] charArray87 = new char[] { ' ', 'x' };
        printWriter84.write(charArray87);
        printStream69.print(charArray87);
        printStream6.println(charArray87);
        // The following exception was thrown during execution in test generation
        try {
            printWriter4.write(charArray87, (-1), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100, -1, 10, 1]");
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category55.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English" + "'", str58, "English");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[ , x]");
    }

    @Test
    public void test09212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09212");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YXY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        java.lang.String str2 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA1();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "YXY" + "'", str2, "YXY");
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
    }

    @Test
    public void test09213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09213");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("French", (double) 1.0f);
        double double3 = languageRange2.getWeight();
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        char[] charArray12 = new char[] { ' ', 'x' };
        printWriter9.write(charArray12);
        printWriter9.println(true);
        printWriter9.println(9610.932890332206d);
        printWriter9.write("Italy");
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double27 = rotation26.getQ1();
        double double28 = rotation26.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D38 = vector3D30.subtract((double) 10L, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D39 = rotation26.applyInverseTo(vector3D37);
        org.apache.commons.math.geometry.Rotation rotation45 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray46 = rotation45.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D53, (double) (byte) 100, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D50, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D58 = rotation45.applyInverseTo(vector3D50);
        double double59 = rotation45.getQ0();
        org.apache.commons.math.geometry.Rotation rotation60 = rotation26.applyInverseTo(rotation45);
        double double61 = rotation26.getQ3();
        double[][] doubleArray62 = rotation26.getMatrix();
        java.io.PrintWriter printWriter63 = printWriter9.printf("\u5fb7\u6587", (java.lang.Object[]) doubleArray62);
        boolean boolean64 = languageRange2.equals((java.lang.Object) printWriter9);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , x]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 52.0d + "'", double59 == 52.0d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test09214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09214");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = printStream1.append(' ');
        printStream1.print((long) 'a');
        printStream1.write((int) (short) 10);
        printStream1.print(false);
        printStream1.write((int) (short) 100);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test09215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09215");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("ZYX");
        java.util.Locale.Builder builder10 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.setLanguageTag("tw_US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: tw_US [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09216");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.write((int) (short) 10);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15, true);
        printWriter19.print((double) 'u');
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale.setDefault(category23, locale25);
        java.util.Locale.setDefault(category22, locale25);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale30);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = locale32.getDisplayScript(locale33);
        java.lang.String str35 = locale30.getDisplayLanguage(locale33);
        java.lang.String str37 = locale30.getExtension('a');
        java.util.Set<java.lang.String> strSet38 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category22, locale30);
        java.util.Locale locale40 = java.util.Locale.getDefault(category22);
        java.lang.String str41 = locale40.getDisplayCountry();
        java.io.PrintStream printStream46 = new java.io.PrintStream("ko-KR");
        printStream46.close();
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream46, false);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.Writer) printWriter49);
        char[] charArray53 = new char[] { ' ', 'x' };
        printWriter50.write(charArray53);
        java.util.Locale locale55 = java.util.Locale.ENGLISH;
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale55.getDisplayCountry(locale56);
        java.lang.String str58 = locale55.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation65 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray66 = rotation65.getMatrix();
        java.io.PrintWriter printWriter67 = printWriter50.format(locale55, "YZY", (java.lang.Object[]) doubleArray66);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException68 = new org.apache.commons.math.geometry.NotARotationMatrixException("en", (java.lang.Object[]) doubleArray66);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("XYZ", (java.lang.Object[]) doubleArray66);
        java.io.PrintWriter printWriter70 = printWriter19.printf(locale40, "", (java.lang.Object[]) doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation(doubleArray66, (-0.6655420184408231d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u97d3\u6587" + "'", str35, "\u97d3\u6587");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str41, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[ , x]");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "en" + "'", str58, "en");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(printWriter70);
    }

    @Test
    public void test09217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09217");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream4, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        char[] charArray13 = new char[] { '4', 'a', ' ', ' ' };
        printWriter7.write(charArray13);
        printStream1.print(charArray13);
        java.lang.CharSequence charSequence16 = null;
        java.io.PrintStream printStream17 = printStream1.append(charSequence16);
        printStream17.println('a');
        printStream17.write((int) '4');
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test09218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09218");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("ko-kr");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("italian-x-lvariant-CHN");
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder11 = builder6.setVariant("");
        java.util.Locale.Builder builder12 = builder6.clearExtensions();
        java.util.Locale.Builder builder13 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: English (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09219");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D18, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation5.applyInverseTo(vector3D18);
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double33 = rotation32.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double40 = rotation39.getQ0();
        org.apache.commons.math.geometry.Rotation rotation41 = rotation32.applyTo(rotation39);
        org.apache.commons.math.geometry.Rotation rotation42 = rotation32.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder43 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation(rotationOrder43, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation48 = rotation42.applyTo(rotation47);
        double double49 = rotation42.getAngle();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation5.applyInverseTo(rotation42);
        double double51 = rotation50.getQ2();
        double double52 = rotation50.getQ3();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertNotNull(rotation42);
        org.junit.Assert.assertNotNull(rotationOrder43);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1040.0d) + "'", double52 == (-1040.0d));
    }

    @Test
    public void test09220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09220");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) 0L, (-0.8230677854004599d), 0.3799892837204258d, 0.6311497403463439d, true);
    }

    @Test
    public void test09221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09221");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\uc601\uc5b4 (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????? (org.apache.commons.math.mathexception)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09222");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.print((-0.9315584380853263d));
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.parse("zh", strMap7);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale9);
        java.lang.String str11 = locale9.getDisplayScript();
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleAttributes();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.parse("ja", strMap14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList15, strMap16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList15, strMap18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale23, locale24, locale25, locale26, locale27, locale28, locale30, locale31, locale32 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList34, filteringMode36);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter(languageRangeList15, (java.util.Collection<java.util.Locale>) localeList34, filteringMode38);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strSet12, filteringMode38);
        printStream1.print((java.lang.Object) languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + filteringMode36 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode36.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test09223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09223");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        printWriter4.println(false);
        printWriter4.close();
        printWriter4.print((int) (short) 0);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        printWriter21.print((long) (short) 100);
        printWriter21.print((int) 'u');
        java.io.PrintStream printStream27 = new java.io.PrintStream("ko-KR");
        printStream27.close();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream27, false);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter30);
        printWriter31.print((long) (short) 100);
        printWriter31.print((int) 'u');
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        printWriter40.println((float) (byte) -1);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter40, true);
        java.lang.String[] strArray47 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter48 = printWriter40.printf("KR", (java.lang.Object[]) strArray47);
        java.io.PrintStream printStream50 = new java.io.PrintStream("ko-KR");
        printStream50.close();
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream50, false);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.Writer) printWriter53);
        char[] charArray57 = new char[] { ' ', 'x' };
        printWriter54.write(charArray57);
        printWriter40.println(charArray57);
        printWriter31.print(charArray57);
        printWriter21.write(charArray57);
        printWriter4.println(charArray57);
        printWriter4.println((int) '#');
        printWriter4.println((int) ' ');
        printWriter4.print(false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , x]");
    }

    @Test
    public void test09224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09224");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(2.7474391337754565d, 0.12224382244068602d, (-43.364388609539944d));
    }

    @Test
    public void test09225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09225");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        boolean boolean86 = printStream1.checkError();
        boolean boolean87 = printStream1.checkError();
        printStream1.println(0);
        printStream1.println((-5.440211108893697d));
        java.io.PrintStream printStream92 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09226");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.close();
        java.util.Locale locale8 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter5.println((java.lang.Object) locale8);
        boolean boolean10 = printWriter5.checkError();
        printWriter5.print((float) 1);
        org.junit.Assert.assertEquals(locale8.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test09227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09227");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D9 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D3, (double) 0L, vector3D8);
        org.apache.commons.math.geometry.Vector3D vector3D14 = new org.apache.commons.math.geometry.Vector3D(52.0d, Double.NaN, (double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D15 = vector3D9.subtract(0.9999500037496876d, vector3D14);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        printWriter20.print((double) (byte) 100);
        printWriter20.println();
        printWriter20.println('#');
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double33 = rotation32.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotation32.getAxis();
        printWriter20.print((java.lang.Object) rotation32);
        org.apache.commons.math.geometry.Rotation rotation36 = rotation32.revert();
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D40 = vector3D39.negate();
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D55, (double) (byte) 100, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D52, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D68 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D68, (double) (byte) 100, vector3D70);
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D75 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D73, (double) (byte) 100, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D77 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D70, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D78 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D57, (double) (byte) 1, vector3D65, (double) (short) 100, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D79 = vector3D57.negate();
        org.apache.commons.math.geometry.Vector3D vector3D80 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D57);
        double double81 = vector3D57.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D82 = vector3D45.subtract((double) (short) -1, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D83 = vector3D39.add((double) (byte) 0, vector3D57);
        double double84 = vector3D83.getY();
        org.apache.commons.math.geometry.Vector3D vector3D85 = rotation36.applyInverseTo(vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D86 = vector3D14.add(vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D87 = vector3D14.orthogonal();
        double double88 = vector3D87.getDelta();
        org.apache.commons.math.geometry.Rotation rotation90 = new org.apache.commons.math.geometry.Rotation(vector3D87, 614795.4656673663d);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-0.13715201283077028d) + "'", double84 == (-0.13715201283077028d));
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test09228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09228");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ (KO_KR)");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test09229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09229");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Italy");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.util.Locale.LanguageRange languageRange5 = new java.util.Locale.LanguageRange("German");
        java.lang.String str6 = languageRange5.getRange();
        java.lang.String str7 = languageRange5.getRange();
        java.lang.String str8 = languageRange5.getRange();
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("French");
        double double11 = languageRange10.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange5, languageRange10 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.parse("zho");
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayLanguage();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale38, locale39, locale40, locale41, locale42, locale43, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList49, filteringMode51);
        java.lang.String[] strArray56 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.lang.String str59 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList57);
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList57);
        java.util.Collection<java.util.Locale> localeCollection61 = null;
        java.util.Locale locale62 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, localeCollection61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap63);
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale65);
        java.lang.String str67 = locale65.getDisplayScript();
        java.util.Set<java.lang.String> strSet68 = locale65.getUnicodeLocaleAttributes();
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet68);
        java.io.PrintStream printStream71 = new java.io.PrintStream("ko-KR");
        printStream71.close();
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter((java.io.OutputStream) printStream71, false);
        java.io.PrintWriter printWriter75 = new java.io.PrintWriter((java.io.Writer) printWriter74);
        printWriter75.println('a');
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder80 = builder78.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder82 = builder78.setLanguage("ZXZ");
        java.util.Locale locale83 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder84 = builder78.setLocale(locale83);
        java.lang.Object[] objArray86 = null;
        java.io.PrintWriter printWriter87 = printWriter75.format(locale83, "TWN", objArray86);
        java.util.Set<java.lang.String> strSet88 = locale83.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet88, filteringMode89);
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags(languageRangeList16, (java.util.Collection<java.lang.String>) strList90);
        java.util.Locale.FilteringMode filteringMode92 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList90, filteringMode92);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap94 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList95 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap94);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "german" + "'", str6, "german");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "german" + "'", str7, "german");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "german" + "'", str8, "german");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode51.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertTrue("'" + filteringMode92 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode92.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNotNull(languageRangeList95);
    }

    @Test
    public void test09230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09230");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(1.7607845497297911d, 1.77144092136256d, 23.602352584634914d, (-52.0d), false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) 100.0f, (-8087.321164150444d), 0.2885878967731183d, 0.30340247626734895d, true);
        org.apache.commons.math.geometry.Rotation rotation13 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.RotationOrder rotationOrder14 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D15 = rotationOrder14.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotationOrder14.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D16.negate();
        org.apache.commons.math.geometry.Vector3D vector3D19 = vector3D17.scalarMultiply(0.3355849664247075d);
        org.apache.commons.math.geometry.Vector3D vector3D20 = vector3D17.negate();
        org.apache.commons.math.geometry.Vector3D vector3D21 = rotation5.applyTo(vector3D17);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.7607845497297911d + "'", double6 == 1.7607845497297911d);
        org.junit.Assert.assertNotNull(rotation13);
        org.junit.Assert.assertNotNull(rotationOrder14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
    }

    @Test
    public void test09231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09231");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("ko-kr");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.parse("italian-x-lvariant-CHN", strMap7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale12, locale13, locale14, locale15, locale16, locale17, locale19, locale20, locale21 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList23, filteringMode25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = locale31.getDisplayName();
        java.lang.String str34 = locale31.getScript();
        java.util.Set<java.lang.String> strSet35 = locale31.getUnicodeLocaleKeys();
        java.lang.String str36 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder41 = builder37.setLanguage("ZXZ");
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder43 = builder37.setLocale(locale42);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder45 = builder37.setLocale(locale44);
        java.util.Locale.Builder builder47 = builder37.setLanguage("fra");
        java.util.Locale locale48 = builder37.build();
        java.util.Locale locale49 = builder37.build();
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strSet50, filteringMode51);
        java.lang.String str53 = java.util.Locale.lookupTag(languageRangeList8, (java.util.Collection<java.lang.String>) strList52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList8, strMap54);
        java.util.Locale.Builder builder56 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder58 = builder56.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category59 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        boolean boolean61 = locale60.hasExtensions();
        java.util.Locale.setDefault(category59, locale60);
        java.util.Set<java.lang.String> strSet63 = locale60.getUnicodeLocaleAttributes();
        java.lang.String str65 = locale60.getExtension('x');
        java.util.Locale.Builder builder66 = builder56.setLocale(locale60);
        java.util.Locale.Builder builder68 = builder66.setLanguageTag("en");
        java.util.Locale.Builder builder69 = builder66.clearExtensions();
        java.util.Locale.Category category70 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale71 = java.util.Locale.getDefault(category70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.lang.String str73 = locale71.getDisplayScript(locale72);
        java.util.Locale.Builder builder74 = builder66.setLocale(locale72);
        java.util.Locale.Builder builder76 = builder66.setLanguageTag("German");
        java.util.Locale locale77 = builder66.build();
        java.lang.String str78 = locale77.getCountry();
        java.util.Set<java.lang.String> strSet79 = locale77.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strSet79);
        java.lang.String str81 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet79);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str32, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str33, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fra_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fra_CA");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode51.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category59.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + category70 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category70.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "german");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test09232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09232");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray10 = new char[] { '4', 'a', ' ', ' ' };
        printWriter4.write(charArray10);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.lang.String str16 = locale12.getDisplayLanguage(locale13);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintWriter printWriter40 = printWriter23.format(locale28, "YZY", (java.lang.Object[]) doubleArray39);
        java.io.PrintWriter printWriter41 = printWriter4.printf(locale13, "ko-KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream44 = new java.io.PrintStream("ko-KR");
        printStream44.close();
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream44, false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter47);
        printWriter47.println((float) (byte) -1);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter47, true);
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter55 = printWriter47.printf("KR", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream57 = new java.io.PrintStream("ko-KR");
        printStream57.close();
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream57, false);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter60);
        char[] charArray64 = new char[] { ' ', 'x' };
        printWriter61.write(charArray64);
        printWriter47.println(charArray64);
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.lang.String str69 = locale67.getDisplayScript(locale68);
        java.lang.String str70 = locale68.getVariant();
        java.lang.String[] strArray73 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray73);
        java.io.PrintWriter printWriter75 = printWriter47.printf(locale68, "English", (java.lang.Object[]) strArray73);
        java.io.PrintWriter printWriter76 = printWriter41.printf("\u97d3\u6587", (java.lang.Object[]) strArray73);
        java.io.PrintWriter printWriter77 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        java.io.PrintWriter printWriter79 = printWriter77.append('a');
        printWriter77.println('a');
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , x]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(printWriter79);
    }

    @Test
    public void test09233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09233");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale3.getDisplayCountry(locale10);
        java.util.Locale.setDefault(locale10);
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException23);
        java.lang.Throwable[] throwableArray26 = mathException23.getSuppressed();
        java.io.PrintStream printStream27 = printStream15.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray26);
        java.util.Locale locale29 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        printStream32.close();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream32, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter35);
        printWriter36.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation45 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray46 = rotation45.getMatrix();
        java.io.PrintWriter printWriter47 = printWriter36.format("en", (java.lang.Object[]) doubleArray46);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale48.getDisplayCountry(locale49);
        java.lang.String str51 = locale48.getLanguage();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray55 = mathException54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = mathException54.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException57 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray56);
        java.io.PrintWriter printWriter58 = printWriter36.format(locale48, "ZXZ", (java.lang.Object[]) throwableArray56);
        java.io.PrintStream printStream59 = printStream27.printf(locale29, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray56);
        java.util.Locale locale61 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleKeys();
        java.lang.String str63 = locale29.getDisplayVariant(locale61);
        java.lang.String str65 = locale61.getExtension('u');
        java.lang.String str66 = locale10.getDisplayName(locale61);
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str69 = locale68.toLanguageTag();
        java.lang.String str70 = locale68.getCountry();
        java.lang.String str71 = locale10.getDisplayName(locale68);
        java.util.Set<java.lang.Character> charSet72 = locale68.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertEquals(locale29.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en" + "'", str51, "en");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertEquals(locale61.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Japanese" + "'", str66, "Japanese");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "und" + "'", str69, "und");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Japanese" + "'", str71, "Japanese");
        org.junit.Assert.assertNotNull(charSet72);
    }

    @Test
    public void test09234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09234");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        java.lang.String str3 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA3();
        double double5 = vector3D4.getNorm();
        double double6 = vector3D4.getNorm();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotation18.getAxis();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation12.applyInverseTo(rotation18);
        org.apache.commons.math.geometry.Vector3D vector3D21 = rotation18.getAxis();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation(vector3D21, 0.04961248030775681d);
        org.apache.commons.math.geometry.Vector3D vector3D24 = vector3D21.orthogonal();
        double double25 = org.apache.commons.math.geometry.Vector3D.angle(vector3D4, vector3D21);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YZY" + "'", str3, "YZY");
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.5707963267948966d + "'", double25 == 1.5707963267948966d);
    }

    @Test
    public void test09235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09235");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("en_GB", (-0.9039814648607704d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-0.9039814648607704");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09236");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale10.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray21 = rotation20.getMatrix();
        java.io.PrintWriter printWriter22 = printWriter5.format(locale10, "YZY", (java.lang.Object[]) doubleArray21);
        printWriter22.print((-1L));
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.lang.String str26 = locale25.getScript();
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray31, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray36 = mathException35.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray31, (java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray38 = mathException35.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException39 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray38);
        java.lang.Throwable[] throwableArray40 = notARotationMatrixException39.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter22.printf(locale25, "CHN", (java.lang.Object[]) throwableArray40);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("\u97d3\u6587)");
        java.lang.String str44 = locale25.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale.Category category46 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.util.Locale.setDefault(category47, locale48);
        java.util.Locale.setDefault(category46, locale48);
        java.lang.String str52 = locale45.getDisplayVariant(locale48);
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleKeys();
        java.lang.String str55 = locale48.getDisplayCountry(locale53);
        boolean boolean56 = locale48.hasExtensions();
        java.lang.String str57 = locale48.getISO3Language();
        java.lang.String str58 = locale43.getDisplayVariant(locale48);
        java.lang.Object obj59 = locale43.clone();
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + category46 + "' != '" + java.util.Locale.Category.FORMAT + "'", category46.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.FORMAT + "'", category47.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "");
    }

    @Test
    public void test09237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09237");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA3();
        java.lang.String str2 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.RotationOrder rotationOrder5 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder5.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder5.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder5.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder5.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D10 = rotationOrder5.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D11 = vector3D3.subtract((-0.3959260554836696d), vector3D10);
        double double12 = vector3D11.getZ();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "XYZ" + "'", str2, "XYZ");
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(rotationOrder5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.3959260554836697d + "'", double12 == 1.3959260554836697d);
    }

    @Test
    public void test09238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09238");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray11 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray11, (java.lang.Throwable) mathException14);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException16 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray11);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException17 = new org.apache.commons.math.geometry.NotARotationMatrixException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray11);
        java.io.PrintWriter printWriter18 = printWriter5.printf("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray11);
        printWriter5.close();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test09239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09239");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.println((long) (byte) 10);
        printWriter12.write((int) (byte) 100);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter22.println((float) (byte) -1);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter30 = printWriter22.printf("KR", (java.lang.Object[]) strArray29);
        java.io.PrintWriter printWriter31 = printWriter12.format("", (java.lang.Object[]) strArray29);
        printWriter31.print((float) 1);
        java.io.PrintWriter printWriter35 = printWriter31.append((java.lang.CharSequence) "franc\350s");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter35);
    }

    @Test
    public void test09240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09240");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zxz (ko_kr)_FRAN\347AIS");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=zxz(ko_kr)_franc?ais");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09241");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getISO3Language();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str4 = locale0.getExtension('u');
        java.util.Set<java.lang.Character> charSet5 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ita" + "'", str1, "ita");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(charSet5);
    }

    @Test
    public void test09242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09242");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "anglais");
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.util.Locale locale19 = java.util.Locale.UK;
        java.lang.String[] strArray21 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream22 = printStream17.format(locale19, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream17, false);
        printStream17.println(10.0f);
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        printWriter33.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray43 = rotation42.getMatrix();
        java.io.PrintWriter printWriter44 = printWriter33.format("en", (java.lang.Object[]) doubleArray43);
        java.io.PrintStream printStream45 = printStream17.printf("YZY", (java.lang.Object[]) doubleArray43);
        java.io.PrintStream printStream47 = new java.io.PrintStream("ko-KR");
        printStream47.close();
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream47, false);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.Writer) printWriter50);
        char[] charArray54 = new char[] { ' ', 'x' };
        printWriter51.write(charArray54);
        printStream17.println(charArray54);
        printStream15.println(charArray54);
        printStream15.println("zh_TW");
        printStream15.println(' ');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ , x]");
    }

    @Test
    public void test09243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09243");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print((int) ' ');
        printStream1.println((double) 100.0f);
        printStream1.print(' ');
        java.lang.String[] strArray17 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray17, (java.lang.Throwable) mathException20);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException22 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray17);
        java.io.PrintStream printStream23 = printStream1.format("und", (java.lang.Object[]) strArray17);
        boolean boolean24 = printStream1.checkError();
        printStream1.print((double) 1.0f);
        printStream1.println(100);
        java.io.PrintStream printStream30 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        printStream30.flush();
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream38 = printStream33.format(locale35, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray37);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 1, (byte) -1 };
        printStream40.write(byteArray46);
        printStream30.write(byteArray46);
        printStream1.write(byteArray46);
        printStream1.println(1.3660691819214432d);
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.lang.String str53 = locale52.getDisplayName();
        boolean boolean54 = locale52.hasExtensions();
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale52.getDisplayVariant(locale55);
        java.util.Set<java.lang.Character> charSet57 = locale55.getExtensionKeys();
        java.lang.String str58 = locale55.getISO3Language();
        java.lang.Object[] objArray60 = null;
        java.io.PrintStream printStream61 = printStream1.printf(locale55, "Canada", objArray60);
        printStream1.print('a');
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 1, -1]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u82f1\u8a9e" + "'", str53, "\u82f1\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "jpn" + "'", str58, "jpn");
        org.junit.Assert.assertNotNull(printStream61);
    }

    @Test
    public void test09244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09244");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(0.009858925131239106d, 308.04444473588296d, (-1.43598449E8d));
    }

    @Test
    public void test09245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09245");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.0d, 52.0d, (double) (byte) 1);
        double double5 = rotation4.getQ0();
        org.apache.commons.math.geometry.Rotation rotation6 = rotation4.revert();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ3();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation12.revert();
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D20, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D38, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D25, (double) (byte) 1, vector3D33, (double) (short) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D25.negate();
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D51, (double) (byte) 100, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D56, (double) (byte) 100, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D53, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D63, (double) (byte) 100, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D67 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D53, (double) 0.0f, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D69 = vector3D67.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D48, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D71 = rotation14.applyInverseTo(vector3D70);
        org.apache.commons.math.geometry.Rotation rotation77 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double78 = rotation77.getQ1();
        double double79 = rotation77.getQ3();
        org.apache.commons.math.geometry.Rotation rotation80 = rotation14.applyTo(rotation77);
        double[][] doubleArray81 = rotation14.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation82 = rotation4.applyInverseTo(rotation14);
        org.apache.commons.math.geometry.Rotation rotation83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation84 = rotation14.applyTo(rotation83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.567725116225552d + "'", double5 == 0.567725116225552d);
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.0d + "'", double79 == 10.0d);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(rotation82);
    }

    @Test
    public void test09246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09246");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\uc911\uad6d\uc5b4");
        printWriter1.print('u');
    }

    @Test
    public void test09247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09247");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) (byte) 1, (double) 1.0f, 0.0d, 1.0d, true);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double19 = rotation18.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double26 = rotation25.getQ0();
        org.apache.commons.math.geometry.Rotation rotation27 = rotation18.applyTo(rotation25);
        double double28 = rotation18.getQ0();
        double double29 = rotation18.getQ0();
        double[][] doubleArray30 = rotation18.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation31 = rotation12.applyInverseTo(rotation18);
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation(0.567725116225552d, (-1.63942416E8d), (-0.6692079985630428d), (double) (byte) -1, false);
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D41, (double) 0L, vector3D46);
        double double48 = vector3D47.getY();
        double double49 = vector3D47.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D50 = rotation37.applyTo(vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D51 = rotation18.applyInverseTo(vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = vector3D5.add((-83.83921885398257d), vector3D50);
        double double53 = vector3D52.getAlpha();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.1415926522785314d + "'", double53 == 3.1415926522785314d);
    }

    @Test
    public void test09248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09248");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray15 = rotation14.getMatrix();
        java.io.PrintWriter printWriter16 = printWriter5.format("en", (java.lang.Object[]) doubleArray15);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getLanguage();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = mathException23.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException26 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray25);
        java.io.PrintWriter printWriter27 = printWriter5.format(locale17, "ZXZ", (java.lang.Object[]) throwableArray25);
        printWriter5.println('#');
        printWriter5.flush();
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray43 = mathException40.getSuppressed();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("ko_KR", (java.lang.Object[]) throwableArray43);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException45 = new org.apache.commons.math.geometry.NotARotationMatrixException("TW", (java.lang.Object[]) throwableArray43);
        java.lang.String str46 = notARotationMatrixException45.getPattern();
        java.lang.String str47 = notARotationMatrixException45.getPattern();
        java.lang.Object[] objArray48 = notARotationMatrixException45.getArguments();
        java.io.PrintWriter printWriter49 = printWriter5.format("CAN", objArray48);
        printWriter49.print("fr");
        java.io.PrintWriter printWriter53 = printWriter49.append((java.lang.CharSequence) "org.apache.commons.math.geometry.NotARotationMatrixException: ja");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "TW" + "'", str46, "TW");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "TW" + "'", str47, "TW");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter53);
    }

    @Test
    public void test09249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09249");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) (byte) 100, (-0.0d), (double) (byte) 0, (double) 1, true);
        double double6 = rotation5.getQ0();
        double double7 = rotation5.getQ1();
        double double8 = rotation5.getQ3();
        double double9 = rotation5.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9999500037496876d + "'", double6 == 0.9999500037496876d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.0d) + "'", double7 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.009999500037496875d + "'", double8 == 0.009999500037496875d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test09250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09250");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        printStream90.println(false);
        printStream90.println(true);
        printStream90.print('a');
        printStream90.print(0.320941660983827d);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test09251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09251");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray10 = new char[] { '4', 'a', ' ', ' ' };
        printWriter4.write(charArray10);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.lang.String str16 = locale12.getDisplayLanguage(locale13);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintWriter printWriter40 = printWriter23.format(locale28, "YZY", (java.lang.Object[]) doubleArray39);
        java.io.PrintWriter printWriter41 = printWriter4.printf(locale13, "ko-KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream44 = new java.io.PrintStream("ko-KR");
        printStream44.close();
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream44, false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter47);
        printWriter47.println((float) (byte) -1);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter47, true);
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter55 = printWriter47.printf("KR", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream57 = new java.io.PrintStream("ko-KR");
        printStream57.close();
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream57, false);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter60);
        char[] charArray64 = new char[] { ' ', 'x' };
        printWriter61.write(charArray64);
        printWriter47.println(charArray64);
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.lang.String str69 = locale67.getDisplayScript(locale68);
        java.lang.String str70 = locale68.getVariant();
        java.lang.String[] strArray73 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray73);
        java.io.PrintWriter printWriter75 = printWriter47.printf(locale68, "English", (java.lang.Object[]) strArray73);
        java.io.PrintWriter printWriter76 = printWriter41.printf("\u97d3\u6587", (java.lang.Object[]) strArray73);
        printWriter76.println((float) 10L);
        printWriter76.flush();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , x]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printWriter76);
    }

    @Test
    public void test09252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09252");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream("ko-KR");
        printStream10.close();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String[] strArray14 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream15 = printStream10.format(locale12, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray14);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream10, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        printWriter18.print((float) (short) 10);
        printWriter4.println((java.lang.Object) printWriter18);
        printWriter4.write("ZXZ_FRAN\347AIS");
        boolean boolean24 = printWriter4.checkError();
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test09253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09253");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.println((float) (-1));
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(0L);
        printStream1.println("en-CA");
        printStream1.print((int) 'u');
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale.setDefault(category11, locale14);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.lang.String str20 = locale14.getDisplayScript(locale19);
        java.util.Set<java.lang.Character> charSet21 = locale14.getExtensionKeys();
        java.lang.String[] strArray26 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ZXZ", (java.lang.Throwable) mathException29);
        java.lang.Throwable[] throwableArray32 = mathException29.getSuppressed();
        java.lang.Object[] objArray33 = mathException29.getArguments();
        java.io.PrintStream printStream34 = printStream1.format(locale14, "en-ca_TWN_ko-KR", objArray33);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(printStream34);
    }

    @Test
    public void test09254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09254");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("hi!");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test09255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09255");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder9 = builder4.setVariant("");
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("en-CA");
        java.util.Locale.Builder builder13 = builder11.setLanguage("DEU");
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("xzy");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setVariant("xyz");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: xyz [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test09256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09256");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException2 = new org.apache.commons.math.geometry.NotARotationMatrixException("en-CA", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09257");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str2 = rotationOrder1.toString();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder1.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D5 = vector3D3.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation19 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double20 = rotation19.getQ0();
        org.apache.commons.math.geometry.Rotation rotation21 = rotation12.applyTo(rotation19);
        double double22 = rotation12.getQ0();
        double double23 = rotation12.getQ0();
        double[][] doubleArray24 = rotation12.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotation12.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D29.subtract((double) 10L, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D49 = vector3D41.subtract((double) 10L, vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D50 = vector3D41.negate();
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D52, (double) (byte) 100, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D60 = vector3D52.subtract((double) 10L, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D61 = vector3D41.subtract(vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D3, (double) 10L, vector3D25, 623129.1985591752d, vector3D38, 0.0d, vector3D59);
        org.apache.commons.math.geometry.RotationOrder rotationOrder63 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D64 = rotationOrder63.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotationOrder63.getA2();
        org.apache.commons.math.geometry.Rotation rotation71 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D72 = rotation71.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D82 = vector3D74.subtract((double) 10L, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D84 = vector3D74.scalarMultiply((double) 0);
        org.apache.commons.math.geometry.Vector3D vector3D85 = vector3D72.subtract(vector3D74);
        org.apache.commons.math.geometry.Rotation rotation86 = new org.apache.commons.math.geometry.Rotation(vector3D65, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D87 = vector3D65.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D88 = vector3D59.subtract(vector3D65);
        double double89 = vector3D59.getY();
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ZXZ" + "'", str2, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(rotationOrder63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-0.13715201283077028d) + "'", double89 == (-0.13715201283077028d));
    }

    @Test
    public void test09258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09258");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        printWriter9.println();
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter9, false);
        printWriter9.println((float) 'a');
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter9);
    }

    @Test
    public void test09259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09259");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.MathException: ZXZ");
        java.io.PrintWriter printWriter3 = printWriter1.append('#');
        java.io.PrintWriter printWriter5 = printWriter1.append('4');
        printWriter5.write((int) (byte) 100);
        printWriter5.println((int) 'a');
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(printWriter5);
    }

    @Test
    public void test09260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09260");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("English");
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.lang.String str10 = locale9.getISO3Language();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Locale.setDefault(locale9);
        java.util.Locale.Builder builder13 = builder8.setLocale(locale9);
        java.util.Locale.Builder builder14 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setVariant("org.apache.commons.math.MathException: org.apache.commons.math.MathException: United Kingdom");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: org.apache.commons.math.MathException: org.apache.commons.math.MathException: United Kingdom [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ita" + "'", str10, "ita");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test09261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09261");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder8 = builder6.setLanguage("KR");
        java.util.Locale.Builder builder10 = builder6.setLanguage("KOR");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale15 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale.setDefault(category16, locale17);
        java.lang.String str20 = locale15.getDisplayName(locale17);
        java.lang.String str21 = locale17.getDisplayName();
        java.lang.String str22 = locale12.getDisplayLanguage(locale17);
        java.lang.String str23 = locale11.getDisplayVariant(locale12);
        java.lang.String str24 = locale12.getISO3Language();
        java.lang.String str25 = locale12.toLanguageTag();
        java.util.Set<java.lang.String> strSet26 = locale12.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "kor_DE");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587)" + "'", str20, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "eng" + "'", str24, "eng");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en-CA" + "'", str25, "en-CA");
        org.junit.Assert.assertNotNull(strSet26);
    }

    @Test
    public void test09262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09262");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        java.lang.String str2 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test09263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09263");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        printStream1.println((float) (byte) 1);
        java.io.PrintStream printStream17 = printStream1.append(' ');
        printStream17.print((float) 100L);
        printStream17.print((float) '4');
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test09264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09264");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream4, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        char[] charArray13 = new char[] { '4', 'a', ' ', ' ' };
        printWriter7.write(charArray13);
        printStream1.print(charArray13);
        java.lang.CharSequence charSequence16 = null;
        java.io.PrintStream printStream17 = printStream1.append(charSequence16);
        java.io.PrintStream printStream19 = printStream1.append('a');
        java.io.PrintStream printStream21 = printStream19.append((java.lang.CharSequence) "eng");
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.lang.String str24 = locale23.getDisplayLanguage();
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Locale.setDefault(category26, locale27);
        java.util.Locale.setDefault(category22, locale27);
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayLanguage();
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale.setDefault(category31, locale33);
        java.util.Locale.setDefault(category22, locale33);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        java.lang.String str43 = locale38.getDisplayLanguage(locale40);
        java.util.Locale locale44 = locale38.stripExtensions();
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.lang.String str46 = locale33.getDisplayName(locale44);
        java.lang.String[] strArray49 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray49, (java.lang.Throwable) mathException51);
        java.io.PrintStream printStream53 = printStream19.printf(locale33, "\uc601\uc5b4\uc601\uad6d)", (java.lang.Object[]) strArray49);
        printStream19.println(true);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(printStream53);
    }

    @Test
    public void test09265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09265");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("TW", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
    }

    @Test
    public void test09266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09266");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-0.0d), (double) 100, 10.0d, (double) (-1), false);
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream7, false);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter10);
        printWriter10.print((double) (byte) 100);
        printWriter10.println();
        printWriter10.println('#');
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D24 = rotation22.getAxis();
        printWriter10.print((java.lang.Object) rotation22);
        org.apache.commons.math.geometry.Rotation rotation26 = rotation22.revert();
        org.apache.commons.math.geometry.Rotation rotation27 = rotation5.applyInverseTo(rotation26);
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D38, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotation33.applyInverseTo(vector3D38);
        double double47 = rotation33.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation33.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((-1.0d), (double) (byte) 100);
        org.apache.commons.math.geometry.Rotation rotation53 = new org.apache.commons.math.geometry.Rotation(vector3D51, (double) 100L);
        org.apache.commons.math.geometry.Rotation rotation59 = new org.apache.commons.math.geometry.Rotation((double) 10, (double) 1.0f, (double) 0L, 1.4070751110264852d, true);
        org.apache.commons.math.geometry.Rotation rotation60 = rotation53.applyTo(rotation59);
        double double61 = rotation53.getAngle();
        org.apache.commons.math.geometry.Rotation rotation62 = rotation33.applyTo(rotation53);
        org.apache.commons.math.geometry.Rotation rotation63 = rotation27.applyInverseTo(rotation53);
        double double64 = rotation53.getQ1();
        double double65 = rotation53.getQ1();
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.5309649148733836d + "'", double61 == 0.5309649148733836d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.12224382244068602d + "'", double64 == 0.12224382244068602d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.12224382244068602d + "'", double65 == 0.12224382244068602d);
    }

    @Test
    public void test09267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09267");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        java.util.Locale locale15 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getLanguage();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter22.format(locale34, "ZXZ", (java.lang.Object[]) throwableArray42);
        java.io.PrintStream printStream45 = printStream13.printf(locale15, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray42);
        printStream13.println(0.0f);
        printStream13.println();
        printStream13.println("\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertEquals(locale15.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test09268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09268");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        java.lang.String str2 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 12804.0d, (-1.63942416E8d), (-0.2547192657780798d));
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "XYX" + "'", str2, "XYX");
        org.junit.Assert.assertNotNull(vector3D3);
    }

    @Test
    public void test09269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09269");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = printWriter11.append(' ');
        printWriter13.print((int) (byte) 10);
        printWriter13.print(true);
        printWriter13.write("x-lvariant-zxz");
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test09270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09270");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("en");
        java.util.Locale.Builder builder13 = builder10.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.setVariant("Germany");
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale.setDefault(category17, locale18);
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript();
        java.lang.String str23 = locale18.getDisplayName();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder28 = builder24.setLanguage("ZXZ");
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder30 = builder24.setLocale(locale29);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder32 = builder24.setLocale(locale31);
        java.lang.String str33 = locale31.getDisplayCountry();
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleKeys();
        boolean boolean35 = locale31.hasExtensions();
        java.lang.String str36 = locale18.getDisplayVariant(locale31);
        java.lang.String str37 = locale18.getDisplayVariant();
        java.util.Locale.Builder builder38 = builder16.setLocale(locale18);
        java.lang.String str39 = locale18.toLanguageTag();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Canada" + "'", str33, "Canada");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "und" + "'", str39, "und");
    }

    @Test
    public void test09271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09271");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        double double15 = rotation5.getQ0();
        double double16 = rotation5.getQ0();
        double double17 = rotation5.getQ0();
        double double18 = rotation5.getQ2();
        double[][] doubleArray19 = rotation5.getMatrix();
        double[][] doubleArray20 = rotation5.getMatrix();
        double double21 = rotation5.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
    }

    @Test
    public void test09272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09272");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale12 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale.setDefault(category13, locale14);
        java.lang.String str17 = locale12.getDisplayName(locale14);
        java.lang.String str18 = locale14.getDisplayName();
        java.lang.String str19 = locale9.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder20 = builder7.setLocale(locale14);
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder23 = builder20.addUnicodeLocaleAttribute("italian");
        java.util.Locale.Builder builder24 = builder20.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u97d3\u6587)" + "'", str17, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English" + "'", str18, "English");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English" + "'", str19, "English");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test09273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09273");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("fr");
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale locale10 = builder6.build();
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale10.getDisplayScript(locale11);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test09274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09274");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        java.io.PrintWriter printWriter92 = new java.io.PrintWriter((java.io.OutputStream) printStream90, true);
        java.io.PrintStream printStream93 = new java.io.PrintStream((java.io.OutputStream) printStream90);
        printStream90.print((long) '4');
        printStream90.println(false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test09275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09275");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotation5.getAxis();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation22 = rotation21.revert();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation22.revert();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertNotNull(rotation22);
        org.junit.Assert.assertNotNull(rotation23);
    }

    @Test
    public void test09276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09276");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream3 = printStream1.append(' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        char[] charArray12 = new char[] { ' ', 'x' };
        printWriter9.write(charArray12);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.lang.String str17 = locale14.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray25 = rotation24.getMatrix();
        java.io.PrintWriter printWriter26 = printWriter9.format(locale14, "YZY", (java.lang.Object[]) doubleArray25);
        printWriter26.print((-1L));
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = locale29.getScript();
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException39);
        java.lang.Throwable[] throwableArray42 = mathException39.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray42);
        java.lang.Throwable[] throwableArray44 = notARotationMatrixException43.getSuppressed();
        java.io.PrintWriter printWriter45 = printWriter26.printf(locale29, "CHN", (java.lang.Object[]) throwableArray44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("\u97d3\u6587)");
        java.lang.String str48 = locale29.getDisplayVariant(locale47);
        java.lang.String[] strArray51 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray51);
        java.lang.Object[] objArray53 = mathException52.getArguments();
        java.io.PrintStream printStream54 = printStream3.format(locale47, "\u97d3\u6587)", objArray53);
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.io.PrintStream printStream59 = new java.io.PrintStream("ko-KR");
        printStream59.close();
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.OutputStream) printStream59, false);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.Writer) printWriter62);
        char[] charArray66 = new char[] { ' ', 'x' };
        printWriter63.write(charArray66);
        printWriter63.println(true);
        printWriter63.println(1);
        printWriter63.print((float) ' ');
        java.io.PrintWriter printWriter75 = printWriter63.append((java.lang.CharSequence) "\uce90\ub098\ub2e4");
        java.lang.Throwable throwable77 = null;
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException(throwable77);
        java.lang.String[] strArray80 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray80);
        mathException78.addSuppressed((java.lang.Throwable) mathException81);
        java.lang.Throwable[] throwableArray83 = mathException81.getSuppressed();
        java.io.PrintWriter printWriter84 = printWriter75.printf("org.apache.commons.math.MathException: de_DE", (java.lang.Object[]) throwableArray83);
        java.io.PrintStream printStream85 = printStream54.format(locale55, "zxz_FRAN\347AIS", (java.lang.Object[]) throwableArray83);
        printStream85.println('x');
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , x]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(printWriter84);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test09277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09277");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.ZYX;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.RotationOrder rotationOrder3 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder3.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder3.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder3.getA3();
        java.lang.String str7 = rotationOrder3.toString();
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder3.getA2();
        double double9 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D2, vector3D8);
        org.apache.commons.math.geometry.RotationOrder rotationOrder10 = org.apache.commons.math.geometry.RotationOrder.YXY;
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotationOrder10.getA1();
        java.lang.String str12 = rotationOrder10.toString();
        org.apache.commons.math.geometry.Vector3D vector3D13 = rotationOrder10.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D28, (double) (byte) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D25, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D35, (double) (byte) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D46, (double) (byte) 100, vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D43, vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D30, (double) (byte) 1, vector3D38, (double) (short) 100, vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D52 = vector3D30.negate();
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D30);
        double double54 = vector3D30.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D55 = vector3D18.subtract((double) (short) -1, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D13.subtract((-0.7035975447302918d), vector3D55);
        org.apache.commons.math.geometry.RotationOrder rotationOrder57 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str58 = rotationOrder57.toString();
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotationOrder57.getA2();
        org.apache.commons.math.geometry.Rotation rotation63 = new org.apache.commons.math.geometry.Rotation(rotationOrder57, (-0.7035975447302918d), (double) '#', (-0.09950371902099892d));
        org.apache.commons.math.geometry.Rotation rotation69 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D71, (double) (byte) 100, vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D75 = rotation69.applyTo(vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D76 = vector3D71.negate();
        org.apache.commons.math.geometry.Vector3D vector3D77 = rotation63.applyInverseTo(vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D78 = vector3D13.subtract(vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D79 = vector3D8.subtract(vector3D13);
        org.apache.commons.math.geometry.Rotation rotation81 = new org.apache.commons.math.geometry.Rotation(vector3D8, 2.54832090734599d);
        org.apache.commons.math.geometry.RotationOrder rotationOrder83 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation87 = new org.apache.commons.math.geometry.Rotation(rotationOrder83, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D88 = rotationOrder83.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D89 = rotationOrder83.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D90 = rotationOrder83.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D91 = new org.apache.commons.math.geometry.Vector3D(0.567725116225552d, vector3D90);
        org.apache.commons.math.geometry.Vector3D vector3D92 = rotation81.applyInverseTo(vector3D91);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(rotationOrder3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "XZY" + "'", str7, "XZY");
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "YXY" + "'", str12, "YXY");
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(rotationOrder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "YZY" + "'", str58, "YZY");
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(rotationOrder83);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D92);
    }

    @Test
    public void test09278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09278");
        java.lang.String[] strArray4 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray4);
        java.lang.Object[] objArray6 = mathException5.getArguments();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ja", objArray6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("\u97d3\u6587");
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("und", objArray6, (java.lang.Throwable) mathException9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR", objArray6);
        java.lang.Object[] objArray12 = mathException11.getArguments();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter19.println((float) (byte) -1);
        java.lang.String[] strArray25 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray25, (java.lang.Throwable) mathException27);
        java.io.PrintWriter printWriter29 = printWriter19.printf("it", (java.lang.Object[]) strArray25);
        java.io.PrintWriter printWriter31 = printWriter29.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.io.PrintWriter printWriter33 = printWriter29.append((java.lang.CharSequence) "Italian");
        java.io.PrintStream printStream36 = new java.io.PrintStream("ko-KR");
        printStream36.close();
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream36, false);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.Writer) printWriter39);
        char[] charArray43 = new char[] { ' ', 'x' };
        printWriter40.write(charArray43);
        printWriter40.write((int) (byte) 1);
        printWriter40.print((int) (short) 0);
        printWriter40.println((float) 1);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        java.lang.Object[] objArray54 = mathException52.getArguments();
        java.io.PrintWriter printWriter55 = printWriter40.format("Chinese (Taiwan)", objArray54);
        java.io.PrintWriter printWriter56 = printWriter29.printf("\uce90\ub098\ub2e4", objArray54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray58 = mathException57.getSuppressed();
        java.lang.Object[] objArray59 = mathException57.getArguments();
        java.lang.Object[] objArray60 = mathException57.getArguments();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("\u52a0\u62ff\u5927", objArray54, (java.lang.Throwable) mathException57);
        mathException13.addSuppressed((java.lang.Throwable) mathException57);
        java.lang.String str63 = mathException13.toString();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR" + "'", str63, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR");
    }

    @Test
    public void test09279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09279");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("ko-kr");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("italian-x-lvariant-CHN");
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder11 = builder6.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder6.setLocale(locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test09280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09280");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.flush();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter19.flush();
        printWriter19.println((int) 'x');
        printWriter19.write("Chinese (China)", (int) 'x', 0);
        printWriter19.println(' ');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test09281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09281");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println(' ');
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.write((int) (short) -1);
        printStream1.print(' ');
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "tedesco");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: tedesco");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09282");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("Chinesisch (China)");
        printWriter1.println((long) (short) 10);
    }

    @Test
    public void test09283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09283");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        printWriter9.println((float) (byte) -1);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter17 = printWriter9.printf("KR", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        printWriter9.println(charArray26);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.lang.String str32 = locale30.getVariant();
        java.lang.String[] strArray35 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35);
        java.io.PrintWriter printWriter37 = printWriter9.printf(locale30, "English", (java.lang.Object[]) strArray35);
        java.lang.String str38 = locale30.getScript();
        java.util.Locale locale39 = locale30.stripExtensions();
        java.util.Locale.Builder builder40 = builder2.setLocale(locale30);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder45 = builder41.setLanguage("ZXZ");
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder47 = builder41.setLocale(locale46);
        java.util.Locale.Builder builder49 = builder47.setLanguage("KR");
        java.util.Locale.Builder builder51 = builder47.setLanguage("KOR");
        java.util.Locale locale52 = builder51.build();
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale locale56 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        boolean boolean59 = locale58.hasExtensions();
        java.util.Locale.setDefault(category57, locale58);
        java.lang.String str61 = locale56.getDisplayName(locale58);
        java.lang.String str62 = locale58.getDisplayName();
        java.lang.String str63 = locale53.getDisplayLanguage(locale58);
        java.lang.String str64 = locale52.getDisplayVariant(locale53);
        java.lang.String str65 = locale53.getISO3Language();
        java.lang.String str66 = locale53.toLanguageTag();
        java.util.Locale.Builder builder67 = builder2.setLocale(locale53);
        java.util.Locale.Builder builder68 = builder2.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "kor_DE");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u97d3\u6587)" + "'", str61, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "English" + "'", str62, "English");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "English" + "'", str63, "English");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "eng" + "'", str65, "eng");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "en-CA" + "'", str66, "en-CA");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test09284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09284");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D6 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D6, (double) (byte) 100, vector3D8);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D3, vector3D8);
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D14 = vector3D13.negate();
        org.apache.commons.math.geometry.Vector3D vector3D15 = vector3D3.subtract(vector3D13);
        double double16 = vector3D15.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D21 = vector3D19.scalarMultiply((double) 10);
        double double22 = vector3D21.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D46, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D33, (double) (byte) 1, vector3D41, (double) (short) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D55 = vector3D33.negate();
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D33);
        double double57 = vector3D33.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D59 = vector3D33.scalarMultiply((double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D69 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D70 = vector3D62.subtract((double) 10L, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D72 = vector3D62.scalarMultiply((double) 0);
        org.apache.commons.math.geometry.Vector3D vector3D73 = vector3D33.add((double) 100, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D74 = vector3D21.add(vector3D62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation75 = new org.apache.commons.math.geometry.Rotation(vector3D15, vector3D62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: zero norm for rotation defining vector");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.4070751110264852d) + "'", double16 == (-1.4070751110264852d));
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
    }

    @Test
    public void test09285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09285");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        double double22 = rotation21.getAngle();
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.minusI;
        org.apache.commons.math.geometry.Vector3D vector3D24 = rotation21.applyTo(vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = org.apache.commons.math.geometry.Vector3D.angle(vector3D24, vector3D25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
    }

    @Test
    public void test09286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09286");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray10 = new char[] { '4', 'a', ' ', ' ' };
        printWriter4.write(charArray10);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.lang.String str16 = locale12.getDisplayLanguage(locale13);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintWriter printWriter40 = printWriter23.format(locale28, "YZY", (java.lang.Object[]) doubleArray39);
        java.io.PrintWriter printWriter41 = printWriter4.printf(locale13, "ko-KR", (java.lang.Object[]) doubleArray39);
        printWriter41.write(0);
        printWriter41.println((float) (byte) 0);
        java.lang.String[] strArray48 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray48, (java.lang.Throwable) mathException50);
        java.lang.String[] strArray55 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray55, (java.lang.Throwable) mathException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray60 = mathException59.getSuppressed();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray55, (java.lang.Throwable) mathException59);
        java.lang.Throwable[] throwableArray62 = mathException59.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException63 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray62);
        mathException51.addSuppressed((java.lang.Throwable) notARotationMatrixException63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("TWN", (java.lang.Throwable) mathException51);
        java.lang.Object[] objArray66 = mathException65.getArguments();
        printWriter41.println((java.lang.Object) objArray66);
        printWriter41.println((-110.0d));
        java.lang.Object[] objArray71 = null;
        java.io.PrintWriter printWriter72 = printWriter41.format("DE_DE", objArray71);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter72);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(printWriter72);
    }

    @Test
    public void test09287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09287");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("en_CA");
        java.io.PrintWriter printWriter3 = printWriter1.append('#');
        printWriter3.println('u');
        printWriter3.print(0.0f);
        printWriter3.println((float) ' ');
        printWriter3.print(1);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter3, false);
        boolean boolean14 = printWriter13.checkError();
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09288");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        printStream1.print('a');
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double28 = rotation27.getQ0();
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = rotation27.applyTo(rotation34);
        org.apache.commons.math.geometry.Rotation rotation37 = rotation27.revert();
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double44 = rotation43.getQ0();
        org.apache.commons.math.geometry.Rotation rotation45 = rotation27.applyInverseTo(rotation43);
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) (byte) 1, (double) 1.0f, 0.0d, 1.0d, true);
        org.apache.commons.math.geometry.Rotation rotation52 = rotation27.applyInverseTo(rotation51);
        double[][] doubleArray53 = rotation27.getMatrix();
        java.io.PrintStream printStream54 = printStream1.format("org.apache.commons.math.mathexception: ko_kr", (java.lang.Object[]) doubleArray53);
        printStream54.println(0.7434704792648906d);
        printStream54.print(true);
        org.apache.commons.math.geometry.RotationOrder rotationOrder59 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotationOrder59.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotationOrder59.getA1();
        printStream54.print((java.lang.Object) vector3D61);
        printStream54.println("ko_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(rotationOrder59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
    }

    @Test
    public void test09289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09289");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        printStream1.close();
        printStream1.print(1);
        printStream1.write((int) (short) 100);
        printStream1.print(false);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter24 = printWriter21.printf("ko-KR", (java.lang.Object[]) strArray23);
        printWriter24.println(0.0d);
        printWriter24.write(0);
        java.io.PrintWriter printWriter30 = printWriter24.append('4');
        printWriter30.print((double) 'a');
        printWriter30.print((double) (short) 100);
        printWriter30.print(true);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter30, true);
        printWriter38.println();
        java.util.Locale locale42 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale.setDefault(category43, locale44);
        java.lang.String str47 = locale42.getDisplayName(locale44);
        java.lang.String str48 = locale42.getDisplayCountry();
        java.lang.String[] strArray50 = java.util.Locale.getISOLanguages();
        java.io.PrintWriter printWriter51 = printWriter38.format(locale42, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray50);
        java.io.PrintStream printStream52 = printStream1.printf("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray50);
        printStream1.write(0);
        printStream1.println("S\374dkorea");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(printWriter30);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category43.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u97d3\u6587)" + "'", str47, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u97d3\u6587" + "'", str48, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(printStream52);
    }

    @Test
    public void test09290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09290");
        java.util.Locale locale2 = new java.util.Locale("zxz", "\uce90\ub098\ub2e4");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.util.Locale locale4 = locale2.stripExtensions();
        java.lang.String str5 = locale2.getCountry();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uce90\ub098\ub2e4" + "'", str5, "\uce90\ub098\ub2e4");
    }

    @Test
    public void test09291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09291");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ZXZ");
        java.lang.String str2 = locale1.getDisplayName();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zxz");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zxz" + "'", str2, "zxz");
    }

    @Test
    public void test09292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09292");
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D(48.0d, (-0.08806429469916818d), (double) 1.0f);
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D11, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D11, (double) 0.0f, vector3D23);
        double double26 = vector3D25.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D33, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D51, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D38, (double) (byte) 1, vector3D46, (double) (short) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D60 = vector3D38.negate();
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D25, (double) 100L, vector3D61);
        org.apache.commons.math.geometry.RotationOrder rotationOrder64 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation68 = new org.apache.commons.math.geometry.Rotation(rotationOrder64, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotationOrder64.getA1();
        java.io.PrintStream printStream71 = new java.io.PrintStream("XZX");
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.OutputStream) printStream71, true);
        printStream71.println();
        org.apache.commons.math.geometry.Rotation rotation80 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D82 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D84 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D85 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D82, (double) (byte) 100, vector3D84);
        org.apache.commons.math.geometry.Vector3D vector3D86 = rotation80.applyTo(vector3D82);
        org.apache.commons.math.geometry.Vector3D vector3D87 = vector3D82.negate();
        printStream71.println((java.lang.Object) vector3D87);
        org.apache.commons.math.geometry.Vector3D vector3D89 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D69, vector3D87);
        org.apache.commons.math.geometry.Vector3D vector3D90 = new org.apache.commons.math.geometry.Vector3D((-0.02937648959434208d), vector3D4, 0.7756610118220089d, vector3D62, (-0.09950371902099892d), vector3D69);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(rotationOrder64);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D89);
    }

    @Test
    public void test09293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09293");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((double) (short) 1, (-60.912721436461325d));
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Rotation rotation8 = new org.apache.commons.math.geometry.Rotation(vector3D6, (-1.63942416E8d));
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D2.subtract(0.567725116225552d, vector3D6);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(vector3D2, 0.0d);
        org.apache.commons.math.geometry.RotationOrder rotationOrder12 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D13 = rotationOrder12.getA1();
        org.apache.commons.math.geometry.Rotation rotation17 = new org.apache.commons.math.geometry.Rotation(rotationOrder12, (double) (short) 100, (double) 'x', 10.0d);
        java.lang.String str18 = rotationOrder12.toString();
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotationOrder12.getA1();
        double[] doubleArray20 = rotation11.getAngles(rotationOrder12);
        org.apache.commons.math.geometry.RotationOrder rotationOrder21 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation(rotationOrder21, 0.0d, 52.0d, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation25.getAxis();
        double double27 = rotation25.getQ1();
        double[][] doubleArray28 = rotation25.getMatrix();
        double double29 = rotation25.getAngle();
        org.apache.commons.math.geometry.Rotation rotation30 = rotation11.applyInverseTo(rotation25);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(rotationOrder12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "XYZ" + "'", str18, "XYZ");
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(rotationOrder21);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.36558999583837004d + "'", double27 == 0.36558999583837004d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.9341130330305918d + "'", double29 == 1.9341130330305918d);
        org.junit.Assert.assertNotNull(rotation30);
    }

    @Test
    public void test09294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09294");
        java.lang.String[] strArray3 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray3);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray3, (java.lang.Throwable) mathException6);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException8 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray3);
        java.lang.String str9 = notARotationMatrixException8.getPattern();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fran\347ais" + "'", str9, "fran\347ais");
    }

    @Test
    public void test09295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09295");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale10.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray21 = rotation20.getMatrix();
        java.io.PrintWriter printWriter22 = printWriter5.format(locale10, "YZY", (java.lang.Object[]) doubleArray21);
        printWriter22.print((-1L));
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.lang.String str26 = locale25.getScript();
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray31, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray36 = mathException35.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray31, (java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray38 = mathException35.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException39 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray38);
        java.lang.Throwable[] throwableArray40 = notARotationMatrixException39.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter22.printf(locale25, "CHN", (java.lang.Object[]) throwableArray40);
        printWriter41.print((double) 'x');
        java.io.PrintStream printStream45 = new java.io.PrintStream("ko-KR");
        printStream45.close();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream45, false);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter48);
        java.lang.String[] strArray51 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter52 = printWriter49.printf("ko-KR", (java.lang.Object[]) strArray51);
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale53.getDisplayScript(locale54);
        java.lang.String str56 = locale54.getVariant();
        printWriter52.print((java.lang.Object) str56);
        org.apache.commons.math.geometry.RotationOrder rotationOrder59 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotationOrder59.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotationOrder59.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotationOrder59.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotationOrder59.getA3();
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation(rotationOrder59, (-0.09950371902099892d), (double) (-1), (double) ' ');
        double[][] doubleArray68 = rotation67.getMatrix();
        java.io.PrintWriter printWriter69 = printWriter52.format("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray68);
        printWriter41.print((java.lang.Object) printWriter52);
        printWriter52.println(2.3122509176395862d);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(rotationOrder59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test09296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09296");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.println((float) (-1));
        printStream1.print(true);
        printStream1.println("\ub3c5\uc77c\uc5b4");
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("\u97d3\u6587");
        printStream1.print((java.lang.Object) "\u97d3\u6587");
        printStream1.println((-0.4869163399816042d));
        printStream1.print('u');
    }

    @Test
    public void test09297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09297");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray11 = rotation10.getMatrix();
        java.io.PrintStream printStream12 = printStream1.printf("fra", (java.lang.Object[]) doubleArray11);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder13.setExtension('u', "");
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale22 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale.setDefault(category23, locale24);
        java.lang.String str27 = locale22.getDisplayName(locale24);
        java.lang.String str28 = locale24.getDisplayName();
        java.lang.String str29 = locale19.getDisplayLanguage(locale24);
        java.util.Locale.Builder builder30 = builder13.setLocale(locale19);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter36);
        java.lang.String[] strArray39 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter40 = printWriter37.printf("ko-KR", (java.lang.Object[]) strArray39);
        java.io.PrintStream printStream41 = printStream1.printf(locale19, "TWN", (java.lang.Object[]) strArray39);
        printStream1.println(0.567725116225552d);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream46 = printStream1.append('x');
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u97d3\u6587)" + "'", str27, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English" + "'", str29, "English");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream46);
    }

    @Test
    public void test09298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09298");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = printStream1.append(' ');
        printStream1.print('#');
        printStream1.println(0.0f);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((-6782.273252612676d), (double) (short) 1, 0.8414709848078965d, (double) 100.0f, false);
        printStream1.println((java.lang.Object) rotation41);
        printStream1.println(false);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("English");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleKeys();
        java.lang.String str48 = locale46.getISO3Country();
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double56 = rotation55.getQ0();
        org.apache.commons.math.geometry.Rotation rotation62 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double63 = rotation62.getQ0();
        org.apache.commons.math.geometry.Rotation rotation64 = rotation55.applyTo(rotation62);
        org.apache.commons.math.geometry.Rotation rotation65 = rotation55.revert();
        org.apache.commons.math.geometry.Rotation rotation71 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double72 = rotation71.getQ0();
        org.apache.commons.math.geometry.Rotation rotation73 = rotation55.applyInverseTo(rotation71);
        org.apache.commons.math.geometry.RotationOrder rotationOrder74 = org.apache.commons.math.geometry.RotationOrder.YXZ;
        double[] doubleArray75 = rotation73.getAngles(rotationOrder74);
        org.apache.commons.math.geometry.Vector3D vector3D76 = rotationOrder74.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D77 = rotationOrder74.getA2();
        org.apache.commons.math.geometry.Rotation rotation81 = new org.apache.commons.math.geometry.Rotation(rotationOrder74, 0.5403023058681398d, 3.141592653589793d, 0.691922190697517d);
        double[][] doubleArray82 = rotation81.getMatrix();
        java.io.PrintStream printStream83 = printStream1.printf(locale46, "Royaume-Uni", (java.lang.Object[]) doubleArray82);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "english");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 52.0d + "'", double63 == 52.0d);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 52.0d + "'", double72 == 52.0d);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(rotationOrder74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(printStream83);
    }

    @Test
    public void test09299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09299");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter5.print((double) (byte) 100);
        printWriter5.println();
        printWriter5.println('#');
        printWriter5.println((float) (byte) 100);
        java.io.PrintStream printStream16 = new java.io.PrintStream("XZX");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        java.lang.Object[] objArray24 = mathException22.getArguments();
        java.io.PrintStream printStream27 = new java.io.PrintStream("ko-KR");
        printStream27.close();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream27, false);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter30);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter34 = printWriter31.printf("ko-KR", (java.lang.Object[]) strArray33);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException35 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray33);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("German", objArray24, (java.lang.Throwable) notARotationMatrixException35);
        java.io.PrintStream printStream37 = printStream16.printf("XZX", objArray24);
        java.io.PrintWriter printWriter38 = printWriter5.printf("\u6cd5\u6587", objArray24);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException39 = new org.apache.commons.math.geometry.NotARotationMatrixException("zxz (ko_kr)_FRAN\347AIS", objArray24);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test09300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09300");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(665808.0d, 1.77144092136256d, 0.0d, (-2.566370614359173d), false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ0();
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double19 = rotation18.getQ0();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation11.applyTo(rotation18);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D24, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotation11.applyInverseTo(vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D36 = vector3D35.negate();
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D46, (double) (byte) 100, vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D51, (double) (byte) 100, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D48, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D58, (double) (byte) 100, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D66 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D64, (double) (byte) 100, vector3D66);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D66, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D53, (double) (byte) 1, vector3D61, (double) (short) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D75 = vector3D53.negate();
        org.apache.commons.math.geometry.Vector3D vector3D76 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D53);
        double double77 = vector3D53.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D78 = vector3D41.subtract((double) (short) -1, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D79 = vector3D35.add((double) (byte) 0, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D80 = rotation11.applyTo(vector3D53);
        double double81 = rotation11.getAngle();
        org.apache.commons.math.geometry.Rotation rotation82 = rotation5.applyTo(rotation11);
        org.apache.commons.math.geometry.Vector3D vector3D83 = rotation11.getAxis();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(vector3D83);
    }

    @Test
    public void test09301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09301");
        java.util.Locale locale1 = new java.util.Locale("XYZ");
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale.setDefault(category3, locale5);
        java.lang.String str9 = locale2.getDisplayVariant(locale5);
        java.lang.String str10 = locale1.getDisplayScript(locale2);
        java.lang.String str11 = locale1.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "xyz");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test09302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09302");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder9 = builder0.setExtension('a', "und");
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale.setDefault(category11, locale13);
        java.util.Locale.setDefault(category10, locale13);
        java.util.Locale locale18 = java.util.Locale.CHINA;
        java.lang.String str19 = locale13.getDisplayScript(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.util.Locale.Builder builder21 = builder0.setLocale(locale18);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale22.getDisplayLanguage(locale24);
        java.util.Locale locale28 = locale22.stripExtensions();
        java.lang.String str29 = locale28.getScript();
        java.lang.String str30 = locale28.getISO3Language();
        java.util.Locale.Builder builder31 = builder0.setLocale(locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder31.setVariant("org.apache.commons.math.MathException: French");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: org.apache.commons.math.MathException: French [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "China" + "'", str20, "China");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test09303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09303");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        java.io.PrintWriter printWriter92 = new java.io.PrintWriter((java.io.OutputStream) printStream90, true);
        java.io.PrintWriter printWriter93 = new java.io.PrintWriter((java.io.OutputStream) printStream90);
        java.io.PrintWriter printWriter95 = new java.io.PrintWriter((java.io.OutputStream) printStream90, true);
        printStream90.print((float) 10);
        printStream90.print((float) (-1L));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test09304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09304");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, (double) (byte) 100, vector3D4);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D4, vector3D9);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray19 = rotation18.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D23, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotation18.applyInverseTo(vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D31, vector3D32);
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotation40.applyTo(vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D42.negate();
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        double double50 = vector3D49.getY();
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D4, (double) ' ', vector3D31, (double) (-1.0f), vector3D47, (double) 10.0f, vector3D49);
        org.apache.commons.math.geometry.RotationOrder rotationOrder52 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str53 = rotationOrder52.toString();
        org.apache.commons.math.geometry.Vector3D vector3D54 = rotationOrder52.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D54.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D51, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) '#', (double) 10, (double) (-1.0f));
        org.apache.commons.math.geometry.Vector3D vector3D62 = vector3D61.normalize();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation63 = new org.apache.commons.math.geometry.Rotation(vector3D57, vector3D61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: zero norm for rotation defining vector");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ZXZ" + "'", str53, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D62);
    }

    @Test
    public void test09305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09305");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.io.PrintStream printStream8 = new java.io.PrintStream("ko-KR");
        printStream8.close();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream8, false);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter11);
        printWriter11.println((float) (byte) -1);
        printWriter11.print('a');
        java.util.Locale locale18 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter11.print((java.lang.Object) locale18);
        java.lang.String str20 = locale18.getDisplayName();
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale18.getDisplayCountry();
        java.lang.String str23 = locale0.getDisplayVariant(locale18);
        java.lang.String str24 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals(locale18.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str20, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh-TW" + "'", str24, "zh-TW");
    }

    @Test
    public void test09306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09306");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        java.io.PrintWriter printWriter10 = printWriter5.append('a');
        printWriter10.print((int) (short) 1);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        java.lang.Throwable[] throwableArray17 = mathException15.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException18 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray17);
        java.io.PrintWriter printWriter19 = printWriter10.format("XYZ", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray17);
        java.lang.Throwable[] throwableArray21 = mathException20.getSuppressed();
        java.lang.Class<?> wildcardClass22 = throwableArray21.getClass();
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test09307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09307");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("en");
        java.util.Locale.Builder builder13 = builder10.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.setVariant("Germany");
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale.setDefault(category17, locale18);
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript();
        java.lang.String str23 = locale18.getDisplayName();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder28 = builder24.setLanguage("ZXZ");
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder30 = builder24.setLocale(locale29);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder32 = builder24.setLocale(locale31);
        java.lang.String str33 = locale31.getDisplayCountry();
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleKeys();
        boolean boolean35 = locale31.hasExtensions();
        java.lang.String str36 = locale18.getDisplayVariant(locale31);
        java.lang.String str37 = locale18.getDisplayVariant();
        java.util.Locale.Builder builder38 = builder16.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder16.setLanguageTag("English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: English (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Canada" + "'", str33, "Canada");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test09308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09308");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder1, 0.0d, 52.0d, (double) (byte) 1);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation7 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation8 = rotation5.revert();
        double[][] doubleArray9 = rotation8.getMatrix();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException10 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4\ub300\ub9cc)", (java.lang.Object[]) doubleArray9);
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation(doubleArray9, 0.7756610118220089d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation(doubleArray9, (double) (short) 100);
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double21 = rotation20.getQ0();
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double28 = rotation27.getQ0();
        org.apache.commons.math.geometry.Rotation rotation29 = rotation20.applyTo(rotation27);
        double double30 = rotation20.getQ0();
        double double31 = rotation20.getQ0();
        double double32 = rotation20.getQ0();
        double double33 = rotation20.getAngle();
        double double34 = rotation20.getQ2();
        org.apache.commons.math.geometry.Rotation rotation35 = rotation14.applyTo(rotation20);
        double double36 = rotation14.getAngle();
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.567725116225552d + "'", double6 == 0.567725116225552d);
        org.junit.Assert.assertNotNull(rotation7);
        org.junit.Assert.assertNotNull(rotation8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.9341130330305916d + "'", double36 == 1.9341130330305916d);
    }

    @Test
    public void test09309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09309");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D12, (double) (byte) 100, vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotation10.applyTo(vector3D12);
        double double17 = rotation10.getAngle();
        double double18 = rotation10.getQ3();
        org.apache.commons.math.geometry.Rotation rotation19 = rotation4.applyTo(rotation10);
        double[][] doubleArray20 = rotation10.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D30 = vector3D22.subtract((double) 10L, vector3D29);
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double38 = rotation37.getQ0();
        org.apache.commons.math.geometry.Rotation rotation44 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double45 = rotation44.getQ0();
        org.apache.commons.math.geometry.Rotation rotation46 = rotation37.applyTo(rotation44);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation37.applyInverseTo(vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = vector3D22.add((-0.0d), vector3D47);
        org.apache.commons.math.geometry.Rotation rotation56 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation62 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double63 = rotation62.getQ0();
        org.apache.commons.math.geometry.Rotation rotation64 = rotation56.applyInverseTo(rotation62);
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotation62.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D66 = vector3D47.add(1.3660691819214432d, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D67 = rotation10.applyInverseTo(vector3D66);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(rotation19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertNotNull(rotation46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 52.0d + "'", double63 == 52.0d);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
    }

    @Test
    public void test09310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09310");
        java.io.PrintStream printStream1 = new java.io.PrintStream("tedesco-TW-x-lvariant-YZY");
    }

    @Test
    public void test09311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09311");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.io.PrintStream printStream8 = new java.io.PrintStream("ko-KR");
        printStream8.close();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream8, false);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter11);
        printWriter11.println((float) (byte) -1);
        printWriter11.print('a');
        java.util.Locale locale18 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter11.print((java.lang.Object) locale18);
        java.lang.String str20 = locale18.getDisplayName();
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale18.getDisplayCountry();
        java.lang.String str23 = locale0.getDisplayVariant(locale18);
        java.util.Locale locale27 = new java.util.Locale("Italian", "org.apache.commons.math.MathException: ZXZ", "CHN");
        java.lang.String str28 = locale27.toLanguageTag();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.util.Locale.setDefault(locale27);
        java.util.Locale locale34 = new java.util.Locale("french", "German (Germany)", "\uc601\uc5b4\uc601\uad6d)");
        java.lang.String str35 = locale27.getDisplayCountry(locale34);
        java.lang.String str36 = locale27.getDisplayCountry();
        java.lang.String str37 = locale0.getDisplayVariant(locale27);
        java.lang.String str38 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Chinese (Taiwan)" + "'", str6, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals(locale18.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str20, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals(locale27.toString(), "italian_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ_CHN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "italian-x-lvariant-CHN" + "'", str28, "italian-x-lvariant-CHN");
        org.junit.Assert.assertNotNull(charSet29);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "\uc601\uc5b4\uc601\uad6d)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ" + "'", str35, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ" + "'", str36, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "TW" + "'", str38, "TW");
    }

    @Test
    public void test09312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09312");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder8.setRegion("");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getVariant();
        java.util.Locale.Builder builder15 = builder10.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder10.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder16.setVariant("US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: US [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test09313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09313");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-3.141592653589793d), 0.0d, (double) 10L);
        org.apache.commons.math.geometry.Vector3D vector3D7 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) 10L, vector3D7);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double15 = rotation14.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotation14.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D8.add(vector3D16);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation(vector3D3, vector3D16);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.Rotation rotation26 = rotation24.revert();
        org.apache.commons.math.geometry.Rotation rotation27 = rotation18.applyTo(rotation26);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D29.subtract((double) 10L, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D40, (double) (byte) 100, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D45, (double) (byte) 100, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D42, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D50 = vector3D36.subtract((double) 0, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D51 = rotation18.applyInverseTo(vector3D36);
        double double52 = rotation18.getQ1();
        double[][] doubleArray53 = rotation18.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation59 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray60 = rotation59.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D67, (double) (byte) 100, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D64, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D72 = rotation59.applyInverseTo(vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation59.getAxis();
        org.apache.commons.math.geometry.Rotation rotation74 = rotation59.revert();
        org.apache.commons.math.geometry.Rotation rotation75 = rotation59.revert();
        double double76 = rotation75.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D86 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D87 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D81, (double) 0L, vector3D86);
        org.apache.commons.math.geometry.RotationOrder rotationOrder88 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation92 = new org.apache.commons.math.geometry.Rotation(rotationOrder88, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Vector3D vector3D93 = rotationOrder88.getA1();
        double double94 = vector3D93.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D95 = vector3D86.subtract(vector3D93);
        org.apache.commons.math.geometry.Vector3D vector3D96 = new org.apache.commons.math.geometry.Vector3D((-1.63942416E8d), vector3D86);
        org.apache.commons.math.geometry.Vector3D vector3D97 = rotation75.applyInverseTo(vector3D86);
        org.apache.commons.math.geometry.Rotation rotation98 = rotation18.applyTo(rotation75);
        double double99 = rotation18.getQ0();
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertNotNull(rotationOrder88);
        org.junit.Assert.assertNotNull(vector3D93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(vector3D97);
        org.junit.Assert.assertNotNull(rotation98);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.7756610118220089d + "'", double99 == 0.7756610118220089d);
    }

    @Test
    public void test09314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09314");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        printWriter9.print("\u97d3\u6587");
        printWriter9.close();
        printWriter9.print((-3.141592653589793d));
        printWriter9.println();
        printWriter9.println((int) (short) -1);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream24 = printStream19.format(locale21, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray23);
        java.lang.String str25 = locale21.getDisplayVariant();
        java.lang.String[] strArray30 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray30);
        java.lang.Object[] objArray32 = mathException31.getArguments();
        java.lang.String str33 = mathException31.getPattern();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException31);
        java.lang.Object[] objArray36 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("French");
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("\uc601\uc5b4", (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("YXY", objArray36, (java.lang.Throwable) mathException39);
        java.lang.Object[] objArray42 = mathException41.getArguments();
        java.io.PrintWriter printWriter43 = printWriter9.format(locale21, "it", objArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter47 = printWriter43.append((java.lang.CharSequence) "zxz_fran\347ais_ITALIAN", 0, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 117");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ZXZ" + "'", str33, "ZXZ");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printWriter43);
    }

    @Test
    public void test09315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09315");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(1.2220476682666177d, (double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((-35.58615424643666d), vector3D3);
    }

    @Test
    public void test09316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09316");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        printWriter9.print("\u97d3\u6587");
        printWriter9.write((int) 'u');
        printWriter9.println();
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        char[] charArray23 = new char[] { ' ', 'x' };
        printWriter20.write(charArray23);
        printWriter20.write((int) (byte) 1);
        printWriter20.print((int) (short) 0);
        printWriter20.println("org.apache.commons.math.MathException: ZXZ");
        printWriter20.println('4');
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray35 = mathException34.getSuppressed();
        java.lang.Object[] objArray36 = mathException34.getArguments();
        java.io.PrintWriter printWriter37 = printWriter20.printf("\u97d3\u6587)", objArray36);
        java.lang.String[] strArray41 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) strArray41);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException46 = new org.apache.commons.math.geometry.NotARotationMatrixException("italian-x-lvariant-CHN", (java.lang.Object[]) strArray41);
        printWriter37.println((java.lang.Object) "italian-x-lvariant-CHN");
        printWriter37.print(true);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = mathException52.getSuppressed();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException52);
        java.lang.Object[] objArray56 = mathException55.getArguments();
        java.io.PrintWriter printWriter57 = printWriter37.format("\uc911\uad6d\uc5b4", objArray56);
        printWriter9.println((java.lang.Object) "\uc911\uad6d\uc5b4");
        char[] charArray59 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter9.print(charArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test09317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09317");
        java.lang.String[] strArray3 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray3, (java.lang.Throwable) mathException5);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException14);
        java.lang.Throwable[] throwableArray17 = mathException14.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException18 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray17);
        mathException6.addSuppressed((java.lang.Throwable) notARotationMatrixException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("TWN", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("en_CA", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        org.apache.commons.math.geometry.CardanEulerSingularityException cardanEulerSingularityException26 = new org.apache.commons.math.geometry.CardanEulerSingularityException(true);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) cardanEulerSingularityException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) cardanEulerSingularityException26);
        java.lang.Object[] objArray29 = mathException28.getArguments();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray35 = mathException34.getSuppressed();
        java.lang.Throwable[] throwableArray36 = mathException34.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException37 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray36);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException38 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray36);
        java.lang.Throwable[] throwableArray39 = notARotationMatrixException38.getSuppressed();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("zho", (java.lang.Object[]) throwableArray39);
        java.lang.Object[] objArray41 = mathException40.getArguments();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: United Kingdom", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ko-KR", objArray29, (java.lang.Throwable) mathException42);
        mathException23.addSuppressed((java.lang.Throwable) mathException42);
        java.lang.Class<?> wildcardClass45 = mathException23.getClass();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test09318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09318");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-1.2792393947944187d), 1.1102230246251565E-16d, 2.7474391337754565d);
        double double4 = vector3D3.getY();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.1102230246251565E-16d + "'", double4 == 1.1102230246251565E-16d);
    }

    @Test
    public void test09319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09319");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\ub300\ub9cc,YZX)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=cinese(cina)(?????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09320");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder16 = builder4.clearExtensions();
        java.util.Locale.Builder builder17 = builder4.clear();
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale.setDefault(category18, locale20);
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale20.getDisplayCountry(locale24);
        java.util.Locale.Builder builder26 = builder17.setLocale(locale20);
        java.util.Locale.Builder builder27 = builder17.clear();
        java.util.Locale.Builder builder29 = builder17.setLanguage("XZX");
        java.util.Locale.Builder builder31 = builder29.addUnicodeLocaleAttribute("Germany");
        java.util.Locale.Builder builder32 = builder29.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder34 = builder29.setLanguageTag("\u4e2d\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: org.apache.commons.math.MathException: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French" + "'", str11, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test09321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09321");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Locale.Builder builder12 = builder7.setLocale(locale10);
        java.util.Locale.Builder builder15 = builder7.setExtension('u', "English");
        java.util.Locale locale18 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale.setDefault(category19, locale20);
        java.lang.String str23 = locale18.getDisplayName(locale20);
        java.lang.String str24 = locale20.getDisplayName();
        java.lang.String str25 = locale20.getISO3Language();
        java.util.Locale.Builder builder26 = builder15.setLocale(locale20);
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder27.setExtension(' ', "org.apache.commons.math.MathException: ja");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u97d3\u6587)" + "'", str23, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "eng" + "'", str25, "eng");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test09322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09322");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        printStream30.println(Double.NaN);
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        char[] charArray44 = new char[] { ' ', 'x' };
        printWriter41.write(charArray44);
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.lang.String str49 = locale46.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation56 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray57 = rotation56.getMatrix();
        java.io.PrintWriter printWriter58 = printWriter41.format(locale46, "YZY", (java.lang.Object[]) doubleArray57);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException59 = new org.apache.commons.math.geometry.NotARotationMatrixException("en", (java.lang.Object[]) doubleArray57);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException60 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) doubleArray57);
        java.io.PrintStream printStream61 = printStream30.printf("en-CA", (java.lang.Object[]) doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation63 = new org.apache.commons.math.geometry.Rotation(doubleArray57, (-0.3490201748767782d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , x]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "en" + "'", str49, "en");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printStream61);
    }

    @Test
    public void test09323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09323");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.flush();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter18.print(false);
        java.io.PrintWriter printWriter22 = printWriter18.append(' ');
        printWriter22.println((int) (short) 0);
        printWriter22.print(true);
        printWriter22.println('#');
        printWriter22.print("English (Canada)");
        printWriter22.println("german (KOR)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test09324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09324");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        boolean boolean86 = printStream1.checkError();
        printStream1.flush();
        printStream1.println();
        java.io.PrintWriter printWriter90 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print((int) ' ');
        printStream1.print((int) 'u');
        printStream1.print(' ');
        printStream1.println(23.602352584634914d);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test09325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09325");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "yzx");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: yzx");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09326");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale9 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str14 = locale9.getDisplayName(locale11);
        java.lang.String str15 = locale11.getDisplayName();
        java.lang.String str16 = locale6.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder17 = builder0.setLocale(locale6);
        java.util.Locale locale18 = builder0.build();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder23 = builder19.setLanguage("ZXZ");
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder25 = builder19.setLocale(locale24);
        java.io.PrintStream printStream27 = new java.io.PrintStream("ko-KR");
        printStream27.close();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream27, false);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter30);
        char[] charArray34 = new char[] { ' ', 'x' };
        printWriter31.write(charArray34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale36.getDisplayCountry(locale37);
        java.lang.String str39 = locale36.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray47 = rotation46.getMatrix();
        java.io.PrintWriter printWriter48 = printWriter31.format(locale36, "YZY", (java.lang.Object[]) doubleArray47);
        java.lang.String str49 = locale24.getDisplayCountry(locale36);
        java.lang.String str50 = locale36.getDisplayVariant();
        java.lang.String str51 = locale18.getDisplayLanguage(locale36);
        java.util.Locale.setDefault(locale36);
        java.lang.Object obj53 = locale36.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u97d3\u6587)" + "'", str14, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , x]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en" + "'", str39, "en");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Germany" + "'", str49, "Germany");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English" + "'", str51, "English");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "en");
    }

    @Test
    public void test09327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09327");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("italy");
        double double2 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test09328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09328");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray10 = new char[] { '4', 'a', ' ', ' ' };
        printWriter4.write(charArray10);
        printWriter4.write((int) (short) 100);
        java.lang.CharSequence charSequence14 = null;
        java.io.PrintWriter printWriter15 = printWriter4.append(charSequence14);
        java.io.PrintWriter printWriter17 = printWriter15.append('#');
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(printWriter17);
    }

    @Test
    public void test09329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09329");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        java.lang.String[] strArray21 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray21);
        mathException19.addSuppressed((java.lang.Throwable) mathException22);
        java.lang.Throwable[] throwableArray24 = mathException22.getSuppressed();
        java.io.PrintStream printStream25 = printStream15.format("French", (java.lang.Object[]) throwableArray24);
        printStream15.print(52.0d);
        printStream15.print(0L);
        printStream15.print(1);
        printStream15.println((long) ' ');
        printStream15.println("ca");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test09330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09330");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        printWriter6.println((float) (byte) -1);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter6, true);
        java.lang.String[] strArray13 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter14 = printWriter6.printf("KR", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        char[] charArray23 = new char[] { ' ', 'x' };
        printWriter20.write(charArray23);
        printWriter6.println(charArray23);
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str28 = locale26.getDisplayScript(locale27);
        java.lang.String str29 = locale27.getVariant();
        java.lang.String[] strArray32 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray32);
        java.io.PrintWriter printWriter34 = printWriter6.printf(locale27, "English", (java.lang.Object[]) strArray32);
        java.lang.String str35 = locale27.getScript();
        java.lang.String str36 = locale0.getDisplayLanguage(locale27);
        java.util.Locale locale37 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet38 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , x]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u82f1\u6587" + "'", str36, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(strSet38);
    }

    @Test
    public void test09331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09331");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        printWriter9.println((float) (byte) -1);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter17 = printWriter9.printf("KR", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        printWriter9.println(charArray26);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.lang.String str32 = locale30.getVariant();
        java.lang.String[] strArray35 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35);
        java.io.PrintWriter printWriter37 = printWriter9.printf(locale30, "English", (java.lang.Object[]) strArray35);
        java.lang.String str38 = locale30.getScript();
        java.util.Locale locale39 = locale30.stripExtensions();
        java.util.Locale.Builder builder40 = builder2.setLocale(locale30);
        java.util.Locale.Builder builder41 = builder2.clearExtensions();
        java.util.Locale.Builder builder43 = builder41.addUnicodeLocaleAttribute("Taiwan");
        java.util.Locale locale44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder45 = builder43.setLocale(locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test09332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09332");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u6cd5\u6587", "zxz_FRAN\347AIS");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zxz_FRANc?AIS");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09333");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale8 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        boolean boolean11 = locale10.hasExtensions();
        java.util.Locale.setDefault(category9, locale10);
        java.lang.String str13 = locale8.getDisplayName(locale10);
        java.lang.String str14 = locale10.getDisplayName();
        java.lang.String str15 = locale5.getDisplayLanguage(locale10);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.util.Locale.setDefault(category19, locale20);
        java.lang.String str23 = locale20.getDisplayLanguage();
        java.io.PrintStream printStream25 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream27 = printStream25.append(' ');
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        char[] charArray36 = new char[] { ' ', 'x' };
        printWriter33.write(charArray36);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.lang.String str41 = locale38.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray49 = rotation48.getMatrix();
        java.io.PrintWriter printWriter50 = printWriter33.format(locale38, "YZY", (java.lang.Object[]) doubleArray49);
        printWriter50.print((-1L));
        java.util.Locale locale53 = java.util.Locale.PRC;
        java.lang.String str54 = locale53.getScript();
        java.lang.String[] strArray59 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray59, (java.lang.Throwable) mathException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray64 = mathException63.getSuppressed();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray59, (java.lang.Throwable) mathException63);
        java.lang.Throwable[] throwableArray66 = mathException63.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException67 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray66);
        java.lang.Throwable[] throwableArray68 = notARotationMatrixException67.getSuppressed();
        java.io.PrintWriter printWriter69 = printWriter50.printf(locale53, "CHN", (java.lang.Object[]) throwableArray68);
        java.util.Locale locale71 = java.util.Locale.forLanguageTag("\u97d3\u6587)");
        java.lang.String str72 = locale53.getDisplayVariant(locale71);
        java.lang.String[] strArray75 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray75);
        java.lang.Object[] objArray77 = mathException76.getArguments();
        java.io.PrintStream printStream78 = printStream27.format(locale71, "\u97d3\u6587)", objArray77);
        java.lang.String str79 = locale20.getDisplayCountry(locale71);
        java.lang.String str80 = locale17.getDisplayCountry(locale20);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "German" + "'", str2, "German");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u97d3\u6587)" + "'", str13, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English" + "'", str14, "English");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English" + "'", str18, "English");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "German" + "'", str21, "German");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "German" + "'", str23, "German");
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , x]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en" + "'", str41, "en");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Kanada" + "'", str80, "Kanada");
    }

    @Test
    public void test09334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09334");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(4.3797909966139095d, 0.0703597544730292d, (double) (short) 1, 0.0d, true);
    }

    @Test
    public void test09335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09335");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.geometry.NotARotationMatrixException: x-lvariant-TWN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.geometry.notarotationmatrixexception:x-lvariant-twn");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09336");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-0.5440211108893699d), 0.567725116225552d);
        double double3 = vector3D2.getY();
        double double4 = vector3D2.getNorm();
        double double5 = vector3D2.getNorm();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.43638600702710073d) + "'", double3 == (-0.43638600702710073d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.9999999999999999d + "'", double4 == 0.9999999999999999d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999999999999d + "'", double5 == 0.9999999999999999d);
    }

    @Test
    public void test09337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09337");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayScript(locale2);
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter9.print((long) (short) 100);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        java.io.PrintWriter printWriter15 = printWriter9.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter9, false);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder22 = builder18.setLanguage("ZXZ");
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder24 = builder18.setLocale(locale23);
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder26 = builder18.setLocale(locale25);
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale25);
        java.lang.String str29 = locale25.getDisplayVariant();
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter17.format(locale25, "ita", (java.lang.Object[]) throwableArray40);
        java.io.PrintWriter printWriter43 = printWriter41.append('a');
        printWriter43.println((float) 'u');
        boolean boolean46 = locale1.equals((java.lang.Object) 'u');
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09338");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ja-u-twn", 0.8190610670960571d);
    }

    @Test
    public void test09339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09339");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        java.lang.String str3 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D11, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D29, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D16, (double) (byte) 1, vector3D24, (double) (short) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D38 = vector3D16.negate();
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D44, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D44, (double) 0.0f, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D60 = vector3D58.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D39, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D62 = vector3D5.add(vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D63 = vector3D5.normalize();
        double double64 = vector3D63.getZ();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YZY" + "'", str3, "YZY");
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test09340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09340");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.lang.String str7 = locale0.getDisplayVariant(locale3);
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.lang.String str11 = locale8.getDisplayVariant();
        java.util.Locale locale14 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str17 = locale14.getExtension('x');
        java.lang.String str18 = locale8.getDisplayVariant(locale14);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        java.lang.String str22 = locale20.getScript();
        java.util.Set<java.lang.Character> charSet23 = locale20.getExtensionKeys();
        java.lang.String str24 = locale14.getDisplayVariant(locale20);
        java.util.Locale.setDefault(locale20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zxz_fran\347ais" + "'", str15, "zxz_fran\347ais");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test09341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09341");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("IT", 10.099504938362077d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=10.099504938362077");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09342");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        printWriter4.println(true);
        printWriter4.print(0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D20, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D38, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D25, (double) (byte) 1, vector3D33, (double) (short) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D25.negate();
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D25);
        double double49 = vector3D25.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D51 = vector3D25.scalarMultiply((double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D53, (double) (byte) 100, vector3D55);
        double double57 = vector3D55.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D25.subtract(vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D59 = vector3D25.negate();
        org.apache.commons.math.geometry.RotationOrder rotationOrder60 = org.apache.commons.math.geometry.RotationOrder.ZYX;
        org.apache.commons.math.geometry.Rotation rotation64 = new org.apache.commons.math.geometry.Rotation(rotationOrder60, (-1.6855435837197365E10d), 0.0d, 0.3338737790442066d);
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotationOrder60.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D66 = vector3D25.subtract(vector3D65);
        printWriter4.print((java.lang.Object) vector3D65);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(rotationOrder60);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
    }

    @Test
    public void test09343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09343");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "\ud55c\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.geometry.NotARotationMatrixException: ????????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09344");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5);
        java.lang.Object[] objArray7 = mathException6.getArguments();
        java.lang.String str8 = mathException6.getPattern();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.Object[] objArray11 = mathException6.getArguments();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("French");
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("\uc601\uc5b4", (java.lang.Throwable) mathException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("YXY", objArray11, (java.lang.Throwable) mathException14);
        java.lang.Object[] objArray17 = mathException16.getArguments();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException(throwable19);
        java.lang.String[] strArray22 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray22);
        mathException20.addSuppressed((java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("tw", (java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("tw_US", objArray17, (java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("zho", objArray17);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ZXZ" + "'", str8, "ZXZ");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(strArray22);
    }

    @Test
    public void test09345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09345");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale11);
        java.util.Locale.setDefault(locale9);
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ0();
        org.apache.commons.math.geometry.Rotation rotation31 = rotation22.applyTo(rotation29);
        org.apache.commons.math.geometry.Rotation rotation32 = rotation22.revert();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double39 = rotation38.getQ0();
        org.apache.commons.math.geometry.Rotation rotation40 = rotation22.applyInverseTo(rotation38);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double47 = rotation46.getQ1();
        double double48 = rotation46.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D50.subtract((double) 10L, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotation46.applyInverseTo(vector3D57);
        org.apache.commons.math.geometry.Rotation rotation60 = rotation22.applyInverseTo(rotation46);
        double[][] doubleArray61 = rotation22.getMatrix();
        java.io.PrintStream printStream62 = printStream8.format(locale9, "und", (java.lang.Object[]) doubleArray61);
        java.lang.String str63 = locale9.getDisplayCountry();
        java.lang.String str64 = locale9.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = locale9.getUnicodeLocaleType("en-gb");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: en-gb");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test09346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09346");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "anglais");
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.util.Locale locale19 = java.util.Locale.UK;
        java.lang.String[] strArray21 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream22 = printStream17.format(locale19, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream17, false);
        printStream17.println(10.0f);
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        printWriter33.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray43 = rotation42.getMatrix();
        java.io.PrintWriter printWriter44 = printWriter33.format("en", (java.lang.Object[]) doubleArray43);
        java.io.PrintStream printStream45 = printStream17.printf("YZY", (java.lang.Object[]) doubleArray43);
        java.io.PrintStream printStream47 = new java.io.PrintStream("ko-KR");
        printStream47.close();
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream47, false);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.Writer) printWriter50);
        char[] charArray54 = new char[] { ' ', 'x' };
        printWriter51.write(charArray54);
        printStream17.println(charArray54);
        printStream15.println(charArray54);
        java.lang.String[] strArray61 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray61, (java.lang.Throwable) mathException63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException64);
        java.lang.Throwable[] throwableArray66 = mathException64.getSuppressed();
        java.io.PrintStream printStream67 = printStream15.format("China", (java.lang.Object[]) throwableArray66);
        printStream67.println('#');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ , x]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(printStream67);
    }

    @Test
    public void test09347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09347");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        java.lang.String str3 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 1.2220476682666177d, 0.0d, (double) (short) 10);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.0d), (double) (short) 100, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D12 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D13 = rotationOrder0.getA3();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YZY" + "'", str3, "YZY");
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
    }

    @Test
    public void test09348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09348");
        java.lang.String[] strArray2 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray2, (java.lang.Throwable) mathException4);
        java.lang.String[] strArray9 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray9, (java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray9, (java.lang.Throwable) mathException13);
        java.lang.Throwable[] throwableArray16 = mathException13.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException17 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray16);
        mathException5.addSuppressed((java.lang.Throwable) notARotationMatrixException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("TWN", (java.lang.Throwable) mathException5);
        java.lang.Object[] objArray20 = mathException19.getArguments();
        java.lang.Throwable[] throwableArray21 = mathException19.getSuppressed();
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray33 = mathException30.getSuppressed();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ko_KR", (java.lang.Object[]) throwableArray33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("United Kingdom", (java.lang.Throwable) mathException34);
        java.lang.Object[] objArray36 = mathException35.getArguments();
        mathException19.addSuppressed((java.lang.Throwable) mathException35);
        java.lang.Object[] objArray38 = mathException19.getArguments();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
    }

    @Test
    public void test09349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09349");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.close();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str15 = locale13.getDisplayVariant();
        java.lang.String str16 = locale13.getDisplayLanguage();
        java.lang.String str17 = locale13.getDisplayCountry();
        java.lang.Object[] objArray19 = null;
        java.io.PrintStream printStream20 = printStream1.format(locale13, "YZY", objArray19);
        java.io.PrintStream printStream22 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale26 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale.setDefault(category27, locale28);
        java.lang.String str31 = locale26.getDisplayName(locale28);
        java.lang.String str32 = locale28.getDisplayName();
        java.lang.String str33 = locale23.getDisplayLanguage(locale28);
        printStream22.println((java.lang.Object) locale28);
        java.lang.String str35 = locale28.getCountry();
        java.lang.String str36 = locale28.getDisplayLanguage();
        java.io.PrintStream printStream39 = new java.io.PrintStream("ko-KR");
        printStream39.close();
        java.util.Locale locale41 = java.util.Locale.UK;
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream44 = printStream39.format(locale41, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray43);
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream39, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream46);
        printWriter47.print("\u97d3\u6587");
        printWriter47.close();
        printWriter47.print((-3.141592653589793d));
        boolean boolean53 = printWriter47.checkError();
        java.io.PrintStream printStream57 = new java.io.PrintStream("ko-KR");
        printStream57.close();
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream57, false);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter60);
        printWriter60.println((float) (byte) -1);
        java.lang.String[] strArray66 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66, (java.lang.Throwable) mathException68);
        java.io.PrintWriter printWriter70 = printWriter60.printf("it", (java.lang.Object[]) strArray66);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException71 = new org.apache.commons.math.geometry.NotARotationMatrixException("de-DE", (java.lang.Object[]) strArray66);
        java.io.PrintWriter printWriter72 = printWriter47.format("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray66);
        java.io.PrintStream printStream73 = printStream20.printf(locale28, "\u97d3\u6587", (java.lang.Object[]) strArray66);
        printStream73.print((float) 100L);
        java.util.Locale locale77 = new java.util.Locale("English");
        java.io.PrintStream printStream81 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray85 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray85, (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray90 = mathException89.getSuppressed();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray85, (java.lang.Throwable) mathException89);
        java.lang.Throwable[] throwableArray92 = mathException89.getSuppressed();
        java.io.PrintStream printStream93 = printStream81.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray92);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("fra", (java.lang.Object[]) throwableArray92);
        java.io.PrintStream printStream95 = printStream73.printf(locale77, "YZX", (java.lang.Object[]) throwableArray92);
        java.io.PrintStream printStream97 = printStream95.append('#');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "German" + "'", str16, "German");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Germany" + "'", str17, "Germany");
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u97d3\u6587)" + "'", str31, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English" + "'", str32, "English");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English" + "'", str33, "English");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English" + "'", str36, "English");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertEquals(locale77.toString(), "english");
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(printStream93);
        org.junit.Assert.assertNotNull(printStream95);
        org.junit.Assert.assertNotNull(printStream97);
    }

    @Test
    public void test09350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09350");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-8087.321164150444d), 0.9999500037496876d, (-8087.321164150444d), (-43.80155030821067d), true);
        double double6 = rotation5.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.7071015929938704d) + "'", double6 == (-0.7071015929938704d));
    }

    @Test
    public void test09351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09351");
        java.util.Locale locale2 = new java.util.Locale("eng", "org.apache.commons.math.MathException");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale5 = new java.util.Locale("\uc601\uc5b4");
        java.lang.String str6 = locale5.getDisplayScript();
        java.util.Locale locale7 = locale5.stripExtensions();
        java.lang.String str8 = locale7.getDisplayCountry();
        java.lang.String str9 = locale7.getDisplayVariant();
        java.lang.String str10 = locale2.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "eng_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "eng_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4" + "'", str11, "\uc601\uc5b4");
    }

    @Test
    public void test09352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09352");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Germania", strMap1);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("US");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("TWN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList6, strMap7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.parse("zxz", strMap10);
        java.util.Locale.LanguageRange languageRange14 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str15 = languageRange14.getRange();
        java.util.Locale.LanguageRange languageRange18 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str19 = languageRange18.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] { languageRange14, languageRange18 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale26, locale27, locale28, locale29, locale30, locale31, locale33, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList37, filteringMode39);
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter(languageRangeList11, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale locale43 = java.util.Locale.lookup(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale locale44 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.parse("Germany");
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.lang.String str57 = locale56.getDisplayLanguage();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale51, locale52, locale53, locale54, locale55, locale56, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList62, filteringMode64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, strMap66);
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder70 = builder68.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder72 = builder68.setLanguage("ZXZ");
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder74 = builder68.setLocale(locale73);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder76 = builder68.setLocale(locale75);
        java.lang.String str77 = locale75.getDisplayCountry();
        java.util.Set<java.lang.String> strSet78 = locale75.getUnicodeLocaleKeys();
        java.lang.String str79 = java.util.Locale.lookupTag(languageRangeList67, (java.util.Collection<java.lang.String>) strSet78);
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList47, (java.util.Collection<java.lang.String>) strSet78);
        java.util.Locale locale82 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet83 = locale82.getUnicodeLocaleKeys();
        java.util.Locale locale84 = locale82.stripExtensions();
        java.util.Set<java.lang.String> strSet85 = locale82.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList47, (java.util.Collection<java.lang.String>) strSet85);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet85);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zxz" + "'", str15, "zxz");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zxz" + "'", str19, "zxz");
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode39.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNull(locale44);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode64.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Canada" + "'", str77, "Canada");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertEquals(locale82.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strList87);
    }

    @Test
    public void test09353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09353");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((float) (byte) 100);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream16 = printStream11.format(locale13, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        printStream11.println(10.0f);
        printStream11.println((float) 100);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        printWriter5.println((java.lang.Object) printStream24);
        org.apache.commons.math.geometry.RotationOrder rotationOrder26 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotationOrder26.getA3();
        printStream24.print((java.lang.Object) rotationOrder26);
        org.apache.commons.math.geometry.Vector3D vector3D29 = rotationOrder26.getA3();
        java.lang.String str30 = rotationOrder26.toString();
        java.lang.String str31 = rotationOrder26.toString();
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(rotationOrder26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "YZY" + "'", str30, "YZY");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "YZY" + "'", str31, "YZY");
    }

    @Test
    public void test09354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09354");
        java.util.Locale locale2 = new java.util.Locale("japon\350s", "x-lvariant-ZXZ");
        java.io.PrintStream printStream4 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder9 = builder5.setLanguage("ZXZ");
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder11 = builder5.setLocale(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder13 = builder5.setLocale(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet16 = locale12.getUnicodeLocaleKeys();
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter23.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray33 = rotation32.getMatrix();
        java.io.PrintWriter printWriter34 = printWriter23.format("en", (java.lang.Object[]) doubleArray33);
        java.io.PrintStream printStream35 = printStream4.format(locale12, "French", (java.lang.Object[]) doubleArray33);
        java.util.Set<java.lang.String> strSet36 = locale12.getUnicodeLocaleKeys();
        java.lang.String str37 = locale2.getDisplayScript(locale12);
        java.util.Locale.setDefault(locale12);
        org.junit.Assert.assertEquals(locale2.toString(), "japon\350s_X-LVARIANT-ZXZ");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Canada" + "'", str14, "Canada");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test09355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09355");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D1.subtract((double) 10L, vector3D8);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation16.applyInverseTo(vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D28 = vector3D1.add((-0.0d), vector3D26);
        org.apache.commons.math.geometry.Rotation rotation35 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double42 = rotation41.getQ0();
        org.apache.commons.math.geometry.Rotation rotation43 = rotation35.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation41.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D45 = vector3D26.add(1.3660691819214432d, vector3D44);
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation(vector3D26, 1.0d);
        double double48 = vector3D26.getNorm();
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray55 = rotation54.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D66 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D59, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D67 = rotation54.applyInverseTo(vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D68 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D67, vector3D68);
        org.apache.commons.math.geometry.Vector3D vector3D70 = vector3D67.negate();
        org.apache.commons.math.geometry.Vector3D vector3D71 = vector3D26.add(vector3D70);
        double double72 = vector3D70.getX();
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-0.0d) + "'", double72 == (-0.0d));
    }

    @Test
    public void test09356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09356");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale9 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str14 = locale9.getDisplayName(locale11);
        java.lang.String str15 = locale11.getDisplayName();
        java.lang.String str16 = locale6.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder17 = builder0.setLocale(locale6);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale6.getDisplayVariant(locale18);
        java.lang.String str20 = locale18.getLanguage();
        java.lang.String str21 = locale18.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = locale18.getUnicodeLocaleType("GERMAN (KOR)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: GERMAN (KOR)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u97d3\u6587)" + "'", str14, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ja" + "'", str20, "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Japanese" + "'", str21, "Japanese");
    }

    @Test
    public void test09357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09357");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print((double) 0.0f);
        printWriter12.println("zxz (KO_KR)");
        printWriter12.write(0);
        java.io.PrintWriter printWriter20 = printWriter12.append('a');
        // The following exception was thrown during execution in test generation
        try {
            printWriter20.write("ZYZ", 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 110");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test09358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09358");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale10.getVariant();
        printWriter8.print((java.lang.Object) str12);
        boolean boolean14 = printWriter8.checkError();
        printWriter8.println((long) '4');
        printWriter8.print("XYX");
        printWriter8.print((-553.9714827914696d));
        printWriter8.print(100);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09359");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.flush();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter18.write((int) (byte) 10);
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream24, false);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter27);
        printWriter27.println((float) (byte) -1);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.Writer) printWriter27, true);
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double40 = rotation39.getQ0();
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double47 = rotation46.getQ0();
        org.apache.commons.math.geometry.Rotation rotation48 = rotation39.applyTo(rotation46);
        double double49 = rotation39.getQ0();
        double double50 = rotation39.getQ0();
        double[][] doubleArray51 = rotation39.getMatrix();
        java.io.PrintWriter printWriter52 = printWriter32.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR");
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Object[]) doubleArray51, (java.lang.Throwable) mathException54);
        java.io.PrintWriter printWriter56 = printWriter18.printf("\u5fb7\u6587", (java.lang.Object[]) doubleArray51);
        printWriter56.println("XYZ");
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.Writer) printWriter56, true);
        printWriter56.print(10);
        printWriter56.println("ko-kr (ITA)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 52.0d + "'", double50 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter56);
    }

    @Test
    public void test09360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09360");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale9 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str14 = locale9.getDisplayName(locale11);
        java.lang.String str15 = locale11.getDisplayName();
        java.lang.String str16 = locale6.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder17 = builder0.setLocale(locale6);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale6.getDisplayVariant(locale18);
        java.lang.String str20 = locale18.getISO3Country();
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getDisplayVariant();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.String str26 = locale23.getLanguage();
        java.lang.String str27 = locale18.getDisplayLanguage(locale23);
        java.util.Locale.setDefault(locale23);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u97d3\u6587)" + "'", str14, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "jpn" + "'", str21, "jpn");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Japanese" + "'", str27, "Japanese");
    }

    @Test
    public void test09361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09361");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((int) (short) -1);
        printWriter5.close();
        printWriter5.print((int) (byte) -1);
        printWriter5.println((long) (byte) 1);
        printWriter5.print(false);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.lang.String str20 = locale18.getDisplayScript(locale19);
        java.lang.String str21 = locale17.getDisplayLanguage(locale18);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        java.lang.Object[] objArray25 = mathException23.getArguments();
        java.io.PrintWriter printWriter26 = printWriter5.printf(locale17, "eng", objArray25);
        java.util.Locale locale29 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale30);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = locale32.getDisplayScript(locale33);
        java.lang.String str35 = locale30.getDisplayLanguage(locale33);
        java.lang.String str36 = locale29.getDisplayVariant(locale33);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder41 = builder37.setLanguage("ZXZ");
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder43 = builder37.setLocale(locale42);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder45 = builder37.setLocale(locale44);
        java.lang.String str46 = locale44.getDisplayCountry();
        java.lang.String str47 = locale29.getDisplayScript(locale44);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray52 = mathException51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = mathException51.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException54 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray53);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException55 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray53);
        java.io.PrintWriter printWriter56 = printWriter5.format(locale44, "\uc911\uad6d\uc5b4", (java.lang.Object[]) throwableArray53);
        printWriter56.print(true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais" + "'", str21, "fran\347ais");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertEquals(locale29.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u97d3\u6587" + "'", str35, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\uce90\ub098\ub2e4" + "'", str46, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printWriter56);
    }

    @Test
    public void test09362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09362");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 9610.932890332206d, 10.0d, (double) (-1L));
        org.apache.commons.math.geometry.Rotation rotation9 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.8414709848078965d, (double) 0, (-5.203623393651532E-5d));
        org.apache.commons.math.geometry.Rotation rotation15 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double16 = rotation15.getQ0();
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation24 = rotation15.applyTo(rotation22);
        org.apache.commons.math.geometry.Rotation rotation25 = rotation15.revert();
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double32 = rotation31.getQ0();
        org.apache.commons.math.geometry.Rotation rotation33 = rotation15.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double40 = rotation39.getQ1();
        double double41 = rotation39.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D51 = vector3D43.subtract((double) 10L, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = rotation39.applyInverseTo(vector3D50);
        org.apache.commons.math.geometry.Rotation rotation53 = rotation15.applyInverseTo(rotation39);
        double double54 = rotation39.getQ2();
        org.apache.commons.math.geometry.Rotation rotation55 = rotation9.applyTo(rotation39);
        double[][] doubleArray56 = rotation9.getMatrix();
        org.apache.commons.math.geometry.RotationOrder rotationOrder57 = org.apache.commons.math.geometry.RotationOrder.ZXY;
        org.apache.commons.math.geometry.Vector3D vector3D58 = rotationOrder57.getA2();
        org.apache.commons.math.geometry.Rotation rotation62 = new org.apache.commons.math.geometry.Rotation(rotationOrder57, (-0.8230677854004599d), (-1.2792393947944187d), 0.0d);
        double double63 = rotation62.getQ0();
        org.apache.commons.math.geometry.Rotation rotation64 = rotation9.applyTo(rotation62);
        org.apache.commons.math.geometry.Vector3D vector3D67 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Rotation rotation69 = new org.apache.commons.math.geometry.Rotation(vector3D67, (double) 1);
        org.apache.commons.math.geometry.Vector3D vector3D70 = rotation69.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D75 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D73, (double) (byte) 100, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D78, (double) (byte) 100, vector3D80);
        org.apache.commons.math.geometry.Vector3D vector3D82 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D75, vector3D80);
        org.apache.commons.math.geometry.Vector3D vector3D85 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D87 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D88 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D85, (double) (byte) 100, vector3D87);
        org.apache.commons.math.geometry.Vector3D vector3D89 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D75, (double) 0.0f, vector3D87);
        double double90 = vector3D89.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D91 = rotation69.applyInverseTo(vector3D89);
        org.apache.commons.math.geometry.Rotation rotation92 = rotation64.applyTo(rotation69);
        org.apache.commons.math.geometry.Rotation rotation93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation94 = rotation92.applyInverseTo(rotation93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(rotationOrder57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.7353355353057097d + "'", double63 == 0.7353355353057097d);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(rotation92);
    }

    @Test
    public void test09363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09363");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print("XYZ");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        boolean boolean12 = printWriter11.checkError();
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter17.print((double) (byte) 100);
        printWriter17.println();
        printWriter17.println('#');
        printWriter17.println(false);
        printWriter17.close();
        printWriter17.print((int) (short) 0);
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        printWriter34.print((long) (short) 100);
        printWriter34.print((int) 'u');
        java.io.PrintStream printStream40 = new java.io.PrintStream("ko-KR");
        printStream40.close();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream40, false);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.Writer) printWriter43);
        printWriter44.print((long) (short) 100);
        printWriter44.print((int) 'u');
        java.io.PrintStream printStream50 = new java.io.PrintStream("ko-KR");
        printStream50.close();
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream50, false);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.Writer) printWriter53);
        printWriter53.println((float) (byte) -1);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.Writer) printWriter53, true);
        java.lang.String[] strArray60 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter61 = printWriter53.printf("KR", (java.lang.Object[]) strArray60);
        java.io.PrintStream printStream63 = new java.io.PrintStream("ko-KR");
        printStream63.close();
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.OutputStream) printStream63, false);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.Writer) printWriter66);
        char[] charArray70 = new char[] { ' ', 'x' };
        printWriter67.write(charArray70);
        printWriter53.println(charArray70);
        printWriter44.print(charArray70);
        printWriter34.write(charArray70);
        printWriter17.println(charArray70);
        printWriter11.write(charArray70);
        java.io.PrintWriter printWriter78 = printWriter11.append((java.lang.CharSequence) "italian");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter78);
    }

    @Test
    public void test09364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09364");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException(throwable1);
        java.lang.String[] strArray4 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray4);
        mathException2.addSuppressed((java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("canada", (java.lang.Throwable) mathException5);
        org.junit.Assert.assertNotNull(strArray4);
    }

    @Test
    public void test09365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09365");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale locale11 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder10.setExtension('a', "\u82f1\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
    }

    @Test
    public void test09366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09366");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Collection<java.lang.String> strCollection4 = null;
        java.lang.String str5 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strCollection4);
        java.util.Collection<java.util.Locale> localeCollection6 = null;
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Collection<java.lang.String> strCollection10 = null;
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strCollection10);
        java.lang.String[] strArray25 = new java.lang.String[] { "org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uce90\ub098\ub2e4", "org.apache.commons.math.geometry.NotARotationMatrixException: ", "YZY", "\u97d3\u6587", "en_CA", "English", "TWN", "\u97d3\u6587", "zxz_FRAN\347AIS", "org.apache.commons.math.MathException: ZXZ", "KR", "ko-KR" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList26);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.lang.String str38 = locale37.getDisplayLanguage();
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale32, locale33, locale34, locale35, locale36, locale37, locale39, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList43, filteringMode45);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, strMap47);
        java.util.Locale locale50 = new java.util.Locale("ko-KR");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList48, (java.util.Collection<java.lang.String>) strSet51);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList52);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Collection<java.lang.String> strCollection57 = null;
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strCollection57);
        java.lang.String[] strArray72 = new java.lang.String[] { "org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uce90\ub098\ub2e4", "org.apache.commons.math.geometry.NotARotationMatrixException: ", "YZY", "\u97d3\u6587", "en_CA", "English", "TWN", "\u97d3\u6587", "zxz_FRAN\347AIS", "org.apache.commons.math.MathException: ZXZ", "KR", "ko-KR" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.lang.String>) strList73);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList75, filteringMode76);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, localeCollection6, filteringMode76);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertEquals(locale50.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode76.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(localeList78);
    }

    @Test
    public void test09367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09367");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.io.PrintWriter printWriter31 = printWriter9.append('a');
        printWriter9.write("\uce90\ub098\ub2e4");
        printWriter9.print((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter31);
    }

    @Test
    public void test09368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09368");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        double double15 = rotation5.getQ0();
        double double16 = rotation5.getQ0();
        double double17 = rotation5.getQ0();
        double double18 = rotation5.getAngle();
        double double19 = rotation5.getQ3();
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double26 = rotation25.getQ0();
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double33 = rotation32.getQ0();
        org.apache.commons.math.geometry.Rotation rotation34 = rotation25.applyTo(rotation32);
        org.apache.commons.math.geometry.Rotation rotation35 = rotation25.revert();
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation42 = rotation35.applyTo(rotation41);
        org.apache.commons.math.geometry.RotationOrder rotationOrder44 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D45 = rotationOrder44.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D51, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D61, (double) (byte) 100, vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D51, (double) 0.0f, vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D67 = vector3D65.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D45, (double) '#', vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotation35.applyTo(vector3D67);
        double double70 = rotation35.getAngle();
        org.apache.commons.math.geometry.RotationOrder rotationOrder71 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation75 = new org.apache.commons.math.geometry.Rotation(rotationOrder71, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D76 = rotationOrder71.getA2();
        double double77 = vector3D76.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation35.applyTo(vector3D76);
        org.apache.commons.math.geometry.Rotation rotation79 = rotation5.applyInverseTo(rotation35);
        org.apache.commons.math.geometry.Rotation rotation80 = rotation35.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder81 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D82 = rotationOrder81.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D83 = rotationOrder81.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D84 = rotationOrder81.getA2();
        java.lang.String str85 = rotationOrder81.toString();
        org.apache.commons.math.geometry.Vector3D vector3D86 = rotationOrder81.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D87 = rotation80.applyTo(vector3D86);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertNotNull(rotation42);
        org.junit.Assert.assertNotNull(rotationOrder44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(rotationOrder71);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(rotation79);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertNotNull(rotationOrder81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "XZY" + "'", str85, "XZY");
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D87);
    }

    @Test
    public void test09369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09369");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale0.getDisplayName(locale3);
        java.util.Locale locale7 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet8 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder13 = builder9.setLanguage("ZXZ");
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder15 = builder9.setLocale(locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder17 = builder9.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder9.setLanguage("fra");
        java.util.Locale locale20 = builder9.build();
        java.util.Locale locale21 = builder9.build();
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale21.getScript();
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream25, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter28);
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter32 = printWriter29.printf("ko-KR", (java.lang.Object[]) strArray31);
        java.io.PrintWriter printWriter34 = printWriter29.append('x');
        printWriter29.println("French");
        java.io.PrintStream printStream39 = new java.io.PrintStream("ko-KR");
        printStream39.close();
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream39, false);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter42);
        printWriter43.print((long) (short) 100);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter43, true);
        java.io.PrintWriter printWriter49 = printWriter43.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter51 = printWriter49.append(' ');
        printWriter49.print(true);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        java.lang.Object[] objArray58 = mathException56.getArguments();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("", objArray58);
        java.io.PrintWriter printWriter60 = printWriter49.format("Germany", objArray58);
        java.io.PrintWriter printWriter61 = printWriter29.printf("\uc77c\ubcf8\uc5b4", objArray58);
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder64 = builder62.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder66 = builder62.setLanguage("ZXZ");
        java.util.Locale locale67 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder68 = builder62.setLocale(locale67);
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder70 = builder62.setLocale(locale69);
        java.lang.String str71 = locale69.getDisplayCountry();
        java.util.Set<java.lang.String> strSet72 = locale69.getUnicodeLocaleKeys();
        boolean boolean73 = locale69.hasExtensions();
        java.lang.String str74 = locale69.getLanguage();
        java.lang.Object[] objArray76 = null;
        java.io.PrintWriter printWriter77 = printWriter61.format(locale69, "chn", objArray76);
        java.lang.String str78 = locale69.getCountry();
        java.lang.String str79 = locale21.getDisplayLanguage(locale69);
        java.lang.String str80 = locale0.getDisplayCountry(locale21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = locale21.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str6, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fra_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fra_CA");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\uce90\ub098\ub2e4" + "'", str71, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "en" + "'", str74, "en");
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "CA" + "'", str78, "CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "fra" + "'", str79, "fra");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Taiwan" + "'", str80, "Taiwan");
    }

    @Test
    public void test09370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09370");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = printStream1.append(' ');
        printStream1.print((long) 'a');
        printStream1.write((int) (short) 10);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream37.print(0.0d);
        printStream37.close();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test09371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09371");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D1.subtract((double) 10L, vector3D8);
        org.apache.commons.math.geometry.Vector3D vector3D11 = vector3D8.scalarMultiply(10.000870209653117d);
        org.apache.commons.math.geometry.RotationOrder rotationOrder12 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation(rotationOrder12, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D24, (double) (byte) 100, vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D28 = rotation22.applyTo(vector3D24);
        double double29 = rotation22.getAngle();
        double double30 = rotation22.getQ3();
        org.apache.commons.math.geometry.Rotation rotation31 = rotation16.applyTo(rotation22);
        org.apache.commons.math.geometry.RotationOrder rotationOrder32 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D33 = rotationOrder32.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotationOrder32.getA2();
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D41 = rotation40.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D51 = vector3D43.subtract((double) 10L, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D53 = vector3D43.scalarMultiply((double) 0);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D41.subtract(vector3D43);
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation(vector3D34, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D56 = rotation31.applyInverseTo(vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D57 = vector3D11.add(vector3D41);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(rotationOrder12);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotationOrder32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
    }

    @Test
    public void test09372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09372");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(0.453352281948313d, 0.9981326374477802d, (-0.4869163399816042d), 2.904353524465863E17d, true);
    }

    @Test
    public void test09373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09373");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        java.io.PrintStream printStream9 = printStream1.append('#');
        boolean boolean10 = printStream1.checkError();
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        printWriter15.println((float) (byte) -1);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter15, true);
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream22, false);
        java.io.PrintStream printStream27 = printStream22.append((java.lang.CharSequence) "en");
        char[] charArray34 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream27.println(charArray34);
        printWriter15.println(charArray34);
        printStream1.println(charArray34);
        printStream1.println(' ');
        printStream1.print(' ');
        printStream1.println("de_DE");
        printStream1.close();
        java.io.PrintStream printStream46 = printStream1.append((java.lang.CharSequence) "tedesco-TW-x-lvariant-YZY");
        boolean boolean47 = printStream1.checkError();
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[a,  , #, a, #, x]");
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test09374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09374");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder8.setRegion("");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getVariant();
        java.util.Locale.Builder builder15 = builder10.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.lang.String str22 = locale17.getDisplayLanguage(locale19);
        java.lang.String str24 = locale17.getExtension('u');
        java.util.Locale.Builder builder25 = builder15.setLocale(locale17);
        java.util.Locale.Builder builder27 = builder25.setRegion("GB");
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale.Builder builder29 = builder28.clearExtensions();
        java.util.Locale.Builder builder31 = builder29.setLanguage("Italy");
        java.util.Locale.Builder builder33 = builder29.removeUnicodeLocaleAttribute("chn");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder33.setScript("xyz");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: xyz [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test09375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09375");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray6 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray6, (java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray6, (java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray13 = mathException10.getSuppressed();
        java.io.PrintStream printStream14 = printStream2.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray13);
        boolean boolean15 = printStream2.checkError();
        java.io.PrintStream printStream17 = printStream2.append((java.lang.CharSequence) "CHN");
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream2);
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.util.Locale.setDefault(category19, locale22);
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale27);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.lang.String str32 = locale27.getDisplayLanguage(locale30);
        java.lang.String str34 = locale27.getExtension('a');
        java.util.Set<java.lang.String> strSet35 = locale27.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category19, locale27);
        java.util.Set<java.lang.String> strSet37 = locale27.getUnicodeLocaleKeys();
        java.lang.String str38 = locale27.getISO3Country();
        java.io.PrintStream printStream41 = new java.io.PrintStream("XZX");
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException47);
        java.lang.Object[] objArray49 = mathException47.getArguments();
        java.io.PrintStream printStream52 = new java.io.PrintStream("ko-KR");
        printStream52.close();
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream52, false);
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.Writer) printWriter55);
        java.lang.String[] strArray58 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter59 = printWriter56.printf("ko-KR", (java.lang.Object[]) strArray58);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException60 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray58);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("German", objArray49, (java.lang.Throwable) notARotationMatrixException60);
        java.io.PrintStream printStream62 = printStream41.printf("XZX", objArray49);
        java.io.PrintStream printStream63 = printStream18.format(locale27, "\u4e2d\u570b", objArray49);
        java.lang.String[] strArray67 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray67, (java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) strArray67);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: English", (java.lang.Throwable) mathException71);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("\uc601\uc5b4 (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION)", objArray49, (java.lang.Throwable) mathException71);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u97d3\u6587" + "'", str32, "\u97d3\u6587");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "KOR" + "'", str38, "KOR");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(strArray67);
    }

    @Test
    public void test09376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09376");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "org.apache.commons.math.MathException: ");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09377");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        printWriter5.print((float) 'u');
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale10.getCountry();
        java.lang.String str14 = locale10.getScript();
        java.util.Locale locale15 = locale10.stripExtensions();
        java.lang.String str16 = locale15.getCountry();
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter23, false);
        java.io.PrintWriter printWriter28 = printWriter23.append('a');
        printWriter28.print((int) (short) 1);
        printWriter28.print((int) '#');
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37);
        java.lang.Object[] objArray39 = mathException38.getArguments();
        java.lang.String str40 = mathException38.getPattern();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException38);
        java.lang.Object[] objArray43 = mathException38.getArguments();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("French");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("\uc601\uc5b4", (java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("YXY", objArray43, (java.lang.Throwable) mathException46);
        java.lang.Object[] objArray49 = mathException48.getArguments();
        java.io.PrintWriter printWriter50 = printWriter28.format("\uce90\ub098\ub2e4", objArray49);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException51 = new org.apache.commons.math.geometry.NotARotationMatrixException("\u4e2d\u56fd\u8a9e", objArray49);
        java.io.PrintWriter printWriter52 = printWriter5.format(locale15, "org.apache.commons.math.geometry.NotARotationMatrixException: de-DE", objArray49);
        printWriter52.println();
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ZXZ" + "'", str40, "ZXZ");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printWriter52);
    }

    @Test
    public void test09378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09378");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        java.io.PrintStream printStream87 = printStream85.append('4');
        printStream85.print((double) (-1L));
        printStream85.write((int) '4');
        java.io.PrintStream printStream93 = printStream85.append(' ');
        java.io.PrintWriter printWriter94 = new java.io.PrintWriter((java.io.OutputStream) printStream93);
        printWriter94.println((long) 10);
        printWriter94.print(true);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test09379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09379");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        printStream90.println(false);
        printStream90.println("");
        boolean boolean95 = printStream90.checkError();
        printStream90.println("org.apache.commons.math.MathException");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test09380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09380");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, (double) (byte) 100, vector3D4);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D4, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D4, (double) 0.0f, vector3D16);
        double double19 = vector3D16.getX();
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test09381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09381");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = printWriter11.append(' ');
        printWriter13.print((float) (byte) 0);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder20 = builder16.setLanguage("ZXZ");
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder16.setLocale(locale21);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder24 = builder16.setLocale(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.lang.String str26 = locale23.getLanguage();
        printWriter13.println((java.lang.Object) locale23);
        printWriter13.print(false);
        printWriter13.flush();
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uce90\ub098\ub2e4" + "'", str25, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
    }

    @Test
    public void test09382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09382");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.lang.String> strCollection3 = null;
        java.lang.String str4 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("tw", strMap6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale11, locale12, locale13, locale14, locale15, locale16, locale18, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale.FilteringMode filteringMode24 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList22, filteringMode24);
        java.lang.String[] strArray29 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.lang.String str32 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale36, locale37, locale38, locale39, locale40, locale41, locale43, locale44, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList47, filteringMode49);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList47, filteringMode51);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList52, filteringMode53);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList54);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + filteringMode24 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode24.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode49.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode51.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode53.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(localeList55);
    }

    @Test
    public void test09383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09383");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        printStream85.println((int) (byte) -1);
        printStream85.println((long) (byte) 1);
        java.io.PrintStream printStream90 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        printStream90.println((int) 'a');
        java.io.PrintStream printStream93 = new java.io.PrintStream((java.io.OutputStream) printStream90);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream96 = new java.io.PrintStream((java.io.OutputStream) printStream93, false, "United States");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: United States");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test09384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09384");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder1.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder1.getA2();
        org.apache.commons.math.geometry.Rotation rotation9 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D10 = rotation9.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D12, (double) (byte) 100, vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D20 = vector3D12.subtract((double) 10L, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D22 = vector3D12.scalarMultiply((double) 0);
        org.apache.commons.math.geometry.Vector3D vector3D23 = vector3D10.subtract(vector3D12);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation(vector3D3, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D25 = vector3D3.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D(2.692332829084591d, vector3D3);
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double33 = rotation32.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double40 = rotation39.getQ0();
        org.apache.commons.math.geometry.Rotation rotation41 = rotation32.applyTo(rotation39);
        org.apache.commons.math.geometry.Rotation rotation42 = rotation32.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder43 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation(rotationOrder43, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation48 = rotation42.applyTo(rotation47);
        double double49 = rotation48.getAngle();
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation61 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double62 = rotation61.getQ0();
        org.apache.commons.math.geometry.Rotation rotation63 = rotation55.applyInverseTo(rotation61);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D70, (double) (byte) 100, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D67, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D75 = rotation63.applyTo(vector3D74);
        org.apache.commons.math.geometry.Vector3D vector3D76 = rotation63.getAxis();
        org.apache.commons.math.geometry.Rotation rotation77 = rotation63.revert();
        org.apache.commons.math.geometry.Rotation rotation78 = rotation48.applyInverseTo(rotation77);
        org.apache.commons.math.geometry.Vector3D vector3D79 = rotation77.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D80 = vector3D26.add(vector3D79);
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertNotNull(rotation42);
        org.junit.Assert.assertNotNull(rotationOrder43);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 52.0d + "'", double62 == 52.0d);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotation77);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
    }

    @Test
    public void test09385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09385");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray15 = rotation14.getMatrix();
        java.io.PrintWriter printWriter16 = printWriter5.format("en", (java.lang.Object[]) doubleArray15);
        printWriter16.println('a');
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        printWriter16.println((java.lang.Object) (byte) -1);
        boolean boolean26 = printWriter16.checkError();
        printWriter16.println((int) (short) 100);
        printWriter16.println("kr");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test09386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09386");
        java.util.Locale locale2 = new java.util.Locale("fran\347ais", "\u6cd5\u6587");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.util.Locale locale4 = locale2.stripExtensions();
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale.setDefault(category6, locale9);
        java.util.Locale.setDefault(locale9);
        java.lang.String str15 = locale9.getDisplayName();
        java.lang.String str16 = locale4.getDisplayScript(locale9);
        java.util.Set<java.lang.String> strSet17 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale20 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale21 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale21);
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.lang.String str26 = locale21.getDisplayLanguage(locale24);
        java.lang.String str27 = locale20.getDisplayVariant(locale24);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder32 = builder28.setLanguage("ZXZ");
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder34 = builder28.setLocale(locale33);
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder36 = builder28.setLocale(locale35);
        java.lang.String str37 = locale35.getDisplayCountry();
        java.lang.String str38 = locale20.getDisplayScript(locale35);
        java.io.PrintStream printStream40 = new java.io.PrintStream("ko-KR");
        printStream40.close();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream40, false);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.Writer) printWriter43);
        printWriter44.print((long) (short) 100);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter44, true);
        java.io.PrintWriter printWriter50 = printWriter44.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter44, false);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder57 = builder53.setLanguage("ZXZ");
        java.util.Locale.Builder builder58 = builder53.clear();
        java.util.Locale.Category category59 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category60 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.util.Locale.setDefault(category60, locale61);
        java.util.Locale.setDefault(category59, locale61);
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale61.getDisplayLanguage(locale65);
        java.util.Locale.Builder builder67 = builder53.setLocale(locale65);
        java.lang.String str68 = locale65.getDisplayCountry();
        java.lang.Object[] objArray70 = null;
        java.io.PrintWriter printWriter71 = printWriter52.format(locale65, "en", objArray70);
        java.lang.String str72 = locale35.getDisplayVariant(locale65);
        java.lang.String str73 = locale65.getVariant();
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.lang.String str75 = locale74.getDisplayLanguage();
        java.lang.String str76 = locale74.getDisplayName();
        java.lang.String str77 = locale74.getDisplayScript();
        java.lang.String str78 = locale65.getDisplayScript(locale74);
        java.lang.String str79 = locale4.getDisplayCountry(locale65);
        java.lang.String str80 = locale65.getVariant();
        java.lang.String str81 = locale65.getDisplayLanguage();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "fran\347\u6cd5\u6587");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "fran\347\u6cd5\u6587");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals(locale20.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u97d3\u6587" + "'", str26, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uce90\ub098\ub2e4" + "'", str37, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.FORMAT + "'", category59.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category60 + "' != '" + java.util.Locale.Category.FORMAT + "'", category60.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str75, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str76, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u6cd5\u6587" + "'", str79, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str81, "\ub3c5\uc77c\uc5b4");
    }

    @Test
    public void test09387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09387");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream8 = printStream3.format(locale5, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream3, false);
        printStream3.println(10.0f);
        java.lang.String[] strArray15 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray15);
        java.io.PrintStream printStream17 = printStream3.format("\u97d3\u6587", (java.lang.Object[]) strArray15);
        printStream3.println((float) 10);
        java.lang.String[] strArray24 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray24, (java.lang.Throwable) mathException27);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException29 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray24);
        java.io.PrintStream printStream30 = printStream3.printf("jpn", (java.lang.Object[]) strArray24);
        java.lang.String[] strArray34 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray34, (java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray39 = mathException38.getSuppressed();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray34, (java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray41 = mathException38.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException42 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException((java.lang.Throwable) notARotationMatrixException42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("french", (java.lang.Object[]) strArray24, (java.lang.Throwable) mathException43);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException45 = new org.apache.commons.math.geometry.NotARotationMatrixException("zh_TW", (java.lang.Object[]) strArray24);
        java.lang.Class<?> wildcardClass46 = notARotationMatrixException45.getClass();
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test09388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09388");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayScript();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        java.lang.String str11 = locale7.getDisplayLanguage(locale8);
        java.lang.String str12 = locale8.getISO3Language();
        boolean boolean13 = locale8.hasExtensions();
        java.lang.String str14 = locale4.getDisplayLanguage(locale8);
        java.lang.String str15 = locale0.getDisplayVariant(locale8);
        java.lang.String str16 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais" + "'", str11, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fra" + "'", str12, "fra");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fran\347ais" + "'", str14, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str16, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
    }

    @Test
    public void test09389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09389");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.lang.String[] strArray6 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream7 = printStream2.format(locale4, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray6);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream2, false);
        printStream2.println(10.0f);
        java.lang.String[] strArray14 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray14);
        java.io.PrintStream printStream16 = printStream2.format("\u97d3\u6587", (java.lang.Object[]) strArray14);
        printStream16.close();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException(throwable19);
        java.lang.String[] strArray22 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray22);
        mathException20.addSuppressed((java.lang.Throwable) mathException23);
        java.lang.Throwable[] throwableArray25 = mathException23.getSuppressed();
        java.io.PrintStream printStream26 = printStream16.format("French", (java.lang.Object[]) throwableArray25);
        printStream16.close();
        java.io.PrintStream printStream29 = printStream16.append((java.lang.CharSequence) "zho");
        printStream16.print("\ub3c5\uc77c");
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("YZY");
        java.lang.String str37 = locale33.getDisplayCountry(locale36);
        java.lang.String str38 = locale36.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleKeys();
        java.io.PrintStream printStream42 = new java.io.PrintStream("ko-KR");
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        char[] charArray49 = new char[] { ' ', 'x' };
        printWriter46.write(charArray49);
        printWriter46.write((int) (byte) 1);
        printWriter46.print((int) (short) 0);
        printWriter46.println("org.apache.commons.math.MathException: ZXZ");
        printWriter46.println('4');
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray61 = mathException60.getSuppressed();
        java.lang.Object[] objArray62 = mathException60.getArguments();
        java.io.PrintWriter printWriter63 = printWriter46.printf("\u97d3\u6587)", objArray62);
        java.io.PrintStream printStream64 = printStream16.printf(locale36, "japon\350s", objArray62);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException65 = new org.apache.commons.math.geometry.NotARotationMatrixException("xyz", objArray62);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "yzy");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "yzy" + "'", str38, "yzy");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printStream64);
    }

    @Test
    public void test09390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09390");
        java.util.Locale locale1 = new java.util.Locale("de_DE");
        java.lang.String str3 = locale1.getExtension('a');
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getDisplayLanguage(locale6);
        java.util.Locale.setDefault(locale4);
        java.util.Set<java.lang.String> strSet11 = locale4.getUnicodeLocaleKeys();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str14 = locale4.getDisplayName(locale13);
        java.lang.String str15 = locale4.getISO3Language();
        java.lang.String str16 = locale1.getDisplayLanguage(locale4);
        boolean boolean17 = locale4.hasExtensions();
        java.lang.String str18 = locale4.getCountry();
        java.util.Locale.setDefault(locale4);
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale20);
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str23 = locale4.getDisplayLanguage(locale20);
        org.junit.Assert.assertEquals(locale1.toString(), "de_de");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "de_de" + "'", str16, "de_de");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "kor" + "'", str22, "kor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test09391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09391");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        double[][] doubleArray15 = rotation12.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D23 = rotation21.getAxis();
        org.apache.commons.math.geometry.Rotation rotation24 = rotation12.applyTo(rotation21);
        double[][] doubleArray25 = rotation24.getMatrix();
        double[][] doubleArray26 = rotation24.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation(doubleArray26, (-0.13715201283077028d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test09392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09392");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        java.io.PrintStream printStream12 = printStream1.append((java.lang.CharSequence) "hi!");
        printStream12.print((long) (short) 1);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream12, true);
        printStream16.print(true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream12);
    }

    @Test
    public void test09393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09393");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder9 = builder5.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale10 = builder5.build();
        java.util.Locale.Builder builder12 = builder5.addUnicodeLocaleAttribute("TWN");
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale.setDefault(category14, locale16);
        java.util.Locale.setDefault(category13, locale16);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale16.getDisplayScript(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Locale.Builder builder24 = builder12.setLocale(locale21);
        java.util.Locale.Builder builder27 = builder24.setExtension('a', "ko-kr");
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale.setDefault(category28, locale29);
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        boolean boolean34 = locale33.hasExtensions();
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale.setDefault(category28, locale33);
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category38 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.util.Locale.setDefault(category38, locale39);
        java.util.Locale.setDefault(category37, locale39);
        java.util.Locale.setDefault(category28, locale39);
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.lang.String str46 = locale44.getExtension('a');
        java.lang.String str47 = locale39.getDisplayScript(locale44);
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.util.Locale.setDefault(category48, locale49);
        java.util.Locale locale52 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale52);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.lang.String str56 = locale54.getDisplayScript(locale55);
        java.lang.String str57 = locale52.getDisplayLanguage(locale55);
        java.util.Locale.setDefault(category48, locale55);
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder59.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder63 = builder59.setLanguage("ZXZ");
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder65 = builder59.setLocale(locale64);
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder67 = builder59.setLocale(locale66);
        java.lang.String str68 = locale66.getDisplayCountry();
        java.lang.String str69 = locale66.getDisplayLanguage();
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.util.Locale locale71 = java.util.Locale.TAIWAN;
        java.lang.String str72 = locale70.getDisplayScript(locale71);
        java.util.Locale locale75 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str76 = locale70.getDisplayLanguage(locale75);
        java.lang.String str77 = locale66.getDisplayVariant(locale75);
        java.util.Locale.setDefault(category48, locale75);
        java.lang.String str79 = locale44.getDisplayVariant(locale75);
        java.util.Locale.Builder builder80 = builder24.setLocale(locale44);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc911\uad6d" + "'", str23, "\uc911\uad6d");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.FORMAT + "'", category28.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + category37 + "' != '" + java.util.Locale.Category.FORMAT + "'", category37.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.FORMAT + "'", category38.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko_KR");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u97d3\u6587" + "'", str57, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\uce90\ub098\ub2e4" + "'", str68, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\uc601\uc5b4" + "'", str69, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals(locale75.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "French" + "'", str76, "French");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test09394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09394");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getCountry();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("\uc911\uad6d\uc5b4");
        java.lang.String str6 = locale1.getDisplayScript(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale5.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test09395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09395");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        double double12 = rotation5.getAngle();
        double double13 = rotation5.getQ3();
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D18, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D28, (double) (byte) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D39, (double) (byte) 100, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D36, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D23, (double) (byte) 1, vector3D31, (double) (short) 100, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D45 = vector3D23.negate();
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D51 = vector3D45.subtract(vector3D50);
        double double52 = vector3D50.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D56, (double) (byte) 100, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D61, (double) (byte) 100, vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D58, vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D68 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D68, (double) (byte) 100, vector3D70);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D79 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D82 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D79, (double) (byte) 100, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D83 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D76, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D84 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D63, (double) (byte) 1, vector3D71, (double) (short) 100, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D85 = vector3D50.subtract((double) (byte) -1, vector3D81);
        double double86 = vector3D81.getX();
        org.apache.commons.math.geometry.Vector3D vector3D87 = rotation5.applyInverseTo(vector3D81);
        org.apache.commons.math.geometry.Rotation rotation93 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double94 = rotation93.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D95 = rotation93.getAxis();
        org.apache.commons.math.geometry.Rotation rotation96 = rotation5.applyInverseTo(rotation93);
        double double97 = rotation5.getQ3();
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 100.0d + "'", double94 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(rotation96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 10.0d + "'", double97 == 10.0d);
    }

    @Test
    public void test09396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09396");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(1.0492314592E10d, 0.18998822293489467d, (-100.0d), 0.14021374045667287d, false);
    }

    @Test
    public void test09397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09397");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print((int) ' ');
        printStream1.println((double) 100.0f);
        printStream1.print(' ');
        java.lang.String[] strArray17 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray17, (java.lang.Throwable) mathException20);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException22 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray17);
        java.io.PrintStream printStream23 = printStream1.format("und", (java.lang.Object[]) strArray17);
        printStream1.close();
        java.lang.CharSequence charSequence25 = null;
        java.io.PrintStream printStream26 = printStream1.append(charSequence25);
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream28, false);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.Writer) printWriter31);
        printWriter31.print((double) (byte) 100);
        printWriter31.println();
        printWriter31.println('#');
        java.io.PrintWriter printWriter39 = printWriter31.append('#');
        printWriter39.close();
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter39, true);
        java.lang.String[] strArray45 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.String str48 = mathException46.getPattern();
        java.lang.Throwable[] throwableArray49 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter50 = printWriter42.printf("\u5fb7\u56fd", (java.lang.Object[]) throwableArray49);
        printWriter50.println('4');
        printStream1.print((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "CA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: CA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ZXZ" + "'", str48, "ZXZ");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printWriter50);
    }

    @Test
    public void test09398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09398");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream("ko-KR");
        printStream10.close();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String[] strArray14 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream15 = printStream10.format(locale12, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray14);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream10, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        printWriter18.print((float) (short) 10);
        printWriter4.println((java.lang.Object) printWriter18);
        printWriter4.println();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println("\ud504\ub791\uc2a4\uc5b4");
        printWriter4.println();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter30 = printWriter4.append((java.lang.CharSequence) "ZYX", 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -99");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test09399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09399");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "GB");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: GB");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09400");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.close();
        printWriter4.print((long) (byte) 10);
        printWriter4.print((float) (byte) -1);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        java.lang.String str18 = locale14.getDisplayLanguage(locale15);
        java.lang.String str19 = locale15.getDisplayLanguage();
        java.lang.String str20 = locale15.getDisplayLanguage();
        java.lang.String str21 = locale15.getCountry();
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream24, false);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter27);
        printWriter28.println('a');
        printWriter28.print(true);
        printWriter28.flush();
        java.lang.String[] strArray37 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray37, (java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        java.io.PrintWriter printWriter43 = printWriter28.format("zho", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter4.format(locale15, "Allemagne", (java.lang.Object[]) throwableArray42);
        printWriter4.print(0.7353355353057097d);
        printWriter4.println("");
        printWriter4.println('x');
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fran\347ais" + "'", str18, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str19, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str20, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter44);
    }

    @Test
    public void test09401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09401");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, (double) (byte) 100, vector3D4);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D4, vector3D9);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray19 = rotation18.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D23, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotation18.applyInverseTo(vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D31, vector3D32);
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotation40.applyTo(vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D42.negate();
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        double double50 = vector3D49.getY();
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D4, (double) ' ', vector3D31, (double) (-1.0f), vector3D47, (double) 10.0f, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D59, (double) (byte) 100, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D56, vector3D61);
        double double64 = vector3D56.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D67, (double) (byte) 100, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D72 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D75 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D72, (double) (byte) 100, vector3D74);
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D69, vector3D74);
        org.apache.commons.math.geometry.Vector3D vector3D79 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D82 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D79, (double) (byte) 100, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D85 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D87 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D88 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D85, (double) (byte) 100, vector3D87);
        org.apache.commons.math.geometry.Vector3D vector3D90 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D92 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D93 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D90, (double) (byte) 100, vector3D92);
        org.apache.commons.math.geometry.Vector3D vector3D94 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D87, vector3D92);
        org.apache.commons.math.geometry.Vector3D vector3D95 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D74, (double) (byte) 1, vector3D82, (double) (short) 100, vector3D92);
        org.apache.commons.math.geometry.Vector3D vector3D96 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D56, vector3D74);
        org.apache.commons.math.geometry.Vector3D vector3D97 = vector3D47.add((-0.09966865249116204d), vector3D96);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertNotNull(vector3D96);
        org.junit.Assert.assertNotNull(vector3D97);
    }

    @Test
    public void test09402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09402");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ3();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotation5.getAxis();
        double double8 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotation5.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D10 = vector3D9.negate();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
    }

    @Test
    public void test09403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09403");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream12 = printStream7.format(locale9, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.String str26 = locale23.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        java.io.PrintWriter printWriter35 = printWriter18.format(locale23, "YZY", (java.lang.Object[]) doubleArray34);
        java.lang.String str36 = locale9.getDisplayCountry(locale23);
        java.util.Locale.Builder builder37 = builder5.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder37.setExtension('#', "Deutsch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United Kingdom" + "'", str36, "United Kingdom");
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test09404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09404");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.addUnicodeLocaleAttribute("en_CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en_CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09405");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.lang.String str7 = locale0.getDisplayVariant(locale3);
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.lang.String str11 = locale3.getDisplayName();
        java.util.Set<java.lang.String> strSet12 = locale3.getUnicodeLocaleKeys();
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str14 = locale3.getDisplayScript(locale13);
        java.util.Locale.setDefault(locale13);
        java.lang.String str16 = locale13.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test09406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09406");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(665808.0d, 1.77144092136256d, 0.0d, (-2.566370614359173d), false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ0();
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double19 = rotation18.getQ0();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation11.applyTo(rotation18);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D24, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotation11.applyInverseTo(vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D36 = vector3D35.negate();
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D46, (double) (byte) 100, vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D51, (double) (byte) 100, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D48, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D58, (double) (byte) 100, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D66 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D64, (double) (byte) 100, vector3D66);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D66, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D53, (double) (byte) 1, vector3D61, (double) (short) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D75 = vector3D53.negate();
        org.apache.commons.math.geometry.Vector3D vector3D76 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D53);
        double double77 = vector3D53.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D78 = vector3D41.subtract((double) (short) -1, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D79 = vector3D35.add((double) (byte) 0, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D80 = rotation11.applyTo(vector3D53);
        double double81 = rotation11.getAngle();
        org.apache.commons.math.geometry.Rotation rotation82 = rotation5.applyTo(rotation11);
        double double83 = rotation82.getQ3();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 6657946.548728053d + "'", double83 == 6657946.548728053d);
    }

    @Test
    public void test09407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09407");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder8 = builder6.setLanguage("KR");
        java.util.Locale.Builder builder10 = builder6.setLanguage("KOR");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale15 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale.setDefault(category16, locale17);
        java.lang.String str20 = locale15.getDisplayName(locale17);
        java.lang.String str21 = locale17.getDisplayName();
        java.lang.String str22 = locale12.getDisplayLanguage(locale17);
        java.lang.String str23 = locale11.getDisplayVariant(locale12);
        java.lang.String str24 = locale12.getISO3Language();
        java.lang.String str25 = locale12.getDisplayName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "kor_DE");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587)" + "'", str20, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "eng" + "'", str24, "eng");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (Canada)" + "'", str25, "English (Canada)");
    }

    @Test
    public void test09408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09408");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.lang.String str3 = locale2.getDisplayName();
        boolean boolean4 = locale2.hasExtensions();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.lang.String str14 = locale12.getDisplayScript(locale13);
        java.lang.String str15 = locale10.getDisplayLanguage(locale12);
        java.lang.String str16 = locale12.getDisplayName();
        java.util.Locale.setDefault(category6, locale12);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale18.getDisplayName();
        boolean boolean20 = locale18.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.lang.String str26 = locale21.getDisplayLanguage(locale23);
        java.util.Locale locale27 = locale21.stripExtensions();
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = locale18.getDisplayCountry(locale27);
        java.util.Locale.setDefault(category6, locale27);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.lang.String str35 = locale33.getDisplayScript(locale34);
        java.lang.String str36 = locale31.getDisplayLanguage(locale33);
        java.util.Locale.setDefault(category6, locale31);
        java.util.Locale.setDefault(category0, locale31);
        java.util.Locale locale41 = new java.util.Locale("ko-kr", "ita");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale41);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "English" + "'", str3, "English");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "French" + "'", str16, "French");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English" + "'", str19, "English");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale41.toString(), "ko-kr_ITA");
        org.junit.Assert.assertNotNull(strSet42);
    }

    @Test
    public void test09409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09409");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder20 = builder14.setLocale(locale19);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder22 = builder14.setLocale(locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale21);
        java.lang.String str25 = locale21.getDisplayVariant();
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray29, (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray29, (java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray36 = mathException33.getSuppressed();
        java.io.PrintWriter printWriter37 = printWriter13.format(locale21, "ita", (java.lang.Object[]) throwableArray36);
        java.io.PrintWriter printWriter39 = printWriter37.append('a');
        printWriter39.println((float) 'u');
        printWriter39.print(10.0f);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter39);
    }

    @Test
    public void test09410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09410");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\uc911\uad6d\uc5b4", 0.576230023474905d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09411");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray15 = rotation14.getMatrix();
        java.io.PrintWriter printWriter16 = printWriter5.format("en", (java.lang.Object[]) doubleArray15);
        java.io.PrintWriter printWriter18 = printWriter5.append(' ');
        printWriter5.print(true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test09412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09412");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ITA", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12, locale13, locale15, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        java.lang.String[] strArray26 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap30);
        java.lang.String[] strArray36 = new java.lang.String[] { "Germany", "zxz", "org.apache.commons.math.MathException: ZXZ", "TWN" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList37);
        java.lang.String str40 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList37);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test09413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09413");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        printWriter9.println((float) (byte) -1);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter17 = printWriter9.printf("KR", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        printWriter9.println(charArray26);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.lang.String str32 = locale30.getVariant();
        java.lang.String[] strArray35 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35);
        java.io.PrintWriter printWriter37 = printWriter9.printf(locale30, "English", (java.lang.Object[]) strArray35);
        java.lang.String str38 = locale30.getScript();
        java.util.Locale locale39 = locale30.stripExtensions();
        java.util.Locale.Builder builder40 = builder2.setLocale(locale30);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder45 = builder41.setLanguage("ZXZ");
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder47 = builder41.setLocale(locale46);
        java.util.Locale.Builder builder49 = builder47.setLanguage("KR");
        java.util.Locale.Builder builder51 = builder47.setLanguage("KOR");
        java.util.Locale locale52 = builder51.build();
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale locale56 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        boolean boolean59 = locale58.hasExtensions();
        java.util.Locale.setDefault(category57, locale58);
        java.lang.String str61 = locale56.getDisplayName(locale58);
        java.lang.String str62 = locale58.getDisplayName();
        java.lang.String str63 = locale53.getDisplayLanguage(locale58);
        java.lang.String str64 = locale52.getDisplayVariant(locale53);
        java.lang.String str65 = locale53.getISO3Language();
        java.lang.String str66 = locale53.toLanguageTag();
        java.util.Locale.Builder builder67 = builder2.setLocale(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder69 = builder67.removeUnicodeLocaleAttribute("zxz (ko_kr)_FRAN\347AIS");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: zxz (ko_kr)_FRANc?AIS [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "kor_DE");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u97d3\u6587)" + "'", str61, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "English" + "'", str62, "English");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "English" + "'", str63, "English");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "eng" + "'", str65, "eng");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "en-CA" + "'", str66, "en-CA");
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test09414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09414");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("en");
        java.util.Locale.Builder builder14 = builder10.setLanguageTag("und");
        java.util.Locale.Builder builder16 = builder10.setLanguage("");
        java.util.Locale.Builder builder17 = builder16.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder16.setExtension('4', "\u52a0\u62ff\u5927");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test09415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09415");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA3();
        java.lang.String str5 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA3();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "XZY" + "'", str5, "XZY");
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test09416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09416");
        java.io.PrintStream printStream1 = new java.io.PrintStream("XYZ");
        printStream1.print(0.4705227400680958d);
        printStream1.print(true);
    }

    @Test
    public void test09417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09417");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        printStream90.println(false);
        printStream90.println(true);
        printStream90.print('a');
        java.io.PrintStream printStream97 = new java.io.PrintStream((java.io.OutputStream) printStream90);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test09418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09418");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        printWriter4.print((float) 'x');
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter14);
        char[] charArray18 = new char[] { ' ', 'x' };
        printWriter15.write(charArray18);
        printWriter15.write((int) (byte) 1);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter26);
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter30 = printWriter27.printf("ko-KR", (java.lang.Object[]) strArray29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        double double36 = vector3D34.getNorm();
        printWriter27.println((java.lang.Object) vector3D34);
        java.io.PrintStream printStream39 = new java.io.PrintStream("ko-KR");
        printStream39.close();
        java.io.PrintStream printStream42 = new java.io.PrintStream("ko-KR");
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        char[] charArray51 = new char[] { '4', 'a', ' ', ' ' };
        printWriter45.write(charArray51);
        printStream39.print(charArray51);
        printWriter27.print(charArray51);
        printWriter15.println(charArray51);
        printWriter4.write(charArray51);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.io.PrintWriter printWriter60 = printWriter58.append((java.lang.CharSequence) "org.apache.commons.math.MathException");
        printWriter58.print("ko-kr");
        printWriter58.write("\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , x]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(printWriter60);
    }

    @Test
    public void test09419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09419");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        printWriter17.println();
        java.io.PrintWriter printWriter20 = printWriter17.append((java.lang.CharSequence) "ZXZ");
        printWriter17.write("\ud504\ub791\uc2a4\uc5b4");
        printWriter17.print(0.0d);
        printWriter17.write("YXY", (-1), 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test09420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09420");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter6.println((long) (-1));
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream17 = printStream12.format(locale14, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        printStream12.println(10.0f);
        printStream12.close();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder27 = builder25.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        printWriter32.println((float) (byte) -1);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter32, true);
        java.lang.String[] strArray39 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter40 = printWriter32.printf("KR", (java.lang.Object[]) strArray39);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ko-KR");
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        char[] charArray49 = new char[] { ' ', 'x' };
        printWriter46.write(charArray49);
        printWriter32.println(charArray49);
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = locale52.getDisplayScript(locale53);
        java.lang.String str55 = locale53.getVariant();
        java.lang.String[] strArray58 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray58);
        java.io.PrintWriter printWriter60 = printWriter32.printf(locale53, "English", (java.lang.Object[]) strArray58);
        java.lang.String str61 = locale53.getScript();
        java.util.Locale locale62 = locale53.stripExtensions();
        java.util.Locale.Builder builder63 = builder25.setLocale(locale53);
        java.lang.String[] strArray66 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66, (java.lang.Throwable) mathException68);
        java.io.PrintStream printStream70 = printStream12.printf(locale53, "allemand", (java.lang.Object[]) strArray66);
        java.io.PrintWriter printWriter71 = printWriter6.printf("de_de", (java.lang.Object[]) strArray66);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter6, false);
        printWriter6.println("zxz_fran\347ais_ITALIAN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , x]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(printWriter71);
    }

    @Test
    public void test09421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09421");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        java.util.Locale locale15 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getLanguage();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter22.format(locale34, "ZXZ", (java.lang.Object[]) throwableArray42);
        java.io.PrintStream printStream45 = printStream13.printf(locale15, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray42);
        printStream13.println(0.0f);
        printStream13.write((int) '#');
        java.io.PrintStream printStream51 = new java.io.PrintStream("ko-KR");
        printStream51.close();
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.OutputStream) printStream51, false);
        java.util.Locale.Category category55 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale56 = java.util.Locale.getDefault(category55);
        java.util.Locale locale57 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale57);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.lang.String str61 = locale59.getDisplayScript(locale60);
        java.lang.String str62 = locale57.getDisplayLanguage(locale60);
        java.util.Locale.setDefault(category55, locale60);
        java.lang.String[] strArray65 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream66 = printStream51.format(locale60, "fran\347ais", (java.lang.Object[]) strArray65);
        java.lang.String[] strArray68 = java.util.Locale.getISOLanguages();
        java.io.PrintStream printStream69 = printStream13.printf(locale60, "ko_KR", (java.lang.Object[]) strArray68);
        java.io.PrintStream printStream70 = new java.io.PrintStream((java.io.OutputStream) printStream13);
        printStream70.print((int) '#');
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertEquals(locale15.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertTrue("'" + category55 + "' != '" + java.util.Locale.Category.FORMAT + "'", category55.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u97d3\u6587" + "'", str62, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(printStream66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(printStream69);
    }

    @Test
    public void test09422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09422");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.lang.String str10 = locale8.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet11 = locale8.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str10, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet11);
    }

    @Test
    public void test09423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09423");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ja", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale10, locale11, locale12, locale13, locale14, locale15, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList21, filteringMode25);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder35 = builder27.setLocale(locale34);
        java.lang.String str36 = locale34.getDisplayCountry();
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList40, strMap41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.parse("french", strMap44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList45, strMap46);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.parse("US");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.parse("TWN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList51, strMap52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.parse("zxz", strMap55);
        java.util.Locale.LanguageRange languageRange59 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str60 = languageRange59.getRange();
        java.util.Locale.LanguageRange languageRange63 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str64 = languageRange63.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] { languageRange59, languageRange63 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.util.Locale locale75 = java.util.Locale.GERMANY;
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.lang.String str77 = locale76.getDisplayLanguage();
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.util.Locale locale80 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray81 = new java.util.Locale[] { locale71, locale72, locale73, locale74, locale75, locale76, locale78, locale79, locale80 };
        java.util.ArrayList<java.util.Locale> localeList82 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList82, localeArray81);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList82, filteringMode84);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.util.Locale>) localeList82);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter(languageRangeList56, (java.util.Collection<java.util.Locale>) localeList82);
        java.util.Locale locale88 = java.util.Locale.lookup(languageRangeList51, (java.util.Collection<java.util.Locale>) localeList82);
        java.util.Locale locale89 = java.util.Locale.lookup(languageRangeList49, (java.util.Collection<java.util.Locale>) localeList82);
        java.util.Locale locale90 = java.util.Locale.lookup(languageRangeList45, (java.util.Collection<java.util.Locale>) localeList82);
        java.util.Locale.FilteringMode filteringMode91 = null;
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter(languageRangeList42, (java.util.Collection<java.util.Locale>) localeList82, filteringMode91);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uce90\ub098\ub2e4" + "'", str36, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zxz" + "'", str60, "zxz");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "zxz" + "'", str64, "zxz");
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode84.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNull(locale88);
        org.junit.Assert.assertNull(locale89);
        org.junit.Assert.assertNull(locale90);
        org.junit.Assert.assertNotNull(localeList92);
    }

    @Test
    public void test09424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09424");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "anglais");
        boolean boolean16 = printStream15.checkError();
        printStream15.print(true);
        printStream15.println((-0.0d));
        java.io.PrintStream printStream22 = printStream15.append('u');
        java.lang.Object[] objArray24 = null;
        java.io.PrintStream printStream25 = printStream22.format("\u7fa9\u5927\u5229\u6587", objArray24);
        java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream25, true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(printStream25);
    }

    @Test
    public void test09425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09425");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        java.lang.Throwable[] throwableArray5 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException3);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("tw", (java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray9 = mathException6.getSuppressed();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("german (kor)", (java.lang.Object[]) throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test09426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09426");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-3.141592653589793d), 0.0d, (double) 10L);
        org.apache.commons.math.geometry.Vector3D vector3D7 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) 10L, vector3D7);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double15 = rotation14.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotation14.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D8.add(vector3D16);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation(vector3D3, vector3D16);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.Rotation rotation26 = rotation24.revert();
        org.apache.commons.math.geometry.Rotation rotation27 = rotation18.applyTo(rotation26);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D29.subtract((double) 10L, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D40, (double) (byte) 100, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D45, (double) (byte) 100, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D42, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D50 = vector3D36.subtract((double) 0, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D51 = rotation18.applyInverseTo(vector3D36);
        java.lang.Class<?> wildcardClass52 = rotation18.getClass();
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test09427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09427");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale locale3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.addUnicodeLocaleAttribute("\uce90\ub098\ub2e4\uce90\ub098\ub2e4,TWN)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?????? (??????,TWN) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
    }

    @Test
    public void test09428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09428");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getDisplayName();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale0.getDisplayVariant(locale3);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale7.getDisplayLanguage(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale11.getDisplayVariant();
        java.lang.String str15 = locale3.getDisplayName(locale11);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.util.Locale locale19 = java.util.Locale.UK;
        java.lang.String[] strArray21 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream22 = printStream17.format(locale19, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream24);
        printWriter25.print("\u97d3\u6587");
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder33 = builder28.setExtension('u', "");
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale37 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        boolean boolean40 = locale39.hasExtensions();
        java.util.Locale.setDefault(category38, locale39);
        java.lang.String str42 = locale37.getDisplayName(locale39);
        java.lang.String str43 = locale39.getDisplayName();
        java.lang.String str44 = locale34.getDisplayLanguage(locale39);
        java.util.Locale.Builder builder45 = builder28.setLocale(locale34);
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = locale34.getDisplayVariant(locale46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = mathException49.getSuppressed();
        java.io.PrintWriter printWriter52 = printWriter25.printf(locale34, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) throwableArray51);
        java.util.Set<java.lang.Character> charSet53 = locale34.getExtensionKeys();
        java.util.Set<java.lang.String> strSet54 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str55 = locale34.getScript();
        java.util.Locale locale59 = new java.util.Locale("Chinese (Taiwan)", "org.apache.commons.math.geometry.NotARotationMatrixException: zxz (KO_KR)", "Italian");
        java.lang.String str60 = locale59.getDisplayCountry();
        java.lang.String str61 = locale34.getDisplayLanguage(locale59);
        java.lang.String str62 = locale3.getDisplayVariant(locale34);
        java.util.Set<java.lang.Character> charSet63 = locale3.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\uc601\uc5b4" + "'", str1, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanisch" + "'", str15, "Japanisch");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u97d3\u6587)" + "'", str42, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "English" + "'", str43, "English");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "English" + "'", str44, "English");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals(locale59.toString(), "chinese (taiwan)_ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)_Italian");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)" + "'", str60, "ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "English" + "'", str61, "English");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(charSet63);
    }

    @Test
    public void test09429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09429");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(vector3D2, 0.4663020147736518d);
        double double5 = rotation4.getQ3();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-0.0d) + "'", double5 == (-0.0d));
    }

    @Test
    public void test09430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09430");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayLanguage(locale2);
        java.util.Locale locale6 = locale0.stripExtensions();
        java.util.Locale locale7 = locale0.stripExtensions();
        java.io.PrintStream printStream9 = new java.io.PrintStream("ko-KR");
        printStream9.close();
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream9, false);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter12);
        printWriter12.println((float) (byte) -1);
        printWriter12.print('a');
        java.util.Locale locale19 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter12.print((java.lang.Object) locale19);
        java.lang.String str21 = locale19.getDisplayName();
        java.lang.String str22 = locale0.getDisplayLanguage(locale19);
        java.lang.String str24 = locale19.getUnicodeLocaleType("KR");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals(locale19.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str21, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test09431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09431");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale9 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str10 = locale9.getDisplayVariant();
        java.util.Locale locale13 = new java.util.Locale("Italy", "US");
        java.lang.String str14 = locale9.getDisplayScript(locale13);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale13);
        java.util.Locale.Builder builder17 = builder15.setVariant("");
        java.util.Locale.Builder builder19 = builder15.setLanguageTag("italiano");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.addUnicodeLocaleAttribute("\u6cd5\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale13.toString(), "italy_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test09432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09432");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D12, vector3D20);
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double28 = rotation27.getQ0();
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = rotation27.applyTo(rotation34);
        org.apache.commons.math.geometry.Rotation rotation37 = rotation27.revert();
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double44 = rotation43.getQ0();
        org.apache.commons.math.geometry.Rotation rotation45 = rotation27.applyInverseTo(rotation43);
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double52 = rotation51.getQ0();
        org.apache.commons.math.geometry.Rotation rotation58 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double59 = rotation58.getQ0();
        org.apache.commons.math.geometry.Rotation rotation60 = rotation51.applyTo(rotation58);
        org.apache.commons.math.geometry.Rotation rotation61 = rotation51.revert();
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double68 = rotation67.getQ0();
        org.apache.commons.math.geometry.Rotation rotation69 = rotation51.applyInverseTo(rotation67);
        double double70 = rotation69.getAngle();
        org.apache.commons.math.geometry.Rotation rotation71 = rotation45.applyInverseTo(rotation69);
        org.apache.commons.math.geometry.Rotation rotation77 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double78 = rotation77.getQ1();
        double double79 = rotation77.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D83 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D84 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D81, (double) (byte) 100, vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D88 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D89 = vector3D81.subtract((double) 10L, vector3D88);
        org.apache.commons.math.geometry.Vector3D vector3D90 = rotation77.applyInverseTo(vector3D88);
        org.apache.commons.math.geometry.Vector3D vector3D91 = vector3D90.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D92 = rotation71.applyInverseTo(vector3D91);
        org.apache.commons.math.geometry.Vector3D vector3D93 = vector3D20.add(vector3D91);
        org.apache.commons.math.geometry.Vector3D vector3D96 = new org.apache.commons.math.geometry.Vector3D(0.8984134042928071d, 1.7607846147136124d);
        org.apache.commons.math.geometry.Vector3D vector3D97 = vector3D20.add(vector3D96);
        org.apache.commons.math.geometry.Vector3D vector3D98 = vector3D97.normalize();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 52.0d + "'", double59 == 52.0d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.0d + "'", double68 == 52.0d);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 52.0d + "'", double79 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D93);
        org.junit.Assert.assertNotNull(vector3D97);
        org.junit.Assert.assertNotNull(vector3D98);
    }

    @Test
    public void test09433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09433");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("\uc601\uc5b4\uc601\uad6d)");
        java.lang.String str2 = mathException1.getPattern();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uc601\uad6d)" + "'", str2, "\uc601\uc5b4\uc601\uad6d)");
    }

    @Test
    public void test09434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09434");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "zxz (GERMAN,XYZ)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zxz (GERMAN,XYZ)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09435");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 9610.932890332206d, 10.0d, (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D7 = vector3D6.orthogonal();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
    }

    @Test
    public void test09436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09436");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print(false);
        printWriter4.print((long) 'u');
        java.io.PrintWriter printWriter11 = printWriter4.append((java.lang.CharSequence) "org.apache.commons.math.MathException: de_DE");
        printWriter11.println((double) 'a');
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        java.lang.String str23 = locale18.getDisplayLanguage(locale20);
        java.lang.String str24 = locale20.getDisplayName();
        java.util.Locale.setDefault(category14, locale20);
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale26);
        java.lang.String str28 = locale26.getDisplayScript();
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleAttributes();
        java.lang.String str30 = locale26.getCountry();
        java.util.Locale.setDefault(category14, locale26);
        java.util.Locale locale32 = java.util.Locale.getDefault(category14);
        printWriter11.println((java.lang.Object) locale32);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str24, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "KR" + "'", str30, "KR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
    }

    @Test
    public void test09437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09437");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = printWriter5.append((java.lang.CharSequence) "ko-KR");
        printWriter9.println((double) (short) 0);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray17 = mathException16.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException18 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray17);
        java.io.PrintWriter printWriter19 = printWriter9.printf("\u610f\u5927\u5229", (java.lang.Object[]) throwableArray17);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(printWriter19);
    }

    @Test
    public void test09438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09438");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("eng", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09439");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder7 = builder0.clear();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.util.Locale.Builder builder16 = builder14.setLanguage("KR");
        java.util.Locale.Builder builder18 = builder14.setLanguage("KOR");
        java.util.Locale locale19 = builder18.build();
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale23 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Locale.setDefault(category24, locale25);
        java.lang.String str28 = locale23.getDisplayName(locale25);
        java.lang.String str29 = locale25.getDisplayName();
        java.lang.String str30 = locale20.getDisplayLanguage(locale25);
        java.lang.String str31 = locale19.getDisplayVariant(locale20);
        java.util.Locale.Builder builder32 = builder0.setLocale(locale19);
        java.util.Locale locale33 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder36 = builder0.setUnicodeLocaleKeyword("\ub3c5\uc77c\uc5b4", "\u610f\u5927\u5229");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: org.apache.commons.math.MathException: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "kor_DE");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u97d3\u6587)" + "'", str28, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English" + "'", str29, "English");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English" + "'", str30, "English");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "kor_DE");
    }

    @Test
    public void test09440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09440");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale10.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray21 = rotation20.getMatrix();
        java.io.PrintWriter printWriter22 = printWriter5.format(locale10, "YZY", (java.lang.Object[]) doubleArray21);
        printWriter22.println("it");
        printWriter22.print((float) (short) 0);
        printWriter22.println("ko_KR");
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        printStream32.close();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream32, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter35);
        printWriter36.println('a');
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder43 = builder39.setLanguage("ZXZ");
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder45 = builder39.setLocale(locale44);
        java.lang.Object[] objArray47 = null;
        java.io.PrintWriter printWriter48 = printWriter36.format(locale44, "TWN", objArray47);
        printWriter48.close();
        java.io.PrintStream printStream51 = new java.io.PrintStream("ko-KR");
        printStream51.close();
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.OutputStream) printStream51, false);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.Writer) printWriter54);
        printWriter54.println((float) (byte) -1);
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter((java.io.Writer) printWriter54, true);
        java.lang.String[] strArray61 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter62 = printWriter54.printf("KR", (java.lang.Object[]) strArray61);
        java.io.PrintStream printStream64 = new java.io.PrintStream("ko-KR");
        printStream64.close();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream64, false);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.Writer) printWriter67);
        char[] charArray71 = new char[] { ' ', 'x' };
        printWriter68.write(charArray71);
        printWriter54.println(charArray71);
        printWriter48.print(charArray71);
        printWriter22.print(charArray71);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[ , x]");
    }

    @Test
    public void test09441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09441");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter29.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray40);
        java.lang.String[] strArray44 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray44, (java.lang.Throwable) mathException46);
        java.lang.String str48 = mathException46.getPattern();
        java.lang.Throwable[] throwableArray49 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter50 = printWriter41.printf("\u97d3\u6587", (java.lang.Object[]) throwableArray49);
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray54, (java.lang.Throwable) mathException56);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException58 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray54);
        java.io.PrintWriter printWriter59 = printWriter50.format("org.apache.commons.math.MathException", (java.lang.Object[]) strArray54);
        printWriter59.write("Taiwan", (int) (short) 100, (int) (short) -1);
        printWriter59.print((double) (byte) 10);
        java.io.PrintWriter printWriter67 = printWriter59.append(' ');
        boolean boolean68 = printWriter59.checkError();
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ko_KR" + "'", str48, "ko_KR");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test09442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09442");
        org.apache.commons.math.MathException mathException0 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray1 = mathException0.getSuppressed();
        java.lang.Object[] objArray2 = mathException0.getArguments();
        java.lang.Object[] objArray3 = mathException0.getArguments();
        java.lang.Throwable throwable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            mathException0.addSuppressed(throwable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
    }

    @Test
    public void test09443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09443");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR");
        java.lang.String str2 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test09444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09444");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream6.flush();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream11 = printStream6.append((java.lang.CharSequence) "English (United Kingdom)", (int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 97");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream6);
    }

    @Test
    public void test09445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09445");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale5 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale.setDefault(category6, locale7);
        java.lang.String str10 = locale5.getDisplayName(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.lang.String str12 = locale2.getDisplayLanguage(locale7);
        printStream1.println((java.lang.Object) locale7);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "GB");
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter26);
        printWriter26.println((float) (byte) -1);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter26, true);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter34 = printWriter26.printf("KR", (java.lang.Object[]) strArray33);
        java.io.PrintStream printStream36 = new java.io.PrintStream("ko-KR");
        printStream36.close();
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream36, false);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.Writer) printWriter39);
        char[] charArray43 = new char[] { ' ', 'x' };
        printWriter40.write(charArray43);
        printWriter26.println(charArray43);
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.lang.String str48 = locale46.getDisplayScript(locale47);
        java.lang.String str49 = locale47.getVariant();
        java.lang.String[] strArray52 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray52);
        java.io.PrintWriter printWriter54 = printWriter26.printf(locale47, "English", (java.lang.Object[]) strArray52);
        java.lang.String str55 = locale47.getScript();
        java.util.Locale locale56 = locale47.stripExtensions();
        java.util.Locale.Builder builder57 = builder19.setLocale(locale47);
        java.util.Locale.Builder builder58 = builder19.clearExtensions();
        java.util.Locale.Builder builder60 = builder58.addUnicodeLocaleAttribute("Taiwan");
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category63 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = locale64.getDisplayLanguage();
        java.util.Locale.setDefault(category63, locale64);
        java.util.Locale.setDefault(category62, locale64);
        java.lang.String str68 = locale61.getDisplayVariant(locale64);
        java.util.Locale locale69 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleKeys();
        java.lang.String str71 = locale64.getDisplayCountry(locale69);
        boolean boolean72 = locale64.hasExtensions();
        java.lang.String str73 = locale64.getISO3Language();
        java.util.Locale.setDefault(locale64);
        java.util.Locale.Builder builder75 = builder60.setLocale(locale64);
        java.util.Locale locale76 = locale64.stripExtensions();
        printStream16.print((java.lang.Object) locale76);
        java.io.PrintStream printStream79 = new java.io.PrintStream((java.io.OutputStream) printStream16, false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u97d3\u6587)" + "'", str10, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English" + "'", str11, "English");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English" + "'", str12, "English");
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[ , x]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.FORMAT + "'", category63.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
    }

    @Test
    public void test09446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09446");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintStream printStream16 = printStream11.append((java.lang.CharSequence) "en");
        char[] charArray23 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream16.println(charArray23);
        printWriter4.println(charArray23);
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String[] strArray32 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream33 = printStream28.format(locale30, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray32);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream28, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        printWriter36.print("\u97d3\u6587");
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder44 = builder39.setExtension('u', "");
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale48 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category49 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale.setDefault(category49, locale50);
        java.lang.String str53 = locale48.getDisplayName(locale50);
        java.lang.String str54 = locale50.getDisplayName();
        java.lang.String str55 = locale45.getDisplayLanguage(locale50);
        java.util.Locale.Builder builder56 = builder39.setLocale(locale45);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale45.getDisplayVariant(locale57);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray61 = mathException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = mathException60.getSuppressed();
        java.io.PrintWriter printWriter63 = printWriter36.printf(locale45, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter64 = printWriter4.format("org.apache.commons.math.MathException: ko_KR", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter66 = printWriter64.append('#');
        java.io.PrintWriter printWriter68 = printWriter64.append((java.lang.CharSequence) "ko-KR");
        printWriter64.print((float) (short) 0);
        java.io.PrintWriter printWriter72 = printWriter64.append((java.lang.CharSequence) "XZY");
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter72);
        printWriter72.print(' ');
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  , #, a, #, x]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category49 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category49.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u97d3\u6587)" + "'", str53, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English" + "'", str54, "English");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English" + "'", str55, "English");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(printWriter72);
    }

    @Test
    public void test09447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09447");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "ko-KR");
        printStream1.print("");
        java.io.PrintStream printStream7 = printStream1.append((java.lang.CharSequence) "en");
        java.io.PrintStream printStream9 = new java.io.PrintStream("ko-KR");
        printStream9.close();
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String[] strArray13 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream14 = printStream9.format(locale11, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream9, false);
        printStream9.println(10.0f);
        java.lang.String[] strArray21 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray21);
        java.io.PrintStream printStream23 = printStream9.format("\u97d3\u6587", (java.lang.Object[]) strArray21);
        printStream23.close();
        java.lang.Throwable throwable26 = null;
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException(throwable26);
        java.lang.String[] strArray29 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray29);
        mathException27.addSuppressed((java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray32 = mathException30.getSuppressed();
        java.io.PrintStream printStream33 = printStream23.format("French", (java.lang.Object[]) throwableArray32);
        java.io.PrintStream printStream35 = new java.io.PrintStream("ko-KR");
        printStream35.close();
        java.util.Locale locale37 = java.util.Locale.UK;
        java.lang.String[] strArray39 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream40 = printStream35.format(locale37, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray39);
        java.io.PrintStream printStream42 = new java.io.PrintStream((java.io.OutputStream) printStream35, false);
        printStream35.println(10.0f);
        java.lang.String[] strArray47 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray47);
        java.io.PrintStream printStream49 = printStream35.format("\u97d3\u6587", (java.lang.Object[]) strArray47);
        printStream49.close();
        java.io.PrintStream printStream52 = printStream49.append('x');
        printStream49.println();
        java.io.PrintStream printStream55 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream55.println((float) 100L);
        printStream55.println((float) 10L);
        byte[] byteArray64 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        printStream55.write(byteArray64);
        printStream49.write(byteArray64, (int) 'a', 10);
        printStream23.write(byteArray64);
        printStream7.write(byteArray64);
        printStream7.print(0.5514266812416906d);
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[100, -1, 10, 1]");
    }

    @Test
    public void test09448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09448");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ko-KR");
        printStream10.close();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream10, false);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter13);
        printWriter14.print((long) (short) 100);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter14, true);
        java.io.PrintWriter printWriter20 = printWriter14.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter14, false);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder27 = builder23.setLanguage("ZXZ");
        java.util.Locale.Builder builder28 = builder23.clear();
        java.util.Locale.Category category29 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Locale.setDefault(category30, locale31);
        java.util.Locale.setDefault(category29, locale31);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale31.getDisplayLanguage(locale35);
        java.util.Locale.Builder builder37 = builder23.setLocale(locale35);
        java.lang.String str38 = locale35.getDisplayCountry();
        java.lang.Object[] objArray40 = null;
        java.io.PrintWriter printWriter41 = printWriter22.format(locale35, "en", objArray40);
        java.lang.String str42 = locale35.getDisplayCountry();
        java.lang.String str43 = locale3.getDisplayScript(locale35);
        java.lang.String str44 = locale35.getScript();
        java.lang.String str46 = locale35.getUnicodeLocaleType("it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.FORMAT + "'", category29.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test09449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09449");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        printWriter5.println('#');
        org.apache.commons.math.geometry.RotationOrder rotationOrder18 = org.apache.commons.math.geometry.RotationOrder.YZX;
        printWriter5.println((java.lang.Object) rotationOrder18);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation(rotationOrder18, (-0.08806429469916818d), 152.9866275920405d, 0.6311497403463439d);
        org.apache.commons.math.geometry.Vector3D vector3D24 = rotationOrder18.getA2();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder18);
        org.junit.Assert.assertNotNull(vector3D24);
    }

    @Test
    public void test09450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09450");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = vector3D7.negate();
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.minusK;
        double double15 = vector3D14.getAlpha();
        double double16 = vector3D14.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D12.add(0.7071993859311818d, vector3D14);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D17);
    }

    @Test
    public void test09451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09451");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale3.getDisplayCountry(locale10);
        java.lang.String str13 = locale3.getVariant();
        java.lang.String str14 = locale3.getScript();
        java.util.Locale locale17 = new java.util.Locale("yzy", "org.apache.commons.math.MathException: zxz (KO_KR)");
        java.lang.String str18 = locale17.getCountry();
        java.lang.String str19 = locale17.toLanguageTag();
        java.lang.String str20 = locale3.getDisplayCountry(locale17);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale17.toString(), "yzy_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ (KO_KR)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ (KO_KR)" + "'", str18, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ (KO_KR)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "yzy" + "'", str19, "yzy");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test09452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09452");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-0.02786191713456967d), (-0.453352281948313d));
        double double3 = vector3D2.getAlpha();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.02786191713456967d) + "'", double3 == (-0.02786191713456967d));
    }

    @Test
    public void test09453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09453");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, (double) (byte) 100, vector3D4);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D4, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D14 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D15 = vector3D14.negate();
        org.apache.commons.math.geometry.Vector3D vector3D16 = vector3D4.subtract(vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D16.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D17.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D(0.7488437553557139d, vector3D18);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
    }

    @Test
    public void test09454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09454");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = mathException2.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException2);
        java.lang.Object[] objArray6 = mathException5.getArguments();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        mathException16.addSuppressed((java.lang.Throwable) mathException17);
        java.lang.Object[] objArray20 = mathException16.getArguments();
        mathException5.addSuppressed((java.lang.Throwable) mathException16);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXY", (java.lang.Throwable) mathException5);
        java.lang.String str23 = mathException22.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.apache.commons.math.MathException: ZXY" + "'", str23, "org.apache.commons.math.MathException: ZXY");
    }

    @Test
    public void test09455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09455");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print("XYZ");
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale.setDefault(category13, locale15);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale15.getDisplayLanguage(locale19);
        java.lang.String str21 = locale15.getISO3Country();
        java.lang.String str22 = locale11.getDisplayLanguage(locale15);
        java.util.Locale locale23 = locale15.stripExtensions();
        java.lang.String[] strArray27 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray27, (java.lang.Throwable) mathException30);
        java.io.PrintWriter printWriter32 = printWriter4.format(locale23, "", (java.lang.Object[]) strArray27);
        printWriter32.print((int) (short) 10);
        printWriter32.println('a');
        printWriter32.println((-110.0d));
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.Writer) printWriter32, false);
        printWriter32.write("GB", (int) (byte) 100, (int) (short) 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French" + "'", str22, "French");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printWriter32);
    }

    @Test
    public void test09456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09456");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder9 = builder4.setExtension('u', "");
        java.util.Locale.Builder builder11 = builder9.setVariant("");
        java.util.Locale locale12 = builder11.build();
        java.util.Locale.Builder builder13 = builder11.clear();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale.Builder builder16 = builder11.setLocale(locale14);
        java.util.Locale locale19 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale20 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale20);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str24 = locale22.getDisplayScript(locale23);
        java.lang.String str25 = locale20.getDisplayLanguage(locale23);
        java.lang.String str26 = locale19.getDisplayVariant(locale23);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder35 = builder27.setLocale(locale34);
        java.lang.String str36 = locale34.getDisplayCountry();
        java.lang.String str37 = locale19.getDisplayScript(locale34);
        java.lang.String str38 = locale19.getDisplayLanguage();
        java.lang.String str39 = locale14.getDisplayCountry(locale19);
        java.lang.String str40 = locale14.getLanguage();
        boolean boolean41 = locale14.hasExtensions();
        java.lang.String str42 = locale14.getScript();
        java.lang.String str43 = locale1.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder44.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder48 = builder44.setLanguage("ZXZ");
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder50 = builder44.setLocale(locale49);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder52 = builder44.setLocale(locale51);
        java.util.Locale.Builder builder54 = builder52.setRegion("");
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.lang.String str57 = locale55.getDisplayScript(locale56);
        java.lang.String str58 = locale56.getVariant();
        java.util.Locale.Builder builder59 = builder54.setLocale(locale56);
        java.util.Locale locale60 = builder59.build();
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.lang.String str65 = locale63.getDisplayScript(locale64);
        java.lang.String str66 = locale61.getDisplayLanguage(locale63);
        java.lang.String str68 = locale61.getExtension('u');
        java.util.Locale.Builder builder69 = builder59.setLocale(locale61);
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = locale70.getLanguage();
        java.util.Locale.Builder builder72 = builder69.setLocale(locale70);
        java.lang.String str73 = locale1.getDisplayVariant(locale70);
        java.lang.String str74 = locale1.getISO3Language();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals(locale19.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u97d3\u6587" + "'", str25, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uce90\ub098\ub2e4" + "'", str36, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zxz" + "'", str38, "zxz");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test09457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09457");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.lang.String str10 = locale8.getDisplayCountry();
        java.lang.String str11 = locale8.getDisplayVariant();
        java.util.Locale locale12 = locale8.stripExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "China" + "'", str10, "China");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
    }

    @Test
    public void test09458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09458");
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double8 = rotation7.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double15 = rotation14.getQ0();
        org.apache.commons.math.geometry.Rotation rotation16 = rotation7.applyTo(rotation14);
        double double17 = rotation7.getQ0();
        double double18 = rotation7.getQ0();
        double[][] doubleArray19 = rotation7.getMatrix();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("Canada", (java.lang.Object[]) doubleArray19);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException21 = new org.apache.commons.math.geometry.NotARotationMatrixException("fr", (java.lang.Object[]) doubleArray19);
        java.lang.String str22 = notARotationMatrixException21.getPattern();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr" + "'", str22, "fr");
    }

    @Test
    public void test09459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09459");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        printWriter4.println(false);
        printWriter4.close();
        printWriter4.write("fra", (int) 'x', 1);
        printWriter4.print(false);
    }

    @Test
    public void test09460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09460");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Canada");
        java.util.Locale.Builder builder18 = builder0.setLanguage("it");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        printWriter24.println('a');
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter24.format(locale32, "TWN", objArray35);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.lang.String str38 = locale32.getDisplayCountry();
        java.util.Locale.Builder builder39 = builder18.setLocale(locale32);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        java.util.Locale locale45 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str46 = locale40.getDisplayLanguage(locale45);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale47.getISO3Language();
        boolean boolean49 = locale47.hasExtensions();
        boolean boolean50 = locale47.hasExtensions();
        java.lang.String str51 = locale40.getDisplayVariant(locale47);
        java.util.Locale locale52 = locale40.stripExtensions();
        java.util.Locale.Builder builder53 = builder18.setLocale(locale40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder55 = builder18.setRegion("English (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: English (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(strSet37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Germany" + "'", str38, "Germany");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale45.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "French" + "'", str46, "French");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ita" + "'", str48, "ita");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test09461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09461");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zxz_fran\347ais");
    }

    @Test
    public void test09462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09462");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("Catalan", "chinois (chine)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: chinois (chine)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09463");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale3.getDisplayCountry(locale10);
        java.lang.String str13 = locale10.getDisplayScript();
        java.lang.String str14 = locale10.getDisplayName();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder19 = builder15.setLanguage("ZXZ");
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder21 = builder15.setLocale(locale20);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder23 = builder15.setLocale(locale22);
        java.lang.String str24 = locale22.getDisplayCountry();
        java.lang.String str25 = locale22.getDisplayLanguage();
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str28 = locale26.getDisplayScript(locale27);
        java.util.Locale locale31 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str32 = locale26.getDisplayLanguage(locale31);
        java.lang.String str33 = locale22.getDisplayVariant(locale31);
        java.lang.String str34 = locale22.getVariant();
        java.lang.String str35 = locale22.getDisplayLanguage();
        java.lang.String str36 = locale10.getDisplayScript(locale22);
        java.lang.String str37 = locale10.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Japanese" + "'", str14, "Japanese");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Canada" + "'", str24, "Canada");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English" + "'", str25, "English");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(locale31.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "French" + "'", str32, "French");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English" + "'", str35, "English");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test09464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09464");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        java.io.PrintStream printStream87 = printStream85.append('4');
        printStream85.close();
        printStream85.print((int) (short) 1);
        java.io.PrintStream printStream92 = printStream85.append('a');
        printStream92.println();
        printStream92.write((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream99 = printStream92.append((java.lang.CharSequence) "\u82f1\u56fd", (-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream92);
    }

    @Test
    public void test09465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09465");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("en");
        java.util.Locale.Builder builder14 = builder10.setLanguageTag("und");
        java.util.Locale.Builder builder16 = builder10.setLanguage("");
        java.util.Locale.Builder builder18 = builder16.addUnicodeLocaleAttribute("YZY");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder16.setRegion("ko-KR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ko-KR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test09466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09466");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.close();
        java.io.PrintStream printStream11 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream11.println((float) 100L);
        printStream11.println((float) 10L);
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        printStream11.write(byteArray20);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream11);
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream24, false);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter27);
        char[] charArray31 = new char[] { ' ', 'x' };
        printWriter28.write(charArray31);
        java.io.PrintWriter printWriter34 = printWriter28.append((java.lang.CharSequence) "Canada");
        boolean boolean35 = printWriter34.checkError();
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintStream printStream42 = printStream37.append((java.lang.CharSequence) "en");
        printStream37.print((int) ' ');
        printStream37.println((double) 100.0f);
        java.io.PrintStream printStream48 = new java.io.PrintStream("ko-KR");
        printStream48.close();
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream48, false);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter51);
        char[] charArray55 = new char[] { ' ', 'x' };
        printWriter52.write(charArray55);
        printStream37.print(charArray55);
        printWriter34.write(charArray55);
        printStream11.println(charArray55);
        printWriter4.print(charArray55);
        printWriter4.println((int) '#');
        java.io.PrintStream printStream65 = new java.io.PrintStream("ko-KR");
        printStream65.close();
        java.util.Locale locale67 = java.util.Locale.UK;
        java.lang.String[] strArray69 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream70 = printStream65.format(locale67, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray69);
        java.io.PrintStream printStream72 = new java.io.PrintStream((java.io.OutputStream) printStream65, false);
        printStream65.println(10.0f);
        java.lang.String[] strArray77 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77);
        java.io.PrintStream printStream79 = printStream65.format("\u97d3\u6587", (java.lang.Object[]) strArray77);
        printStream65.flush();
        java.io.PrintWriter printWriter82 = new java.io.PrintWriter((java.io.OutputStream) printStream65, false);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException87);
        java.lang.Object[] objArray89 = mathException87.getArguments();
        java.io.PrintWriter printWriter90 = printWriter82.printf("anglais", objArray89);
        java.io.PrintWriter printWriter91 = printWriter4.format("YXZ", objArray89);
        printWriter91.println();
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, -1, 10, 1]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , x]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(printStream70);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertNotNull(printWriter90);
        org.junit.Assert.assertNotNull(printWriter91);
    }

    @Test
    public void test09467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09467");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(1.7607846147136124d, (double) (byte) -1);
        org.apache.commons.math.geometry.Rotation rotation9 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double10 = rotation9.getQ1();
        double double11 = rotation9.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D21 = vector3D13.subtract((double) 10L, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D22 = rotation9.applyInverseTo(vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D23 = vector3D2.subtract(1.7607846147136124d, vector3D20);
        double double24 = vector3D23.getDelta();
        double double25 = vector3D23.getNorm();
        double double26 = vector3D23.getDelta();
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 52.0d + "'", double11 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.2792393947944187d) + "'", double24 == (-1.2792393947944187d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2.692332829084591d + "'", double25 == 2.692332829084591d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.2792393947944187d) + "'", double26 == (-1.2792393947944187d));
    }

    @Test
    public void test09468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09468");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "anglais");
        printStream1.print((double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getDisplayLanguage();
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale21, locale22, locale23, locale24, locale25, locale26, locale28, locale29, locale30 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList32, filteringMode34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, strMap36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, strMap38);
        java.util.Collection<java.util.Locale> localeCollection40 = null;
        java.util.Locale locale41 = java.util.Locale.lookup(languageRangeList39, localeCollection40);
        printStream1.print((java.lang.Object) locale41);
        printStream1.println(100);
        printStream1.print('#');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream49 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNull(locale41);
    }

    @Test
    public void test09469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09469");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test09470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09470");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        double double22 = rotation21.getAngle();
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = rotation28.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D40, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation36.applyTo(vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation36.getAxis();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation36.revert();
        org.apache.commons.math.geometry.Rotation rotation51 = rotation21.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = rotation50.getAxis();
        double[][] doubleArray53 = rotation50.getMatrix();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(doubleArray53);
    }

    @Test
    public void test09471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09471");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray13 = rotation12.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D17, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotation12.applyInverseTo(vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation12.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation6.applyInverseTo(vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((-0.09917726107940238d), vector3D27);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
    }

    @Test
    public void test09472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09472");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println(' ');
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter8.println((-0.13715201283077028d));
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray16, (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray21 = mathException20.getSuppressed();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray16, (java.lang.Throwable) mathException20);
        java.lang.Throwable[] throwableArray23 = mathException20.getSuppressed();
        java.io.PrintStream printStream24 = printStream12.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray23);
        java.util.Locale locale26 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        printWriter33.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray43 = rotation42.getMatrix();
        java.io.PrintWriter printWriter44 = printWriter33.format("en", (java.lang.Object[]) doubleArray43);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale45.getDisplayCountry(locale46);
        java.lang.String str48 = locale45.getLanguage();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray52 = mathException51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = mathException51.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException54 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray53);
        java.io.PrintWriter printWriter55 = printWriter33.format(locale45, "ZXZ", (java.lang.Object[]) throwableArray53);
        java.io.PrintStream printStream56 = printStream24.printf(locale26, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray53);
        printStream24.println(0.0f);
        java.io.PrintStream printStream60 = new java.io.PrintStream("ko-KR");
        printStream60.close();
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream60, false);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.Writer) printWriter63);
        char[] charArray69 = new char[] { '4', 'a', ' ', ' ' };
        printWriter63.write(charArray69);
        printStream24.println(charArray69);
        printWriter8.write(charArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter76 = printWriter8.append((java.lang.CharSequence) "\ub3c5\uc77c\uc5b4", (int) 'x', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -120");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertEquals(locale26.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "en" + "'", str48, "en");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[4, a,  ,  ]");
    }

    @Test
    public void test09473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09473");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        java.io.PrintStream printStream91 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream93 = printStream1.append('#');
        printStream93.flush();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test09474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09474");
        java.lang.String[] strArray2 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray2);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray2, (java.lang.Throwable) mathException5);
        java.lang.Throwable[] throwableArray7 = mathException6.getSuppressed();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("ITA");
        mathException8.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.String str12 = mathException8.toString();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.math.MathException: French" + "'", str12, "org.apache.commons.math.MathException: French");
    }

    @Test
    public void test09475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09475");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale2);
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale4.getDisplayScript(locale5);
        java.lang.String str7 = locale2.getDisplayLanguage(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str9 = locale5.getISO3Language();
        java.lang.String str10 = locale5.getDisplayVariant();
        java.util.Locale locale11 = null;
        java.lang.String str12 = locale5.getDisplayVariant(locale11);
        java.lang.Object obj13 = null;
        boolean boolean14 = locale5.equals(obj13);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u97d3\u6587" + "'", str7, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zho" + "'", str9, "zho");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09476");
        org.apache.commons.math.geometry.RotationOrder rotationOrder2 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder2.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder2.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder2.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D12, vector3D17);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D31, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D39 = rotation26.applyInverseTo(vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D39, vector3D40);
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D54 = rotation48.applyTo(vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D55 = vector3D50.negate();
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        double double58 = vector3D57.getY();
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D12, (double) ' ', vector3D39, (double) (-1.0f), vector3D55, (double) 10.0f, vector3D57);
        org.apache.commons.math.geometry.Rotation rotation66 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray67 = rotation66.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D71, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D79 = rotation66.applyInverseTo(vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D79, vector3D80);
        org.apache.commons.math.geometry.Vector3D vector3D82 = vector3D79.negate();
        org.apache.commons.math.geometry.Vector3D vector3D83 = new org.apache.commons.math.geometry.Vector3D((double) 1.0f, vector3D59, 100.0d, vector3D79);
        org.apache.commons.math.geometry.Vector3D vector3D84 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D5, (double) (short) 10, vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D86 = vector3D5.scalarMultiply((-3.141592653589793d));
        double double87 = vector3D5.getX();
        org.apache.commons.math.geometry.Vector3D vector3D88 = new org.apache.commons.math.geometry.Vector3D((-2.5575191894877256d), vector3D5);
        org.apache.commons.math.geometry.Vector3D vector3D89 = vector3D5.orthogonal();
        org.junit.Assert.assertNotNull(rotationOrder2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D89);
    }

    @Test
    public void test09477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09477");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("org.apache.commons.math.geometry.notarotationmatrixexception:  (ZXZ_FRAN\347AIS)", 83.87759858566432d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=83.87759858566432");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09478");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale1.getScript();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str6 = locale5.getDisplayVariant();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str9 = locale5.getDisplayScript(locale8);
        java.lang.String str10 = locale8.toLanguageTag();
        java.lang.String str11 = locale1.getDisplayScript(locale8);
        java.lang.String str12 = locale8.getISO3Country();
        java.util.Locale.setDefault(locale8);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "germany" + "'", str10, "germany");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test09479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09479");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 10, (byte) 10 };
        printStream1.write(byteArray91);
        printStream1.println(false);
        java.io.PrintStream printStream96 = printStream1.append('#');
        printStream96.print("chn");
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1, 100, -1, 10, 10]");
        org.junit.Assert.assertNotNull(printStream96);
    }

    @Test
    public void test09480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09480");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Canada");
        java.util.Locale.Builder builder18 = builder0.setLanguage("it");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        printWriter24.println('a');
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter24.format(locale32, "TWN", objArray35);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.lang.String str38 = locale32.getDisplayCountry();
        java.util.Locale.Builder builder39 = builder18.setLocale(locale32);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale40.getDisplayScript(locale41);
        java.util.Locale locale45 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str46 = locale40.getDisplayLanguage(locale45);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale47.getISO3Language();
        boolean boolean49 = locale47.hasExtensions();
        boolean boolean50 = locale47.hasExtensions();
        java.lang.String str51 = locale40.getDisplayVariant(locale47);
        java.util.Locale locale52 = locale40.stripExtensions();
        java.util.Locale.Builder builder53 = builder18.setLocale(locale40);
        java.util.Locale.Builder builder54 = builder18.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder56 = builder54.setRegion("\u4e2d\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Germany" + "'", str38, "Germany");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale45.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "French" + "'", str46, "French");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ita" + "'", str48, "ita");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test09481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09481");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        printWriter5.println(' ');
        printWriter5.print("United States");
        printWriter5.print(true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test09482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09482");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.write((int) (byte) 1);
        printWriter5.print((int) (short) 0);
        printWriter5.println("org.apache.commons.math.MathException: ZXZ");
        printWriter5.println('4');
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        java.lang.Object[] objArray21 = mathException19.getArguments();
        java.io.PrintWriter printWriter22 = printWriter5.printf("\u97d3\u6587)", objArray21);
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) strArray26);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException31 = new org.apache.commons.math.geometry.NotARotationMatrixException("italian-x-lvariant-CHN", (java.lang.Object[]) strArray26);
        printWriter22.println((java.lang.Object) "italian-x-lvariant-CHN");
        printWriter22.print(true);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException37);
        java.lang.Object[] objArray41 = mathException40.getArguments();
        java.io.PrintWriter printWriter42 = printWriter22.format("\uc911\uad6d\uc5b4", objArray41);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.RotationOrder rotationOrder44 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str45 = rotationOrder44.toString();
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotationOrder44.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D43.add(vector3D46);
        printWriter22.println((java.lang.Object) vector3D47);
        printWriter22.print(false);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotationOrder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ZXZ" + "'", str45, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
    }

    @Test
    public void test09483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09483");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream4, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter11 = printWriter8.printf("ko-KR", (java.lang.Object[]) strArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray10);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("und", (java.lang.Object[]) strArray10);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("inglese", (java.lang.Object[]) strArray10);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printWriter11);
    }

    @Test
    public void test09484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09484");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getCountry();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("\uc911\uad6d\uc5b4");
        java.lang.String str6 = locale1.getDisplayScript(locale5);
        java.lang.String str7 = locale5.toLanguageTag();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test09485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09485");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.MathException: ko_KR");
        java.lang.String str2 = locale1.getScript();
        java.lang.String str3 = locale1.getCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.mathexception: ko_kr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test09486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09486");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math.geometry.RotationOrder rotationOrder6 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder6.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder6.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder6.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D10 = vector3D3.subtract(152.9866275920405d, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = vector3D9.normalize();
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(rotationOrder6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
    }

    @Test
    public void test09487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09487");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ZYX");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale5 = new java.util.Locale("zho", "und");
        java.lang.String str6 = locale1.getDisplayVariant(locale5);
        java.util.Locale locale7 = locale1.stripExtensions();
        java.lang.String str8 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zyx");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zyx");
        org.junit.Assert.assertEquals(locale5.toString(), "zho_UND");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zyx");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zyx" + "'", str8, "zyx");
    }

    @Test
    public void test09488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09488");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation5.applyInverseTo(rotation21);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double37 = rotation36.getQ0();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation29.applyTo(rotation36);
        org.apache.commons.math.geometry.Rotation rotation39 = rotation29.revert();
        org.apache.commons.math.geometry.Rotation rotation45 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double46 = rotation45.getQ0();
        org.apache.commons.math.geometry.Rotation rotation47 = rotation29.applyInverseTo(rotation45);
        double double48 = rotation47.getAngle();
        org.apache.commons.math.geometry.Rotation rotation49 = rotation23.applyInverseTo(rotation47);
        double double50 = rotation49.getQ0();
        org.apache.commons.math.geometry.RotationOrder rotationOrder51 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation(rotationOrder51, 0.0d, 52.0d, (double) (byte) 1);
        double double56 = rotation55.getQ0();
        org.apache.commons.math.geometry.Rotation rotation57 = rotation55.revert();
        org.apache.commons.math.geometry.Rotation rotation58 = rotation49.applyTo(rotation57);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 52.0d + "'", double46 == 52.0d);
        org.junit.Assert.assertNotNull(rotation47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.63942416E8d) + "'", double50 == (-1.63942416E8d));
        org.junit.Assert.assertNotNull(rotationOrder51);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.567725116225552d + "'", double56 == 0.567725116225552d);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(rotation58);
    }

    @Test
    public void test09489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09489");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        printStream1.print(0L);
        printStream1.println((float) 100);
        printStream1.println(true);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test09490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09490");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = printWriter11.append(' ');
        printWriter13.print((float) (byte) 0);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder20 = builder16.setLanguage("ZXZ");
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder22 = builder16.setLocale(locale21);
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder24 = builder16.setLocale(locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.lang.String str26 = locale23.getLanguage();
        printWriter13.println((java.lang.Object) locale23);
        java.lang.String str28 = locale23.getDisplayCountry();
        java.util.Locale locale29 = locale23.stripExtensions();
        java.lang.Class<?> wildcardClass30 = locale29.getClass();
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Canada" + "'", str25, "Canada");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Canada" + "'", str28, "Canada");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test09491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09491");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.println((float) (-1));
        printStream1.print(true);
        printStream1.println("\ub3c5\uc77c\uc5b4");
        printStream1.println(false);
    }

    @Test
    public void test09492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09492");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Chine");
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale2.getCountry();
        boolean boolean4 = languageRange1.equals((java.lang.Object) locale2);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09493");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.print((double) (byte) 1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream8.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation17 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray18 = rotation17.getMatrix();
        java.io.PrintStream printStream19 = printStream8.printf("fra", (java.lang.Object[]) doubleArray18);
        java.io.PrintStream printStream20 = printStream1.format("", (java.lang.Object[]) doubleArray18);
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream22, false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter25);
        printWriter26.println('a');
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder33 = builder29.setLanguage("ZXZ");
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder35 = builder29.setLocale(locale34);
        java.lang.Object[] objArray37 = null;
        java.io.PrintWriter printWriter38 = printWriter26.format(locale34, "TWN", objArray37);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str41 = locale34.getDisplayScript(locale40);
        java.io.PrintStream printStream43 = new java.io.PrintStream("ko-KR");
        printStream43.close();
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream43, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter46);
        printWriter47.close();
        java.util.Locale locale50 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter47.println((java.lang.Object) locale50);
        java.util.Set<java.lang.Character> charSet52 = locale50.getExtensionKeys();
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder58 = builder53.setExtension('u', "");
        java.util.Locale.Builder builder60 = builder58.setVariant("");
        java.util.Locale locale61 = builder60.build();
        java.lang.String str62 = locale50.getDisplayName(locale61);
        java.lang.String str63 = locale34.getDisplayName(locale61);
        java.lang.String str64 = locale61.getISO3Language();
        java.lang.Object[] objArray66 = null;
        java.io.PrintStream printStream67 = printStream1.format(locale61, "catalan", objArray66);
        printStream67.println((float) (-1));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale50.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str62, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "German (Germany)" + "'", str63, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(printStream67);
    }

    @Test
    public void test09494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09494");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter8.println(0.0d);
        printWriter8.write(0);
        java.io.PrintWriter printWriter14 = printWriter8.append('4');
        printWriter14.write("German");
        boolean boolean17 = printWriter14.checkError();
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        char[] charArray28 = new char[] { ' ', 'x' };
        printWriter25.write(charArray28);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.lang.String str33 = locale30.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray41 = rotation40.getMatrix();
        java.io.PrintWriter printWriter42 = printWriter25.format(locale30, "YZY", (java.lang.Object[]) doubleArray41);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("ko-KR", (java.lang.Object[]) doubleArray41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException((java.lang.Throwable) notARotationMatrixException43);
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        java.io.PrintWriter printWriter46 = printWriter14.printf("", (java.lang.Object[]) throwableArray45);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , x]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(printWriter46);
    }

    @Test
    public void test09495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09495");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "germany");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "germany" + "'", str2, "germany");
    }

    @Test
    public void test09496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09496");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder9 = builder0.setExtension('a', "CA");
        java.util.Locale.Builder builder11 = builder0.removeUnicodeLocaleAttribute("XYZ");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder0.setLanguageTag("\ud55c\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: org.apache.commons.math.geometry.NotARotationMatrixException: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test09497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09497");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        java.io.PrintStream printStream17 = printStream1.append((java.lang.CharSequence) "German", 0, 1);
        printStream1.print(1.4070751110264852d);
        printStream1.print(141.40954556245234d);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test09498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09498");
        java.util.Locale locale2 = new java.util.Locale("\u4e2d\u6587", "ja");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        org.apache.commons.math.geometry.RotationOrder rotationOrder5 = org.apache.commons.math.geometry.RotationOrder.ZXY;
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder5.getA2();
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation(rotationOrder5, (-0.8230677854004599d), (-1.2792393947944187d), 0.0d);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotationOrder5.getA3();
        boolean boolean12 = locale2.equals((java.lang.Object) vector3D11);
        org.junit.Assert.assertEquals(locale2.toString(), "\u4e2d\u6587_JA");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(rotationOrder5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09499");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale9 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str14 = locale9.getDisplayName(locale11);
        java.lang.String str15 = locale11.getDisplayName();
        java.lang.String str16 = locale6.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder17 = builder0.setLocale(locale6);
        java.util.Locale locale18 = builder0.build();
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.lang.String str24 = locale19.getDisplayLanguage(locale21);
        java.util.Locale locale25 = locale19.stripExtensions();
        java.lang.String str26 = locale19.getDisplayLanguage();
        java.util.Locale locale27 = locale19.stripExtensions();
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        printWriter33.println('a');
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder36.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder40 = builder36.setLanguage("ZXZ");
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder42 = builder36.setLocale(locale41);
        java.lang.Object[] objArray44 = null;
        java.io.PrintWriter printWriter45 = printWriter33.format(locale41, "TWN", objArray44);
        java.util.Set<java.lang.String> strSet46 = locale41.getUnicodeLocaleKeys();
        java.lang.String str47 = locale41.getDisplayCountry();
        java.lang.String str48 = locale27.getDisplayCountry(locale41);
        java.util.Locale.Builder builder49 = builder0.setLocale(locale41);
        java.lang.String str50 = locale41.getISO3Language();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u97d3\u6587)" + "'", str14, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Germany" + "'", str47, "Germany");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "deu" + "'", str50, "deu");
    }

    @Test
    public void test09500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest18.test09500");
        org.apache.commons.math.geometry.Vector3D vector3D1 = null;
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D7, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D28, (double) (byte) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D25, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D12, (double) (byte) 1, vector3D20, (double) (short) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D34 = vector3D12.negate();
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = vector3D34.subtract(vector3D39);
        double double41 = vector3D40.getNorm();
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray49 = rotation48.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D51, (double) (byte) 100, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D56, (double) (byte) 100, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D53, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotation48.applyInverseTo(vector3D53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D(0.23295968413075419d, vector3D1, (-0.5440211108893698d), vector3D40, 7497.803724359488d, vector3D53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
    }
}

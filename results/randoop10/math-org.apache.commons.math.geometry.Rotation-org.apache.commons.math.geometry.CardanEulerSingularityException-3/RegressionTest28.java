import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest28 {

    public static boolean debug = false;

    @Test
    public void test14001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14001");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        printStream1.print('a');
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double28 = rotation27.getQ0();
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = rotation27.applyTo(rotation34);
        org.apache.commons.math.geometry.Rotation rotation37 = rotation27.revert();
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double44 = rotation43.getQ0();
        org.apache.commons.math.geometry.Rotation rotation45 = rotation27.applyInverseTo(rotation43);
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) (byte) 1, (double) 1.0f, 0.0d, 1.0d, true);
        org.apache.commons.math.geometry.Rotation rotation52 = rotation27.applyInverseTo(rotation51);
        double[][] doubleArray53 = rotation27.getMatrix();
        java.io.PrintStream printStream54 = printStream1.format("org.apache.commons.math.mathexception: ko_kr", (java.lang.Object[]) doubleArray53);
        printStream54.println(0.7434704792648906d);
        printStream54.print(true);
        printStream54.write(10);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(printStream54);
    }

    @Test
    public void test14002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14002");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale10.getVariant();
        printWriter8.print((java.lang.Object) str12);
        org.apache.commons.math.geometry.RotationOrder rotationOrder15 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotationOrder15.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D17 = rotationOrder15.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotationOrder15.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotationOrder15.getA3();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation(rotationOrder15, (-0.09950371902099892d), (double) (-1), (double) ' ');
        double[][] doubleArray24 = rotation23.getMatrix();
        java.io.PrintWriter printWriter25 = printWriter8.format("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray24);
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream28, false);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.Writer) printWriter31);
        java.lang.String[] strArray34 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter35 = printWriter32.printf("ko-KR", (java.lang.Object[]) strArray34);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.lang.String str38 = locale36.getDisplayScript(locale37);
        java.lang.String str39 = locale37.getVariant();
        printWriter35.print((java.lang.Object) str39);
        org.apache.commons.math.geometry.RotationOrder rotationOrder42 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotationOrder42.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotationOrder42.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D45 = rotationOrder42.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotationOrder42.getA3();
        org.apache.commons.math.geometry.Rotation rotation50 = new org.apache.commons.math.geometry.Rotation(rotationOrder42, (-0.09950371902099892d), (double) (-1), (double) ' ');
        double[][] doubleArray51 = rotation50.getMatrix();
        java.io.PrintWriter printWriter52 = printWriter35.format("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray51);
        java.io.PrintWriter printWriter53 = printWriter25.format("Allemagne", (java.lang.Object[]) doubleArray51);
        java.util.Locale locale54 = null;
        java.lang.String[] strArray57 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray57, (java.lang.Throwable) mathException59);
        java.io.PrintWriter printWriter61 = printWriter53.printf(locale54, "allemand", (java.lang.Object[]) strArray57);
        printWriter53.print("CA");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(rotationOrder15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(rotationOrder42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(printWriter61);
    }

    @Test
    public void test14003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14003");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        java.util.Locale locale9 = new java.util.Locale("French");
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException19);
        java.lang.Throwable[] throwableArray22 = mathException19.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray22);
        java.util.Locale locale25 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream28, false);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.Writer) printWriter31);
        printWriter32.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray42 = rotation41.getMatrix();
        java.io.PrintWriter printWriter43 = printWriter32.format("en", (java.lang.Object[]) doubleArray42);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.lang.String str47 = locale44.getLanguage();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray51 = mathException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = mathException50.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException53 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray52);
        java.io.PrintWriter printWriter54 = printWriter32.format(locale44, "ZXZ", (java.lang.Object[]) throwableArray52);
        java.io.PrintStream printStream55 = printStream23.printf(locale25, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray52);
        java.util.Locale locale57 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.lang.String str59 = locale25.getDisplayVariant(locale57);
        java.util.Set<java.lang.String> strSet60 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale9.getDisplayScript(locale57);
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException(throwable63);
        java.lang.String[] strArray66 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66);
        mathException64.addSuppressed((java.lang.Throwable) mathException67);
        java.lang.Throwable[] throwableArray69 = mathException67.getSuppressed();
        java.io.PrintWriter printWriter70 = printWriter7.format(locale9, "org.apache.commons.math.MathException: de_DE", (java.lang.Object[]) throwableArray69);
        printWriter7.println("org.apache.commons.math.MathException: china");
        org.junit.Assert.assertEquals(locale9.toString(), "french");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertEquals(locale25.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertEquals(locale57.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(printWriter70);
    }

    @Test
    public void test14004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14004");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.util.Locale.setDefault(category1, locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale2.getDisplayLanguage(locale6);
        java.lang.String str8 = locale6.getDisplayCountry();
        java.lang.String str9 = locale6.getDisplayVariant();
        java.lang.String str10 = locale6.getCountry();
        java.lang.Object obj11 = null;
        boolean boolean12 = locale6.equals(obj11);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14005");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        java.io.PrintWriter printWriter12 = printWriter4.append('#');
        printWriter12.close();
        printWriter12.print('#');
        printWriter12.println(1.0f);
        boolean boolean18 = printWriter12.checkError();
        printWriter12.println('#');
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test14006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14006");
        java.util.Locale locale2 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale3);
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.lang.String str8 = locale3.getDisplayLanguage(locale6);
        java.lang.String str9 = locale2.getDisplayVariant(locale6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder14 = builder10.setLanguage("ZXZ");
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder18 = builder10.setLocale(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale2.getDisplayScript(locale17);
        java.lang.String str21 = locale2.getDisplayLanguage();
        java.lang.String str22 = locale2.getScript();
        java.util.Set<java.lang.String> strSet23 = locale2.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale2.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u97d3\u6587" + "'", str8, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uce90\ub098\ub2e4" + "'", str19, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zxz" + "'", str21, "zxz");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
    }

    @Test
    public void test14007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14007");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        char[] charArray13 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream6.println(charArray13);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream6);
        printWriter15.print(0);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale.setDefault(category18, locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category23, locale26);
        java.util.Locale locale28 = java.util.Locale.getDefault(category23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = locale29.getDisplayName();
        boolean boolean31 = locale29.hasExtensions();
        java.lang.String str32 = locale28.getDisplayLanguage(locale29);
        java.lang.String str33 = locale19.getDisplayCountry(locale28);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37);
        java.lang.Object[] objArray39 = mathException38.getArguments();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ja", objArray39);
        java.io.PrintWriter printWriter41 = printWriter15.printf(locale19, "Catalan", objArray39);
        java.lang.String str42 = locale19.toLanguageTag();
        java.lang.String str43 = locale19.getScript();
        java.lang.String str44 = locale19.getLanguage();
        java.lang.String str45 = locale19.getDisplayName();
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, a, #, x]");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale26.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English" + "'", str30, "English");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zxz" + "'", str32, "zxz");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "en" + "'", str42, "en");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en" + "'", str44, "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English" + "'", str45, "English");
    }

    @Test
    public void test14008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14008");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.ZXY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.8230677854004599d), (-1.2792393947944187d), 0.0d);
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D12, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D28, (double) (byte) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D30, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D17, (double) (byte) 1, vector3D25, (double) (short) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D39 = vector3D17.negate();
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D45, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D55, (double) (byte) 100, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D45, (double) 0.0f, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D61 = vector3D59.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D40, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D64 = vector3D40.scalarMultiply((double) 100.0f);
        java.io.PrintStream printStream66 = new java.io.PrintStream("ko-KR");
        printStream66.close();
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter((java.io.OutputStream) printStream66, false);
        java.io.PrintWriter printWriter70 = new java.io.PrintWriter((java.io.Writer) printWriter69);
        printWriter70.println('a');
        printWriter70.print((float) (byte) 100);
        java.io.PrintStream printStream76 = new java.io.PrintStream("ko-KR");
        printStream76.close();
        java.util.Locale locale78 = java.util.Locale.UK;
        java.lang.String[] strArray80 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream81 = printStream76.format(locale78, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray80);
        java.io.PrintStream printStream83 = new java.io.PrintStream((java.io.OutputStream) printStream76, false);
        printStream76.println(10.0f);
        printStream76.println((float) 100);
        java.io.PrintStream printStream89 = new java.io.PrintStream((java.io.OutputStream) printStream76, false);
        printWriter70.println((java.lang.Object) printStream89);
        org.apache.commons.math.geometry.RotationOrder rotationOrder91 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D92 = rotationOrder91.getA3();
        printStream89.print((java.lang.Object) rotationOrder91);
        org.apache.commons.math.geometry.Vector3D vector3D94 = rotationOrder91.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D95 = vector3D40.add(vector3D94);
        org.apache.commons.math.geometry.Vector3D vector3D96 = vector3D6.add(vector3D40);
        org.apache.commons.math.geometry.Rotation rotation98 = new org.apache.commons.math.geometry.Rotation(vector3D6, 0.9314590104177871d);
        org.apache.commons.math.geometry.Vector3D vector3D99 = vector3D6.orthogonal();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertNotNull(rotationOrder91);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(vector3D96);
        org.junit.Assert.assertNotNull(vector3D99);
    }

    @Test
    public void test14009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14009");
        java.util.Locale locale3 = new java.util.Locale("org.apache.commons.math.MathException: org.apache.commons.math.MathException: United Kingdom", "italian (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ,CHN)", "\u5fb7\u6587\u5fb7\u56fd)");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u5fb7\u6587\u5fb7\u56fd)");
    }

    @Test
    public void test14010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14010");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream8 = printStream3.format(locale5, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream3, false);
        printStream3.println(10.0f);
        java.lang.String[] strArray15 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray15);
        java.io.PrintStream printStream17 = printStream3.format("\u97d3\u6587", (java.lang.Object[]) strArray15);
        printStream3.flush();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        printWriter20.write((int) (byte) 10);
        char[] charArray26 = new char[] { 'a', '4', 'a' };
        printWriter20.print(charArray26);
        printStream1.print(charArray26);
        java.io.PrintStream printStream31 = new java.io.PrintStream("ko-KR");
        printStream31.close();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream31, false);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter34);
        printWriter35.println('a');
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder38.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder42 = builder38.setLanguage("ZXZ");
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder44 = builder38.setLocale(locale43);
        java.lang.Object[] objArray46 = null;
        java.io.PrintWriter printWriter47 = printWriter35.format(locale43, "TWN", objArray46);
        printWriter47.println();
        java.io.PrintWriter printWriter50 = printWriter47.append((java.lang.CharSequence) "ZXZ");
        java.lang.String[] strArray54 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray54, (java.lang.Throwable) mathException57);
        java.io.PrintWriter printWriter59 = printWriter50.format("german", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream60 = printStream1.printf("KOR", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream62 = printStream60.append(' ');
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.OutputStream) printStream62, true);
        printStream62.println(true);
        java.io.PrintStream printStream68 = new java.io.PrintStream((java.io.OutputStream) printStream62, false);
        java.io.PrintStream printStream70 = printStream62.append((java.lang.CharSequence) "org.apache.commons.math.geometry.NotARotationMatrixException: ja");
        printStream62.println((float) '4');
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, 4, a]");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(printStream70);
    }

    @Test
    public void test14011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14011");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D12, (double) (byte) 100, vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotation10.applyTo(vector3D12);
        double double17 = rotation10.getAngle();
        double double18 = rotation10.getQ3();
        org.apache.commons.math.geometry.Rotation rotation19 = rotation4.applyTo(rotation10);
        double[][] doubleArray20 = rotation10.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D(0.0d, (double) 'x', 9610.932890332206d);
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotation10.applyTo(vector3D24);
        double double26 = vector3D24.getNorm();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(rotation19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 9611.682007977031d + "'", double26 == 9611.682007977031d);
    }

    @Test
    public void test14012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14012");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de_DE");
        printWriter1.flush();
        printWriter1.println(0.0f);
        printWriter1.println((int) (short) 0);
        java.io.PrintWriter printWriter8 = printWriter1.append('x');
        java.io.PrintWriter printWriter10 = printWriter1.append(' ');
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter10);
    }

    @Test
    public void test14013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14013");
        java.util.Locale locale1 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("CHN");
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.lang.String str7 = locale1.getDisplayVariant(locale4);
        java.lang.String str8 = locale1.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "chn");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test14014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14014");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream7 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ko-KR");
        printStream10.close();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream10, false);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter13);
        printWriter13.println((float) (byte) -1);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter13, true);
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double26 = rotation25.getQ0();
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double33 = rotation32.getQ0();
        org.apache.commons.math.geometry.Rotation rotation34 = rotation25.applyTo(rotation32);
        double double35 = rotation25.getQ0();
        double double36 = rotation25.getQ0();
        double[][] doubleArray37 = rotation25.getMatrix();
        java.io.PrintWriter printWriter38 = printWriter18.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.lang.String str41 = locale39.getDisplayName();
        java.lang.String str42 = locale39.getScript();
        java.util.Set<java.lang.String> strSet43 = locale39.getUnicodeLocaleKeys();
        java.io.PrintStream printStream46 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream46.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray56 = rotation55.getMatrix();
        java.io.PrintStream printStream57 = printStream46.printf("fra", (java.lang.Object[]) doubleArray56);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder58.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder63 = builder58.setExtension('u', "");
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.util.Locale locale67 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category68 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        boolean boolean70 = locale69.hasExtensions();
        java.util.Locale.setDefault(category68, locale69);
        java.lang.String str72 = locale67.getDisplayName(locale69);
        java.lang.String str73 = locale69.getDisplayName();
        java.lang.String str74 = locale64.getDisplayLanguage(locale69);
        java.util.Locale.Builder builder75 = builder58.setLocale(locale64);
        java.io.PrintStream printStream78 = new java.io.PrintStream("ko-KR");
        printStream78.close();
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.OutputStream) printStream78, false);
        java.io.PrintWriter printWriter82 = new java.io.PrintWriter((java.io.Writer) printWriter81);
        java.lang.String[] strArray84 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter85 = printWriter82.printf("ko-KR", (java.lang.Object[]) strArray84);
        java.io.PrintStream printStream86 = printStream46.printf(locale64, "TWN", (java.lang.Object[]) strArray84);
        java.io.PrintWriter printWriter87 = printWriter18.printf(locale39, "", (java.lang.Object[]) strArray84);
        java.io.PrintStream printStream88 = printStream1.format("\u82f1\u8a9e", (java.lang.Object[]) strArray84);
        printStream1.print((long) (-1));
        printStream1.print((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream96 = printStream1.append((java.lang.CharSequence) "\u610f\u5927\u5229", (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "German" + "'", str40, "German");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "German" + "'", str41, "German");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale67.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category68 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category68.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u97d3\u6587)" + "'", str72, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "English" + "'", str73, "English");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "English" + "'", str74, "English");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(printWriter85);
        org.junit.Assert.assertNotNull(printStream86);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printStream88);
    }

    @Test
    public void test14015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14015");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale12 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale.setDefault(category13, locale14);
        java.lang.String str17 = locale12.getDisplayName(locale14);
        java.lang.String str18 = locale14.getDisplayName();
        java.lang.String str19 = locale9.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder20 = builder7.setLocale(locale14);
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder24 = builder22.setLanguage("zh");
        java.util.Locale.Builder builder27 = builder24.setExtension('x', "germany");
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder27.setUnicodeLocaleKeyword("English (United Kingdom)", "Korean");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: English (United Kingdom) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u97d3\u6587)" + "'", str17, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English" + "'", str18, "English");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English" + "'", str19, "English");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test14016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14016");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("en");
        java.util.Locale.Builder builder13 = builder10.clearExtensions();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.getDefault(category14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        java.util.Locale.Builder builder18 = builder10.setLocale(locale16);
        java.util.Locale.Builder builder20 = builder10.setLanguageTag("German");
        java.util.Locale locale21 = builder10.build();
        java.util.Locale.Builder builder23 = builder10.setLanguage("ITA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder23.setVariant("und-GB");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: und-GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "german");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test14017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14017");
        org.apache.commons.math.geometry.Vector3D vector3D0 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (short) 100, (double) 1.0f, (double) (byte) -1);
        double double5 = vector3D4.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D6 = vector3D0.add(vector3D4);
        double double7 = vector3D0.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Vector3D vector3D8 = vector3D0.orthogonal();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: null norm");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.0d) + "'", double5 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test14018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14018");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("fr");
        java.util.Locale.Builder builder10 = builder6.setLanguage("");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14019");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("French");
        printWriter1.println(false);
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        char[] charArray14 = new char[] { '4', 'a', ' ', ' ' };
        printWriter8.write(charArray14);
        printWriter8.write((int) (short) 100);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter8.println((double) 'a');
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.lang.String str22 = locale21.getCountry();
        java.io.PrintStream printStream26 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream26.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation35 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray36 = rotation35.getMatrix();
        java.io.PrintStream printStream37 = printStream26.printf("fra", (java.lang.Object[]) doubleArray36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR", (java.lang.Object[]) doubleArray36);
        java.io.PrintWriter printWriter39 = printWriter8.format(locale21, "x-lvariant-TWN", (java.lang.Object[]) doubleArray36);
        printWriter39.flush();
        printWriter39.println();
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("\uce90\ub098\ub2e4");
        java.io.PrintStream printStream48 = new java.io.PrintStream("ko-KR");
        printStream48.close();
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream48, false);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter51);
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter55 = printWriter52.printf("ko-KR", (java.lang.Object[]) strArray54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("und", (java.lang.Object[]) strArray54);
        java.io.PrintWriter printWriter58 = printWriter39.printf(locale43, "ZYZ", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream60 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        java.io.PrintStream printStream62 = new java.io.PrintStream("ko-KR");
        printStream62.close();
        java.util.Locale locale64 = java.util.Locale.UK;
        java.lang.String[] strArray66 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream67 = printStream62.format(locale64, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray66);
        java.io.PrintStream printStream69 = new java.io.PrintStream((java.io.OutputStream) printStream62, false);
        printStream62.println(10.0f);
        java.lang.String[] strArray74 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray74);
        java.io.PrintStream printStream76 = printStream62.format("\u97d3\u6587", (java.lang.Object[]) strArray74);
        printStream62.flush();
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.OutputStream) printStream62, false);
        printWriter79.write((int) (byte) 10);
        char[] charArray85 = new char[] { 'a', '4', 'a' };
        printWriter79.print(charArray85);
        printStream60.print(charArray85);
        printWriter39.println(charArray85);
        printWriter1.print(charArray85);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "KR" + "'", str22, "KR");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "a4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "a4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[a, 4, a]");
    }

    @Test
    public void test14020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14020");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = rotation5.applyInverseTo(rotation11);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D17, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotation13.applyTo(vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation13.getAxis();
        org.apache.commons.math.geometry.Rotation rotation27 = rotation13.revert();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double34 = rotation33.getQ0();
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double41 = rotation40.getQ0();
        org.apache.commons.math.geometry.Rotation rotation42 = rotation33.applyTo(rotation40);
        org.apache.commons.math.geometry.Rotation rotation43 = rotation33.revert();
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation50 = rotation43.applyTo(rotation49);
        org.apache.commons.math.geometry.Rotation rotation51 = rotation27.applyTo(rotation49);
        org.apache.commons.math.geometry.Rotation rotation57 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double58 = rotation57.getQ0();
        org.apache.commons.math.geometry.Rotation rotation64 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double65 = rotation64.getQ0();
        org.apache.commons.math.geometry.Rotation rotation66 = rotation57.applyTo(rotation64);
        org.apache.commons.math.geometry.Rotation rotation67 = rotation57.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder68 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation(rotationOrder68, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation73 = rotation67.applyTo(rotation72);
        double double74 = rotation67.getAngle();
        org.apache.commons.math.geometry.RotationOrder rotationOrder75 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation79 = new org.apache.commons.math.geometry.Rotation(rotationOrder75, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Rotation rotation80 = rotation67.applyTo(rotation79);
        double double81 = rotation80.getQ3();
        double double82 = rotation80.getAngle();
        org.apache.commons.math.geometry.Rotation rotation83 = rotation49.applyTo(rotation80);
        double double84 = rotation80.getAngle();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(rotation13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertNotNull(rotation42);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 52.0d + "'", double58 == 52.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 52.0d + "'", double65 == 52.0d);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(rotationOrder68);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(rotationOrder75);
        org.junit.Assert.assertNotNull(rotation80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-43.80155030821067d) + "'", double81 == (-43.80155030821067d));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
    }

    @Test
    public void test14021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14021");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(0.7571048020859654d, 614795.4656673663d, (double) 10.0f, (-0.031116060294535675d), false);
    }

    @Test
    public void test14022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14022");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray10 = new char[] { '4', 'a', ' ', ' ' };
        printWriter4.write(charArray10);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.lang.String str16 = locale12.getDisplayLanguage(locale13);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintWriter printWriter40 = printWriter23.format(locale28, "YZY", (java.lang.Object[]) doubleArray39);
        java.io.PrintWriter printWriter41 = printWriter4.printf(locale13, "ko-KR", (java.lang.Object[]) doubleArray39);
        printWriter4.println();
        java.io.PrintStream printStream44 = new java.io.PrintStream("ko-KR");
        printStream44.close();
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream44, false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter47);
        char[] charArray51 = new char[] { ' ', 'x' };
        printWriter48.write(charArray51);
        printWriter48.write((int) (byte) 1);
        java.io.PrintStream printStream56 = new java.io.PrintStream("ko-KR");
        printStream56.close();
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter((java.io.OutputStream) printStream56, false);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.Writer) printWriter59);
        java.lang.String[] strArray62 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter63 = printWriter60.printf("ko-KR", (java.lang.Object[]) strArray62);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        double double69 = vector3D67.getNorm();
        printWriter60.println((java.lang.Object) vector3D67);
        java.io.PrintStream printStream72 = new java.io.PrintStream("ko-KR");
        printStream72.close();
        java.io.PrintStream printStream75 = new java.io.PrintStream("ko-KR");
        printStream75.close();
        java.io.PrintWriter printWriter78 = new java.io.PrintWriter((java.io.OutputStream) printStream75, false);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.Writer) printWriter78);
        char[] charArray84 = new char[] { '4', 'a', ' ', ' ' };
        printWriter78.write(charArray84);
        printStream72.print(charArray84);
        printWriter60.print(charArray84);
        printWriter48.println(charArray84);
        printWriter4.write(charArray84);
        printWriter4.println(3.7755405555684285d);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ , x]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[4, a,  ,  ]");
    }

    @Test
    public void test14023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14023");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String[] strArray8 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream9 = printStream4.format(locale6, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        printStream4.println(10.0f);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter20.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray30 = rotation29.getMatrix();
        java.io.PrintWriter printWriter31 = printWriter20.format("en", (java.lang.Object[]) doubleArray30);
        java.io.PrintStream printStream32 = printStream4.printf("YZY", (java.lang.Object[]) doubleArray30);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray30);
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException38);
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray43, (java.lang.Throwable) mathException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray43, (java.lang.Throwable) mathException47);
        java.lang.Throwable[] throwableArray50 = mathException47.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException51 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray50);
        mathException39.addSuppressed((java.lang.Throwable) notARotationMatrixException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("Italy", (java.lang.Object[]) doubleArray30, (java.lang.Throwable) mathException53);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException55 = new org.apache.commons.math.geometry.NotARotationMatrixException("ko_KR", (java.lang.Object[]) doubleArray30);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test14024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14024");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println(false);
        printStream1.write((int) (short) 0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test14025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14025");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("en");
        java.util.Locale.Builder builder13 = builder10.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder13.setUnicodeLocaleKeyword("USA", "\uc911\uad6d\uc5b4\uc911\uad6d)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: USA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test14026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14026");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("en");
        java.util.Locale.Builder builder13 = builder10.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.setVariant("Germany");
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale.setDefault(category17, locale18);
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getDisplayScript();
        java.lang.String str23 = locale18.getDisplayName();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder28 = builder24.setLanguage("ZXZ");
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder30 = builder24.setLocale(locale29);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder32 = builder24.setLocale(locale31);
        java.lang.String str33 = locale31.getDisplayCountry();
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleKeys();
        boolean boolean35 = locale31.hasExtensions();
        java.lang.String str36 = locale18.getDisplayVariant(locale31);
        java.lang.String str37 = locale18.getDisplayVariant();
        java.util.Locale.Builder builder38 = builder16.setLocale(locale18);
        java.util.Locale.Builder builder39 = builder16.clear();
        java.util.Locale locale40 = builder39.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder39.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Canada" + "'", str33, "Canada");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
    }

    @Test
    public void test14027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14027");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zho", strMap1);
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale13, locale14, locale15, locale16, locale17, locale18, locale20, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale.setDefault(category28, locale29);
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        boolean boolean34 = locale33.hasExtensions();
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale.setDefault(category28, locale33);
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category38 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.util.Locale.setDefault(category38, locale39);
        java.util.Locale.setDefault(category37, locale39);
        java.util.Locale.setDefault(category28, locale39);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.lang.String str48 = locale46.getDisplayScript(locale47);
        java.lang.String str49 = locale44.getDisplayLanguage(locale46);
        java.util.Locale locale50 = locale44.stripExtensions();
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.lang.String str52 = locale39.getDisplayName(locale50);
        java.util.Locale.setDefault(locale50);
        java.util.Set<java.lang.String> strSet54 = locale50.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet54);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap57);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode26.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.FORMAT + "'", category28.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + category37 + "' != '" + java.util.Locale.Category.FORMAT + "'", category37.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.FORMAT + "'", category38.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(languageRangeList58);
    }

    @Test
    public void test14028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14028");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print("XYZ");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        printWriter4.print((int) (byte) 1);
        printWriter4.println((java.lang.Object) (byte) 10);
        printWriter4.println("Deutschland");
        java.io.PrintWriter printWriter19 = printWriter4.append('#');
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("\ub3c5\uc77c\uc5b4");
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream30 = printStream25.format(locale27, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream25, false);
        printStream25.println(10.0f);
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        printWriter41.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation50 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray51 = rotation50.getMatrix();
        java.io.PrintWriter printWriter52 = printWriter41.format("en", (java.lang.Object[]) doubleArray51);
        java.io.PrintStream printStream53 = printStream25.printf("YZY", (java.lang.Object[]) doubleArray51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray51);
        java.io.PrintWriter printWriter55 = printWriter19.format(locale21, "Italy", (java.lang.Object[]) doubleArray51);
        printWriter19.println(0.7033107914580616d);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(printWriter55);
    }

    @Test
    public void test14029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14029");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        boolean boolean11 = printStream1.checkError();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14030");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("french", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12, locale13, locale15, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale26, locale27, locale28, locale29, locale30, locale31, locale33, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList37, filteringMode39);
        java.lang.String[] strArray44 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.lang.String str47 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList45);
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList45);
        java.util.Collection<java.util.Locale> localeCollection49 = null;
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, localeCollection49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap51);
        java.util.Locale.LanguageRange languageRange55 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str56 = languageRange55.getRange();
        java.util.Locale.LanguageRange languageRange59 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str60 = languageRange59.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] { languageRange55, languageRange59 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.lang.String str73 = locale72.getDisplayLanguage();
        java.util.Locale locale74 = java.util.Locale.FRENCH;
        java.util.Locale locale75 = java.util.Locale.ROOT;
        java.util.Locale locale76 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray77 = new java.util.Locale[] { locale67, locale68, locale69, locale70, locale71, locale72, locale74, locale75, locale76 };
        java.util.ArrayList<java.util.Locale> localeList78 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList78, localeArray77);
        java.util.Locale.FilteringMode filteringMode80 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList78, filteringMode80);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList78);
        java.util.Locale locale83 = java.util.Locale.lookup(languageRangeList52, (java.util.Collection<java.util.Locale>) localeList82);
        java.util.Locale locale84 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList82);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + filteringMode21 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode21.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode39.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zxz" + "'", str56, "zxz");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zxz" + "'", str60, "zxz");
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + filteringMode80 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode80.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNull(locale83);
        org.junit.Assert.assertNull(locale84);
    }

    @Test
    public void test14031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14031");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-3.141592653589793d), (double) ' ', (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.Rotation rotation7 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder8 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder8.getA1();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation(rotationOrder8, 9610.932890332206d, 10.0d, (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.Rotation rotation15 = rotation7.applyTo(rotation13);
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double29 = rotation28.getQ0();
        org.apache.commons.math.geometry.Rotation rotation30 = rotation21.applyTo(rotation28);
        org.apache.commons.math.geometry.Rotation rotation31 = rotation21.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder32 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation36 = new org.apache.commons.math.geometry.Rotation(rotationOrder32, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation37 = rotation31.applyTo(rotation36);
        double double38 = rotation37.getAngle();
        org.apache.commons.math.geometry.Rotation rotation44 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation50 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double51 = rotation50.getQ0();
        org.apache.commons.math.geometry.Rotation rotation52 = rotation44.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D59, (double) (byte) 100, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D56, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D64 = rotation52.applyTo(vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotation52.getAxis();
        org.apache.commons.math.geometry.Rotation rotation66 = rotation52.revert();
        org.apache.commons.math.geometry.Rotation rotation67 = rotation37.applyInverseTo(rotation66);
        org.apache.commons.math.geometry.Vector3D vector3D68 = rotation66.getAxis();
        org.apache.commons.math.geometry.RotationOrder rotationOrder69 = org.apache.commons.math.geometry.RotationOrder.ZYX;
        double[] doubleArray70 = rotation66.getAngles(rotationOrder69);
        java.lang.String str71 = rotationOrder69.toString();
        double[] doubleArray72 = rotation15.getAngles(rotationOrder69);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(rotation7);
        org.junit.Assert.assertNotNull(rotationOrder8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotationOrder32);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 52.0d + "'", double51 == 52.0d);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotationOrder69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ZYX" + "'", str71, "ZYX");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.813034706090855, 0.14734267167722367, 1.491128278724364]");
    }

    @Test
    public void test14032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14032");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation9 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.09950371902099892d), (-0.6999730706914942d), (-0.7035975447302918d));
        org.apache.commons.math.geometry.Vector3D vector3D10 = rotationOrder0.getA1();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D10);
    }

    @Test
    public void test14033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14033");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("germany");
    }

    @Test
    public void test14034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14034");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException12);
        java.io.PrintWriter printWriter14 = printWriter4.printf("it", (java.lang.Object[]) strArray10);
        java.io.PrintWriter printWriter16 = printWriter14.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder21 = builder17.setLanguage("ZXZ");
        java.util.Locale.Builder builder22 = builder17.clearExtensions();
        java.util.Locale.Builder builder23 = builder17.clear();
        java.util.Locale.Builder builder25 = builder23.setScript("");
        java.util.Locale.Builder builder27 = builder23.setVariant("");
        printWriter16.print((java.lang.Object) builder23);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale31.getDisplayScript(locale32);
        java.lang.String str34 = locale29.getDisplayLanguage(locale31);
        java.util.Locale locale35 = locale29.stripExtensions();
        java.lang.String str36 = locale29.getDisplayLanguage();
        java.util.Locale locale37 = locale29.stripExtensions();
        java.lang.String str38 = locale37.toLanguageTag();
        java.util.Locale.Builder builder39 = builder23.setLocale(locale37);
        java.util.Locale.Builder builder40 = builder39.clear();
        java.util.Locale.Builder builder43 = builder40.setExtension('x', "en_GB");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder45 = builder43.setRegion("\u7fa9\u5927\u5229\u6587)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: germany (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "und" + "'", str38, "und");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test14035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14035");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray15 = rotation14.getMatrix();
        java.io.PrintWriter printWriter16 = printWriter5.format("en", (java.lang.Object[]) doubleArray15);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getLanguage();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = mathException23.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException26 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray25);
        java.io.PrintWriter printWriter27 = printWriter5.format(locale17, "ZXZ", (java.lang.Object[]) throwableArray25);
        printWriter5.println('#');
        printWriter5.flush();
        printWriter5.print("English (Canada)");
        printWriter5.println((float) (short) -1);
        printWriter5.print("Chinesisch (China)");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(printWriter27);
    }

    @Test
    public void test14036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14036");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print("");
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale.setDefault(category9, locale12);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray24 = rotation23.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotation23.applyInverseTo(vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation23.getAxis();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation23.revert();
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintStream printStream40 = printStream1.format(locale12, "KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream42 = printStream1.append('u');
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        printStream42.println(true);
        java.io.PrintStream printStream48 = printStream42.append((java.lang.CharSequence) "Italy");
        printStream42.print((-0.18442331349635016d));
        printStream42.close();
        printStream42.print((java.lang.Object) 2.6187624639983724d);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream48);
    }

    @Test
    public void test14037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14037");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        printWriter11.print('u');
        printWriter11.print((long) ' ');
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.util.Locale locale19 = java.util.Locale.UK;
        java.lang.String[] strArray21 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream22 = printStream17.format(locale19, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream17, false);
        printStream17.println(10.0f);
        java.lang.String[] strArray29 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray29);
        java.io.PrintStream printStream31 = printStream17.format("\u97d3\u6587", (java.lang.Object[]) strArray29);
        printStream17.flush();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        printWriter34.write((int) (byte) 10);
        char[] charArray40 = new char[] { 'a', '4', 'a' };
        printWriter34.print(charArray40);
        char[] charArray42 = new char[] {};
        printWriter34.println(charArray42);
        // The following exception was thrown during execution in test generation
        try {
            printWriter11.write(charArray42, 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "a4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "a4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[a, 4, a]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[]");
    }

    @Test
    public void test14038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14038");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, (double) (byte) 100, vector3D4);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D4, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D22, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D9, (double) (byte) 1, vector3D17, (double) (short) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D31 = vector3D9.negate();
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D31.subtract(vector3D36);
        double double38 = vector3D36.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D44, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D60, (double) (byte) 100, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D62, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D49, (double) (byte) 1, vector3D57, (double) (short) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D71 = vector3D36.subtract((double) (byte) -1, vector3D67);
        double double72 = vector3D67.getX();
        org.apache.commons.math.geometry.Vector3D vector3D73 = vector3D67.negate();
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D73);
    }

    @Test
    public void test14039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14039");
        java.util.Locale locale3 = new java.util.Locale("en_CA", "fran\347ais", "org.apache.commons.math.MathException");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale3.toString(), "en_ca_FRAN\347AIS_org.apache.commons.math.MathException");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test14040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14040");
        java.util.Locale locale2 = new java.util.Locale("Canada", "tw");
        java.lang.String str3 = locale2.toLanguageTag();
        org.junit.Assert.assertEquals(locale2.toString(), "canada_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "canada-TW" + "'", str3, "canada-TW");
    }

    @Test
    public void test14041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14041");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        boolean boolean11 = printStream10.checkError();
        printStream10.print((-0.3959260554836696d));
        printStream10.print((-0.30041137025271114d));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test14042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14042");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u7f8e\u570b");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test14043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14043");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("TWN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale10, locale11, locale12, locale13, locale14, locale15, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        java.lang.String[] strArray28 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap32);
        java.lang.String[] strArray38 = new java.lang.String[] { "Germany", "zxz", "org.apache.commons.math.MathException: ZXZ", "TWN" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.lang.String>) strList39);
        java.lang.String str42 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strList39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strList39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "twn" + "'", str42, "twn");
    }

    @Test
    public void test14044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14044");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.write((int) (byte) 1);
        printWriter5.print((int) (short) 0);
        printWriter5.println("org.apache.commons.math.MathException: ZXZ");
        printWriter5.println('4');
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        java.lang.Object[] objArray21 = mathException19.getArguments();
        java.io.PrintWriter printWriter22 = printWriter5.printf("\u97d3\u6587)", objArray21);
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) strArray26);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException31 = new org.apache.commons.math.geometry.NotARotationMatrixException("italian-x-lvariant-CHN", (java.lang.Object[]) strArray26);
        printWriter22.println((java.lang.Object) "italian-x-lvariant-CHN");
        printWriter22.print(true);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException37);
        java.lang.Object[] objArray41 = mathException40.getArguments();
        java.io.PrintWriter printWriter42 = printWriter22.format("\uc911\uad6d\uc5b4", objArray41);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter43.println(5607.0d);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(printWriter42);
    }

    @Test
    public void test14045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14045");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        double double12 = rotation5.getAngle();
        double double13 = rotation5.getQ3();
        org.apache.commons.math.geometry.Vector3D vector3D14 = rotation5.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D16 = vector3D14.scalarMultiply(Double.NaN);
        double double17 = vector3D16.getY();
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test14046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14046");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        printWriter5.print(' ');
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray32 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray32, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray32, (java.lang.Throwable) mathException36);
        java.lang.Throwable[] throwableArray39 = mathException36.getSuppressed();
        java.io.PrintStream printStream40 = printStream28.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter41 = printWriter5.printf(locale22, "german", (java.lang.Object[]) throwableArray39);
        printWriter41.println();
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
    }

    @Test
    public void test14047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14047");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-kr (ITA)");
        java.lang.String[] strArray4 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray4, (java.lang.Throwable) mathException6);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray11, (java.lang.Throwable) mathException13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray11, (java.lang.Throwable) mathException15);
        java.lang.Throwable[] throwableArray18 = mathException15.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException19 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray18);
        mathException7.addSuppressed((java.lang.Throwable) notARotationMatrixException19);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException23);
        notARotationMatrixException19.addSuppressed((java.lang.Throwable) mathException24);
        java.lang.String str26 = notARotationMatrixException19.getPattern();
        java.lang.Object[] objArray27 = notARotationMatrixException19.getArguments();
        java.lang.Object[] objArray28 = notARotationMatrixException19.getArguments();
        java.io.PrintStream printStream29 = printStream1.printf("org.apache.commons.math.geometry.NotARotationMatrixException: x-lvariant-TWN", objArray28);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test14048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14048");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("Germania");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setLanguage("zxz_fran\347ais (org.apache.commons.math.geometry.NotARotationMatrixException: ja)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: zxz_franc?ais (org.apache.commons.math.geometry.NotARotationMatrixException: ja) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test14049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14049");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        char[] charArray10 = new char[] { ' ', 'x' };
        printWriter7.write(charArray10);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.lang.String str15 = locale12.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray23 = rotation22.getMatrix();
        java.io.PrintWriter printWriter24 = printWriter7.format(locale12, "YZY", (java.lang.Object[]) doubleArray23);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException25 = new org.apache.commons.math.geometry.NotARotationMatrixException("en", (java.lang.Object[]) doubleArray23);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException26 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation(doubleArray23, 0.8414709848078965d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ , x]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en" + "'", str15, "en");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(printWriter24);
    }

    @Test
    public void test14050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14050");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "chinois (chine)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: chinois (chine)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14051");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter5.println();
        printWriter5.print((long) (short) 10);
        printWriter5.print("");
        java.io.PrintWriter printWriter15 = printWriter5.append((java.lang.CharSequence) "\u65e5\u6587");
        printWriter5.println((int) '#');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test14052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14052");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print((double) 0.0f);
        printWriter12.println("zxz (KO_KR)");
        printWriter12.write((int) ' ');
        printWriter12.print((long) (byte) 0);
        java.io.PrintWriter printWriter22 = printWriter12.append((java.lang.CharSequence) "\u82f1\u6587");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter12, true);
        printWriter12.flush();
        printWriter12.write("\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test14053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14053");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Vereinigtes K\366nigreich", (-25479.91732970719d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-25479.91732970719");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14054");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        java.lang.String str3 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 1.2220476682666177d, 0.0d, (double) (short) 10);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.0d), (double) (short) 100, (double) '4');
        org.apache.commons.math.geometry.Rotation rotation12 = rotation11.revert();
        double[][] doubleArray13 = rotation11.getMatrix();
        double[][] doubleArray14 = rotation11.getMatrix();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YZY" + "'", str3, "YZY");
        org.junit.Assert.assertNotNull(rotation12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
    }

    @Test
    public void test14055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14055");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("allemand", 0.9999500037496876d);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        char[] charArray13 = new char[] { ' ', 'x' };
        printWriter10.write(charArray13);
        printWriter10.write((int) (byte) 1);
        printWriter10.print((int) (short) 0);
        printWriter10.println((float) 1);
        printWriter10.write("anglais");
        printWriter10.write("org.apache.commons.math.geometry.NotARotationMatrixException: ja", (int) (short) 100, (int) (short) -1);
        boolean boolean27 = languageRange2.equals((java.lang.Object) (short) 100);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.9999500037496876d + "'", double3 == 0.9999500037496876d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "allemand" + "'", str4, "allemand");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , x]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test14056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14056");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) (byte) 1);
        boolean boolean4 = printStream1.checkError();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("zxz");
        org.apache.commons.math.geometry.RotationOrder rotationOrder8 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder8.getA3();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation(rotationOrder8, (-3.141592653589793d), (double) ' ', (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D14 = rotation13.getAxis();
        double[][] doubleArray15 = rotation13.getMatrix();
        java.io.PrintStream printStream16 = printStream1.printf(locale6, "\u82f1\u56fd", (java.lang.Object[]) doubleArray15);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation(doubleArray15, 1.3715201283077028d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zxz");
        org.junit.Assert.assertNotNull(rotationOrder8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(printStream16);
    }

    @Test
    public void test14057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14057");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        boolean boolean86 = printStream1.checkError();
        boolean boolean87 = printStream1.checkError();
        java.io.PrintStream printStream89 = printStream1.append((java.lang.CharSequence) "YZY");
        org.apache.commons.math.geometry.RotationOrder rotationOrder90 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str91 = rotationOrder90.toString();
        org.apache.commons.math.geometry.Vector3D vector3D92 = rotationOrder90.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D93 = rotationOrder90.getA3();
        printStream89.println((java.lang.Object) vector3D93);
        printStream89.println((float) ' ');
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(printStream89);
        org.junit.Assert.assertNotNull(rotationOrder90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ZXZ" + "'", str91, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D93);
    }

    @Test
    public void test14058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14058");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter5.println(false);
        printWriter5.print('4');
    }

    @Test
    public void test14059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14059");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "org.apache.commons.math.MathException: English");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: English");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14060");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder8 = builder0.setUnicodeLocaleKeyword("KR", "zxz");
        java.util.Locale.Builder builder10 = builder0.addUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("French");
        java.util.Locale.Builder builder14 = builder12.addUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder15 = builder14.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setScript("fran\347\u6cd5\u6587)_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: franc?ais (??)_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test14061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14061");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("francese");
        printWriter1.println("\uc601\uc5b4");
        printWriter1.print(120.41800135156268d);
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream12 = printStream7.format(locale9, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream7, false);
        java.io.PrintStream printStream16 = printStream7.append('4');
        printStream7.print(10L);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream7);
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        printWriter24.println((float) (byte) -1);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter24, true);
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter32 = printWriter24.printf("KR", (java.lang.Object[]) strArray31);
        printWriter32.print((double) 0.0f);
        printWriter32.println("zxz (KO_KR)");
        printWriter32.write((int) ' ');
        java.io.PrintStream printStream40 = new java.io.PrintStream("ko-KR");
        printStream40.close();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream40, false);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.Writer) printWriter43);
        printWriter43.println((float) (byte) -1);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter43, true);
        printWriter48.println();
        java.io.PrintStream printStream51 = new java.io.PrintStream("ko-KR");
        printStream51.close();
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.OutputStream) printStream51, false);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.Writer) printWriter54);
        char[] charArray58 = new char[] { ' ', 'x' };
        printWriter55.write(charArray58);
        java.io.PrintWriter printWriter61 = printWriter55.append((java.lang.CharSequence) "Canada");
        boolean boolean62 = printWriter61.checkError();
        java.io.PrintStream printStream64 = new java.io.PrintStream("ko-KR");
        printStream64.close();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream64, false);
        java.io.PrintStream printStream69 = printStream64.append((java.lang.CharSequence) "en");
        printStream64.print((int) ' ');
        printStream64.println((double) 100.0f);
        java.io.PrintStream printStream75 = new java.io.PrintStream("ko-KR");
        printStream75.close();
        java.io.PrintWriter printWriter78 = new java.io.PrintWriter((java.io.OutputStream) printStream75, false);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.Writer) printWriter78);
        char[] charArray82 = new char[] { ' ', 'x' };
        printWriter79.write(charArray82);
        printStream64.print(charArray82);
        printWriter61.write(charArray82);
        printWriter48.println(charArray82);
        printWriter32.write(charArray82);
        printStream7.println(charArray82);
        printWriter1.write(charArray82);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[ , x]");
    }

    @Test
    public void test14062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14062");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        printStream1.println(true);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.print(1L);
        printWriter22.close();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test14063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14063");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (-3.141592653589793d), (double) 100.0f, (double) (short) 0, true);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.RotationOrder rotationOrder7 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str8 = rotationOrder7.toString();
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder7.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D10 = rotationOrder7.getA3();
        java.lang.String str11 = rotationOrder7.toString();
        org.apache.commons.math.geometry.Vector3D vector3D12 = rotationOrder7.getA1();
        double[] doubleArray13 = rotation5.getAngles(rotationOrder7);
        java.lang.String str14 = rotationOrder7.toString();
        org.apache.commons.math.geometry.Vector3D vector3D15 = rotationOrder7.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotationOrder7.getA2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.46117363094228814d + "'", double6 == 0.46117363094228814d);
        org.junit.Assert.assertNotNull(rotationOrder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ZXZ" + "'", str8, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ZXZ" + "'", str11, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.5393907295684766, 2.182957795730858, 1.5393907295684766]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZXZ" + "'", str14, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
    }

    @Test
    public void test14064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14064");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.write((int) (byte) 1);
        printWriter5.print((int) (short) 0);
        printWriter5.println("org.apache.commons.math.MathException: ZXZ");
        printWriter5.println('4');
        printWriter5.print(false);
        java.io.PrintWriter printWriter21 = printWriter5.append((java.lang.CharSequence) "english");
        printWriter21.print((-0.7648781594988326d));
        printWriter21.print(34.52271049544585d);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter21);
    }

    @Test
    public void test14065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14065");
        java.util.Locale locale1 = new java.util.Locale("");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale.setDefault(category2, locale5);
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.lang.String str11 = locale5.getDisplayScript(locale10);
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale5.getDisplayCountry(locale12);
        java.util.Locale locale15 = locale5.stripExtensions();
        java.lang.String str16 = locale1.getDisplayScript(locale15);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test14066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14066");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter8.println(0.0d);
        printWriter8.write(0);
        java.io.PrintWriter printWriter14 = printWriter8.append('4');
        printWriter14.println(0.0d);
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale.setDefault(category17, locale18);
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double28 = rotation27.getQ0();
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = rotation27.applyTo(rotation34);
        org.apache.commons.math.geometry.Rotation rotation37 = rotation27.revert();
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double44 = rotation43.getQ0();
        org.apache.commons.math.geometry.Rotation rotation45 = rotation27.applyInverseTo(rotation43);
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double52 = rotation51.getQ0();
        org.apache.commons.math.geometry.Rotation rotation58 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double59 = rotation58.getQ0();
        org.apache.commons.math.geometry.Rotation rotation60 = rotation51.applyTo(rotation58);
        org.apache.commons.math.geometry.Rotation rotation61 = rotation51.revert();
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double68 = rotation67.getQ0();
        org.apache.commons.math.geometry.Rotation rotation69 = rotation51.applyInverseTo(rotation67);
        double double70 = rotation69.getAngle();
        org.apache.commons.math.geometry.Rotation rotation71 = rotation45.applyInverseTo(rotation69);
        double[][] doubleArray72 = rotation71.getMatrix();
        java.io.PrintWriter printWriter73 = printWriter14.format(locale18, "CAN", (java.lang.Object[]) doubleArray72);
        java.lang.String str74 = locale18.getDisplayName();
        java.lang.String str75 = locale18.getLanguage();
        java.lang.String str77 = locale18.getExtension('u');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "German" + "'", str19, "German");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 52.0d + "'", double59 == 52.0d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.0d + "'", double68 == 52.0d);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "German" + "'", str74, "German");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "de" + "'", str75, "de");
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test14067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14067");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter11.println((long) 'a');
        printWriter11.println();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(printStream9);
    }

    @Test
    public void test14068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14068");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter8.println(0.0d);
        printWriter8.write(0);
        java.io.PrintWriter printWriter14 = printWriter8.append('4');
        printWriter14.write("German");
        printWriter14.print("Italy");
        boolean boolean19 = printWriter14.checkError();
        boolean boolean20 = printWriter14.checkError();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test14069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14069");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("YZX");
        printWriter1.println((-8431.623331245295d));
        printWriter1.println("zxz_fran\347ais_ITALIAN");
    }

    @Test
    public void test14070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14070");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder13 = builder10.addUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale.Builder builder19 = builder14.clear();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale22.getDisplayLanguage(locale26);
        java.util.Locale.Builder builder28 = builder14.setLocale(locale26);
        java.util.Locale.Builder builder30 = builder14.setLanguageTag("Canada");
        java.util.Locale.Builder builder32 = builder14.setLanguage("it");
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        printWriter38.println('a');
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder45 = builder41.setLanguage("ZXZ");
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder47 = builder41.setLocale(locale46);
        java.lang.Object[] objArray49 = null;
        java.io.PrintWriter printWriter50 = printWriter38.format(locale46, "TWN", objArray49);
        java.util.Set<java.lang.String> strSet51 = locale46.getUnicodeLocaleKeys();
        java.lang.String str52 = locale46.getDisplayCountry();
        java.util.Locale.Builder builder53 = builder32.setLocale(locale46);
        java.util.Locale.Builder builder54 = builder32.clearExtensions();
        java.util.Locale.Builder builder57 = builder54.setExtension('a', "ko-KR");
        java.util.Locale locale58 = builder54.build();
        java.util.Locale.Builder builder59 = builder10.setLocale(locale58);
        java.util.Locale.Builder builder61 = builder10.removeUnicodeLocaleAttribute("FRA");
        java.util.Locale.Builder builder63 = builder10.setLanguage("ITA");
        java.util.Locale locale64 = builder63.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Germany" + "'", str52, "Germany");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE_#a-ko-kr");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ita_DE_#a-ko-kr");
    }

    @Test
    public void test14071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14071");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = printWriter11.append(' ');
        printWriter13.print('u');
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter24 = printWriter21.printf("ko-KR", (java.lang.Object[]) strArray23);
        printWriter21.println();
        java.io.PrintWriter printWriter27 = printWriter21.append((java.lang.CharSequence) "\uce90\ub098\ub2e4");
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.lang.String[] strArray35 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException38);
        java.io.PrintWriter printWriter40 = printWriter27.printf(locale29, "United Kingdom", (java.lang.Object[]) strArray35);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException42);
        java.lang.Throwable[] throwableArray44 = mathException42.getSuppressed();
        java.io.PrintWriter printWriter45 = printWriter13.format(locale29, "zh_TW", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter45, true);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter45);
    }

    @Test
    public void test14072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14072");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Rotation rotation9 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.0d, 0.4663020147736518d, 0.009858925131239106d);
        org.apache.commons.math.geometry.Rotation rotation15 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double16 = rotation15.getQ1();
        double double17 = rotation15.getQ0();
        double[][] doubleArray18 = rotation15.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation19 = rotation9.applyInverseTo(rotation15);
        org.apache.commons.math.geometry.Rotation rotation20 = rotation15.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = rotation20.revert();
        double double22 = rotation20.getQ1();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(rotation19);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
    }

    @Test
    public void test14073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14073");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintStream printStream4 = printStream1.append('a');
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = mathException10.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException13 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException14 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray12);
        java.lang.Throwable[] throwableArray15 = notARotationMatrixException14.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("zho", (java.lang.Object[]) throwableArray15);
        java.lang.Object[] objArray17 = mathException16.getArguments();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: United Kingdom", objArray17);
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        java.io.PrintStream printStream20 = printStream1.format("francese", (java.lang.Object[]) throwableArray19);
        printStream20.println(100);
        printStream20.print(true);
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printStream20);
    }

    @Test
    public void test14074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14074");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA2();
        java.lang.String str4 = rotationOrder0.toString();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "XYZ" + "'", str1, "XYZ");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "XYZ" + "'", str4, "XYZ");
    }

    @Test
    public void test14075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14075");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D4 = vector3D3.negate();
        org.apache.commons.math.geometry.Vector3D vector3D9 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D19, (double) (byte) 100, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D16, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D37, (double) (byte) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D34, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D21, (double) (byte) 1, vector3D29, (double) (short) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D43 = vector3D21.negate();
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D21);
        double double45 = vector3D21.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D46 = vector3D9.subtract((double) (short) -1, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D3.add((double) (byte) 0, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        double double54 = vector3D52.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D(Double.NaN, vector3D21, (double) 'u', vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D55.negate();
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D56.scalarMultiply(0.13715201283077028d);
        double double59 = vector3D56.getAlpha();
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test14076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14076");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test14077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14077");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print("");
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale.setDefault(category9, locale12);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray24 = rotation23.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotation23.applyInverseTo(vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation23.getAxis();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation23.revert();
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintStream printStream40 = printStream1.format(locale12, "KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream43 = new java.io.PrintStream("ko-KR");
        printStream43.close();
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream43, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter46);
        printWriter47.print((long) (short) 100);
        printWriter47.print((int) 'u');
        java.io.PrintStream printStream53 = new java.io.PrintStream("ko-KR");
        printStream53.close();
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.OutputStream) printStream53, false);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.Writer) printWriter56);
        printWriter57.print((long) (short) 100);
        printWriter57.print((int) 'u');
        java.io.PrintStream printStream63 = new java.io.PrintStream("ko-KR");
        printStream63.close();
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.OutputStream) printStream63, false);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.Writer) printWriter66);
        printWriter66.println((float) (byte) -1);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter((java.io.Writer) printWriter66, true);
        java.lang.String[] strArray73 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter74 = printWriter66.printf("KR", (java.lang.Object[]) strArray73);
        java.io.PrintStream printStream76 = new java.io.PrintStream("ko-KR");
        printStream76.close();
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.OutputStream) printStream76, false);
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter((java.io.Writer) printWriter79);
        char[] charArray83 = new char[] { ' ', 'x' };
        printWriter80.write(charArray83);
        printWriter66.println(charArray83);
        printWriter57.print(charArray83);
        printWriter47.write(charArray83);
        printStream1.print(charArray83);
        printStream1.print('x');
        printStream1.println("\ub3c5\uc77c");
        printStream1.close();
        printStream1.println(' ');
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[ , x]");
    }

    @Test
    public void test14078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14078");
        java.util.Locale locale3 = new java.util.Locale("\u6cd5\u6587", "Korean (South Korea)", "inglese");
        org.junit.Assert.assertEquals(locale3.toString(), "\u6cd5\u6587_KOREAN (SOUTH KOREA)_inglese");
    }

    @Test
    public void test14079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14079");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        printStream1.print(false);
        printStream1.flush();
        java.util.Locale locale12 = new java.util.Locale("org.apache.commons.math.MathException: ko_KR");
        java.lang.String str13 = locale12.getScript();
        java.lang.String str14 = locale12.getDisplayVariant();
        java.io.PrintStream printStream18 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream18.println((float) 100L);
        printStream18.print((double) (byte) 1);
        java.io.PrintStream printStream25 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream25.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray35 = rotation34.getMatrix();
        java.io.PrintStream printStream36 = printStream25.printf("fra", (java.lang.Object[]) doubleArray35);
        java.io.PrintStream printStream37 = printStream18.format("", (java.lang.Object[]) doubleArray35);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException38 = new org.apache.commons.math.geometry.NotARotationMatrixException("\u82f1\u56fd", (java.lang.Object[]) doubleArray35);
        java.io.PrintStream printStream39 = printStream1.format(locale12, "\u82f1\u8a9e", (java.lang.Object[]) doubleArray35);
        java.lang.String str40 = locale12.getVariant();
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayLanguage();
        java.util.Locale.setDefault(category41, locale42);
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale45);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.lang.String str49 = locale47.getDisplayScript(locale48);
        java.lang.String str50 = locale45.getDisplayLanguage(locale48);
        java.util.Locale.setDefault(category41, locale48);
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder54 = builder52.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder56 = builder52.setLanguage("ZXZ");
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder58 = builder52.setLocale(locale57);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder60 = builder52.setLocale(locale59);
        java.lang.String str61 = locale59.getDisplayCountry();
        java.lang.String str62 = locale59.getDisplayLanguage();
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.lang.String str65 = locale63.getDisplayScript(locale64);
        java.util.Locale locale68 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str69 = locale63.getDisplayLanguage(locale68);
        java.lang.String str70 = locale59.getDisplayVariant(locale68);
        java.util.Locale.setDefault(category41, locale68);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.lang.String str73 = locale72.getDisplayLanguage();
        java.util.Locale locale74 = java.util.Locale.FRENCH;
        java.util.Locale locale75 = java.util.Locale.TAIWAN;
        java.lang.String str76 = locale74.getDisplayScript(locale75);
        java.lang.String str77 = locale72.getDisplayLanguage(locale74);
        java.util.Locale locale78 = locale72.stripExtensions();
        java.lang.String str79 = locale78.getDisplayLanguage();
        java.io.PrintStream printStream81 = new java.io.PrintStream("ko-KR");
        printStream81.close();
        java.io.PrintWriter printWriter84 = new java.io.PrintWriter((java.io.OutputStream) printStream81, false);
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter((java.io.Writer) printWriter84);
        printWriter85.close();
        java.util.Locale locale88 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter85.println((java.lang.Object) locale88);
        java.lang.String str90 = locale78.getDisplayCountry(locale88);
        java.lang.String str91 = locale78.getDisplayName();
        java.util.Locale.setDefault(category41, locale78);
        java.lang.String str94 = locale78.getExtension('x');
        java.lang.String str95 = locale12.getDisplayScript(locale78);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertEquals(locale12.toString(), "org.apache.commons.math.mathexception: ko_kr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u97d3\u6587" + "'", str50, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uce90\ub098\ub2e4" + "'", str61, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc601\uc5b4" + "'", str62, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals(locale68.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "French" + "'", str69, "French");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals(locale88.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test14080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14080");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(43.364388609539944d, (-52.0d), 0.0d, (-553.9714827914696d), false);
    }

    @Test
    public void test14081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14081");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D1.subtract((double) 10L, vector3D8);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D12, (double) (byte) 100, vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D14, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D22 = vector3D8.subtract((double) 0, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D24, (double) (byte) 100, vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D21, vector3D24);
        org.apache.commons.math.geometry.RotationOrder rotationOrder29 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str30 = rotationOrder29.toString();
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotationOrder29.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D33 = vector3D31.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.geometry.Vector3D vector3D34 = vector3D21.add(vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D35 = vector3D21.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation(vector3D35, (-2.9454480348569327d));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: zero norm for rotation axis");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(rotationOrder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ZXZ" + "'", str30, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
    }

    @Test
    public void test14082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14082");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        printWriter11.print('u');
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        java.lang.Throwable[] throwableArray19 = mathException17.getSuppressed();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException17);
        java.lang.String[] strArray22 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray22, (java.lang.Throwable) mathException24);
        java.lang.String str26 = mathException25.getPattern();
        mathException20.addSuppressed((java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("zxz", (java.lang.Throwable) mathException20);
        java.lang.String[] strArray31 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray31);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray31, (java.lang.Throwable) mathException34);
        mathException28.addSuppressed((java.lang.Throwable) mathException35);
        java.lang.Object[] objArray37 = mathException28.getArguments();
        java.io.PrintWriter printWriter38 = printWriter11.format("tedesco", objArray37);
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder43 = builder39.setLanguage("ZXZ");
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder45 = builder39.setLocale(locale44);
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder47 = builder39.setLocale(locale46);
        java.util.Locale.Builder builder49 = builder39.setLanguage("fra");
        java.util.Locale locale50 = builder39.build();
        java.util.Locale locale51 = builder39.build();
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleAttributes();
        printWriter38.println((java.lang.Object) locale51);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZXZ" + "'", str26, "ZXZ");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fra_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fra_CA");
        org.junit.Assert.assertNotNull(strSet52);
    }

    @Test
    public void test14083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14083");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("English");
        java.lang.Throwable[] throwableArray2 = mathException1.getSuppressed();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException1);
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test14084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14084");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.write((int) (short) 0);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter8.write("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        java.util.Locale locale11 = null;
        org.apache.commons.math.geometry.Rotation rotation19 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray20 = rotation19.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D24, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotation19.applyInverseTo(vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D33 = rotation19.getAxis();
        org.apache.commons.math.geometry.Rotation rotation34 = rotation19.revert();
        double[][] doubleArray35 = rotation34.getMatrix();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException36 = new org.apache.commons.math.geometry.NotARotationMatrixException("zho", (java.lang.Object[]) doubleArray35);
        java.io.PrintWriter printWriter37 = printWriter8.printf(locale11, "ZYX", (java.lang.Object[]) doubleArray35);
        printWriter37.print((long) 0);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(printWriter37);
    }

    @Test
    public void test14085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14085");
        java.util.Locale locale1 = new java.util.Locale("anglais");
        java.lang.String str2 = locale1.getLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "anglais");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "anglais" + "'", str2, "anglais");
    }

    @Test
    public void test14086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14086");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        java.io.PrintWriter printWriter9 = printWriter5.append('a');
        printWriter9.println((int) (short) 0);
        printWriter9.println("Chinesisch (China)");
        printWriter9.flush();
        printWriter9.println(true);
        printWriter9.println((int) (short) 1);
        org.junit.Assert.assertNotNull(printWriter9);
    }

    @Test
    public void test14087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14087");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA1();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test14088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14088");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("french");
        double double2 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test14089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14089");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D1.subtract((double) 10L, vector3D8);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation16.applyInverseTo(vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D28 = vector3D1.add((-0.0d), vector3D26);
        org.apache.commons.math.geometry.Rotation rotation35 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double42 = rotation41.getQ0();
        org.apache.commons.math.geometry.Rotation rotation43 = rotation35.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation41.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D45 = vector3D26.add(1.3660691819214432d, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D55, (double) (byte) 100, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D52, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D68 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D68, (double) (byte) 100, vector3D70);
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D75 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D73, (double) (byte) 100, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D77 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D70, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D78 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D57, (double) (byte) 1, vector3D65, (double) (short) 100, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D79 = vector3D57.negate();
        org.apache.commons.math.geometry.Vector3D vector3D80 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D82 = vector3D57.scalarMultiply((double) 'u');
        org.apache.commons.math.geometry.Vector3D vector3D83 = vector3D26.add((double) 'a', vector3D82);
        double double84 = vector3D26.getAlpha();
        double double85 = vector3D26.getY();
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test14090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14090");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-304.1592653589793d), (-0.30041137025271114d), 0.09019682165998347d, 102.8131477408346d, false);
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test14091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14091");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.getLanguage();
        java.lang.String str3 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zho" + "'", str3, "zho");
    }

    @Test
    public void test14092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14092");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (-1L), (double) (short) 10, (double) 'a');
        double double5 = rotation4.getQ3();
        double double6 = rotation4.getAngle();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotation4.getAxis();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.3331734424927659d + "'", double5 == 0.3331734424927659d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.3122509176395862d + "'", double6 == 2.3122509176395862d);
        org.junit.Assert.assertNotNull(vector3D7);
    }

    @Test
    public void test14093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14093");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = printWriter5.append((java.lang.CharSequence) "ko-KR");
        printWriter9.println((double) (short) 0);
        printWriter9.write((int) 'a');
        printWriter9.write((int) '#');
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter20, false);
        boolean boolean24 = printWriter23.checkError();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        boolean boolean26 = printWriter25.checkError();
        printWriter25.print((-0.13715201283077028d));
        printWriter25.println(true);
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.util.Locale.setDefault(category33, locale34);
        java.util.Locale.setDefault(category32, locale34);
        java.util.Locale.setDefault(category31, locale34);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.lang.String str40 = locale34.getDisplayScript(locale39);
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale34.getDisplayCountry(locale41);
        java.lang.String str44 = locale34.getDisplayScript();
        printWriter25.println((java.lang.Object) locale34);
        org.apache.commons.math.geometry.Rotation rotation52 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray53 = rotation52.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D55, (double) (byte) 100, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D60, (double) (byte) 100, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D57, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotation52.applyInverseTo(vector3D57);
        org.apache.commons.math.geometry.Rotation rotation71 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double72 = rotation71.getQ1();
        double double73 = rotation71.getQ0();
        org.apache.commons.math.geometry.Rotation rotation74 = rotation52.applyInverseTo(rotation71);
        org.apache.commons.math.geometry.Rotation rotation80 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double81 = rotation80.getQ1();
        org.apache.commons.math.geometry.Rotation rotation82 = rotation71.applyInverseTo(rotation80);
        double[][] doubleArray83 = rotation82.getMatrix();
        java.io.PrintWriter printWriter84 = printWriter9.format(locale34, "en-ca (TWN,ko-KR)", (java.lang.Object[]) doubleArray83);
        printWriter9.println(1);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ja" + "'", str42, "ja");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 100.0d + "'", double72 == 100.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 52.0d + "'", double73 == 52.0d);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(printWriter84);
    }

    @Test
    public void test14094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14094");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder0.setLanguage("fra");
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale13 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder10.setLanguageTag("\u4e2d\u56fd");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fra_CA_#u-fra");
    }

    @Test
    public void test14095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14095");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uce90\ub098\ub2e4");
        java.io.PrintStream printStream3 = printStream1.append((java.lang.CharSequence) "chinois (Chine)");
        org.junit.Assert.assertNotNull(printStream3);
    }

    @Test
    public void test14096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14096");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        double double15 = rotation5.getQ0();
        double double16 = rotation5.getQ0();
        double double17 = rotation5.getQ0();
        double double18 = rotation5.getQ2();
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotation5.getAxis();
        double double20 = rotation5.getAngle();
        org.apache.commons.math.geometry.RotationOrder rotationOrder21 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation(rotationOrder21, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Rotation rotation26 = rotation5.applyTo(rotation25);
        double[][] doubleArray27 = rotation26.getMatrix();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(rotationOrder21);
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(doubleArray27);
    }

    @Test
    public void test14097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14097");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-1040.0d), 9610.932890332206d);
        org.apache.commons.math.geometry.Vector3D vector3D4 = vector3D3.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (short) 10, vector3D4);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ1();
        double double13 = rotation11.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D22 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D23 = vector3D15.subtract((double) 10L, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = rotation11.applyInverseTo(vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D39, (double) (byte) 100, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D36, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation31.applyInverseTo(vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D44, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D24, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D48 = vector3D5.add(vector3D46);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
    }

    @Test
    public void test14098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14098");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        java.io.PrintStream printStream18 = printStream15.append('x');
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream18);
        printStream18.print((float) '4');
        java.io.PrintStream printStream23 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray28 = new char[] { ' ', 'a', '#', 'a' };
        printStream23.println(charArray28);
        java.io.PrintStream printStream31 = printStream23.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        printStream23.close();
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleKeys();
        java.lang.String str37 = locale35.getDisplayVariant();
        java.lang.String str38 = locale35.getDisplayLanguage();
        java.lang.String str39 = locale35.getDisplayCountry();
        java.lang.Object[] objArray41 = null;
        java.io.PrintStream printStream42 = printStream23.format(locale35, "YZY", objArray41);
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray50 = rotation49.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D52, (double) (byte) 100, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D54, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotation49.applyInverseTo(vector3D54);
        org.apache.commons.math.geometry.Rotation rotation68 = new org.apache.commons.math.geometry.Rotation((double) (byte) 100, (-0.0d), (double) (byte) 0, (double) 1, true);
        double double69 = rotation68.getQ0();
        org.apache.commons.math.geometry.Rotation rotation70 = rotation49.applyInverseTo(rotation68);
        double[][] doubleArray71 = rotation70.getMatrix();
        java.io.PrintStream printStream72 = printStream18.format(locale35, "japon\350s", (java.lang.Object[]) doubleArray71);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.OutputStream) printStream72);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str38, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ub3c5\uc77c" + "'", str39, "\ub3c5\uc77c");
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.9999500037496876d + "'", double69 == 0.9999500037496876d);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(printStream72);
    }

    @Test
    public void test14099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14099");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.util.Locale locale20 = java.util.Locale.UK;
        java.lang.String[] strArray22 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream23 = printStream18.format(locale20, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream18, false);
        printStream18.println(10.0f);
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        printWriter34.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray44 = rotation43.getMatrix();
        java.io.PrintWriter printWriter45 = printWriter34.format("en", (java.lang.Object[]) doubleArray44);
        java.io.PrintStream printStream46 = printStream18.printf("YZY", (java.lang.Object[]) doubleArray44);
        java.io.PrintStream printStream48 = new java.io.PrintStream("ko-KR");
        printStream48.close();
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream48, false);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter51);
        char[] charArray55 = new char[] { ' ', 'x' };
        printWriter52.write(charArray55);
        printStream18.println(charArray55);
        printStream15.print(charArray55);
        printStream15.println((long) (short) -1);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        printWriter63.println((-5.440211108893697d));
        java.io.PrintStream printStream69 = new java.io.PrintStream("ko-KR");
        printStream69.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream69, false);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter72);
        java.lang.String[] strArray75 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter76 = printWriter73.printf("ko-KR", (java.lang.Object[]) strArray75);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException77 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray75);
        java.io.PrintWriter printWriter78 = printWriter63.format("French", (java.lang.Object[]) strArray75);
        java.io.PrintStream printStream79 = printStream15.printf("ITA", (java.lang.Object[]) strArray75);
        printStream79.print(false);
        org.apache.commons.math.geometry.RotationOrder rotationOrder82 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str83 = rotationOrder82.toString();
        org.apache.commons.math.geometry.Rotation rotation87 = new org.apache.commons.math.geometry.Rotation(rotationOrder82, 99.5037190209989d, 6.096348819394107E8d, 1.6589748483822169d);
        printStream79.print((java.lang.Object) rotation87);
        org.apache.commons.math.geometry.Rotation rotation94 = new org.apache.commons.math.geometry.Rotation((double) (byte) -1, (double) 1L, (double) (short) 10, 1.7607846147136124d, true);
        org.apache.commons.math.geometry.Rotation rotation95 = rotation87.applyInverseTo(rotation94);
        double double96 = rotation95.getAngle();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , x]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(rotationOrder82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ZXZ" + "'", str83, "ZXZ");
        org.junit.Assert.assertNotNull(rotation95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2.506723516108565d + "'", double96 == 2.506723516108565d);
    }

    @Test
    public void test14100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14100");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder1.getA1();
        org.apache.commons.math.geometry.Rotation rotation9 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double10 = rotation9.getQ0();
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation18 = rotation9.applyTo(rotation16);
        org.apache.commons.math.geometry.Rotation rotation19 = rotation9.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder20 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation(rotationOrder20, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation25 = rotation19.applyTo(rotation24);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation24.applyTo(vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D28 = vector3D27.negate();
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 100, vector3D2, 1.4070751110264852d, vector3D27);
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D39, (double) (byte) 100, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotation37.applyTo(vector3D39);
        double double44 = rotation37.getAngle();
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D52, (double) (byte) 100, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D49, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D59, (double) (byte) 100, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D70, (double) (byte) 100, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D67, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D75 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D54, (double) (byte) 1, vector3D62, (double) (short) 100, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D76 = rotation37.applyTo(vector3D72);
        double double77 = rotation37.getQ0();
        org.apache.commons.math.geometry.Rotation rotation83 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double84 = rotation83.getQ0();
        org.apache.commons.math.geometry.Rotation rotation90 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double91 = rotation90.getQ0();
        org.apache.commons.math.geometry.Rotation rotation92 = rotation83.applyTo(rotation90);
        org.apache.commons.math.geometry.Vector3D vector3D93 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D94 = rotation83.applyInverseTo(vector3D93);
        org.apache.commons.math.geometry.Vector3D vector3D95 = rotation37.applyTo(vector3D94);
        org.apache.commons.math.geometry.Vector3D vector3D96 = new org.apache.commons.math.geometry.Vector3D(10.0d, vector3D94);
        org.apache.commons.math.geometry.Vector3D vector3D97 = vector3D27.add((double) 'a', vector3D96);
        double double98 = vector3D97.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D99 = vector3D97.orthogonal();
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertNotNull(rotation19);
        org.junit.Assert.assertNotNull(rotationOrder20);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 52.0d + "'", double77 == 52.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 52.0d + "'", double84 == 52.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 52.0d + "'", double91 == 52.0d);
        org.junit.Assert.assertNotNull(rotation92);
        org.junit.Assert.assertNotNull(vector3D93);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(vector3D97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.7607845497297911d + "'", double98 == 1.7607845497297911d);
        org.junit.Assert.assertNotNull(vector3D99);
    }

    @Test
    public void test14101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14101");
        java.io.PrintStream printStream1 = new java.io.PrintStream("x-lvariant-TWN");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        java.lang.String[] strArray9 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter10 = printWriter7.printf("ko-KR", (java.lang.Object[]) strArray9);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D12, (double) (byte) 100, vector3D14);
        double double16 = vector3D14.getNorm();
        printWriter7.println((java.lang.Object) vector3D14);
        printWriter7.println('#');
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String[] strArray25 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream26 = printStream21.format(locale23, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray25);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream21, false);
        printStream21.println(10.0f);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter36);
        printWriter37.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray47 = rotation46.getMatrix();
        java.io.PrintWriter printWriter48 = printWriter37.format("en", (java.lang.Object[]) doubleArray47);
        java.io.PrintStream printStream49 = printStream21.printf("YZY", (java.lang.Object[]) doubleArray47);
        java.io.PrintStream printStream51 = new java.io.PrintStream("ko-KR");
        printStream51.close();
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.OutputStream) printStream51, false);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.Writer) printWriter54);
        char[] charArray58 = new char[] { ' ', 'x' };
        printWriter55.write(charArray58);
        printStream21.println(charArray58);
        printWriter7.write(charArray58);
        printStream1.println((java.lang.Object) printWriter7);
        printStream1.print("chn");
        printStream1.flush();
        java.lang.Object[] objArray67 = null;
        java.io.PrintStream printStream68 = printStream1.format("GBR", objArray67);
        printStream68.println();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[ , x]");
        org.junit.Assert.assertNotNull(printStream68);
    }

    @Test
    public void test14102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14102");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder16 = builder4.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.setLanguageTag("allemand");
        java.util.Locale locale19 = builder18.build();
        java.util.Locale locale21 = new java.util.Locale("\ub3c5\uc77c\uc5b4");
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream28 = printStream23.format(locale25, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray27);
        java.lang.String str29 = locale25.getDisplayLanguage();
        java.lang.String str30 = locale21.getDisplayVariant(locale25);
        java.util.Locale.Builder builder31 = builder18.setLocale(locale25);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("germany");
        java.util.Locale.setDefault(locale33);
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale36 = java.util.Locale.getDefault(category35);
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleAttributes();
        java.util.Locale locale41 = new java.util.Locale("eng", "org.apache.commons.math.MathException");
        java.lang.String str42 = locale36.getDisplayScript(locale41);
        java.util.Locale locale43 = java.util.Locale.PRC;
        java.lang.String str44 = locale43.toLanguageTag();
        java.lang.String str45 = locale41.getDisplayLanguage(locale43);
        java.lang.String str46 = locale43.getScript();
        java.lang.String str47 = locale33.getDisplayCountry(locale43);
        java.util.Locale.Builder builder48 = builder31.setLocale(locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder50 = builder48.setLanguage("org.apache.commons.math.MathException: ja");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.MathException: ja [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str11, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str14, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "allemand");
        org.junit.Assert.assertEquals(locale21.toString(), "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4" + "'", str29, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "germany");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category35.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "germany");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals(locale41.toString(), "eng_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh-CN" + "'", str44, "zh-CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u82f1\u6587" + "'", str45, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test14103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14103");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("zxz_fran\347ais_ITALIAN");
        java.io.PrintStream printStream3 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale.Builder builder4 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder8 = builder4.setLanguage("ZXZ");
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder10 = builder4.setLocale(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder12 = builder4.setLocale(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet15 = locale11.getUnicodeLocaleKeys();
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.io.PrintStream printStream34 = printStream3.format(locale11, "French", (java.lang.Object[]) doubleArray32);
        java.lang.String[] strArray39 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray39, (java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray39, (java.lang.Throwable) mathException43);
        java.lang.Throwable[] throwableArray46 = mathException43.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException47 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray46);
        java.lang.Throwable[] throwableArray48 = notARotationMatrixException47.getSuppressed();
        java.io.PrintStream printStream49 = printStream34.format("YZY", (java.lang.Object[]) throwableArray48);
        java.io.PrintStream printStream51 = printStream49.append((java.lang.CharSequence) "Germany");
        java.io.PrintStream printStream53 = printStream51.append((java.lang.CharSequence) "XZY");
        printWriter1.println((java.lang.Object) printStream51);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(printStream53);
    }

    @Test
    public void test14104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14104");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale18 = null;
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double32 = rotation31.getQ0();
        org.apache.commons.math.geometry.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotation31.getAxis();
        double double35 = rotation31.getQ1();
        double[][] doubleArray36 = rotation31.getMatrix();
        java.io.PrintStream printStream37 = printStream17.printf(locale18, "United States", (java.lang.Object[]) doubleArray36);
        printStream17.println("org.apache.commons.math.geometry.NotARotationMatrixException: Canada");
        printStream17.close();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(printStream37);
    }

    @Test
    public void test14105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14105");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("fr");
        java.util.Locale.Builder builder11 = builder6.setExtension('a', "zxz_KO_KR");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test14106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14106");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((float) (byte) 100);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter14);
        java.lang.String[] strArray17 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter18 = printWriter15.printf("ko-KR", (java.lang.Object[]) strArray17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        double double24 = vector3D22.getNorm();
        printWriter15.println((java.lang.Object) vector3D22);
        java.io.PrintStream printStream27 = new java.io.PrintStream("ko-KR");
        printStream27.close();
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        char[] charArray39 = new char[] { '4', 'a', ' ', ' ' };
        printWriter33.write(charArray39);
        printStream27.print(charArray39);
        printWriter15.print(charArray39);
        printWriter5.println(charArray39);
        printWriter5.println('#');
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("germany");
        java.io.PrintStream printStream51 = new java.io.PrintStream("ko-KR");
        printStream51.close();
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.OutputStream) printStream51, false);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.Writer) printWriter54);
        printWriter55.println('a');
        printWriter55.print(true);
        printWriter55.flush();
        java.lang.String[] strArray64 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray64);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray64, (java.lang.Throwable) mathException67);
        java.lang.Throwable[] throwableArray69 = mathException68.getSuppressed();
        java.io.PrintWriter printWriter70 = printWriter55.format("zho", (java.lang.Object[]) throwableArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("anglais (Canada)", (java.lang.Object[]) throwableArray69);
        java.io.PrintWriter printWriter72 = printWriter5.format(locale47, "XYZ", (java.lang.Object[]) throwableArray69);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "germany");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter72);
    }

    @Test
    public void test14107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14107");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4");
        java.lang.String str2 = locale1.getDisplayScript();
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale1.toLanguageTag();
        boolean boolean5 = locale1.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test14108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14108");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale10.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray21 = rotation20.getMatrix();
        java.io.PrintWriter printWriter22 = printWriter5.format(locale10, "YZY", (java.lang.Object[]) doubleArray21);
        printWriter22.println();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        printWriter22.println(0.0d);
        java.io.PrintWriter printWriter29 = printWriter22.append('u');
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(printWriter29);
    }

    @Test
    public void test14109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14109");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder1.getA3();
        double double3 = vector3D2.getX();
        org.apache.commons.math.geometry.RotationOrder rotationOrder5 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder5.getA1();
        org.apache.commons.math.geometry.Rotation rotation8 = new org.apache.commons.math.geometry.Rotation(vector3D6, Double.NaN);
        org.apache.commons.math.geometry.Vector3D vector3D9 = new org.apache.commons.math.geometry.Vector3D(0.5514266812416906d, vector3D2, 0.8414709848078965d, vector3D6);
        double double10 = vector3D9.getDelta();
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(rotationOrder5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test14110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14110");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.print(614795.4656673663d);
    }

    @Test
    public void test14111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14111");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder6 = builder2.setLanguage("ZXZ");
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder8 = builder2.setLocale(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder10 = builder2.setLocale(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleKeys();
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter20.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray30 = rotation29.getMatrix();
        java.io.PrintWriter printWriter31 = printWriter20.format("en", (java.lang.Object[]) doubleArray30);
        java.io.PrintStream printStream32 = printStream1.format(locale9, "French", (java.lang.Object[]) doubleArray30);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        printWriter37.println((float) (byte) -1);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter37, true);
        java.lang.String[] strArray44 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter45 = printWriter37.printf("KR", (java.lang.Object[]) strArray44);
        java.io.PrintStream printStream47 = new java.io.PrintStream("ko-KR");
        printStream47.close();
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream47, false);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.Writer) printWriter50);
        char[] charArray54 = new char[] { ' ', 'x' };
        printWriter51.write(charArray54);
        printWriter37.println(charArray54);
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.lang.String str59 = locale57.getDisplayScript(locale58);
        java.lang.String str60 = locale58.getVariant();
        java.lang.String[] strArray63 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray63);
        java.io.PrintWriter printWriter65 = printWriter37.printf(locale58, "English", (java.lang.Object[]) strArray63);
        java.lang.String str66 = locale58.getScript();
        java.util.Locale locale67 = locale58.stripExtensions();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        java.lang.Object[] objArray72 = mathException70.getArguments();
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("eng", objArray72);
        java.io.PrintStream printStream74 = printStream1.format(locale67, "fra", objArray72);
        printStream74.write((int) 'x');
        printStream74.print("ita");
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.OutputStream) printStream74);
        printStream74.println(true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[ , x]");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(printStream74);
    }

    @Test
    public void test14112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14112");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YXZ;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA3();
        java.lang.String str3 = rotationOrder0.toString();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YXZ" + "'", str3, "YXZ");
    }

    @Test
    public void test14113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14113");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.setLanguageTag("catalan");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test14114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14114");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        java.lang.String str3 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 1.2220476682666177d, 0.0d, (double) (short) 10);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (-1.0f), (double) (byte) -1, (double) (byte) 100);
        org.apache.commons.math.geometry.Rotation rotation15 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.33667481938672716d, 2.54832090734599d, (-0.09917726107940238d));
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.6141083579401581d), 0.27829965900511133d, 623129.1985591752d);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YZY" + "'", str3, "YZY");
        org.junit.Assert.assertNotNull(vector3D16);
    }

    @Test
    public void test14115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14115");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder6 = builder2.setLanguage("ZXZ");
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder8 = builder2.setLocale(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder10 = builder2.setLocale(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleKeys();
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter20.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray30 = rotation29.getMatrix();
        java.io.PrintWriter printWriter31 = printWriter20.format("en", (java.lang.Object[]) doubleArray30);
        java.io.PrintStream printStream32 = printStream1.format(locale9, "French", (java.lang.Object[]) doubleArray30);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37, (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray37, (java.lang.Throwable) mathException41);
        java.lang.Throwable[] throwableArray44 = mathException41.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException45 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray44);
        java.lang.Throwable[] throwableArray46 = notARotationMatrixException45.getSuppressed();
        java.io.PrintStream printStream47 = printStream32.format("YZY", (java.lang.Object[]) throwableArray46);
        printStream32.print(0.0d);
        java.io.PrintStream printStream51 = new java.io.PrintStream("ko-KR");
        printStream51.close();
        printStream51.print("ita");
        printStream32.println((java.lang.Object) "ita");
        printStream32.flush();
        java.io.PrintStream printStream58 = printStream32.append(' ');
        boolean boolean59 = printStream32.checkError();
        printStream32.print((int) (short) 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test14116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14116");
        java.util.Locale locale1 = new java.util.Locale("en_CA");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder6 = builder2.setLanguage("ZXZ");
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder8 = builder2.setLocale(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder10 = builder2.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder2.setLanguage("fra");
        java.util.Locale locale13 = builder2.build();
        java.util.Locale locale14 = builder2.build();
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale14.getScript();
        java.lang.String str17 = locale1.getDisplayLanguage(locale14);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("YZY");
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        printWriter25.close();
        java.util.Locale locale28 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter25.println((java.lang.Object) locale28);
        java.util.Set<java.lang.Character> charSet30 = locale28.getExtensionKeys();
        java.lang.String str31 = locale19.getDisplayVariant(locale28);
        java.util.Set<java.lang.String> strSet32 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale19.getDisplayName();
        java.lang.String str34 = locale1.getDisplayName(locale19);
        org.junit.Assert.assertEquals(locale1.toString(), "en_ca");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fra_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fra_CA");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en_ca" + "'", str17, "en_ca");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "yzy");
        org.junit.Assert.assertEquals(locale28.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "yzy" + "'", str33, "yzy");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "en_ca" + "'", str34, "en_ca");
    }

    @Test
    public void test14117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14117");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream3 = printStream1.append(' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        char[] charArray12 = new char[] { ' ', 'x' };
        printWriter9.write(charArray12);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.lang.String str17 = locale14.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray25 = rotation24.getMatrix();
        java.io.PrintWriter printWriter26 = printWriter9.format(locale14, "YZY", (java.lang.Object[]) doubleArray25);
        printWriter26.print((-1L));
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = locale29.getScript();
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException39);
        java.lang.Throwable[] throwableArray42 = mathException39.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray42);
        java.lang.Throwable[] throwableArray44 = notARotationMatrixException43.getSuppressed();
        java.io.PrintWriter printWriter45 = printWriter26.printf(locale29, "CHN", (java.lang.Object[]) throwableArray44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("\u97d3\u6587)");
        java.lang.String str48 = locale29.getDisplayVariant(locale47);
        java.lang.String[] strArray51 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray51);
        java.lang.Object[] objArray53 = mathException52.getArguments();
        java.io.PrintStream printStream54 = printStream3.format(locale47, "\u97d3\u6587)", objArray53);
        printStream3.print(false);
        printStream3.println();
        printStream3.flush();
        java.io.PrintStream printStream61 = new java.io.PrintStream("ko-KR");
        printStream61.close();
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.OutputStream) printStream61, false);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter((java.io.Writer) printWriter64);
        char[] charArray68 = new char[] { ' ', 'x' };
        printWriter65.write(charArray68);
        printWriter65.write((int) (byte) 1);
        printWriter65.print((int) (short) 0);
        printWriter65.println("org.apache.commons.math.MathException: ZXZ");
        printWriter65.println('4');
        java.lang.String[] strArray81 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray81, (java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray86 = mathException85.getSuppressed();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray81, (java.lang.Throwable) mathException85);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray89 = mathException88.getSuppressed();
        mathException87.addSuppressed((java.lang.Throwable) mathException88);
        java.lang.Object[] objArray91 = mathException87.getArguments();
        java.lang.Throwable[] throwableArray92 = mathException87.getSuppressed();
        java.io.PrintWriter printWriter93 = printWriter65.printf("\ub300\ud55c\ubbfc\uad6d", (java.lang.Object[]) throwableArray92);
        java.io.PrintStream printStream94 = printStream3.format("", (java.lang.Object[]) throwableArray92);
        java.io.PrintWriter printWriter95 = new java.io.PrintWriter((java.io.OutputStream) printStream3);
        java.io.PrintWriter printWriter96 = new java.io.PrintWriter((java.io.OutputStream) printStream3);
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , x]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[ , x]");
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(printWriter93);
        org.junit.Assert.assertNotNull(printStream94);
    }

    @Test
    public void test14118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14118");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder1, 0.0d, 52.0d, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder1.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder1.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder1.getA2();
        double double9 = vector3D8.getX();
        org.apache.commons.math.geometry.RotationOrder rotationOrder11 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str12 = rotationOrder11.toString();
        org.apache.commons.math.geometry.Vector3D vector3D13 = rotationOrder11.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D14 = rotationOrder11.getA3();
        java.lang.String str15 = rotationOrder11.toString();
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotationOrder11.getA1();
        org.apache.commons.math.geometry.RotationOrder rotationOrder18 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str19 = rotationOrder18.toString();
        org.apache.commons.math.geometry.Vector3D vector3D20 = rotationOrder18.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D21 = rotationOrder18.getA2();
        double double22 = vector3D21.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D23 = vector3D16.add((-0.13715201283077028d), vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D25 = vector3D23.scalarMultiply((-1.9812591495014367E19d));
        org.apache.commons.math.geometry.Vector3D vector3D26 = vector3D25.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D27 = vector3D25.negate();
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D(2.141592653589793d, vector3D8, 1.4716190657154942d, vector3D27);
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZXZ" + "'", str12, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ZXZ" + "'", str15, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(rotationOrder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZXZ" + "'", str19, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
    }

    @Test
    public void test14119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14119");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale6.getDisplayName();
        boolean boolean8 = locale6.hasExtensions();
        java.lang.String str9 = locale5.getDisplayLanguage(locale6);
        java.util.Locale locale12 = new java.util.Locale("ZXZ", "fran\347ais");
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = locale6.getDisplayVariant(locale12);
        java.util.Locale.setDefault(locale6);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale3.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zxz" + "'", str9, "zxz");
        org.junit.Assert.assertEquals(locale12.toString(), "zxz_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zxz (FRAN\347AIS)" + "'", str13, "zxz (FRAN\347AIS)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test14120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14120");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ITA", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("zho");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("german", strMap8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Locale locale11 = locale10.stripExtensions();
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter16.println((float) (byte) -1);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter16, true);
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter24 = printWriter16.printf("KR", (java.lang.Object[]) strArray23);
        java.io.PrintStream printStream26 = new java.io.PrintStream("ko-KR");
        printStream26.close();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter29);
        char[] charArray33 = new char[] { ' ', 'x' };
        printWriter30.write(charArray33);
        printWriter16.println(charArray33);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.lang.String str38 = locale36.getDisplayScript(locale37);
        java.lang.String str39 = locale37.getVariant();
        java.lang.String[] strArray42 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray42);
        java.io.PrintWriter printWriter44 = printWriter16.printf(locale37, "English", (java.lang.Object[]) strArray42);
        java.lang.String str45 = locale37.getScript();
        java.lang.String str46 = locale10.getDisplayLanguage(locale37);
        java.util.Locale.setDefault(locale37);
        boolean boolean48 = locale37.hasExtensions();
        java.util.Set<java.lang.String> strSet49 = locale37.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strSet49, filteringMode50);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strSet49);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale56, locale57, locale58, locale59, locale60, locale61, locale63, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList67, filteringMode69);
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = java.util.Locale.CANADA;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.lang.String str80 = locale79.getDisplayLanguage();
        java.util.Locale locale81 = java.util.Locale.FRENCH;
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.util.Locale locale83 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray84 = new java.util.Locale[] { locale74, locale75, locale76, locale77, locale78, locale79, locale81, locale82, locale83 };
        java.util.ArrayList<java.util.Locale> localeList85 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList85, localeArray84);
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.util.Locale>) localeList85, filteringMode87);
        java.util.Locale locale89 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale.FilteringMode filteringMode90 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList88, filteringMode90);
        java.util.Locale locale92 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList91);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ , x]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u82f1\u6587" + "'", str46, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode50.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode69.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + filteringMode87 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode87.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNull(locale89);
        org.junit.Assert.assertTrue("'" + filteringMode90 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode90.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNull(locale92);
    }

    @Test
    public void test14121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14121");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.print(true);
        printStream1.print('#');
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.print(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream16 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "org.apache.commons.math.MathException: zxz (KO_KR)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: zxz (KO_KR)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14122");
        java.lang.String[] strArray2 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray2);
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("eng", (java.lang.Throwable) mathException3);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test14123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14123");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: United Kingdom", "ITA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ITA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14124");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        java.util.Locale locale9 = new java.util.Locale("French");
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException19);
        java.lang.Throwable[] throwableArray22 = mathException19.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray22);
        java.util.Locale locale25 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream28, false);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.Writer) printWriter31);
        printWriter32.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray42 = rotation41.getMatrix();
        java.io.PrintWriter printWriter43 = printWriter32.format("en", (java.lang.Object[]) doubleArray42);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.lang.String str47 = locale44.getLanguage();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray51 = mathException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = mathException50.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException53 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray52);
        java.io.PrintWriter printWriter54 = printWriter32.format(locale44, "ZXZ", (java.lang.Object[]) throwableArray52);
        java.io.PrintStream printStream55 = printStream23.printf(locale25, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray52);
        java.util.Locale locale57 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.lang.String str59 = locale25.getDisplayVariant(locale57);
        java.util.Set<java.lang.String> strSet60 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale9.getDisplayScript(locale57);
        java.lang.Throwable throwable63 = null;
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException(throwable63);
        java.lang.String[] strArray66 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66);
        mathException64.addSuppressed((java.lang.Throwable) mathException67);
        java.lang.Throwable[] throwableArray69 = mathException67.getSuppressed();
        java.io.PrintWriter printWriter70 = printWriter7.format(locale9, "org.apache.commons.math.MathException: de_DE", (java.lang.Object[]) throwableArray69);
        boolean boolean71 = printWriter7.checkError();
        java.lang.CharSequence charSequence72 = null;
        java.io.PrintWriter printWriter73 = printWriter7.append(charSequence72);
        printWriter73.println("");
        org.junit.Assert.assertEquals(locale9.toString(), "french");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertEquals(locale25.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertEquals(locale57.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(printWriter73);
    }

    @Test
    public void test14125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14125");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.println((float) (-1));
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream4.print((double) (short) -1);
        java.io.PrintStream printStream10 = printStream4.append((java.lang.CharSequence) "chinois", 0, (int) (byte) 0);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream4, true);
        printWriter12.flush();
        printWriter12.print(true);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter12, true);
        // The following exception was thrown during execution in test generation
        try {
            printWriter12.write("\u7f8e\u570b", (int) (byte) 0, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 117");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream10);
    }

    @Test
    public void test14126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14126");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder14 = builder10.setLanguage("ZXZ");
        java.util.Locale.Builder builder15 = builder10.clear();
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale.setDefault(category16, locale18);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale18.getDisplayLanguage(locale22);
        java.util.Locale.Builder builder24 = builder10.setLocale(locale22);
        java.util.Locale.Builder builder26 = builder10.setLanguageTag("Canada");
        java.util.Locale.Builder builder28 = builder10.setLanguage("it");
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        printWriter34.println('a');
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder41 = builder37.setLanguage("ZXZ");
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder43 = builder37.setLocale(locale42);
        java.lang.Object[] objArray45 = null;
        java.io.PrintWriter printWriter46 = printWriter34.format(locale42, "TWN", objArray45);
        java.util.Set<java.lang.String> strSet47 = locale42.getUnicodeLocaleKeys();
        java.lang.String str48 = locale42.getDisplayCountry();
        java.util.Locale.Builder builder49 = builder28.setLocale(locale42);
        java.util.Locale.Builder builder50 = builder28.clearExtensions();
        java.util.Locale.Builder builder51 = builder28.clear();
        java.util.Locale locale52 = builder51.build();
        java.lang.String str53 = locale9.getDisplayScript(locale52);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale3.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u5fb7\u570b" + "'", str48, "\u5fb7\u570b");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test14127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14127");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-100.0d), 0.7071067811865476d);
        org.apache.commons.math.geometry.RotationOrder rotationOrder4 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder4.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder4.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder4.getA2();
        java.lang.String str8 = rotationOrder4.toString();
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder4.getA1();
        double double10 = vector3D9.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D11 = vector3D2.add(0.0d, vector3D9);
        double double12 = vector3D11.getDelta();
        org.junit.Assert.assertNotNull(rotationOrder4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "XZY" + "'", str8, "XZY");
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.7071067811865476d + "'", double12 == 0.7071067811865476d);
    }

    @Test
    public void test14128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14128");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale9 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str14 = locale9.getDisplayName(locale11);
        java.lang.String str15 = locale11.getDisplayName();
        java.lang.String str16 = locale6.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder17 = builder0.setLocale(locale6);
        java.util.Locale.Builder builder18 = builder0.clear();
        java.util.Locale locale19 = builder18.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder18.setRegion("YZY");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: YZY [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u97d3\u6587)" + "'", str14, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
    }

    @Test
    public void test14129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14129");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale16.getDisplayLanguage(locale17);
        java.lang.String str21 = locale17.getISO3Language();
        java.io.PrintStream printStream26 = new java.io.PrintStream("ko-KR");
        printStream26.close();
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String[] strArray30 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream31 = printStream26.format(locale28, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray30);
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream26, false);
        printStream26.println(10.0f);
        java.io.PrintStream printStream38 = new java.io.PrintStream("ko-KR");
        printStream38.close();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream38, false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        printWriter42.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray52 = rotation51.getMatrix();
        java.io.PrintWriter printWriter53 = printWriter42.format("en", (java.lang.Object[]) doubleArray52);
        java.io.PrintStream printStream54 = printStream26.printf("YZY", (java.lang.Object[]) doubleArray52);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray52);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("zxz (KO_KR)", (java.lang.Object[]) doubleArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf(locale17, "DEU", (java.lang.Object[]) doubleArray52);
        org.apache.commons.math.geometry.Rotation rotation63 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (short) 1, 1.7607846147136124d, 1.0d, false);
        printWriter57.println((java.lang.Object) (short) 1);
        printWriter57.print('4');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais" + "'", str20, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test14130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14130");
        java.io.PrintStream printStream2 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream4 = printStream2.append(' ');
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        char[] charArray13 = new char[] { ' ', 'x' };
        printWriter10.write(charArray13);
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.lang.String str18 = locale15.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray26 = rotation25.getMatrix();
        java.io.PrintWriter printWriter27 = printWriter10.format(locale15, "YZY", (java.lang.Object[]) doubleArray26);
        printWriter27.print((-1L));
        java.util.Locale locale30 = java.util.Locale.PRC;
        java.lang.String str31 = locale30.getScript();
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray43 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException44 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray43);
        java.lang.Throwable[] throwableArray45 = notARotationMatrixException44.getSuppressed();
        java.io.PrintWriter printWriter46 = printWriter27.printf(locale30, "CHN", (java.lang.Object[]) throwableArray45);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("\u97d3\u6587)");
        java.lang.String str49 = locale30.getDisplayVariant(locale48);
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray52);
        java.lang.Object[] objArray54 = mathException53.getArguments();
        java.io.PrintStream printStream55 = printStream4.format(locale48, "\u97d3\u6587)", objArray54);
        java.lang.String[] strArray59 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray59);
        java.lang.Object[] objArray61 = mathException60.getArguments();
        java.lang.String str62 = mathException60.getPattern();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("CHN", (java.lang.Throwable) mathException63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("YZY", objArray54, (java.lang.Throwable) mathException64);
        java.lang.String str66 = mathException64.toString();
        org.junit.Assert.assertNotNull(printStream4);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , x]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ZXZ" + "'", str62, "ZXZ");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.apache.commons.math.MathException: CHN" + "'", str66, "org.apache.commons.math.MathException: CHN");
    }

    @Test
    public void test14131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14131");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray11 = rotation10.getMatrix();
        java.io.PrintStream printStream12 = printStream1.printf("fra", (java.lang.Object[]) doubleArray11);
        printStream12.close();
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        printStream15.close();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream15, false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter18);
        printWriter18.println((float) (byte) -1);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter18, true);
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream25, false);
        java.io.PrintStream printStream30 = printStream25.append((java.lang.CharSequence) "en");
        char[] charArray37 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream30.println(charArray37);
        printWriter18.println(charArray37);
        printStream12.print(charArray37);
        printStream12.write((int) (short) 0);
        printStream12.print((long) '#');
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a,  , #, a, #, x]");
    }

    @Test
    public void test14132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14132");
        java.util.Locale locale2 = new java.util.Locale("japon\350s", "x-lvariant-ZXZ");
        java.io.PrintStream printStream4 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder9 = builder5.setLanguage("ZXZ");
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder11 = builder5.setLocale(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder13 = builder5.setLocale(locale12);
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet16 = locale12.getUnicodeLocaleKeys();
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter23.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray33 = rotation32.getMatrix();
        java.io.PrintWriter printWriter34 = printWriter23.format("en", (java.lang.Object[]) doubleArray33);
        java.io.PrintStream printStream35 = printStream4.format(locale12, "French", (java.lang.Object[]) doubleArray33);
        java.util.Set<java.lang.String> strSet36 = locale12.getUnicodeLocaleKeys();
        java.lang.String str37 = locale2.getDisplayScript(locale12);
        java.lang.String str39 = locale2.getExtension('a');
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "japon\350s_X-LVARIANT-ZXZ");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Canada" + "'", str14, "Canada");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test14133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14133");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\u4e2d\u56fd\u8a9e");
    }

    @Test
    public void test14134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14134");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Englisch");
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str5 = languageRange4.getRange();
        java.util.Locale.LanguageRange languageRange8 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str9 = languageRange8.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] { languageRange4, languageRange8 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale16, locale17, locale18, locale19, locale20, locale21, locale23, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList27, filteringMode29);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList27);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale35, locale36, locale37, locale38, locale39, locale40, locale42, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList46, filteringMode48);
        java.lang.String[] strArray53 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.lang.String str56 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strList54);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.lang.String str66 = locale65.getDisplayLanguage();
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale60, locale61, locale62, locale63, locale64, locale65, locale67, locale68, locale69 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList71, filteringMode73);
        java.util.Locale.FilteringMode filteringMode75 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList71, filteringMode75);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList76, filteringMode77);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList76);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zxz" + "'", str5, "zxz");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zxz" + "'", str9, "zxz");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode29.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList30);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode73.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertTrue("'" + filteringMode75 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode75.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode77.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(localeList79);
    }

    @Test
    public void test14135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14135");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("XYZ", strMap1);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder7 = builder3.setLanguage("ZXZ");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder9 = builder3.setLocale(locale8);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder11 = builder3.setLocale(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str18 = locale17.toLanguageTag();
        java.lang.String str19 = locale17.getDisplayScript();
        java.lang.String str20 = locale17.getLanguage();
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str22 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale locale25 = new java.util.Locale("germany", "german");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = locale28.getScript();
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.getDefault(category30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayScript(locale32);
        java.lang.String str34 = locale28.getDisplayName(locale31);
        java.util.Locale locale35 = locale28.stripExtensions();
        java.util.Set<java.lang.String> strSet36 = locale28.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode37 = null;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet36, filteringMode37);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "germany" + "'", str18, "germany");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "germany" + "'", str20, "germany");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals(locale25.toString(), "germany_GERMAN");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "japon\350s_X-LVARIANT-ZXZ");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese (Taiwan)" + "'", str34, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(strList38);
    }

    @Test
    public void test14136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14136");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        printStream29.print(1.2220476682666177d);
        printStream29.println(false);
        boolean boolean34 = printStream29.checkError();
        java.io.PrintStream printStream36 = printStream29.append((java.lang.CharSequence) "XZX");
        byte[] byteArray38 = new byte[] { (byte) -1 };
        printStream29.write(byteArray38, (int) ' ', (int) 'u');
        printStream29.println((float) (short) 1);
        boolean boolean44 = printStream29.checkError();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("ZXZ");
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException54);
        java.lang.Throwable[] throwableArray56 = mathException54.getSuppressed();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("zh-CN", (java.lang.Object[]) throwableArray50, (java.lang.Throwable) mathException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("x-lvariant-ZXZ", (java.lang.Object[]) throwableArray50);
        java.lang.Object[] objArray60 = mathException59.getArguments();
        java.io.PrintStream printStream61 = printStream29.format("CN", objArray60);
        printStream29.println(0.2822586589452951d);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(printStream61);
    }

    @Test
    public void test14137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14137");
        java.util.Locale locale3 = new java.util.Locale("XZY", "Franz\366sisch", "\u5fb7\u6587\u5fb7\u56fd)");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "xzy_FRANZ\366\u5fb7\u6587\u5fb7\u56fd)");
    }

    @Test
    public void test14138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14138");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream13 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale17 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale.setDefault(category18, locale19);
        java.lang.String str22 = locale17.getDisplayName(locale19);
        java.lang.String str23 = locale19.getDisplayName();
        java.lang.String str24 = locale14.getDisplayLanguage(locale19);
        printStream13.println((java.lang.Object) locale19);
        java.lang.String str26 = locale19.getCountry();
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale28.getDisplayLanguage();
        boolean boolean30 = locale28.hasExtensions();
        java.util.Locale.setDefault(category0, locale28);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str34 = locale33.toLanguageTag();
        java.lang.String str36 = locale33.getExtension('u');
        java.lang.String str37 = locale28.getDisplayLanguage(locale33);
        java.lang.String str38 = locale28.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u97d3\u6587)" + "'", str22, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "germany" + "'", str34, "germany");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test14139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14139");
        java.util.Locale locale3 = new java.util.Locale("Chinese (China)", "zxz (FRAN\347AIS)", "");
        java.lang.String str4 = locale3.getVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "chinese (china)_ZXZ (FRAN\347AIS)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test14140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14140");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        printStream13.println((long) 0);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        char[] charArray29 = new char[] { '4', 'a', ' ', ' ' };
        printWriter23.write(charArray29);
        printStream17.print(charArray29);
        printStream13.println(charArray29);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        printStream13.print((long) 'u');
        printStream13.println('4');
        printStream13.println((int) (short) 100);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4, a,  ,  ]");
    }

    @Test
    public void test14141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14141");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) 10L, vector3D3);
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double11 = rotation10.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D12 = rotation10.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D4.add(vector3D12);
        double double14 = vector3D13.getY();
        org.apache.commons.math.geometry.Vector3D vector3D15 = vector3D13.negate();
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-4.626864286030188d) + "'", double14 == (-4.626864286030188d));
        org.junit.Assert.assertNotNull(vector3D15);
    }

    @Test
    public void test14142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14142");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale2.getScript();
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.lang.String str8 = locale2.getDisplayName(locale5);
        java.lang.String str9 = locale0.getDisplayLanguage(locale2);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale.setDefault(category11, locale13);
        java.lang.String str17 = locale10.getDisplayVariant(locale13);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleKeys();
        java.lang.String str20 = locale13.getDisplayCountry(locale18);
        java.lang.String str21 = locale13.getDisplayName();
        java.util.Set<java.lang.String> strSet22 = locale13.getUnicodeLocaleKeys();
        java.lang.String str23 = locale0.getDisplayName(locale13);
        java.lang.String str24 = locale13.getLanguage();
        java.lang.String str25 = locale13.getDisplayName();
        java.lang.String str26 = locale13.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Chinese (Taiwan)" + "'", str8, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str9, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Italian" + "'", str23, "Italian");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test14143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14143");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException2);
        java.lang.Throwable[] throwableArray4 = mathException2.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) throwableArray4);
        java.lang.Object[] objArray6 = mathException5.getArguments();
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray10);
        java.lang.Object[] objArray12 = mathException11.getArguments();
        java.lang.String str13 = mathException11.getPattern();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("zh", (java.lang.Throwable) mathException14);
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray6, (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ZXZ" + "'", str13, "ZXZ");
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test14144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14144");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        printWriter9.println((float) (byte) -1);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter17 = printWriter9.printf("KR", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        printWriter9.println(charArray26);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.lang.String str32 = locale30.getVariant();
        java.lang.String[] strArray35 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35);
        java.io.PrintWriter printWriter37 = printWriter9.printf(locale30, "English", (java.lang.Object[]) strArray35);
        java.lang.String str38 = locale30.getScript();
        java.util.Locale locale39 = locale30.stripExtensions();
        java.util.Locale.Builder builder40 = builder2.setLocale(locale30);
        java.util.Locale.Builder builder41 = builder2.clearExtensions();
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder41.setRegion("\uc911\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: _FRA_???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test14145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14145");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        printWriter5.print(' ');
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray32 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray32, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray32, (java.lang.Throwable) mathException36);
        java.lang.Throwable[] throwableArray39 = mathException36.getSuppressed();
        java.io.PrintStream printStream40 = printStream28.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter41 = printWriter5.printf(locale22, "german", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter43 = printWriter41.append((java.lang.CharSequence) "ita");
        java.util.Locale locale45 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream48 = new java.io.PrintStream("ko-KR");
        printStream48.close();
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream53 = printStream48.format(locale50, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray52);
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream48, false);
        printStream48.println(10.0f);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.OutputStream) printStream48);
        printStream48.println();
        java.io.PrintStream printStream61 = printStream48.append('a');
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = locale63.getDisplayLanguage();
        java.util.Locale.setDefault(category62, locale63);
        java.util.Locale.Category category66 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        boolean boolean68 = locale67.hasExtensions();
        java.util.Locale.setDefault(category66, locale67);
        java.util.Locale.setDefault(category62, locale67);
        java.util.Set<java.lang.String> strSet71 = locale67.getUnicodeLocaleKeys();
        org.apache.commons.math.geometry.Rotation rotation80 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double81 = rotation80.getQ0();
        org.apache.commons.math.geometry.Rotation rotation87 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double88 = rotation87.getQ0();
        org.apache.commons.math.geometry.Rotation rotation89 = rotation80.applyTo(rotation87);
        double double90 = rotation80.getQ0();
        double double91 = rotation80.getQ0();
        double[][] doubleArray92 = rotation80.getMatrix();
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("Canada", (java.lang.Object[]) doubleArray92);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException94 = new org.apache.commons.math.geometry.NotARotationMatrixException("fr", (java.lang.Object[]) doubleArray92);
        java.lang.Object[] objArray95 = notARotationMatrixException94.getArguments();
        java.io.PrintStream printStream96 = printStream48.format(locale67, "", objArray95);
        java.io.PrintWriter printWriter97 = printWriter43.format(locale45, "en-GB", objArray95);
        java.lang.String str98 = locale45.getScript();
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertEquals(locale45.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + category66 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category66.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 52.0d + "'", double81 == 52.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 52.0d + "'", double88 == 52.0d);
        org.junit.Assert.assertNotNull(rotation89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 52.0d + "'", double90 == 52.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 52.0d + "'", double91 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[[25407.0, 1040.0, 2000.0], [-1040.0, 5407.0, 10400.0], [2000.0, -10400.0, 5607.0]]");
        org.junit.Assert.assertNotNull(printStream96);
        org.junit.Assert.assertNotNull(printWriter97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test14146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14146");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        printStream85.println((int) (byte) -1);
        printStream85.println((long) (byte) 1);
        java.io.PrintStream printStream90 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        printStream90.print((long) (byte) 0);
        printStream90.print((long) (byte) 10);
        java.io.PrintStream printStream95 = new java.io.PrintStream((java.io.OutputStream) printStream90);
        printStream90.println((int) '#');
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test14147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14147");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("ZYZ");
        printWriter1.println(3.141592653589793d);
        java.io.PrintWriter printWriter5 = printWriter1.append((java.lang.CharSequence) "\u97d3\u6587)");
        printWriter5.println((float) (short) 1);
        printWriter5.write((int) 'a');
        printWriter5.close();
        org.junit.Assert.assertNotNull(printWriter5);
    }

    @Test
    public void test14148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14148");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.lang.String[] strArray6 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream7 = printStream2.format(locale4, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray6);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream2, false);
        printStream2.println(10.0f);
        printStream2.println((float) 100);
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        printStream15.close();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream15, false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter18);
        printWriter19.close();
        java.util.Locale locale22 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter19.println((java.lang.Object) locale22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Object[] objArray28 = mathException26.getArguments();
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("eng", objArray28);
        java.io.PrintStream printStream30 = printStream2.printf(locale22, "germany", objArray28);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("China");
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException38);
        java.lang.Object[] objArray40 = mathException38.getArguments();
        java.io.PrintStream printStream43 = new java.io.PrintStream("ko-KR");
        printStream43.close();
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream43, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter46);
        java.lang.String[] strArray49 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter50 = printWriter47.printf("ko-KR", (java.lang.Object[]) strArray49);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException51 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("German", objArray40, (java.lang.Throwable) notARotationMatrixException51);
        java.lang.String str53 = mathException52.getPattern();
        java.lang.String str54 = mathException52.getPattern();
        java.lang.String str55 = mathException52.getPattern();
        mathException32.addSuppressed((java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("x-lvariant-zxz", objArray28, (java.lang.Throwable) mathException32);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertEquals(locale22.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "German" + "'", str53, "German");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "German" + "'", str54, "German");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "German" + "'", str55, "German");
    }

    @Test
    public void test14149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14149");
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotation7.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = vector3D10.scalarMultiply((double) 0);
        org.apache.commons.math.geometry.Vector3D vector3D21 = vector3D8.subtract(vector3D10);
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray35 = rotation34.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D37, (double) (byte) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D39, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D47 = rotation34.applyInverseTo(vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation34.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation28.applyInverseTo(vector3D48);
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotation55.applyTo(vector3D57);
        double double62 = rotation55.getAngle();
        double double63 = rotation55.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D66 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D66, (double) (byte) 100, vector3D68);
        org.apache.commons.math.geometry.Vector3D vector3D73 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D74 = vector3D66.subtract((double) 10L, vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D75 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D76 = rotation55.applyTo(vector3D75);
        double double77 = vector3D76.getY();
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation28.applyInverseTo(vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D79 = new org.apache.commons.math.geometry.Vector3D((-1.63942416E8d), vector3D10, (double) ' ', vector3D78);
        double double80 = vector3D79.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D82 = vector3D79.scalarMultiply((-0.13715201283077028d));
        org.apache.commons.math.geometry.Vector3D vector3D83 = vector3D82.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D84 = new org.apache.commons.math.geometry.Vector3D(6.096348819394107E8d, vector3D83);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 9610.932890332206d + "'", double77 == 9610.932890332206d);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.4248537421341891d + "'", double80 == 1.4248537421341891d);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
    }

    @Test
    public void test14150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14150");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        printStream1.print("eng");
        printStream1.print((float) (short) 0);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.print(true);
        printStream1.print((float) (-1));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test14151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14151");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation22 = rotation15.applyTo(rotation21);
        double[][] doubleArray23 = rotation22.getMatrix();
        double double24 = rotation22.getAngle();
        org.apache.commons.math.geometry.Rotation rotation30 = new org.apache.commons.math.geometry.Rotation(60.912721436461325d, 0.0d, 0.260817614100193d, 0.0d, true);
        org.apache.commons.math.geometry.Rotation rotation36 = new org.apache.commons.math.geometry.Rotation(1.7607846147136124d, (double) (-1), 0.0d, (double) 1L, false);
        org.apache.commons.math.geometry.Rotation rotation37 = rotation30.applyInverseTo(rotation36);
        org.apache.commons.math.geometry.Rotation rotation38 = rotation22.applyTo(rotation37);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(rotation38);
    }

    @Test
    public void test14152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14152");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(0.0d, (double) (byte) 100);
        double double3 = vector3D2.getY();
        java.io.PrintStream printStream5 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray10 = new char[] { ' ', 'a', '#', 'a' };
        printStream5.println(charArray10);
        java.io.PrintStream printStream13 = printStream5.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D22, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D40, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D27, (double) (byte) 1, vector3D35, (double) (short) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D49 = vector3D27.negate();
        org.apache.commons.math.geometry.RotationOrder rotationOrder51 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D52 = rotationOrder51.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D53 = rotationOrder51.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) 0.0f, vector3D27, (double) '#', vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D(1.0d, vector3D27);
        printStream5.println((java.lang.Object) vector3D55);
        double double57 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D2, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D(10.000870209653117d, 0.0d);
        org.apache.commons.math.geometry.Vector3D vector3D62 = vector3D60.scalarMultiply((-1.9812591495014367E19d));
        org.apache.commons.math.geometry.Vector3D vector3D63 = vector3D2.add(vector3D62);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotationOrder51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
    }

    @Test
    public void test14153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14153");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        printWriter9.println((float) (byte) -1);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter17 = printWriter9.printf("KR", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        printWriter9.println(charArray26);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.lang.String str32 = locale30.getVariant();
        java.lang.String[] strArray35 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35);
        java.io.PrintWriter printWriter37 = printWriter9.printf(locale30, "English", (java.lang.Object[]) strArray35);
        java.lang.String str38 = locale30.getScript();
        java.util.Locale locale39 = locale30.stripExtensions();
        java.util.Locale.Builder builder40 = builder2.setLocale(locale30);
        java.util.Locale.Builder builder41 = builder2.clearExtensions();
        java.util.Locale.Builder builder43 = builder41.addUnicodeLocaleAttribute("Taiwan");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder46 = builder43.setUnicodeLocaleKeyword("TW", "DE");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: DE [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test14154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14154");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        printWriter9.println((float) (byte) -1);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter17 = printWriter9.printf("KR", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        printWriter9.println(charArray26);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale29.getDisplayScript(locale30);
        java.lang.String str32 = locale30.getVariant();
        java.lang.String[] strArray35 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35);
        java.io.PrintWriter printWriter37 = printWriter9.printf(locale30, "English", (java.lang.Object[]) strArray35);
        java.lang.String str38 = locale30.getScript();
        java.util.Locale locale39 = locale30.stripExtensions();
        java.util.Locale.Builder builder40 = builder2.setLocale(locale30);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder45 = builder41.setLanguage("ZXZ");
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder47 = builder41.setLocale(locale46);
        java.util.Locale.Builder builder49 = builder47.setLanguage("KR");
        java.util.Locale.Builder builder51 = builder47.setLanguage("KOR");
        java.util.Locale locale52 = builder51.build();
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale locale56 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        boolean boolean59 = locale58.hasExtensions();
        java.util.Locale.setDefault(category57, locale58);
        java.lang.String str61 = locale56.getDisplayName(locale58);
        java.lang.String str62 = locale58.getDisplayName();
        java.lang.String str63 = locale53.getDisplayLanguage(locale58);
        java.lang.String str64 = locale52.getDisplayVariant(locale53);
        java.lang.String str65 = locale53.getISO3Language();
        java.lang.String str66 = locale53.toLanguageTag();
        java.util.Locale.Builder builder67 = builder2.setLocale(locale53);
        java.util.Locale.Category category68 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.lang.String str70 = locale69.getDisplayLanguage();
        java.util.Locale.setDefault(category68, locale69);
        java.lang.String str72 = locale69.getDisplayLanguage();
        java.util.Locale locale76 = new java.util.Locale("Chinese (Taiwan)", "org.apache.commons.math.geometry.NotARotationMatrixException: zxz (KO_KR)", "Italian");
        java.lang.String str77 = locale69.getDisplayCountry(locale76);
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.lang.String str80 = locale78.getDisplayCountry(locale79);
        boolean boolean81 = locale78.hasExtensions();
        java.lang.String str82 = locale78.getLanguage();
        java.lang.String str83 = locale69.getDisplayCountry(locale78);
        java.lang.String str84 = locale53.getDisplayVariant(locale78);
        java.lang.String str85 = locale78.getDisplayName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "kor_DE");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u97d3\u6587)" + "'", str61, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "English" + "'", str62, "English");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "English" + "'", str63, "English");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "eng" + "'", str65, "eng");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "en-CA" + "'", str66, "en-CA");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + category68 + "' != '" + java.util.Locale.Category.FORMAT + "'", category68.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "German" + "'", str70, "German");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "German" + "'", str72, "German");
        org.junit.Assert.assertEquals(locale76.toString(), "chinese (taiwan)_ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)_Italian");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "en" + "'", str82, "en");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "English" + "'", str85, "English");
    }

    @Test
    public void test14155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14155");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation5.applyInverseTo(rotation21);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) (byte) 1, (double) 1.0f, 0.0d, 1.0d, true);
        org.apache.commons.math.geometry.Rotation rotation30 = rotation5.applyInverseTo(rotation29);
        double[][] doubleArray31 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation38 = rotation37.revert();
        double double39 = rotation38.getQ3();
        org.apache.commons.math.geometry.Rotation rotation40 = rotation5.applyTo(rotation38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = rotation38.getAxis();
        org.apache.commons.math.geometry.RotationOrder rotationOrder42 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotationOrder42.getA3();
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation(rotationOrder42, (-3.141592653589793d), (double) ' ', (double) '4');
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation(rotationOrder42, (double) (short) 100, (-0.13715201283077028d), (-1.63942416E8d));
        java.lang.String str52 = rotationOrder42.toString();
        org.apache.commons.math.geometry.Vector3D vector3D53 = rotationOrder42.getA3();
        double double54 = org.apache.commons.math.geometry.Vector3D.angle(vector3D41, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D56, (double) (byte) 100, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D61, (double) (byte) 100, vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D58, vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D69 = vector3D68.negate();
        org.apache.commons.math.geometry.Vector3D vector3D70 = vector3D58.subtract(vector3D68);
        org.apache.commons.math.geometry.Vector3D vector3D71 = vector3D70.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D72 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D41, vector3D70);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(rotationOrder42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "XYZ" + "'", str52, "XYZ");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.4711276743037345d + "'", double54 == 1.4711276743037345d);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
    }

    @Test
    public void test14156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14156");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String[] strArray8 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream9 = printStream4.format(locale6, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        printStream4.println(10.0f);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter20.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray30 = rotation29.getMatrix();
        java.io.PrintWriter printWriter31 = printWriter20.format("en", (java.lang.Object[]) doubleArray30);
        java.io.PrintStream printStream32 = printStream4.printf("YZY", (java.lang.Object[]) doubleArray30);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("\u4e2d\u56fd\u8a9e", (java.lang.Object[]) doubleArray30, throwable33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("en-ca_TWN_ko-KR", (java.lang.Object[]) doubleArray30);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException36 = new org.apache.commons.math.geometry.NotARotationMatrixException("org.apache.commons.math.MathException: de_DE", (java.lang.Object[]) doubleArray30);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printStream32);
    }

    @Test
    public void test14157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14157");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(1.7932371536978438d, 0.0d, (-2.141592653589793d));
        org.apache.commons.math.geometry.Vector3D vector3D4 = vector3D3.orthogonal();
        org.junit.Assert.assertNotNull(vector3D4);
    }

    @Test
    public void test14158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14158");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        double double22 = rotation15.getAngle();
        org.apache.commons.math.geometry.RotationOrder rotationOrder23 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation(rotationOrder23, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Rotation rotation28 = rotation15.applyTo(rotation27);
        org.apache.commons.math.geometry.Rotation rotation29 = rotation27.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder30 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str31 = rotationOrder30.toString();
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotationOrder30.getA2();
        java.lang.String str33 = rotationOrder30.toString();
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation(rotationOrder30, 1.2220476682666177d, 0.0d, (double) (short) 10);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation(rotationOrder30, (double) (-1.0f), (double) (byte) -1, (double) (byte) 100);
        double[] doubleArray42 = rotation29.getAngles(rotationOrder30);
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotationOrder30.getA2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(rotationOrder23);
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(rotation29);
        org.junit.Assert.assertNotNull(rotationOrder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "YZY" + "'", str31, "YZY");
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "YZY" + "'", str33, "YZY");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-0.7519109235975501, 0.6719051863759258, 1.7929513945286444]");
        org.junit.Assert.assertNotNull(vector3D43);
    }

    @Test
    public void test14159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14159");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        printStream1.println((float) 100);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter18.close();
        java.util.Locale locale21 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter18.println((java.lang.Object) locale21);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Object[] objArray27 = mathException25.getArguments();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("eng", objArray27);
        java.io.PrintStream printStream29 = printStream1.printf(locale21, "germany", objArray27);
        printStream29.print("GB");
        printStream29.close();
        printStream29.println(true);
        printStream29.print("franc\350s");
        java.io.PrintStream printStream38 = printStream29.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4");
        printStream29.println();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertEquals(locale21.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream38);
    }

    @Test
    public void test14160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14160");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        printWriter5.println('#');
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray23 = mathException22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = mathException22.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException25 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException26 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray24);
        java.lang.Throwable[] throwableArray27 = notARotationMatrixException26.getSuppressed();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("zho", (java.lang.Object[]) throwableArray27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = mathException30.getSuppressed();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException30);
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException37);
        java.lang.String str39 = mathException38.getPattern();
        mathException33.addSuppressed((java.lang.Throwable) mathException38);
        mathException28.addSuppressed((java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray42 = mathException28.getSuppressed();
        java.io.PrintWriter printWriter43 = printWriter5.format("org.apache.commons.math.MathException: zxz (KO_KR)", (java.lang.Object[]) throwableArray42);
        printWriter43.close();
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder45.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder49 = builder45.setLanguage("ZXZ");
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder51 = builder45.setLocale(locale50);
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder53 = builder45.setLocale(locale52);
        java.util.Locale.Builder builder55 = builder53.setRegion("");
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Locale locale57 = java.util.Locale.TAIWAN;
        java.lang.String str58 = locale56.getDisplayScript(locale57);
        java.lang.String str59 = locale57.getVariant();
        java.util.Locale.Builder builder60 = builder55.setLocale(locale57);
        java.util.Locale locale61 = builder60.build();
        printWriter43.print((java.lang.Object) locale61);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ZXZ" + "'", str39, "ZXZ");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
    }

    @Test
    public void test14161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14161");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = printWriter11.append(' ');
        printWriter11.print(true);
        printWriter11.print((int) (byte) 100);
        printWriter11.println((int) 'x');
        printWriter11.println((float) (byte) 0);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test14162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14162");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-100.0d), 0.8190610670960571d, 0.4426454795586385d);
        org.apache.commons.math.geometry.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.minusJ;
        org.apache.commons.math.geometry.Vector3D vector3D6 = vector3D5.negate();
        org.apache.commons.math.geometry.Vector3D vector3D7 = vector3D5.normalize();
        double double8 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D3, vector3D7);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-0.8190610670960571d) + "'", double8 == (-0.8190610670960571d));
    }

    @Test
    public void test14163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14163");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = builder7.build();
        boolean boolean10 = locale9.hasExtensions();
        boolean boolean11 = locale9.hasExtensions();
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String[] strArray17 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream18 = printStream13.format(locale15, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        char[] charArray27 = new char[] { ' ', 'x' };
        printWriter24.write(charArray27);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.lang.String str32 = locale29.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray40 = rotation39.getMatrix();
        java.io.PrintWriter printWriter41 = printWriter24.format(locale29, "YZY", (java.lang.Object[]) doubleArray40);
        java.lang.String str42 = locale15.getDisplayCountry(locale29);
        java.lang.String str43 = locale29.getDisplayCountry();
        java.util.Set<java.lang.String> strSet44 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale29.getDisplayCountry();
        java.lang.String str46 = locale9.getDisplayVariant(locale29);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR_#x-ko-kr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR_#x-ko-kr");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , x]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "en" + "'", str32, "en");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "United Kingdom" + "'", str42, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test14164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14164");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print((int) ' ');
        printStream1.println((double) 100.0f);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        char[] charArray19 = new char[] { ' ', 'x' };
        printWriter16.write(charArray19);
        printStream1.print(charArray19);
        printStream1.print((int) 'u');
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.close();
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , x]");
    }

    @Test
    public void test14165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14165");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zho");
        java.io.PrintStream printStream2 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("ZXZ");
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException14);
        java.lang.Throwable[] throwableArray16 = mathException14.getSuppressed();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException14);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("zh-CN", (java.lang.Object[]) throwableArray10, (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("x-lvariant-ZXZ", (java.lang.Object[]) throwableArray10);
        java.io.PrintStream printStream20 = printStream4.printf("zxz_fran\347ais_ITALIAN", (java.lang.Object[]) throwableArray10);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream4);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream4);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(printStream20);
    }

    @Test
    public void test14166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14166");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Twi");
    }

    @Test
    public void test14167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14167");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.ZXY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA1();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
    }

    @Test
    public void test14168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14168");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = printWriter5.append((java.lang.CharSequence) "ko-KR");
        printWriter9.println((double) (short) 0);
        printWriter9.print('a');
        java.io.PrintWriter printWriter15 = printWriter9.append(' ');
        printWriter9.print((-62.0d));
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test14169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14169");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream6.println("English (United Kingdom)");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream6, true, "org.apache.commons.math.MathException: Germany");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: Germany");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream6);
    }

    @Test
    public void test14170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14170");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException12);
        java.io.PrintWriter printWriter14 = printWriter4.printf("it", (java.lang.Object[]) strArray10);
        java.io.PrintWriter printWriter16 = printWriter14.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.io.PrintWriter printWriter18 = printWriter14.append((java.lang.CharSequence) "Italian");
        java.io.PrintWriter printWriter20 = printWriter14.append('4');
        boolean boolean21 = printWriter14.checkError();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter14, true);
        printWriter23.print(0L);
        printWriter23.println(100L);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter31 = printWriter23.append((java.lang.CharSequence) "japon\350s", (int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 97");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test14171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14171");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        char[] charArray13 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream6.println(charArray13);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream6);
        printWriter15.print(0);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale.setDefault(category18, locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category23, locale26);
        java.util.Locale locale28 = java.util.Locale.getDefault(category23);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.lang.String str30 = locale29.getDisplayName();
        boolean boolean31 = locale29.hasExtensions();
        java.lang.String str32 = locale28.getDisplayLanguage(locale29);
        java.lang.String str33 = locale19.getDisplayCountry(locale28);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37);
        java.lang.Object[] objArray39 = mathException38.getArguments();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ja", objArray39);
        java.io.PrintWriter printWriter41 = printWriter15.printf(locale19, "Catalan", objArray39);
        printWriter15.print("\u6cd5\u6587");
        java.io.PrintWriter printWriter45 = printWriter15.append((java.lang.CharSequence) "Royaume-Uni");
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, a, #, x]");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale26.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English" + "'", str30, "English");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zxz" + "'", str32, "zxz");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter45);
    }

    @Test
    public void test14172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14172");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.lang.String str2 = locale0.getDisplayVariant();
        java.lang.String str3 = locale0.getVariant();
        java.lang.String str4 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "de_DE" + "'", str4, "de_DE");
    }

    @Test
    public void test14173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14173");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        printStream1.println((float) 10);
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter89.close();
        printWriter89.flush();
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test14174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14174");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayLanguage(locale2);
        java.util.Locale locale6 = locale0.stripExtensions();
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.io.PrintStream printStream9 = new java.io.PrintStream("ko-KR");
        printStream9.close();
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream9, false);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter12);
        printWriter13.close();
        java.util.Locale locale16 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter13.println((java.lang.Object) locale16);
        java.lang.String str18 = locale6.getDisplayCountry(locale16);
        java.lang.String str19 = locale16.toLanguageTag();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream22, false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter25);
        printWriter26.println('a');
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder33 = builder29.setLanguage("ZXZ");
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder35 = builder29.setLocale(locale34);
        java.lang.Object[] objArray37 = null;
        java.io.PrintWriter printWriter38 = printWriter26.format(locale34, "TWN", objArray37);
        java.lang.String str39 = locale20.getDisplayName(locale34);
        java.lang.String str40 = locale20.getVariant();
        java.lang.String str41 = locale16.getDisplayLanguage(locale20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale16.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "und" + "'", str19, "und");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinesisch (China)" + "'", str39, "Chinesisch (China)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str41, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test14175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14175");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it__#u-english");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=it__#u-english");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14176");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        java.io.PrintStream printStream87 = printStream85.append('4');
        printStream87.println(1.0f);
        printStream87.print("\u5fb7\u6587");
        java.io.PrintStream printStream93 = printStream87.append('4');
        printStream93.print((-1));
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test14177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14177");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D16);
        org.apache.commons.math.geometry.Rotation rotation19 = rotation5.revert();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(rotation19);
    }

    @Test
    public void test14178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14178");
        java.util.Locale locale2 = new java.util.Locale("China", "\u4e2d\u6587\u53f0\u7063)");
        java.util.Locale.setDefault(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u4e2d\u6587\u53f0\u7063)");
    }

    @Test
    public void test14179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14179");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "anglais");
        boolean boolean16 = printStream15.checkError();
        printStream15.print(true);
        printStream15.println((-0.0d));
        java.io.PrintStream printStream22 = printStream15.append('u');
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream22);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("English");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale27.getISO3Language();
        java.lang.String str29 = locale25.getDisplayLanguage(locale27);
        java.lang.String str30 = locale25.getISO3Country();
        java.lang.Object[] objArray32 = null;
        java.io.PrintWriter printWriter33 = printWriter23.format(locale25, "", objArray32);
        printWriter33.write("org.apache.commons.math.geometry.NotARotationMatrixException: YZX");
        printWriter33.print(1.4248537421341891d);
        printWriter33.flush();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(printStream22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "english");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ita" + "'", str28, "ita");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "english" + "'", str29, "english");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(printWriter33);
    }

    @Test
    public void test14180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14180");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        printStream85.println((int) (byte) -1);
        java.lang.Object[] objArray89 = null;
        java.io.PrintStream printStream90 = printStream85.format("", objArray89);
        printStream90.print("fran\347ais");
        java.io.PrintWriter printWriter94 = new java.io.PrintWriter((java.io.OutputStream) printStream90, false);
        printWriter94.write("\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd", (int) ' ', (-1));
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test14181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14181");
        org.apache.commons.math.geometry.CardanEulerSingularityException cardanEulerSingularityException1 = new org.apache.commons.math.geometry.CardanEulerSingularityException(false);
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) cardanEulerSingularityException1);
        java.lang.Throwable[] throwableArray3 = cardanEulerSingularityException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test14182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14182");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("ko-kr");
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("germany");
        java.util.Locale.Builder builder11 = builder8.clearExtensions();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale locale19 = new java.util.Locale("eng", "org.apache.commons.math.MathException");
        java.lang.String str20 = locale14.getDisplayScript(locale19);
        java.lang.String str21 = locale19.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder12.setLocale(locale19);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals(locale19.toString(), "eng_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test14183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14183");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale0.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for ?? (??)");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14184");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream17 = printStream12.format(locale14, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        java.io.PrintStream printStream21 = printStream12.append('4');
        printStream12.print(10L);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream12);
        java.io.PrintStream printStream26 = printStream12.append((java.lang.CharSequence) "anglais");
        printStream12.print((float) 100L);
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String[] strArray34 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream35 = printStream30.format(locale32, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream30, false);
        printStream30.println(10.0f);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ko-KR");
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        printWriter46.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray56 = rotation55.getMatrix();
        java.io.PrintWriter printWriter57 = printWriter46.format("en", (java.lang.Object[]) doubleArray56);
        java.io.PrintStream printStream58 = printStream30.printf("YZY", (java.lang.Object[]) doubleArray56);
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream58);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) -1 };
        printStream58.write(byteArray62);
        printStream12.write(byteArray62, (int) (short) 10, (int) (byte) 1);
        printStream10.write(byteArray62);
        java.io.PrintStream printStream69 = printStream10.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream71 = printStream69.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, -1]");
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printStream71);
    }

    @Test
    public void test14185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14185");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String[] strArray18 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream19 = printStream14.format(locale16, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray18);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        printStream14.println(10.0f);
        java.io.PrintStream printStream26 = new java.io.PrintStream("ko-KR");
        printStream26.close();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter29);
        printWriter30.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray40 = rotation39.getMatrix();
        java.io.PrintWriter printWriter41 = printWriter30.format("en", (java.lang.Object[]) doubleArray40);
        java.io.PrintStream printStream42 = printStream14.printf("YZY", (java.lang.Object[]) doubleArray40);
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream42);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) -1 };
        printStream42.write(byteArray46);
        printStream12.write(byteArray46, (int) (short) 1, 1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, -1]");
    }

    @Test
    public void test14186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14186");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D16);
        double double19 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray26 = rotation25.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D28, (double) (byte) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D30, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D38 = rotation25.applyInverseTo(vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D39 = rotation25.getAxis();
        org.apache.commons.math.geometry.Rotation rotation40 = rotation25.revert();
        double double41 = rotation40.getQ0();
        org.apache.commons.math.geometry.Rotation rotation42 = rotation5.applyInverseTo(rotation40);
        double double43 = rotation5.getQ3();
        double double44 = rotation5.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-52.0d) + "'", double41 == (-52.0d));
        org.junit.Assert.assertNotNull(rotation42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
    }

    @Test
    public void test14187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14187");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String[] strArray17 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream18 = printStream13.format(locale15, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream13, false);
        printStream13.println(10.0f);
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream25, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter28);
        printWriter29.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintWriter printWriter40 = printWriter29.format("en", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream41 = printStream13.printf("YZY", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream43 = printStream13.append(' ');
        printStream13.print((long) 'a');
        java.io.PrintStream printStream47 = printStream13.append((java.lang.CharSequence) "CA");
        printStream47.println('a');
        printStream47.print((double) 10L);
        java.lang.String[] strArray57 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray57, (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray62 = mathException61.getSuppressed();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray57, (java.lang.Throwable) mathException61);
        java.lang.Throwable[] throwableArray64 = mathException61.getSuppressed();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ko_KR", (java.lang.Object[]) throwableArray64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("United Kingdom", (java.lang.Throwable) mathException65);
        java.lang.Object[] objArray67 = mathException66.getArguments();
        java.io.PrintStream printStream68 = printStream47.format("francese", objArray67);
        java.io.PrintStream printStream69 = printStream1.printf("x-lvariant-ZXZ", objArray67);
        printStream69.println(48.0d);
        printStream69.println();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printStream69);
    }

    @Test
    public void test14188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14188");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder9 = builder7.setLanguage("fra");
        java.util.Locale locale10 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setExtension('4', "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fra_KR_#x-ko-kr");
    }

    @Test
    public void test14189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14189");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(0.320941660983827d, 2.70962161369284d);
    }

    @Test
    public void test14190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14190");
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D3, (double) (byte) 100, vector3D5);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D5, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D5, (double) 0.0f, vector3D17);
        double double20 = vector3D19.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D27, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D37, (double) (byte) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D45, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D32, (double) (byte) 1, vector3D40, (double) (short) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D32.negate();
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D19, (double) 100L, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D();
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D55.subtract(vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D67, (double) (byte) 100, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D64, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D82 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D83 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D80, (double) (byte) 100, vector3D82);
        org.apache.commons.math.geometry.Vector3D vector3D85 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D87 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D88 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D85, (double) (byte) 100, vector3D87);
        org.apache.commons.math.geometry.Vector3D vector3D89 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D82, vector3D87);
        org.apache.commons.math.geometry.Vector3D vector3D90 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D69, (double) (byte) 1, vector3D77, (double) (short) 100, vector3D87);
        org.apache.commons.math.geometry.Vector3D vector3D91 = vector3D87.negate();
        org.apache.commons.math.geometry.Vector3D vector3D92 = vector3D57.add((-2000.0d), vector3D91);
        org.apache.commons.math.geometry.Vector3D vector3D94 = vector3D57.scalarMultiply((-0.02937648959434208d));
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D94);
    }

    @Test
    public void test14191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14191");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA3();
        java.lang.String str2 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D6 = vector3D4.scalarMultiply(2.6254152026780435d);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "XYZ" + "'", str2, "XYZ");
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test14192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14192");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        java.io.PrintStream printStream87 = printStream85.append('4');
        printStream85.close();
        printStream85.print((int) (short) 1);
        java.io.PrintStream printStream92 = printStream85.append('a');
        java.io.PrintStream printStream94 = new java.io.PrintStream((java.io.OutputStream) printStream92, false);
        java.io.PrintWriter printWriter95 = new java.io.PrintWriter((java.io.OutputStream) printStream94);
        printStream94.write((int) (short) 10);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream92);
    }

    @Test
    public void test14193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14193");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print("");
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale.setDefault(category9, locale12);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray24 = rotation23.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotation23.applyInverseTo(vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation23.getAxis();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation23.revert();
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintStream printStream40 = printStream1.format(locale12, "KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream42 = printStream1.append('u');
        boolean boolean43 = printStream1.checkError();
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(false);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test14194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14194");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream("ko-KR");
        printStream31.close();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream31, false);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter34);
        printWriter34.println((float) (byte) -1);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.Writer) printWriter34, true);
        java.lang.String[] strArray41 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter42 = printWriter34.printf("KR", (java.lang.Object[]) strArray41);
        java.io.PrintStream printStream44 = new java.io.PrintStream("ko-KR");
        printStream44.close();
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream44, false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter47);
        char[] charArray51 = new char[] { ' ', 'x' };
        printWriter48.write(charArray51);
        printWriter34.println(charArray51);
        printWriter29.println(charArray51);
        printWriter29.println(' ');
        boolean boolean57 = printWriter29.checkError();
        printWriter29.println(1.5583111948973258d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[ , x]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test14195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14195");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        double double12 = rotation5.getAngle();
        double double13 = rotation5.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D24 = vector3D16.subtract((double) 10L, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation5.applyTo(vector3D25);
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation(vector3D25, (-0.0d));
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double42 = rotation41.getQ0();
        org.apache.commons.math.geometry.Rotation rotation43 = rotation34.applyTo(rotation41);
        org.apache.commons.math.geometry.Rotation rotation44 = rotation28.applyTo(rotation41);
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation(vector3D47, (double) 1);
        org.apache.commons.math.geometry.Vector3D vector3D51 = vector3D47.scalarMultiply((-5.440211108893697d));
        org.apache.commons.math.geometry.Vector3D vector3D52 = rotation28.applyTo(vector3D47);
        org.apache.commons.math.geometry.RotationOrder rotationOrder53 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation57 = new org.apache.commons.math.geometry.Rotation(rotationOrder53, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Vector3D vector3D58 = rotationOrder53.getA1();
        double[] doubleArray59 = rotation28.getAngles(rotationOrder53);
        double[][] doubleArray60 = rotation28.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation62 = new org.apache.commons.math.geometry.Rotation(doubleArray60, (-3929.5113857326546d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation44);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(rotationOrder53);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
    }

    @Test
    public void test14196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14196");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        java.io.PrintStream printStream9 = printStream1.append('#');
        printStream9.print('a');
        printStream9.print((double) 0.0f);
        printStream9.println((int) (short) 0);
        org.junit.Assert.assertNotNull(printStream9);
    }

    @Test
    public void test14197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14197");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(1.0d, 0.7434704792648906d, (-1.63942416E8d));
        org.apache.commons.math.geometry.RotationOrder rotationOrder5 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder5.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder5.getA1();
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(rotationOrder5, (-2.5575191894877256d), 1.4248537421341891d, 0.46117363094228814d);
        org.apache.commons.math.geometry.Rotation rotation17 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation17.applyInverseTo(rotation23);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D29, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation25.applyTo(vector3D36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("ko-KR");
        printStream39.close();
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream39, false);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter42);
        java.lang.String[] strArray45 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter46 = printWriter43.printf("ko-KR", (java.lang.Object[]) strArray45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        double double52 = vector3D50.getNorm();
        printWriter43.println((java.lang.Object) vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D55, (double) (byte) 100, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D50, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D60 = vector3D37.subtract(vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotation11.applyInverseTo(vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = vector3D3.add(1.0d, vector3D59);
        double double63 = vector3D62.getX();
        org.junit.Assert.assertNotNull(rotationOrder5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
    }

    @Test
    public void test14198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14198");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.lang.String str4 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test14199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14199");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder8 = builder6.setLanguage("KR");
        java.util.Locale.Builder builder10 = builder6.setLanguage("KOR");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale15 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale.setDefault(category16, locale17);
        java.lang.String str20 = locale15.getDisplayName(locale17);
        java.lang.String str21 = locale17.getDisplayName();
        java.lang.String str22 = locale12.getDisplayLanguage(locale17);
        java.lang.String str23 = locale11.getDisplayVariant(locale12);
        java.util.Set<java.lang.String> strSet24 = locale12.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "kor_DE");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587)" + "'", str20, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test14200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14200");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale9 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str10 = locale9.getDisplayVariant();
        java.util.Locale locale13 = new java.util.Locale("Italy", "US");
        java.lang.String str14 = locale9.getDisplayScript(locale13);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale13);
        java.util.Locale.Builder builder17 = builder15.setVariant("");
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder22 = builder18.setLanguage("ZXZ");
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder24 = builder18.setLocale(locale23);
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder26 = builder18.setLocale(locale25);
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale25.getDisplayScript();
        java.util.Locale.Builder builder29 = builder17.setLocale(locale25);
        java.util.Locale.Builder builder31 = builder17.setLanguageTag("italy");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder17.addUnicodeLocaleAttribute("\u7f8e\u570b");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale13.toString(), "italy_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test14201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14201");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter29.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray40);
        printWriter29.print('u');
        printWriter29.close();
        java.io.PrintStream printStream46 = new java.io.PrintStream("ko-KR");
        printStream46.close();
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream46, false);
        java.io.PrintStream printStream51 = printStream46.append((java.lang.CharSequence) "en");
        printStream46.print((int) ' ');
        printStream46.println((double) 100.0f);
        java.io.PrintStream printStream57 = new java.io.PrintStream("ko-KR");
        printStream57.close();
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream57, false);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter60);
        char[] charArray64 = new char[] { ' ', 'x' };
        printWriter61.write(charArray64);
        printStream46.print(charArray64);
        java.io.PrintStream printStream68 = new java.io.PrintStream("ko-KR");
        printStream68.close();
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter((java.io.OutputStream) printStream68, false);
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.Writer) printWriter71);
        printWriter71.println((float) (byte) -1);
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter((java.io.Writer) printWriter71, true);
        java.io.PrintStream printStream78 = new java.io.PrintStream("ko-KR");
        printStream78.close();
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.OutputStream) printStream78, false);
        java.io.PrintStream printStream83 = printStream78.append((java.lang.CharSequence) "en");
        char[] charArray90 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream83.println(charArray90);
        printWriter71.println(charArray90);
        printStream46.println(charArray90);
        printWriter29.println(charArray90);
        java.lang.Object obj95 = null;
        printWriter29.println(obj95);
        printWriter29.println((float) 1L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , x]");
        org.junit.Assert.assertNotNull(printStream83);
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[a,  , #, a, #, x]");
    }

    @Test
    public void test14202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14202");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        java.io.PrintStream printStream32 = printStream30.append('u');
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream30, true);
        java.io.PrintStream printStream36 = printStream30.append('#');
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream30, true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(printStream36);
    }

    @Test
    public void test14203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14203");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        java.io.PrintWriter printWriter9 = printWriter5.append('a');
        printWriter9.println((int) (short) 0);
        printWriter9.println("Chinesisch (China)");
        printWriter9.write((int) 'x');
        java.io.PrintWriter printWriter17 = printWriter9.append((java.lang.CharSequence) "org.apache.commons.math.MathException: ZXZ");
        printWriter9.print((float) (short) 10);
        printWriter9.println((int) (short) 1);
        java.io.PrintStream printStream23 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder28 = builder24.setLanguage("ZXZ");
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder30 = builder24.setLocale(locale29);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder32 = builder24.setLocale(locale31);
        java.lang.String str33 = locale31.getDisplayCountry();
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet35 = locale31.getUnicodeLocaleKeys();
        java.io.PrintStream printStream38 = new java.io.PrintStream("ko-KR");
        printStream38.close();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream38, false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        printWriter42.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray52 = rotation51.getMatrix();
        java.io.PrintWriter printWriter53 = printWriter42.format("en", (java.lang.Object[]) doubleArray52);
        java.io.PrintStream printStream54 = printStream23.format(locale31, "French", (java.lang.Object[]) doubleArray52);
        java.lang.String[] strArray59 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray59, (java.lang.Throwable) mathException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray64 = mathException63.getSuppressed();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray59, (java.lang.Throwable) mathException63);
        java.lang.Throwable[] throwableArray66 = mathException63.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException67 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray66);
        java.lang.Throwable[] throwableArray68 = notARotationMatrixException67.getSuppressed();
        java.io.PrintStream printStream69 = printStream54.format("YZY", (java.lang.Object[]) throwableArray68);
        printStream69.print(true);
        java.io.PrintStream printStream73 = printStream69.append('x');
        java.io.PrintStream printStream75 = new java.io.PrintStream("ko-KR");
        printStream75.close();
        java.io.PrintWriter printWriter78 = new java.io.PrintWriter((java.io.OutputStream) printStream75, false);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.Writer) printWriter78);
        char[] charArray82 = new char[] { ' ', 'x' };
        printWriter79.write(charArray82);
        printStream69.print(charArray82);
        printWriter9.print(charArray82);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Canada" + "'", str33, "Canada");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[ , x]");
    }

    @Test
    public void test14204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14204");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder10 = builder8.setLanguage("French");
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale locale14 = new java.util.Locale("English", "\ud55c\uad6d\uc5b4");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder11.setLocale(locale14);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test14205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14205");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder0.setLanguage("fra");
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder13 = builder10.clearExtensions();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale.setDefault(category16, locale17);
        java.util.Locale.setDefault(category15, locale17);
        java.lang.String str21 = locale14.getDisplayVariant(locale17);
        java.util.Locale.Builder builder22 = builder10.setLocale(locale17);
        java.util.Locale.Builder builder24 = builder10.addUnicodeLocaleAttribute("CHN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder24.setExtension('a', "org.apache.commons.math.MathException: x-lvariant-TWN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: org.apache.commons.math.MathException: x [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test14206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14206");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "zh-TW");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zh-TW");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14207");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
    }

    @Test
    public void test14208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14208");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print("");
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale.setDefault(category9, locale12);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray24 = rotation23.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotation23.applyInverseTo(vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation23.getAxis();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation23.revert();
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintStream printStream40 = printStream1.format(locale12, "KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream42 = printStream1.append('u');
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation(vector3D47, (double) 1);
        org.apache.commons.math.geometry.Vector3D vector3D50 = rotation49.getAxis();
        printWriter44.println((java.lang.Object) rotation49);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(vector3D50);
    }

    @Test
    public void test14209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14209");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.5440211108893698d), (-0.25886627012188185d), (-1.4070751110264845d));
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder0.getA1();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D8);
    }

    @Test
    public void test14210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14210");
        java.io.PrintStream printStream3 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream3.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray13 = rotation12.getMatrix();
        java.io.PrintStream printStream14 = printStream3.printf("fra", (java.lang.Object[]) doubleArray13);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder20 = builder15.setExtension('u', "");
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale24 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale.setDefault(category25, locale26);
        java.lang.String str29 = locale24.getDisplayName(locale26);
        java.lang.String str30 = locale26.getDisplayName();
        java.lang.String str31 = locale21.getDisplayLanguage(locale26);
        java.util.Locale.Builder builder32 = builder15.setLocale(locale21);
        java.io.PrintStream printStream35 = new java.io.PrintStream("ko-KR");
        printStream35.close();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream35, false);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.Writer) printWriter38);
        java.lang.String[] strArray41 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter42 = printWriter39.printf("ko-KR", (java.lang.Object[]) strArray41);
        java.io.PrintStream printStream43 = printStream3.printf(locale21, "TWN", (java.lang.Object[]) strArray41);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray46);
        java.io.PrintStream printStream48 = printStream3.printf("CA", (java.lang.Object[]) strArray46);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("italian", (java.lang.Object[]) strArray46);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: Germany", (java.lang.Object[]) strArray46, (java.lang.Throwable) mathException51);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u97d3\u6587)" + "'", str29, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English" + "'", str30, "English");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(printStream48);
    }

    @Test
    public void test14211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14211");
        java.io.PrintStream printStream1 = new java.io.PrintStream("EN-CA (TWN,KO-KR)");
    }

    @Test
    public void test14212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14212");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print(false);
        printWriter4.println();
        printWriter4.print((-0.453352281948313d));
        printWriter4.println();
    }

    @Test
    public void test14213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14213");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.print(true);
        printStream1.print((-60.912721436461325d));
        printStream1.flush();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test14214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14214");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: de-DE");
        printStream1.println((int) 'u');
    }

    @Test
    public void test14215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14215");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Korean", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test14216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14216");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double7 = rotation6.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double14 = rotation13.getQ0();
        org.apache.commons.math.geometry.Rotation rotation15 = rotation6.applyTo(rotation13);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D19, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation6.applyInverseTo(vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D28 = rotation6.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D(1.9341130330305916d, vector3D28);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
    }

    @Test
    public void test14217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14217");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.lang.String str1 = locale0.getDisplayName();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.lang.String str4 = locale0.getDisplayVariant(locale3);
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.lang.String str6 = locale3.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test14218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14218");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        printWriter6.println((float) (byte) -1);
        java.lang.String[] strArray12 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray12, (java.lang.Throwable) mathException14);
        java.io.PrintWriter printWriter16 = printWriter6.printf("it", (java.lang.Object[]) strArray12);
        java.io.PrintWriter printWriter18 = printWriter16.append((java.lang.CharSequence) "\uc601\uc5b4");
        printWriter18.println(true);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException23);
        java.lang.Throwable[] throwableArray25 = mathException23.getSuppressed();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) throwableArray25);
        java.lang.Object[] objArray27 = mathException26.getArguments();
        java.io.PrintWriter printWriter28 = printWriter18.printf("x-lvariant-ZXZ", objArray27);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException29 = new org.apache.commons.math.geometry.NotARotationMatrixException("org.apache.commons.math.MathException: French", objArray27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Throwable) notARotationMatrixException29);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
    }

    @Test
    public void test14219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14219");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = mathException2.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException2);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray7, (java.lang.Throwable) mathException9);
        java.lang.String str11 = mathException10.getPattern();
        mathException5.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.String str13 = mathException10.getPattern();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("French", (java.lang.Throwable) mathException10);
        java.lang.Object[] objArray15 = mathException10.getArguments();
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        mathException25.addSuppressed((java.lang.Throwable) mathException26);
        java.lang.Object[] objArray29 = mathException26.getArguments();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("eng", (java.lang.Throwable) mathException26);
        mathException10.addSuppressed((java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException26);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ZXZ" + "'", str11, "ZXZ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ZXZ" + "'", str13, "ZXZ");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
    }

    @Test
    public void test14220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14220");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream10.print("Chinesisch (China)");
        boolean boolean13 = printStream10.checkError();
        java.util.Locale locale16 = new java.util.Locale("anglais", "org.apache.commons.math.MathException: ko_KR");
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str20 = locale18.getDisplayScript();
        java.lang.String str21 = locale18.getLanguage();
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale18.getDisplayVariant();
        java.lang.String str24 = locale16.getDisplayVariant(locale18);
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray29);
        java.lang.Object[] objArray31 = mathException30.getArguments();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("ja", objArray31);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException33 = new org.apache.commons.math.geometry.NotARotationMatrixException("", objArray31);
        java.io.PrintStream printStream34 = printStream10.printf(locale16, "org.apache.commons.math.geometry.NotARotationMatrixException: x-lvariant-TWN", objArray31);
        java.io.PrintStream printStream38 = printStream34.append((java.lang.CharSequence) "Canada", 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals(locale16.toString(), "anglais_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: KO_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "germany" + "'", str19, "germany");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "germany" + "'", str21, "germany");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream34);
        org.junit.Assert.assertNotNull(printStream38);
    }

    @Test
    public void test14221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14221");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("Chinese");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test14222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14222");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Italy");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "italy" + "'", str3, "italy");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test14223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14223");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D4 = vector3D3.negate();
        org.apache.commons.math.geometry.Vector3D vector3D9 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D19, (double) (byte) 100, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D16, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D37, (double) (byte) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D34, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D21, (double) (byte) 1, vector3D29, (double) (short) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D43 = vector3D21.negate();
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D21);
        double double45 = vector3D21.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D46 = vector3D9.subtract((double) (short) -1, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D3.add((double) (byte) 0, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.minusJ;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D52 = vector3D48.add(vector3D51);
        double double53 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D3, vector3D51);
        double double54 = vector3D3.getX();
        org.apache.commons.math.geometry.RotationOrder rotationOrder56 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation60 = new org.apache.commons.math.geometry.Rotation(rotationOrder56, (double) (-1L), (double) (short) 10, (double) 'a');
        java.lang.String str61 = rotationOrder56.toString();
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotationOrder56.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((-5.203623393651532E-5d), vector3D3, 1.7607845497297911d, vector3D62);
        org.apache.commons.math.geometry.Rotation rotation70 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation76 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray77 = rotation76.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D79 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D82 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D79, (double) (byte) 100, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D84 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D86 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D87 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D84, (double) (byte) 100, vector3D86);
        org.apache.commons.math.geometry.Vector3D vector3D88 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D81, vector3D86);
        org.apache.commons.math.geometry.Vector3D vector3D89 = rotation76.applyInverseTo(vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D90 = rotation76.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D91 = rotation70.applyInverseTo(vector3D90);
        org.apache.commons.math.geometry.Vector3D vector3D92 = new org.apache.commons.math.geometry.Vector3D((-0.08806429469916818d), vector3D91);
        double double93 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D3, vector3D91);
        double double94 = vector3D91.getDelta();
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.7826371500223388d + "'", double53 == 0.7826371500223388d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-0.08806429469916818d) + "'", double54 == (-0.08806429469916818d));
        org.junit.Assert.assertNotNull(rotationOrder56);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "XYZ" + "'", str61, "XYZ");
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + (-270.0479994061875d) + "'", double93 == (-270.0479994061875d));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-0.09966865249116204d) + "'", double94 == (-0.09966865249116204d));
    }

    @Test
    public void test14224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14224");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D16);
        double double19 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation5.revert();
        org.apache.commons.math.geometry.Vector3D vector3D21 = rotation20.getAxis();
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter26);
        printWriter27.println('a');
        printWriter27.print((float) (byte) 100);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream38 = printStream33.format(locale35, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray37);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        printStream33.println(10.0f);
        printStream33.println((float) 100);
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        printWriter27.println((java.lang.Object) printStream46);
        org.apache.commons.math.geometry.RotationOrder rotationOrder48 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotationOrder48.getA3();
        printStream46.print((java.lang.Object) rotationOrder48);
        java.lang.String str51 = rotationOrder48.toString();
        org.apache.commons.math.geometry.Vector3D vector3D52 = rotationOrder48.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D53 = rotationOrder48.getA2();
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation(vector3D21, vector3D53);
        double double55 = rotation54.getQ0();
        double double56 = rotation54.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(rotationOrder48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "YZY" + "'", str51, "YZY");
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.7414525335518785d + "'", double55 == 0.7414525335518785d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.6710053207609464d + "'", double56 == 0.6710053207609464d);
    }

    @Test
    public void test14225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14225");
        java.lang.String[] strArray3 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray3, (java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray8 = mathException7.getSuppressed();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray3, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        java.lang.String[] strArray13 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13, (java.lang.Throwable) mathException15);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException17 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray13);
        java.lang.String[] strArray20 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray20, (java.lang.Throwable) mathException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException23);
        notARotationMatrixException17.addSuppressed((java.lang.Throwable) mathException23);
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        char[] charArray36 = new char[] { ' ', 'x' };
        printWriter33.write(charArray36);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.lang.String str41 = locale38.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray49 = rotation48.getMatrix();
        java.io.PrintWriter printWriter50 = printWriter33.format(locale38, "YZY", (java.lang.Object[]) doubleArray49);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException51 = new org.apache.commons.math.geometry.NotARotationMatrixException("ko-KR", (java.lang.Object[]) doubleArray49);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("KR");
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("it", (java.lang.Object[]) doubleArray49, (java.lang.Throwable) mathException53);
        mathException23.addSuppressed((java.lang.Throwable) mathException53);
        mathException10.addSuppressed((java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException10);
        org.apache.commons.math.geometry.Rotation rotation64 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double65 = rotation64.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D66 = rotation64.getAxis();
        double[][] doubleArray67 = rotation64.getMatrix();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException68 = new org.apache.commons.math.geometry.NotARotationMatrixException("CA", (java.lang.Object[]) doubleArray67);
        mathException10.addSuppressed((java.lang.Throwable) notARotationMatrixException68);
        java.lang.Object[] objArray70 = notARotationMatrixException68.getArguments();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException71 = new org.apache.commons.math.geometry.NotARotationMatrixException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: zxz (KO_KR)", objArray70);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , x]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en" + "'", str41, "en");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[[25407.0, 1040.0, 2000.0], [-1040.0, 5407.0, 10400.0], [2000.0, -10400.0, 5607.0]]");
    }

    @Test
    public void test14226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14226");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream12 = printStream7.format(locale9, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.String str26 = locale23.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        java.io.PrintWriter printWriter35 = printWriter18.format(locale23, "YZY", (java.lang.Object[]) doubleArray34);
        java.lang.String str36 = locale9.getDisplayCountry(locale23);
        java.util.Locale.Builder builder37 = builder5.setLocale(locale9);
        java.util.Locale.Builder builder38 = builder5.clear();
        java.util.Locale.Builder builder40 = builder38.addUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder41 = builder38.clear();
        java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("Deutsch");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United Kingdom" + "'", str36, "United Kingdom");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test14227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14227");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale1.getDisplayScript();
        java.lang.String str4 = locale1.getLanguage();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category5, locale8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category5);
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale1.getDisplayScript(locale11);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder20 = builder14.setLocale(locale19);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder22 = builder14.setLocale(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Set<java.lang.String> strSet24 = locale21.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet25 = locale21.getUnicodeLocaleKeys();
        java.lang.String str26 = locale21.getScript();
        java.util.Locale.setDefault(locale21);
        java.lang.String str28 = locale1.getDisplayLanguage(locale21);
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder33 = builder29.setLanguage("ZXZ");
        java.util.Locale.Builder builder34 = builder29.clear();
        java.util.Locale.Builder builder35 = builder29.clear();
        java.util.Locale locale38 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str39 = locale38.getDisplayVariant();
        java.util.Locale locale42 = new java.util.Locale("Italy", "US");
        java.lang.String str43 = locale38.getDisplayScript(locale42);
        java.util.Locale.Builder builder44 = builder29.setLocale(locale42);
        java.lang.String str45 = locale1.getDisplayScript(locale42);
        java.lang.String str46 = locale1.getDisplayScript();
        java.util.Locale locale50 = new java.util.Locale("germany", "en_CA", "\uce90\ub098\ub2e4");
        java.lang.String str51 = locale1.getDisplayVariant(locale50);
        boolean boolean52 = locale1.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "germany" + "'", str2, "germany");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "germany" + "'", str4, "germany");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale8.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Canada" + "'", str23, "Canada");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "germany" + "'", str28, "germany");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale42.toString(), "italy_US");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test14228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14228");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.write((int) (byte) 1);
        printWriter5.print((int) (short) 0);
        printWriter5.println("org.apache.commons.math.MathException: ZXZ");
        printWriter5.println('4');
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        java.lang.Object[] objArray21 = mathException19.getArguments();
        java.io.PrintWriter printWriter22 = printWriter5.printf("\u97d3\u6587)", objArray21);
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) strArray26);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException31 = new org.apache.commons.math.geometry.NotARotationMatrixException("italian-x-lvariant-CHN", (java.lang.Object[]) strArray26);
        printWriter22.println((java.lang.Object) "italian-x-lvariant-CHN");
        printWriter22.print(true);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException37);
        java.lang.Object[] objArray41 = mathException40.getArguments();
        java.io.PrintWriter printWriter42 = printWriter22.format("\uc911\uad6d\uc5b4", objArray41);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.RotationOrder rotationOrder44 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str45 = rotationOrder44.toString();
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotationOrder44.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D43.add(vector3D46);
        printWriter22.println((java.lang.Object) vector3D47);
        printWriter22.print((long) 'u');
        printWriter22.flush();
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotationOrder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ZXZ" + "'", str45, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
    }

    @Test
    public void test14229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14229");
        java.util.Locale locale3 = new java.util.Locale("\ud55c\uad6d\uc5b4", "\ud55c\uad6d\uc5b4_ZH_CN_german (KOR)", "\uc911\uad6d\uc5b4");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\ud55c\uad6d\uc5b4\ud55c\uad6d\uc5b4\uc911\uad6d\uc5b4");
    }

    @Test
    public void test14230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14230");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str2 = rotationOrder1.toString();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder1.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D5 = vector3D3.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation12.applyTo(vector3D14);
        double double19 = rotation12.getAngle();
        double double20 = rotation12.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D31 = vector3D23.subtract((double) 10L, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = rotation12.applyTo(vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D(181.56079996510783d, vector3D3, 3.141592653589793d, vector3D32);
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ZXZ" + "'", str2, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
    }

    @Test
    public void test14231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14231");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "anglais");
        printStream1.print((double) (byte) 1);
        java.io.PrintStream printStream19 = printStream1.append((java.lang.CharSequence) "German");
        printStream19.print('x');
        printStream19.close();
        printStream19.flush();
        printStream19.println();
        printStream19.print("YZY");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream19);
    }

    @Test
    public void test14232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14232");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale11);
        java.util.Locale.setDefault(locale9);
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ0();
        org.apache.commons.math.geometry.Rotation rotation31 = rotation22.applyTo(rotation29);
        org.apache.commons.math.geometry.Rotation rotation32 = rotation22.revert();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double39 = rotation38.getQ0();
        org.apache.commons.math.geometry.Rotation rotation40 = rotation22.applyInverseTo(rotation38);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double47 = rotation46.getQ1();
        double double48 = rotation46.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D50.subtract((double) 10L, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotation46.applyInverseTo(vector3D57);
        org.apache.commons.math.geometry.Rotation rotation60 = rotation22.applyInverseTo(rotation46);
        double[][] doubleArray61 = rotation22.getMatrix();
        java.io.PrintStream printStream62 = printStream8.format(locale9, "und", (java.lang.Object[]) doubleArray61);
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder65 = builder63.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder67 = builder63.setLanguage("ZXZ");
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder69 = builder63.setLocale(locale68);
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder71 = builder63.setLocale(locale70);
        java.util.Locale.Builder builder73 = builder63.setLanguage("fra");
        java.util.Locale.Builder builder75 = builder73.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder76 = builder73.clearExtensions();
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.util.Locale.Category category78 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category79 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.lang.String str81 = locale80.getDisplayLanguage();
        java.util.Locale.setDefault(category79, locale80);
        java.util.Locale.setDefault(category78, locale80);
        java.lang.String str84 = locale77.getDisplayVariant(locale80);
        java.util.Locale.Builder builder85 = builder73.setLocale(locale80);
        java.lang.String[] strArray89 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray89);
        java.lang.Object[] objArray91 = mathException90.getArguments();
        java.lang.String str92 = mathException90.getPattern();
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException90);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException90);
        java.lang.Object[] objArray95 = mathException90.getArguments();
        java.io.PrintStream printStream96 = printStream8.printf(locale80, "hi!", objArray95);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = locale80.getUnicodeLocaleType("cor\351en (Cor\351e du Sud)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: core?en (Core?e du Sud)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.FORMAT + "'", category78.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category79 + "' != '" + java.util.Locale.Category.FORMAT + "'", category79.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ZXZ" + "'", str92, "ZXZ");
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream96);
    }

    @Test
    public void test14233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14233");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter29.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray40);
        java.lang.String[] strArray44 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray44, (java.lang.Throwable) mathException46);
        java.lang.String str48 = mathException46.getPattern();
        java.lang.Throwable[] throwableArray49 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter50 = printWriter41.printf("\u97d3\u6587", (java.lang.Object[]) throwableArray49);
        printWriter50.print(false);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray56, (java.lang.Throwable) mathException58);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException60 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray56);
        java.io.PrintWriter printWriter61 = printWriter50.printf("TW", (java.lang.Object[]) strArray56);
        printWriter50.println((float) (short) -1);
        printWriter50.println('#');
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ko_KR" + "'", str48, "ko_KR");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printWriter61);
    }

    @Test
    public void test14234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14234");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("italian-x-lvariant-CHN", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("ja", strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.lang.String str14 = locale12.getDisplayScript(locale13);
        java.lang.String str15 = locale10.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(locale10);
        java.util.Set<java.lang.String> strSet17 = locale10.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strSet17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Collection<java.lang.String> strCollection22 = null;
        java.lang.String str23 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection22);
        java.lang.String[] strArray37 = new java.lang.String[] { "org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uce90\ub098\ub2e4", "org.apache.commons.math.geometry.NotARotationMatrixException: ", "YZY", "\u97d3\u6587", "en_CA", "English", "TWN", "\u97d3\u6587", "zxz_FRAN\347AIS", "org.apache.commons.math.MathException: ZXZ", "KR", "ko-KR" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList38);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale44, locale45, locale46, locale47, locale48, locale49, locale51, locale52, locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList55, filteringMode57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, strMap59);
        java.util.Locale locale62 = new java.util.Locale("ko-KR");
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags(languageRangeList60, (java.util.Collection<java.lang.String>) strSet63);
        java.lang.String str65 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList64);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Collection<java.lang.String> strCollection69 = null;
        java.lang.String str70 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, strCollection69);
        java.lang.String[] strArray84 = new java.lang.String[] { "org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uce90\ub098\ub2e4", "org.apache.commons.math.geometry.NotARotationMatrixException: ", "YZY", "\u97d3\u6587", "en_CA", "English", "TWN", "\u97d3\u6587", "zxz_FRAN\347AIS", "org.apache.commons.math.MathException: ZXZ", "KR", "ko-KR" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strList85);
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList87, filteringMode88);
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList18, filteringMode88);
        java.lang.Class<?> wildcardClass91 = strList18.getClass();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode57.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertEquals(locale62.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode88.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test14235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14235");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        printStream1.println((float) 100);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter18.close();
        java.util.Locale locale21 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter18.println((java.lang.Object) locale21);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Object[] objArray27 = mathException25.getArguments();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("eng", objArray27);
        java.io.PrintStream printStream29 = printStream1.printf(locale21, "germany", objArray27);
        printStream29.print("GB");
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream29, false);
        printStream33.println('u');
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str38 = locale37.toLanguageTag();
        java.lang.String str39 = locale37.getCountry();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = mathException43.getSuppressed();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException43);
        java.lang.String[] strArray48 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray48, (java.lang.Throwable) mathException50);
        java.lang.String str52 = mathException51.getPattern();
        mathException46.addSuppressed((java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("zxz", (java.lang.Throwable) mathException46);
        java.lang.String[] strArray57 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray57);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray57, (java.lang.Throwable) mathException60);
        mathException54.addSuppressed((java.lang.Throwable) mathException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException61);
        java.lang.Throwable[] throwableArray64 = mathException61.getSuppressed();
        java.io.PrintStream printStream65 = printStream33.printf(locale37, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) throwableArray64);
        java.util.Locale.setDefault(locale37);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertEquals(locale21.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "und" + "'", str38, "und");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ZXZ" + "'", str52, "ZXZ");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(printStream65);
    }

    @Test
    public void test14236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14236");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("English");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.lang.String str3 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "english");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test14237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14237");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale9 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str14 = locale9.getDisplayName(locale11);
        java.lang.String str15 = locale11.getDisplayName();
        java.lang.String str16 = locale6.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder17 = builder0.setLocale(locale6);
        java.util.Locale locale18 = builder0.build();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder23 = builder19.setLanguage("ZXZ");
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder25 = builder19.setLocale(locale24);
        java.io.PrintStream printStream27 = new java.io.PrintStream("ko-KR");
        printStream27.close();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream27, false);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter30);
        char[] charArray34 = new char[] { ' ', 'x' };
        printWriter31.write(charArray34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale36.getDisplayCountry(locale37);
        java.lang.String str39 = locale36.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray47 = rotation46.getMatrix();
        java.io.PrintWriter printWriter48 = printWriter31.format(locale36, "YZY", (java.lang.Object[]) doubleArray47);
        java.lang.String str49 = locale24.getDisplayCountry(locale36);
        java.lang.String str50 = locale36.getDisplayVariant();
        java.lang.String str51 = locale18.getDisplayLanguage(locale36);
        java.util.Locale.setDefault(locale36);
        java.lang.String str53 = locale36.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u97d3\u6587)" + "'", str14, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , x]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en" + "'", str39, "en");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Germany" + "'", str49, "Germany");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English" + "'", str51, "English");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English" + "'", str53, "English");
    }

    @Test
    public void test14238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14238");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        java.io.PrintStream printStream18 = printStream15.append('x');
        printStream15.println();
        java.io.PrintStream printStream21 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream21.println((float) 100L);
        printStream21.println((float) 10L);
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        printStream21.write(byteArray30);
        printStream15.write(byteArray30, (int) 'a', 10);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, -1, 10, 1]");
    }

    @Test
    public void test14239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14239");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("DE_DE", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=de_de");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14240");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(0.0d, 0.9981326374477802d, 43.364388609539944d, 1.7932371536978438d, false);
        java.lang.Class<?> wildcardClass6 = rotation5.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test14241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14241");
        java.util.Locale locale2 = new java.util.Locale("\u7fa9\u5927\u5229\u6587)", "zxz_fran\347ais");
        org.junit.Assert.assertEquals(locale2.toString(), "\u7fa9\u5927\u5229\u6587)_ZXZ_FRAN\347AIS");
    }

    @Test
    public void test14242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14242");
        java.lang.String[] strArray4 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray4);
        java.lang.Object[] objArray6 = mathException5.getArguments();
        java.lang.String str7 = mathException5.getPattern();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("CHN", (java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("fran\347\u6cd5\u6587)", (java.lang.Throwable) mathException8);
        java.lang.String str11 = mathException10.getPattern();
        java.lang.Object[] objArray12 = mathException10.getArguments();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ZXZ" + "'", str7, "ZXZ");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347\u6cd5\u6587)" + "'", str11, "fran\347\u6cd5\u6587)");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test14243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14243");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        printStream1.print(false);
        printStream1.flush();
        printStream1.println((float) '4');
        printStream1.println(false);
        printStream1.print(false);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale.setDefault(category19, locale20);
        java.lang.String str23 = locale17.getDisplayScript(locale20);
        java.io.PrintStream printStream27 = new java.io.PrintStream("ko-KR");
        printStream27.close();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream27, false);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter30);
        printWriter30.println((float) (byte) -1);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter30, true);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter38 = printWriter30.printf("KR", (java.lang.Object[]) strArray37);
        java.io.PrintStream printStream40 = new java.io.PrintStream("ko-KR");
        printStream40.close();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream40, false);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.Writer) printWriter43);
        char[] charArray47 = new char[] { ' ', 'x' };
        printWriter44.write(charArray47);
        printWriter30.println(charArray47);
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = locale50.getDisplayScript(locale51);
        java.lang.String str53 = locale51.getVariant();
        java.lang.String[] strArray56 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray56);
        java.io.PrintWriter printWriter58 = printWriter30.printf(locale51, "English", (java.lang.Object[]) strArray56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("\u6cd5\u6587", (java.lang.Object[]) strArray56);
        java.io.PrintStream printStream60 = printStream1.printf(locale17, "org.apache.commons.math.geometry.NotARotationMatrixException: ja", (java.lang.Object[]) strArray56);
        java.lang.String str61 = locale17.getDisplayName();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ , x]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Italian" + "'", str61, "Italian");
    }

    @Test
    public void test14244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14244");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("german (KOR)", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14245");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.YXZ;
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder1.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = vector3D2.scalarMultiply((-0.02786191713456967d));
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((-5.440211108893697d), (double) ' ');
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D(0.9999500037496876d, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D14 = vector3D8.subtract(vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((-2000.0d), 0.567725116225552d, 3.141592653589793d);
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D(1.7607845497297911d, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D25 = vector3D24.negate();
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D35, (double) (byte) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D40, (double) (byte) 100, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D37, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D53, (double) (byte) 100, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D58, (double) (byte) 100, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D55, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D42, (double) (byte) 1, vector3D50, (double) (short) 100, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D64 = vector3D42.negate();
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D42);
        double double66 = vector3D42.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D67 = vector3D30.subtract((double) (short) -1, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D68 = vector3D24.add((double) (byte) 0, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D69 = vector3D19.subtract(3.140030642045497d, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D12, vector3D69);
        org.apache.commons.math.geometry.Rotation rotation77 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D79 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D82 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D79, (double) (byte) 100, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D83 = rotation77.applyTo(vector3D79);
        org.apache.commons.math.geometry.Vector3D vector3D84 = vector3D79.negate();
        org.apache.commons.math.geometry.Vector3D vector3D86 = vector3D84.scalarMultiply((double) 'u');
        org.apache.commons.math.geometry.Vector3D vector3D87 = new org.apache.commons.math.geometry.Vector3D((-0.30041137025271114d), vector3D4, (-1.0000000000000002d), vector3D70, 0.09690873896245014d, vector3D86);
        double double88 = vector3D86.getAlpha();
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + (-3.141592653589793d) + "'", double88 == (-3.141592653589793d));
    }

    @Test
    public void test14246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14246");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder0.getA1();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
    }

    @Test
    public void test14247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14247");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray15 = rotation14.getMatrix();
        java.io.PrintWriter printWriter16 = printWriter5.format("en", (java.lang.Object[]) doubleArray15);
        printWriter16.write("CHN", (int) 'x', (-1));
        printWriter16.write("ZXZ_FRAN\347AIS");
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(printWriter16);
    }

    @Test
    public void test14248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14248");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("YZY");
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale9.getDisplayCountry(locale10);
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale14.getDisplayLanguage(locale18);
        java.lang.String str20 = locale14.getISO3Country();
        java.lang.String str21 = locale10.getDisplayLanguage(locale14);
        java.util.Locale locale22 = locale14.stripExtensions();
        java.lang.String str23 = locale22.getISO3Country();
        java.util.Locale.Builder builder24 = builder6.setLocale(locale22);
        java.lang.String str25 = locale22.getVariant();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "French" + "'", str21, "French");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test14249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14249");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder11 = builder0.clearExtensions();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder14 = builder11.setLanguage("francese");
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale15.getDisplayLanguage(locale17);
        java.lang.String str21 = locale17.getDisplayName();
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.lang.String str23 = locale17.getDisplayVariant(locale22);
        java.lang.String str24 = locale17.toLanguageTag();
        java.lang.String str25 = locale17.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet26 = locale17.getExtensionKeys();
        java.lang.String str27 = locale17.getLanguage();
        java.lang.String str28 = locale17.getISO3Language();
        java.util.Locale.Builder builder29 = builder11.setLocale(locale17);
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.lang.String str34 = locale33.getDisplayLanguage();
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale.setDefault(category31, locale33);
        java.util.Locale.setDefault(category30, locale33);
        java.util.Locale.setDefault(locale33);
        java.util.Set<java.lang.String> strSet39 = locale33.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder40 = builder29.setLocale(locale33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder29.setLanguage("org.apache.commons.math.MathException: YXZ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: org.apache.commons.math.MathException: YXZ [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "French" + "'", str21, "French");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "French" + "'", str25, "French");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fra" + "'", str28, "fra");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test14250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14250");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u6cd5\u6587", (-0.13973014146926832d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-0.13973014146926832");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14251");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D16);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray25 = rotation24.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D29, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation24.applyInverseTo(vector3D29);
        double double38 = rotation24.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = rotation5.applyInverseTo(rotation24);
        double[][] doubleArray40 = rotation24.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D51, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotation46.applyInverseTo(vector3D51);
        org.apache.commons.math.geometry.Rotation rotation65 = new org.apache.commons.math.geometry.Rotation((double) (byte) 100, (-0.0d), (double) (byte) 0, (double) 1, true);
        double double66 = rotation65.getQ0();
        org.apache.commons.math.geometry.Rotation rotation67 = rotation46.applyInverseTo(rotation65);
        org.apache.commons.math.geometry.Rotation rotation73 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D75 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D78 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D75, (double) (byte) 100, vector3D77);
        org.apache.commons.math.geometry.Vector3D vector3D79 = rotation73.applyTo(vector3D75);
        double double80 = rotation73.getAngle();
        double double81 = rotation73.getQ3();
        org.apache.commons.math.geometry.Rotation rotation82 = rotation46.applyInverseTo(rotation73);
        double double83 = rotation73.getQ3();
        double double84 = rotation73.getQ0();
        org.apache.commons.math.geometry.Rotation rotation85 = rotation24.applyInverseTo(rotation73);
        org.apache.commons.math.geometry.RotationOrder rotationOrder86 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D87 = rotationOrder86.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D88 = rotationOrder86.getA1();
        org.apache.commons.math.geometry.Rotation rotation92 = new org.apache.commons.math.geometry.Rotation(rotationOrder86, (-2.5575191894877256d), 1.4248537421341891d, 0.46117363094228814d);
        org.apache.commons.math.geometry.Rotation rotation93 = rotation24.applyInverseTo(rotation92);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.9999500037496876d + "'", double66 == 0.9999500037496876d);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertNotNull(rotation82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 10.0d + "'", double83 == 10.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 52.0d + "'", double84 == 52.0d);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(rotationOrder86);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(rotation93);
    }

    @Test
    public void test14252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14252");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.println((float) (-1));
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println("tw");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        printStream9.flush();
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream17 = printStream12.format(locale14, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 1, (byte) -1 };
        printStream19.write(byteArray25);
        printStream9.write(byteArray25);
        printStream1.write(byteArray25);
        printStream1.print('u');
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream32);
        printStream32.println("org.apache.commons.math.MathException: zxz_FRAN\347AIS");
        printStream32.println(0.0d);
        printStream32.println((java.lang.Object) 0.567725116225552d);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 1, -1]");
    }

    @Test
    public void test14253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14253");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        double double7 = rotation5.getQ1();
        double double8 = rotation5.getQ1();
        org.apache.commons.math.geometry.Rotation rotation9 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation15 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray16 = rotation15.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D20, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D28 = rotation15.applyInverseTo(vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D29 = rotation15.getAxis();
        org.apache.commons.math.geometry.Rotation rotation30 = rotation15.revert();
        org.apache.commons.math.geometry.Rotation rotation36 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double37 = rotation36.getQ0();
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double44 = rotation43.getQ0();
        org.apache.commons.math.geometry.Rotation rotation45 = rotation36.applyTo(rotation43);
        double double46 = rotation36.getQ0();
        double double47 = rotation36.getQ0();
        double[][] doubleArray48 = rotation36.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation49 = rotation30.applyInverseTo(rotation36);
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotation55.applyTo(vector3D57);
        double double62 = rotation55.getAngle();
        org.apache.commons.math.geometry.Rotation rotation63 = rotation36.applyInverseTo(rotation55);
        org.apache.commons.math.geometry.Rotation rotation64 = rotation5.applyInverseTo(rotation63);
        double double65 = rotation63.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 100.0d + "'", double8 == 100.0d);
        org.junit.Assert.assertNotNull(rotation9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertNotNull(rotation45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 52.0d + "'", double46 == 52.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
    }

    @Test
    public void test14254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14254");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D3 = vector3D2.negate();
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D15, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D33, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D20, (double) (byte) 1, vector3D28, (double) (short) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D42 = vector3D20.negate();
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D20);
        double double44 = vector3D20.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D45 = vector3D8.subtract((double) (short) -1, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D46 = vector3D2.add((double) (byte) 0, vector3D20);
        double double47 = vector3D46.getY();
        org.apache.commons.math.geometry.Vector3D vector3D49 = vector3D46.scalarMultiply((-0.5440211108893698d));
        double double50 = vector3D49.getY();
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.13715201283077028d) + "'", double47 == (-0.13715201283077028d));
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.07461359038090874d + "'", double50 == 0.07461359038090874d);
    }

    @Test
    public void test14255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14255");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u7fa9\u5927\u5229\u6587)");
        printStream1.println((int) 'x');
        printStream1.print((float) (byte) 10);
    }

    @Test
    public void test14256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14256");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print("XYZ");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        printWriter4.print((int) (byte) 1);
        printWriter4.println((java.lang.Object) (byte) 10);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print('#');
    }

    @Test
    public void test14257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14257");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getDisplayLanguage(locale6);
        java.lang.String str10 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale14 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale15.getDisplayLanguage(locale18);
        java.lang.String str21 = locale14.getDisplayVariant(locale18);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.lang.String str26 = locale14.getDisplayVariant(locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale28 = locale23.stripExtensions();
        java.lang.String str29 = locale23.getISO3Country();
        java.util.Locale locale33 = new java.util.Locale("ja-u-twn", "", "\ub3c5\uc77c\uc5b4");
        java.lang.String str34 = locale23.getDisplayName(locale33);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertEquals(locale14.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587" + "'", str20, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "KOR" + "'", str29, "KOR");
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Korean (South Korea)" + "'", str34, "Korean (South Korea)");
    }

    @Test
    public void test14258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14258");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter29.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray40);
        printWriter29.write("fran\347ais");
        printWriter29.print(false);
        printWriter29.write((int) (byte) 100);
        printWriter29.println((long) 'x');
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.Writer) printWriter29, false);
        java.io.PrintWriter printWriter53 = printWriter29.append((java.lang.CharSequence) "KR");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter53);
    }

    @Test
    public void test14259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14259");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        printWriter5.print(' ');
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray32 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray32, (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray32, (java.lang.Throwable) mathException36);
        java.lang.Throwable[] throwableArray39 = mathException36.getSuppressed();
        java.io.PrintStream printStream40 = printStream28.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter41 = printWriter5.printf(locale22, "german", (java.lang.Object[]) throwableArray39);
        java.io.PrintWriter printWriter43 = printWriter41.append((java.lang.CharSequence) "ita");
        printWriter41.write("anglais");
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        java.io.PrintWriter printWriter48 = printWriter41.append('a');
        printWriter48.print((float) 10L);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printWriter48);
    }

    @Test
    public void test14260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14260");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotation6.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D19 = vector3D9.scalarMultiply((double) 0);
        org.apache.commons.math.geometry.Vector3D vector3D20 = vector3D7.subtract(vector3D9);
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D38, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotation33.applyInverseTo(vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D47 = rotation33.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation27.applyInverseTo(vector3D47);
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D56, (double) (byte) 100, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotation54.applyTo(vector3D56);
        double double61 = rotation54.getAngle();
        double double62 = rotation54.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D73 = vector3D65.subtract((double) 10L, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D75 = rotation54.applyTo(vector3D74);
        double double76 = vector3D75.getY();
        org.apache.commons.math.geometry.Vector3D vector3D77 = rotation27.applyInverseTo(vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D78 = new org.apache.commons.math.geometry.Vector3D((-1.63942416E8d), vector3D9, (double) ' ', vector3D77);
        org.apache.commons.math.geometry.Vector3D vector3D79 = vector3D78.orthogonal();
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 9610.932890332206d + "'", double76 == 9610.932890332206d);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D79);
    }

    @Test
    public void test14261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14261");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((float) (byte) 100);
        printWriter5.close();
        printWriter5.println((float) 0);
        printWriter5.print((long) 10);
    }

    @Test
    public void test14262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14262");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        java.util.Locale locale15 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getLanguage();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter22.format(locale34, "ZXZ", (java.lang.Object[]) throwableArray42);
        java.io.PrintStream printStream45 = printStream13.printf(locale15, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray42);
        java.util.Locale locale47 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.lang.String str49 = locale15.getDisplayVariant(locale47);
        java.lang.String str51 = locale47.getExtension('u');
        java.util.Set<java.lang.String> strSet52 = locale47.getUnicodeLocaleKeys();
        java.lang.Class<?> wildcardClass53 = locale47.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertEquals(locale15.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertEquals(locale47.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test14263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14263");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        double double22 = rotation21.getAngle();
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = rotation28.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D40, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation36.applyTo(vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation36.getAxis();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation36.revert();
        org.apache.commons.math.geometry.Rotation rotation51 = rotation21.applyInverseTo(rotation50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = rotation50.getAxis();
        org.apache.commons.math.geometry.Rotation rotation53 = rotation50.revert();
        org.apache.commons.math.geometry.Vector3D vector3D54 = rotation53.getAxis();
        org.apache.commons.math.geometry.Rotation rotation60 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray61 = rotation60.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D63, (double) (byte) 100, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D68 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D68, (double) (byte) 100, vector3D70);
        org.apache.commons.math.geometry.Vector3D vector3D72 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D65, vector3D70);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation60.applyInverseTo(vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D74 = rotation60.getAxis();
        double double75 = rotation60.getQ2();
        double double76 = rotation60.getQ0();
        double double77 = rotation60.getQ2();
        org.apache.commons.math.geometry.Rotation rotation78 = rotation53.applyInverseTo(rotation60);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(rotation53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 52.0d + "'", double76 == 52.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(rotation78);
    }

    @Test
    public void test14264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14264");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        printStream1.print((long) (short) 0);
        printStream1.println((double) (byte) 0);
        printStream1.print('u');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
    }

    @Test
    public void test14265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14265");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: x-lvariant-TWN");
    }

    @Test
    public void test14266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14266");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        printWriter7.println(false);
        printWriter7.close();
        printWriter7.write(1);
    }

    @Test
    public void test14267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14267");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale19 = java.util.Locale.getDefault(category15);
        java.util.Locale.Builder builder20 = builder14.setLocale(locale19);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str23 = locale22.getDisplayCountry();
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale25 = locale22.stripExtensions();
        java.lang.String str26 = locale25.getDisplayVariant();
        java.util.Locale.Builder builder27 = builder20.setLocale(locale25);
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        printWriter34.println('a');
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder41 = builder37.setLanguage("ZXZ");
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder43 = builder37.setLocale(locale42);
        java.lang.Object[] objArray45 = null;
        java.io.PrintWriter printWriter46 = printWriter34.format(locale42, "TWN", objArray45);
        java.lang.String str47 = locale28.getDisplayName(locale42);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = locale50.getDisplayScript(locale51);
        java.lang.String str53 = locale48.getDisplayLanguage(locale50);
        java.lang.String str54 = locale42.getDisplayName(locale48);
        java.lang.String str55 = locale48.getISO3Country();
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.lang.String str57 = locale56.getDisplayLanguage();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.util.Locale locale59 = java.util.Locale.TAIWAN;
        java.lang.String str60 = locale58.getDisplayScript(locale59);
        java.lang.String str61 = locale56.getDisplayLanguage(locale58);
        java.util.Locale locale62 = locale56.stripExtensions();
        java.lang.String str63 = locale62.getDisplayLanguage();
        java.io.PrintStream printStream65 = new java.io.PrintStream("ko-KR");
        printStream65.close();
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.OutputStream) printStream65, false);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter((java.io.Writer) printWriter68);
        printWriter69.close();
        java.util.Locale locale72 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter69.println((java.lang.Object) locale72);
        java.lang.String str74 = locale62.getDisplayCountry(locale72);
        java.lang.String str75 = locale48.getDisplayCountry(locale62);
        java.lang.String str76 = locale62.toLanguageTag();
        java.util.Set<java.lang.String> strSet77 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str78 = locale25.getDisplayVariant(locale62);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinesisch (China)" + "'", str47, "Chinesisch (China)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "German (Germany)" + "'", str54, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals(locale72.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "und" + "'", str76, "und");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test14268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14268");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        java.io.PrintStream printStream18 = printStream15.append('x');
        printStream15.println();
        printStream15.println((long) (short) 10);
        java.io.PrintStream printStream23 = new java.io.PrintStream((java.io.OutputStream) printStream15, true);
        printStream15.println(1.9341130330305918d);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream18);
    }

    @Test
    public void test14269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14269");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        java.io.PrintStream printStream87 = printStream85.append('4');
        printStream85.close();
        printStream85.print((int) (short) 1);
        java.io.PrintStream printStream92 = printStream85.append('a');
        printStream85.print(0.7060543458962302d);
        printStream85.print('#');
        java.io.PrintStream printStream97 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        printStream85.println(true);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream92);
    }

    @Test
    public void test14270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14270");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        boolean boolean11 = printStream10.checkError();
        printStream10.close();
        printStream10.println(0.4705227400680958d);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test14271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14271");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream17 = printStream1.append((java.lang.CharSequence) "x-lvariant-TWN");
        printStream1.println(false);
        java.util.Locale locale20 = null;
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter26);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter26, false);
        boolean boolean30 = printWriter29.checkError();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter29);
        boolean boolean32 = printWriter31.checkError();
        printWriter31.write((int) (short) 10);
        java.io.PrintWriter printWriter36 = printWriter31.append('x');
        java.io.PrintStream printStream39 = new java.io.PrintStream("ko-KR");
        printStream39.close();
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream39, false);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter42);
        printWriter42.print((double) (byte) 100);
        printWriter42.println();
        printWriter42.println('#');
        printWriter42.println(false);
        printWriter42.close();
        java.io.PrintStream printStream54 = new java.io.PrintStream("ko-KR");
        printStream54.close();
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.OutputStream) printStream54, false);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.Writer) printWriter57);
        char[] charArray61 = new char[] { ' ', 'x' };
        printWriter58.write(charArray61);
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale63.getDisplayCountry(locale64);
        java.lang.String str66 = locale63.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation73 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray74 = rotation73.getMatrix();
        java.io.PrintWriter printWriter75 = printWriter58.format(locale63, "YZY", (java.lang.Object[]) doubleArray74);
        printWriter75.print((-1L));
        java.util.Locale locale78 = java.util.Locale.PRC;
        java.lang.String str79 = locale78.getScript();
        java.lang.String[] strArray84 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray84, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray89 = mathException88.getSuppressed();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray84, (java.lang.Throwable) mathException88);
        java.lang.Throwable[] throwableArray91 = mathException88.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException92 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray91);
        java.lang.Throwable[] throwableArray93 = notARotationMatrixException92.getSuppressed();
        java.io.PrintWriter printWriter94 = printWriter75.printf(locale78, "CHN", (java.lang.Object[]) throwableArray93);
        java.io.PrintWriter printWriter95 = printWriter42.format("", (java.lang.Object[]) throwableArray93);
        java.io.PrintWriter printWriter96 = printWriter31.format("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", (java.lang.Object[]) throwableArray93);
        java.io.PrintStream printStream97 = printStream1.printf(locale20, "TWN", (java.lang.Object[]) throwableArray93);
        printStream1.print('4');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , x]");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "en" + "'", str66, "en");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(printWriter94);
        org.junit.Assert.assertNotNull(printWriter95);
        org.junit.Assert.assertNotNull(printWriter96);
        org.junit.Assert.assertNotNull(printStream97);
    }

    @Test
    public void test14272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14272");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) (byte) 100, (-1.9812591495014367E19d), (-100.0d), 0.6335396845240875d, true);
        double double6 = rotation5.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-5.047295303351102E-18d) + "'", double6 == (-5.047295303351102E-18d));
    }

    @Test
    public void test14273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14273");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "ZXY");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ZXY");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14274");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        boolean boolean11 = printStream10.checkError();
        printStream10.close();
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String[] strArray18 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream19 = printStream14.format(locale16, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray18);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream21);
        printWriter22.print("\u97d3\u6587");
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder30 = builder25.setExtension('u', "");
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale34 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        boolean boolean37 = locale36.hasExtensions();
        java.util.Locale.setDefault(category35, locale36);
        java.lang.String str39 = locale34.getDisplayName(locale36);
        java.lang.String str40 = locale36.getDisplayName();
        java.lang.String str41 = locale31.getDisplayLanguage(locale36);
        java.util.Locale.Builder builder42 = builder25.setLocale(locale31);
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = locale31.getDisplayVariant(locale43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter22.printf(locale31, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) throwableArray48);
        java.util.Set<java.lang.Character> charSet50 = locale31.getExtensionKeys();
        printStream10.print((java.lang.Object) charSet50);
        printStream10.print((long) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream56 = new java.io.PrintStream((java.io.OutputStream) printStream10, false, "org.apache.commons.math.MathException: Germany");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: Germany");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category35.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u97d3\u6587)" + "'", str39, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English" + "'", str40, "English");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(charSet50);
    }

    @Test
    public void test14275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14275");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "org.apache.commons.math.geometry.notarotationmatrixexception:  (zxz_fran\347ais)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.geometry.notarotationmatrixexception:  (zxz_franc?ais)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14276");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("org.apache.commons.math.MathException: french");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception: french");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14277");
        java.util.Locale locale2 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.lang.String str7 = locale2.getDisplayName(locale4);
        java.lang.String str8 = locale2.getDisplayCountry();
        java.lang.String str9 = locale2.getISO3Language();
        java.lang.String str10 = locale2.getLanguage();
        java.lang.String str11 = locale2.getVariant();
        java.util.Set<java.lang.Character> charSet12 = locale2.getExtensionKeys();
        java.lang.String str13 = locale2.getISO3Language();
        java.util.Locale locale14 = locale2.stripExtensions();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u97d3\u6587)" + "'", str7, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u97d3\u6587" + "'", str8, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u97d3\u6587");
    }

    @Test
    public void test14278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14278");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder9 = builder4.setVariant("");
        java.util.Locale.Builder builder10 = builder4.clearExtensions();
        java.util.Locale locale11 = builder10.build();
        java.util.Locale.Builder builder12 = builder10.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14279");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray43 = mathException40.getSuppressed();
        java.io.PrintStream printStream44 = printStream32.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray43);
        printStream44.println((long) 0);
        java.io.PrintStream printStream48 = new java.io.PrintStream("ko-KR");
        printStream48.close();
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream53 = printStream48.format(locale50, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray52);
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream48, false);
        printStream48.println(10.0f);
        java.io.PrintStream printStream60 = new java.io.PrintStream("ko-KR");
        printStream60.close();
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream60, false);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.Writer) printWriter63);
        printWriter64.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation73 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray74 = rotation73.getMatrix();
        java.io.PrintWriter printWriter75 = printWriter64.format("en", (java.lang.Object[]) doubleArray74);
        java.io.PrintStream printStream76 = printStream48.printf("YZY", (java.lang.Object[]) doubleArray74);
        java.io.PrintStream printStream77 = new java.io.PrintStream((java.io.OutputStream) printStream76);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) -1 };
        printStream76.write(byteArray80);
        printStream44.write(byteArray80);
        printStream29.write(byteArray80, 10, (int) (byte) 1);
        printStream29.print(0);
        printStream29.println(false);
        printStream29.print(10L);
        printStream29.println(' ');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, -1]");
    }

    @Test
    public void test14280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14280");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("chinese (taiwan) (ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR),Italian)", "ZYX");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ZYX");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14281");
        java.util.Locale locale3 = new java.util.Locale("en-ca (TWN,ko-KR)", "japanese", "Chinese");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale3.toString(), "en-ca (twn,ko-kr)_JAPANESE_Chinese");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test14282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14282");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.println(true);
        printWriter5.println(9610.932890332206d);
        printWriter5.write("Italy");
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ1();
        double double24 = rotation22.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D34 = vector3D26.subtract((double) 10L, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = rotation22.applyInverseTo(vector3D33);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray42 = rotation41.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D46, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = rotation41.applyInverseTo(vector3D46);
        double double55 = rotation41.getQ0();
        org.apache.commons.math.geometry.Rotation rotation56 = rotation22.applyInverseTo(rotation41);
        double double57 = rotation22.getQ3();
        double[][] doubleArray58 = rotation22.getMatrix();
        java.io.PrintWriter printWriter59 = printWriter5.printf("\u5fb7\u6587", (java.lang.Object[]) doubleArray58);
        printWriter59.print(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter65 = printWriter59.append((java.lang.CharSequence) "english", 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
        org.junit.Assert.assertNotNull(rotation56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(printWriter59);
    }

    @Test
    public void test14283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14283");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D16);
        double double19 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation5.revert();
        org.apache.commons.math.geometry.Vector3D vector3D21 = rotation20.getAxis();
        double double22 = rotation20.getQ2();
        double double23 = rotation20.getAngle();
        org.apache.commons.math.geometry.Rotation rotation24 = rotation20.revert();
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotation24.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation24.getAxis();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
    }

    @Test
    public void test14284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14284");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        java.lang.String str3 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.8230677854004599d), (-0.6655420184408231d), (-6782.273252612676d));
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder0.getA3();
        java.lang.String str9 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (byte) 10, (-52.0d), (-9990.0d));
        org.apache.commons.math.geometry.Rotation rotation19 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double20 = rotation19.getQ1();
        double double21 = rotation19.getQ0();
        double[][] doubleArray22 = rotation19.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation13.applyTo(rotation19);
        double[][] doubleArray24 = rotation23.getMatrix();
        double double25 = rotation23.getAngle();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YZY" + "'", str3, "YZY");
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "YZY" + "'", str9, "YZY");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test14285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14285");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder8.setRegion("");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getVariant();
        java.util.Locale.Builder builder15 = builder10.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.lang.String str22 = locale17.getDisplayLanguage(locale19);
        java.lang.String str24 = locale17.getExtension('u');
        java.util.Locale.Builder builder25 = builder15.setLocale(locale17);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale.Builder builder28 = builder25.setLocale(locale26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder28.setVariant("org.apache.commons.math.MathException: ja");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: org.apache.commons.math.MathException: ja [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test14286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14286");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        java.util.Locale locale15 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getLanguage();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter22.format(locale34, "ZXZ", (java.lang.Object[]) throwableArray42);
        java.io.PrintStream printStream45 = printStream13.printf(locale15, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray42);
        printStream13.println(0.0f);
        printStream13.print('a');
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream13, true);
        printStream13.println((-5.203623393651532E-5d));
        printStream13.println((int) 'x');
        java.io.PrintStream printStream57 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream59 = printStream57.append((java.lang.CharSequence) "ko-KR");
        printStream57.println((java.lang.Object) (short) 10);
        java.io.PrintStream printStream63 = printStream57.append('x');
        printStream13.println((java.lang.Object) printStream57);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertEquals(locale15.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(printStream63);
    }

    @Test
    public void test14287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14287");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-0.6692079985630428d), 0.479425538604203d);
        double double3 = vector3D2.getNorm();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.9999999999999999d + "'", double3 == 0.9999999999999999d);
    }

    @Test
    public void test14288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14288");
        java.util.Locale locale2 = new java.util.Locale("Italian", "zxz_FRAN\347AIS");
        java.lang.String str3 = locale2.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for italian");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "italian_ZXZ_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "italian" + "'", str3, "italian");
    }

    @Test
    public void test14289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14289");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        java.util.Locale locale15 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getLanguage();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter22.format(locale34, "ZXZ", (java.lang.Object[]) throwableArray42);
        java.io.PrintStream printStream45 = printStream13.printf(locale15, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray42);
        printStream13.println(0.0f);
        printStream13.print('a');
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream13, true);
        printStream13.print((float) 100L);
        printStream13.print((float) 10L);
        printStream13.println(false);
        java.io.PrintStream printStream59 = printStream13.append(' ');
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertEquals(locale15.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(printStream59);
    }

    @Test
    public void test14290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14290");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        double double15 = rotation5.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
    }

    @Test
    public void test14291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14291");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String[] strArray8 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream9 = printStream4.format(locale6, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        printStream4.println(10.0f);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter20.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray30 = rotation29.getMatrix();
        java.io.PrintWriter printWriter31 = printWriter20.format("en", (java.lang.Object[]) doubleArray30);
        java.io.PrintStream printStream32 = printStream4.printf("YZY", (java.lang.Object[]) doubleArray30);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray30);
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException38);
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray43, (java.lang.Throwable) mathException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray43, (java.lang.Throwable) mathException47);
        java.lang.Throwable[] throwableArray50 = mathException47.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException51 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray50);
        mathException39.addSuppressed((java.lang.Throwable) notARotationMatrixException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("TWN", (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) doubleArray30, (java.lang.Throwable) mathException39);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException55 = new org.apache.commons.math.geometry.NotARotationMatrixException("Japanisch", (java.lang.Object[]) doubleArray30);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test14292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14292");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("angl\350s", "Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Chinese (Taiwan)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14293");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder1, 0.0d, 52.0d, (double) (byte) 1);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation7 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation8 = rotation5.revert();
        double[][] doubleArray9 = rotation8.getMatrix();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException10 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4\ub300\ub9cc)", (java.lang.Object[]) doubleArray9);
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation(doubleArray9, 0.7756610118220089d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation(doubleArray9, (double) (short) 100);
        org.apache.commons.math.geometry.Vector3D vector3D15 = rotation14.getAxis();
        double[][] doubleArray16 = rotation14.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation(doubleArray16, 0.18998822293489467d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(doubleArray16, (-2.141592653589793d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.567725116225552d + "'", double6 == 0.567725116225552d);
        org.junit.Assert.assertNotNull(rotation7);
        org.junit.Assert.assertNotNull(rotation8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test14294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14294");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = printWriter11.append(' ');
        printWriter13.println((-7.180266874456925d));
        printWriter13.print((long) (short) 1);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test14295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14295");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        printWriter4.print((int) (byte) -1);
        printWriter4.println((float) 10);
        printWriter4.println();
    }

    @Test
    public void test14296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14296");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.0d, 52.0d, (double) (byte) 1);
        double double5 = rotation4.getQ0();
        double double6 = rotation4.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotation4.getAxis();
        double double8 = vector3D7.getX();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.567725116225552d + "'", double5 == 0.567725116225552d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.567725116225552d + "'", double6 == 0.567725116225552d);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-0.44409853813277034d) + "'", double8 == (-0.44409853813277034d));
    }

    @Test
    public void test14297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14297");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayLanguage(locale2);
        java.lang.String str6 = locale2.getDisplayName();
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.lang.String str8 = locale2.getDisplayVariant(locale7);
        boolean boolean9 = locale2.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French" + "'", str6, "French");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14298");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        java.lang.String str3 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 1.2220476682666177d, 0.0d, (double) (short) 10);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.0d), (double) (short) 100, (double) '4');
        org.apache.commons.math.geometry.Rotation rotation12 = rotation11.revert();
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.RotationOrder rotationOrder14 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D15 = rotationOrder14.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotationOrder14.getA2();
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D23 = rotation22.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D33 = vector3D25.subtract((double) 10L, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = vector3D25.scalarMultiply((double) 0);
        org.apache.commons.math.geometry.Vector3D vector3D36 = vector3D23.subtract(vector3D25);
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation(vector3D16, vector3D23);
        double double38 = vector3D23.getX();
        org.apache.commons.math.geometry.Vector3D vector3D40 = vector3D23.scalarMultiply(0.7060543458962302d);
        org.apache.commons.math.geometry.Vector3D vector3D41 = rotation12.applyInverseTo(vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) 100L, (double) 0.0f);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation(vector3D44, 614795.4656673663d);
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D41.subtract(vector3D44);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YZY" + "'", str3, "YZY");
        org.junit.Assert.assertNotNull(rotation12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.6242551692222774d) + "'", double13 == (-0.6242551692222774d));
        org.junit.Assert.assertNotNull(rotationOrder14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-0.995037190209989d) + "'", double38 == (-0.995037190209989d));
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D47);
    }

    @Test
    public void test14299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14299");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        printWriter5.print(' ');
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (short) 1, 1.7607846147136124d, 1.0d, false);
        org.apache.commons.math.geometry.Rotation rotation27 = rotation26.revert();
        double[][] doubleArray28 = rotation27.getMatrix();
        double[][] doubleArray29 = rotation27.getMatrix();
        java.io.PrintWriter printWriter30 = printWriter5.format("", (java.lang.Object[]) doubleArray29);
        printWriter30.write("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        java.io.PrintWriter printWriter34 = printWriter30.append(' ');
        java.lang.Class<?> wildcardClass35 = printWriter34.getClass();
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test14300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14300");
        java.util.Locale locale2 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale3);
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.lang.String str8 = locale3.getDisplayLanguage(locale6);
        java.lang.String str9 = locale2.getDisplayVariant(locale6);
        java.util.Locale.setDefault(locale6);
        java.util.Set<java.lang.Character> charSet11 = locale6.getExtensionKeys();
        java.util.Locale locale14 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str17 = locale14.getExtension('x');
        java.lang.String str18 = locale14.getDisplayVariant();
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale14.getDisplayVariant(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = locale6.getDisplayCountry(locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u97d3\u6587" + "'", str8, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charSet11);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zxz_fran\347ais" + "'", str15, "zxz_fran\347ais");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test14301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14301");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zxz (ko_kr)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test14302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14302");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale9 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str10 = locale9.getDisplayVariant();
        java.util.Locale locale13 = new java.util.Locale("Italy", "US");
        java.lang.String str14 = locale9.getDisplayScript(locale13);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale13);
        java.util.Locale.Builder builder17 = builder15.setVariant("");
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder22 = builder18.setLanguage("ZXZ");
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder24 = builder18.setLocale(locale23);
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder26 = builder18.setLocale(locale25);
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale25.getDisplayScript();
        java.util.Locale.Builder builder29 = builder17.setLocale(locale25);
        java.util.Locale.Builder builder31 = builder17.setLanguageTag("italy");
        java.util.Locale.Builder builder32 = builder17.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale13.toString(), "italy_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test14303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14303");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        double double15 = rotation5.getQ0();
        double double16 = rotation5.getQ0();
        double[][] doubleArray17 = rotation5.getMatrix();
        double double18 = rotation5.getQ2();
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D(1.7607846147136124d, (double) (byte) -1);
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double29 = rotation28.getQ1();
        double double30 = rotation28.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D40 = vector3D32.subtract((double) 10L, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D41 = rotation28.applyInverseTo(vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D42 = vector3D21.subtract(1.7607846147136124d, vector3D39);
        double double43 = vector3D42.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (-1), 0.0d);
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation(vector3D42, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation5.applyInverseTo(vector3D42);
        double double49 = rotation5.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.2792393947944187d) + "'", double43 == (-1.2792393947944187d));
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
    }

    @Test
    public void test14304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14304");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        java.lang.String[] strArray8 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter9 = printWriter6.printf("ko-KR", (java.lang.Object[]) strArray8);
        printWriter9.println(0.0d);
        printWriter9.write(0);
        java.io.PrintWriter printWriter15 = printWriter9.append('4');
        printWriter15.write("German");
        boolean boolean18 = printWriter15.checkError();
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("ko_KR");
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String[] strArray28 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream29 = printStream24.format(locale26, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream24, false);
        printStream24.println(10.0f);
        java.lang.String[] strArray36 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36);
        java.io.PrintStream printStream38 = printStream24.format("\u97d3\u6587", (java.lang.Object[]) strArray36);
        printStream24.flush();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream24, false);
        printWriter41.write((int) (byte) 10);
        java.io.PrintStream printStream47 = new java.io.PrintStream("ko-KR");
        printStream47.close();
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream47, false);
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.Writer) printWriter50);
        printWriter50.println((float) (byte) -1);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.Writer) printWriter50, true);
        org.apache.commons.math.geometry.Rotation rotation62 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double63 = rotation62.getQ0();
        org.apache.commons.math.geometry.Rotation rotation69 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double70 = rotation69.getQ0();
        org.apache.commons.math.geometry.Rotation rotation71 = rotation62.applyTo(rotation69);
        double double72 = rotation62.getQ0();
        double double73 = rotation62.getQ0();
        double[][] doubleArray74 = rotation62.getMatrix();
        java.io.PrintWriter printWriter75 = printWriter55.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray74);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR");
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Object[]) doubleArray74, (java.lang.Throwable) mathException77);
        java.io.PrintWriter printWriter79 = printWriter41.printf("\u5fb7\u6587", (java.lang.Object[]) doubleArray74);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException80 = new org.apache.commons.math.geometry.NotARotationMatrixException("YZX", (java.lang.Object[]) doubleArray74);
        java.io.PrintWriter printWriter81 = printWriter15.format(locale20, "ko", (java.lang.Object[]) doubleArray74);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("XZY");
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException83);
        java.lang.Object[] objArray85 = mathException83.getArguments();
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("chinois (Chine)", (java.lang.Object[]) doubleArray74, (java.lang.Throwable) mathException83);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 52.0d + "'", double63 == 52.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 52.0d + "'", double70 == 52.0d);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 52.0d + "'", double72 == 52.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 52.0d + "'", double73 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
    }

    @Test
    public void test14305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14305");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str20 = locale13.getDisplayScript(locale19);
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream22, false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter25);
        printWriter26.close();
        java.util.Locale locale29 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter26.println((java.lang.Object) locale29);
        java.util.Set<java.lang.Character> charSet31 = locale29.getExtensionKeys();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder37 = builder32.setExtension('u', "");
        java.util.Locale.Builder builder39 = builder37.setVariant("");
        java.util.Locale locale40 = builder39.build();
        java.lang.String str41 = locale29.getDisplayName(locale40);
        java.lang.String str42 = locale13.getDisplayName(locale40);
        java.lang.String str43 = locale13.getDisplayCountry();
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("YZY");
        java.lang.String str49 = locale45.getDisplayCountry(locale48);
        java.lang.String str50 = locale48.getDisplayLanguage();
        java.lang.String str51 = locale13.getDisplayScript(locale48);
        java.util.Set<java.lang.String> strSet52 = locale13.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale29.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str41, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "German (Germany)" + "'", str42, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u5fb7\u570b" + "'", str43, "\u5fb7\u570b");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "yzy");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "yzy" + "'", str50, "yzy");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
    }

    @Test
    public void test14306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14306");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation16.getAxis();
        printWriter4.print((java.lang.Object) rotation16);
        printWriter4.close();
        printWriter4.print(false);
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String[] strArray28 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream29 = printStream24.format(locale26, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream24, false);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream31);
        printStream31.print((-52.0d));
        java.io.PrintStream printStream36 = new java.io.PrintStream("ko-KR");
        printStream36.close();
        java.util.Locale locale38 = java.util.Locale.UK;
        java.lang.String[] strArray40 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream41 = printStream36.format(locale38, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray40);
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream36, false);
        printStream36.println(10.0f);
        java.lang.String[] strArray48 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray48);
        java.io.PrintStream printStream50 = printStream36.format("\u97d3\u6587", (java.lang.Object[]) strArray48);
        printStream36.println((long) (short) 1);
        java.io.PrintStream printStream54 = printStream36.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.io.PrintStream printStream56 = new java.io.PrintStream("ko-KR");
        printStream56.close();
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter((java.io.OutputStream) printStream56, false);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.Writer) printWriter59);
        char[] charArray63 = new char[] { ' ', 'x' };
        printWriter60.write(charArray63);
        java.io.PrintWriter printWriter66 = printWriter60.append((java.lang.CharSequence) "Canada");
        boolean boolean67 = printWriter66.checkError();
        java.io.PrintStream printStream69 = new java.io.PrintStream("ko-KR");
        printStream69.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream69, false);
        java.io.PrintStream printStream74 = printStream69.append((java.lang.CharSequence) "en");
        printStream69.print((int) ' ');
        printStream69.println((double) 100.0f);
        java.io.PrintStream printStream80 = new java.io.PrintStream("ko-KR");
        printStream80.close();
        java.io.PrintWriter printWriter83 = new java.io.PrintWriter((java.io.OutputStream) printStream80, false);
        java.io.PrintWriter printWriter84 = new java.io.PrintWriter((java.io.Writer) printWriter83);
        char[] charArray87 = new char[] { ' ', 'x' };
        printWriter84.write(charArray87);
        printStream69.print(charArray87);
        printWriter66.write(charArray87);
        printStream36.print(charArray87);
        printStream31.print(charArray87);
        printWriter4.print(charArray87);
        java.io.PrintWriter printWriter95 = printWriter4.append('4');
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter95);
    }

    @Test
    public void test14307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14307");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Canada");
        java.lang.String str6 = locale1.getDisplayScript(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "canada");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test14308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14308");
        java.util.Locale locale1 = new java.util.Locale("CHN");
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "chn");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "chn" + "'", str2, "chn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test14309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14309");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter8.println(0.0d);
        printWriter8.write(0);
        java.io.PrintWriter printWriter14 = printWriter8.append('4');
        printWriter14.print((double) 'a');
        printWriter14.print((double) (short) 100);
        printWriter14.print(true);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter14, true);
        printWriter22.println();
        boolean boolean24 = printWriter22.checkError();
        printWriter22.println((long) 0);
        printWriter22.print("Taiwan");
        java.io.PrintStream printStream31 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray36 = new char[] { ' ', 'a', '#', 'a' };
        printStream31.println(charArray36);
        printStream31.print(false);
        printStream31.println((float) (short) -1);
        printStream31.print("\u7fa9\u5927\u5229\u6587");
        printStream31.println();
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream31, true);
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray55 = rotation54.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D66 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D59, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D67 = rotation54.applyInverseTo(vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D68 = rotation54.getAxis();
        org.apache.commons.math.geometry.Rotation rotation69 = rotation54.revert();
        double[][] doubleArray70 = rotation69.getMatrix();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException71 = new org.apache.commons.math.geometry.NotARotationMatrixException("zho", (java.lang.Object[]) doubleArray70);
        java.io.PrintStream printStream72 = printStream46.format("german (KOR)", (java.lang.Object[]) doubleArray70);
        java.io.PrintWriter printWriter73 = printWriter22.printf("Korean", (java.lang.Object[]) doubleArray70);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotation69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(printStream72);
        org.junit.Assert.assertNotNull(printWriter73);
    }

    @Test
    public void test14310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14310");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("en_CA");
        java.io.PrintWriter printWriter3 = printWriter1.append('#');
        printWriter1.print(false);
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream12 = printStream7.format(locale9, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream((java.io.OutputStream) printStream7, false);
        java.util.Locale locale15 = java.util.Locale.US;
        java.lang.Object[] objArray17 = null;
        java.io.PrintStream printStream18 = printStream14.format(locale15, "\uc911\uad6d\uc5b4", objArray17);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream22, false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter25);
        printWriter25.println((float) (byte) -1);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter25, true);
        java.lang.String[] strArray32 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter33 = printWriter25.printf("KR", (java.lang.Object[]) strArray32);
        java.io.PrintStream printStream35 = new java.io.PrintStream("ko-KR");
        printStream35.close();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream35, false);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.Writer) printWriter38);
        char[] charArray42 = new char[] { ' ', 'x' };
        printWriter39.write(charArray42);
        printWriter25.println(charArray42);
        printWriter20.println(charArray42);
        printWriter1.print(charArray42);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ , x]");
    }

    @Test
    public void test14311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14311");
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D3, (double) (byte) 100, vector3D5);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D5, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D23, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D10, (double) (byte) 1, vector3D18, (double) (short) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D32 = vector3D10.negate();
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D38, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D38, (double) 0.0f, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D52.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D33, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D33.negate();
        double double57 = vector3D56.getAlpha();
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test14312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14312");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintStream printStream16 = printStream11.append((java.lang.CharSequence) "en");
        char[] charArray23 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream16.println(charArray23);
        printWriter4.println(charArray23);
        java.io.PrintWriter printWriter27 = printWriter4.append(' ');
        printWriter27.println("org.apache.commons.math.geometry.NotARotationMatrixException: ko-KR");
        printWriter27.println((-9.479526035547039d));
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  , #, a, #, x]");
        org.junit.Assert.assertNotNull(printWriter27);
    }

    @Test
    public void test14313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14313");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation6.applyInverseTo(rotation12);
        org.apache.commons.math.geometry.Vector3D vector3D15 = rotation6.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D19, (double) (byte) 100, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D24, (double) (byte) 100, vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D21, vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D37, (double) (byte) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D39, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D26, (double) (byte) 1, vector3D34, (double) (short) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D48 = vector3D26.negate();
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D48.subtract(vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) 'u', 1.6704649792860586d, (-0.995037190209989d));
        org.apache.commons.math.geometry.Vector3D vector3D64 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        double double65 = vector3D64.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D15, (-1.2792393947944187d), vector3D53, 1.2220476682666177d, vector3D59, 623129.1985591752d, vector3D64);
        double double67 = vector3D53.getX();
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.33667481938672716d + "'", double65 == 0.33667481938672716d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
    }

    @Test
    public void test14314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14314");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        printStream1.close();
        printStream1.print(1);
        printStream1.write((int) (short) 100);
        java.io.PrintStream printStream14 = printStream1.append('4');
        java.util.Locale locale16 = new java.util.Locale("\u4e2d\u6587");
        java.lang.String str17 = locale16.getDisplayCountry();
        java.lang.String str18 = locale16.getDisplayScript();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray25 = mathException24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = mathException24.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException27 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray26);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException28 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray26);
        java.lang.Throwable[] throwableArray29 = notARotationMatrixException28.getSuppressed();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("zho", (java.lang.Object[]) throwableArray29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.geometry.NotARotationMatrixException: zxz (KO_KR)");
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray29, (java.lang.Throwable) mathException32);
        java.io.PrintStream printStream34 = printStream1.format(locale16, "\u5fb7\u6587\u6cd5\u6587)", (java.lang.Object[]) throwableArray29);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertEquals(locale16.toString(), "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(printStream34);
    }

    @Test
    public void test14315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14315");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D2);
        org.apache.commons.math.geometry.Vector3D vector3D4 = vector3D2.negate();
        org.apache.commons.math.geometry.RotationOrder rotationOrder8 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder8.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D15, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D15, (double) 0.0f, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D31 = vector3D29.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) '#', vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D32);
        double double34 = vector3D32.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D(1.1371520128307702d, vector3D4, 0.8623188722876843d, vector3D32);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(rotationOrder8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
    }

    @Test
    public void test14316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14316");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ITA", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap5);
        java.util.Locale locale9 = new java.util.Locale("fran\347ais", "\u6cd5\u6587");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale11 = locale9.stripExtensions();
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet12);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "fran\347\u6cd5\u6587");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "fran\347\u6cd5\u6587");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strList13);
    }

    @Test
    public void test14317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14317");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale11);
        java.util.Locale.setDefault(locale9);
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ0();
        org.apache.commons.math.geometry.Rotation rotation31 = rotation22.applyTo(rotation29);
        org.apache.commons.math.geometry.Rotation rotation32 = rotation22.revert();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double39 = rotation38.getQ0();
        org.apache.commons.math.geometry.Rotation rotation40 = rotation22.applyInverseTo(rotation38);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double47 = rotation46.getQ1();
        double double48 = rotation46.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D50.subtract((double) 10L, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotation46.applyInverseTo(vector3D57);
        org.apache.commons.math.geometry.Rotation rotation60 = rotation22.applyInverseTo(rotation46);
        double[][] doubleArray61 = rotation22.getMatrix();
        java.io.PrintStream printStream62 = printStream8.format(locale9, "und", (java.lang.Object[]) doubleArray61);
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder65 = builder63.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder67 = builder63.setLanguage("ZXZ");
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder69 = builder63.setLocale(locale68);
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder71 = builder63.setLocale(locale70);
        java.util.Locale.Builder builder73 = builder63.setLanguage("fra");
        java.util.Locale.Builder builder75 = builder73.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder76 = builder73.clearExtensions();
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.util.Locale.Category category78 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category79 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.lang.String str81 = locale80.getDisplayLanguage();
        java.util.Locale.setDefault(category79, locale80);
        java.util.Locale.setDefault(category78, locale80);
        java.lang.String str84 = locale77.getDisplayVariant(locale80);
        java.util.Locale.Builder builder85 = builder73.setLocale(locale80);
        java.lang.String[] strArray89 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray89);
        java.lang.Object[] objArray91 = mathException90.getArguments();
        java.lang.String str92 = mathException90.getPattern();
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException90);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException90);
        java.lang.Object[] objArray95 = mathException90.getArguments();
        java.io.PrintStream printStream96 = printStream8.printf(locale80, "hi!", objArray95);
        java.io.PrintWriter printWriter97 = new java.io.PrintWriter((java.io.OutputStream) printStream96);
        printWriter97.print('#');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertTrue("'" + category78 + "' != '" + java.util.Locale.Category.FORMAT + "'", category78.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category79 + "' != '" + java.util.Locale.Category.FORMAT + "'", category79.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ZXZ" + "'", str92, "ZXZ");
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream96);
    }

    @Test
    public void test14318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14318");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YXZ;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D3 = vector3D1.scalarMultiply((-0.02786191713456967d));
        double double4 = vector3D1.getX();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test14319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14319");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotation5.applyInverseTo(vector3D15);
        double double17 = vector3D16.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D16.negate();
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D22, vector3D27);
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double38 = rotation37.getQ1();
        double double39 = rotation37.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D49 = vector3D41.subtract((double) 10L, vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D50 = rotation37.applyInverseTo(vector3D48);
        org.apache.commons.math.geometry.Rotation rotation56 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray57 = rotation56.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D59, (double) (byte) 100, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D66 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D64, (double) (byte) 100, vector3D66);
        org.apache.commons.math.geometry.Vector3D vector3D68 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D61, vector3D66);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotation56.applyInverseTo(vector3D61);
        double double70 = rotation56.getQ0();
        org.apache.commons.math.geometry.Rotation rotation71 = rotation37.applyInverseTo(rotation56);
        org.apache.commons.math.geometry.Vector3D vector3D75 = new org.apache.commons.math.geometry.Vector3D((double) 'x', (double) 1.0f, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D76 = rotation37.applyInverseTo(vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D(1.7607846147136124d, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = vector3D22.add((double) (-1L), vector3D77);
        org.apache.commons.math.geometry.Vector3D vector3D79 = vector3D18.add(vector3D22);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.4869163399816042d) + "'", double17 == (-0.4869163399816042d));
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 52.0d + "'", double70 == 52.0d);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
    }

    @Test
    public void test14320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14320");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream8 = printStream3.format(locale5, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ko-KR");
        printStream10.close();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream10, false);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter13);
        char[] charArray17 = new char[] { ' ', 'x' };
        printWriter14.write(charArray17);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        java.lang.String str22 = locale19.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray30 = rotation29.getMatrix();
        java.io.PrintWriter printWriter31 = printWriter14.format(locale19, "YZY", (java.lang.Object[]) doubleArray30);
        java.lang.String str32 = locale5.getDisplayCountry(locale19);
        java.lang.String str33 = locale0.getDisplayVariant(locale5);
        java.lang.String str34 = locale0.getDisplayVariant();
        java.io.PrintStream printStream36 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray40 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray40, (java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray40, (java.lang.Throwable) mathException44);
        java.lang.Throwable[] throwableArray47 = mathException44.getSuppressed();
        java.io.PrintStream printStream48 = printStream36.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray47);
        java.util.Locale locale50 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream53 = new java.io.PrintStream("ko-KR");
        printStream53.close();
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.OutputStream) printStream53, false);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.Writer) printWriter56);
        printWriter57.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation66 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray67 = rotation66.getMatrix();
        java.io.PrintWriter printWriter68 = printWriter57.format("en", (java.lang.Object[]) doubleArray67);
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.lang.String str71 = locale69.getDisplayCountry(locale70);
        java.lang.String str72 = locale69.getLanguage();
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray76 = mathException75.getSuppressed();
        java.lang.Throwable[] throwableArray77 = mathException75.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException78 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray77);
        java.io.PrintWriter printWriter79 = printWriter57.format(locale69, "ZXZ", (java.lang.Object[]) throwableArray77);
        java.io.PrintStream printStream80 = printStream48.printf(locale50, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray77);
        java.util.Set<java.lang.Character> charSet81 = locale50.getExtensionKeys();
        java.lang.String str82 = locale0.getDisplayLanguage(locale50);
        java.util.Locale locale83 = java.util.Locale.ROOT;
        java.util.Locale.Category category84 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category85 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale86 = java.util.Locale.ROOT;
        java.lang.String str87 = locale86.getDisplayLanguage();
        java.util.Locale.setDefault(category85, locale86);
        java.util.Locale.setDefault(category84, locale86);
        java.lang.String str90 = locale83.getDisplayVariant(locale86);
        java.util.Locale locale91 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet92 = locale91.getUnicodeLocaleKeys();
        java.lang.String str93 = locale86.getDisplayCountry(locale91);
        java.lang.String str94 = locale91.getDisplayName();
        java.lang.String str95 = locale91.getISO3Language();
        java.util.Set<java.lang.Character> charSet96 = locale91.getExtensionKeys();
        java.lang.String str97 = locale0.getDisplayScript(locale91);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , x]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "United Kingdom" + "'", str32, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertEquals(locale50.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "en" + "'", str72, "en");
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(charSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Korean" + "'", str82, "Korean");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertTrue("'" + category84 + "' != '" + java.util.Locale.Category.FORMAT + "'", category84.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category85 + "' != '" + java.util.Locale.Category.FORMAT + "'", category85.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "German (Germany)" + "'", str94, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "deu" + "'", str95, "deu");
        org.junit.Assert.assertNotNull(charSet96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test14321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14321");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale10.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray21 = rotation20.getMatrix();
        java.io.PrintWriter printWriter22 = printWriter5.format(locale10, "YZY", (java.lang.Object[]) doubleArray21);
        printWriter22.print((-1L));
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.lang.String str26 = locale25.getScript();
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray31, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray36 = mathException35.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray31, (java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray38 = mathException35.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException39 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray38);
        java.lang.Throwable[] throwableArray40 = notARotationMatrixException39.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter22.printf(locale25, "CHN", (java.lang.Object[]) throwableArray40);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("\u97d3\u6587)");
        java.lang.String str44 = locale25.getDisplayVariant(locale43);
        java.lang.String str45 = locale25.getISO3Country();
        java.util.Set<java.lang.String> strSet46 = locale25.getUnicodeLocaleAttributes();
        java.io.PrintStream printStream48 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale52 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category53 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        boolean boolean55 = locale54.hasExtensions();
        java.util.Locale.setDefault(category53, locale54);
        java.lang.String str57 = locale52.getDisplayName(locale54);
        java.lang.String str58 = locale54.getDisplayName();
        java.lang.String str59 = locale49.getDisplayLanguage(locale54);
        printStream48.println((java.lang.Object) locale54);
        java.lang.String str61 = locale54.getCountry();
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category63 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = locale64.getDisplayLanguage();
        java.util.Locale.setDefault(category63, locale64);
        java.util.Locale.setDefault(category62, locale64);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale64.getDisplayLanguage(locale68);
        java.lang.String str70 = locale64.getDisplayLanguage();
        java.lang.String str71 = locale54.getDisplayName(locale64);
        java.lang.String str72 = locale25.getDisplayName(locale64);
        java.lang.String str73 = locale25.getLanguage();
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "CHN" + "'", str45, "CHN");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category53.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u97d3\u6587)" + "'", str57, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English" + "'", str58, "English");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "English" + "'", str59, "English");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.FORMAT + "'", category63.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "English" + "'", str71, "English");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Chinese (China)" + "'", str72, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zh" + "'", str73, "zh");
    }

    @Test
    public void test14322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14322");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        printStream1.print((double) 1.0f);
        printStream1.print((float) 1L);
        printStream1.println(false);
        printStream1.println('a');
        java.io.PrintStream printStream17 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream19 = printStream17.append((java.lang.CharSequence) "ko-KR");
        printStream17.print("");
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String[] strArray28 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream29 = printStream24.format(locale26, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream24, false);
        printStream24.println(10.0f);
        java.io.PrintStream printStream36 = new java.io.PrintStream("ko-KR");
        printStream36.close();
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream36, false);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.Writer) printWriter39);
        printWriter40.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray50 = rotation49.getMatrix();
        java.io.PrintWriter printWriter51 = printWriter40.format("en", (java.lang.Object[]) doubleArray50);
        java.io.PrintStream printStream52 = printStream24.printf("YZY", (java.lang.Object[]) doubleArray50);
        java.io.PrintStream printStream54 = new java.io.PrintStream("ko-KR");
        printStream54.close();
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.OutputStream) printStream54, false);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.Writer) printWriter57);
        char[] charArray63 = new char[] { '4', 'a', ' ', ' ' };
        printWriter57.write(charArray63);
        printStream24.print(charArray63);
        printStream17.println(charArray63);
        printStream1.println(charArray63);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[4, a,  ,  ]");
    }

    @Test
    public void test14323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14323");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation22 = rotation15.applyTo(rotation21);
        org.apache.commons.math.geometry.Rotation rotation23 = rotation22.revert();
        double double24 = rotation23.getAngle();
        double double25 = rotation23.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation22);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-62.0d) + "'", double25 == (-62.0d));
    }

    @Test
    public void test14324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14324");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA3();
        java.lang.String str3 = rotationOrder0.toString();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "XYZ" + "'", str1, "XYZ");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "XYZ" + "'", str3, "XYZ");
    }

    @Test
    public void test14325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14325");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray12 = rotation11.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D19, (double) (byte) 100, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D16, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D24 = rotation11.applyInverseTo(vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotation11.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation5.applyInverseTo(vector3D25);
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = rotation32.applyTo(vector3D34);
        double double39 = rotation32.getAngle();
        double double40 = rotation32.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D51 = vector3D43.subtract((double) 10L, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D53 = rotation32.applyTo(vector3D52);
        double double54 = vector3D53.getY();
        org.apache.commons.math.geometry.Vector3D vector3D55 = rotation5.applyInverseTo(vector3D53);
        double double56 = rotation5.getQ1();
        double double57 = rotation5.getAngle();
        double double58 = rotation5.getQ3();
        org.apache.commons.math.geometry.Rotation rotation64 = new org.apache.commons.math.geometry.Rotation((-0.2310416095471484d), 0.9399422300421527d, 0.3338737790442066d, 0.13715201283077028d, true);
        org.apache.commons.math.geometry.Rotation rotation65 = rotation5.applyTo(rotation64);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 9610.932890332206d + "'", double54 == 9610.932890332206d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(rotation65);
    }

    @Test
    public void test14326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14326");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter29.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray40);
        printWriter29.write("fran\347ais");
        printWriter29.print((int) (byte) 10);
        printWriter29.println((long) (-1));
        printWriter29.print(0.0f);
        java.io.PrintWriter printWriter51 = printWriter29.append((java.lang.CharSequence) "Germania");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test14327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14327");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.flush();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter18.print(false);
        java.io.PrintWriter printWriter22 = printWriter18.append(' ');
        printWriter18.write("org.apache.commons.math.geometry.NotARotationMatrixException: ja");
        printWriter18.print("org.apache.commons.math.MathException: org.apache.commons.math.MathException: zxz (KO_KR)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test14328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14328");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder16 = builder4.clearExtensions();
        java.util.Locale.Builder builder17 = builder4.clear();
        java.util.Locale.Builder builder18 = builder4.clear();
        java.util.Locale.Builder builder19 = builder4.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French" + "'", str11, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test14329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14329");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println(' ');
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println();
        printStream1.println((int) ' ');
        printStream1.println((-43.364388609539944d));
        org.apache.commons.math.geometry.Rotation rotation19 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double26 = rotation25.getQ0();
        org.apache.commons.math.geometry.Rotation rotation27 = rotation19.applyInverseTo(rotation25);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D31, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D39 = rotation27.applyTo(vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = rotation27.getAxis();
        org.apache.commons.math.geometry.Rotation rotation41 = rotation27.revert();
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double48 = rotation47.getQ0();
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double55 = rotation54.getQ0();
        org.apache.commons.math.geometry.Rotation rotation56 = rotation47.applyTo(rotation54);
        org.apache.commons.math.geometry.Rotation rotation57 = rotation47.revert();
        org.apache.commons.math.geometry.Rotation rotation63 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation64 = rotation57.applyTo(rotation63);
        org.apache.commons.math.geometry.Rotation rotation65 = rotation41.applyTo(rotation63);
        org.apache.commons.math.geometry.Vector3D vector3D69 = new org.apache.commons.math.geometry.Vector3D((double) '#', (double) 10, (double) (-1.0f));
        org.apache.commons.math.geometry.Vector3D vector3D70 = rotation63.applyInverseTo(vector3D69);
        printStream1.println((java.lang.Object) rotation63);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
        org.junit.Assert.assertNotNull(rotation56);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(vector3D70);
    }

    @Test
    public void test14330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14330");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale18 = null;
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double32 = rotation31.getQ0();
        org.apache.commons.math.geometry.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotation31.getAxis();
        double double35 = rotation31.getQ1();
        double[][] doubleArray36 = rotation31.getMatrix();
        java.io.PrintStream printStream37 = printStream17.printf(locale18, "United States", (java.lang.Object[]) doubleArray36);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream17);
        java.io.PrintStream printStream39 = new java.io.PrintStream((java.io.OutputStream) printStream38);
        printStream38.print('x');
        printStream38.flush();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(printStream37);
    }

    @Test
    public void test14331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14331");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print((float) ' ');
        printStream1.println(true);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter19.println((float) (byte) -1);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter19, true);
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter27 = printWriter19.printf("KR", (java.lang.Object[]) strArray26);
        printWriter27.print((double) 0.0f);
        printWriter27.println("zxz (KO_KR)");
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter36);
        char[] charArray40 = new char[] { ' ', 'x' };
        printWriter37.write(charArray40);
        printWriter37.write((int) (byte) 1);
        java.io.PrintStream printStream45 = new java.io.PrintStream("ko-KR");
        printStream45.close();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream45, false);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter48);
        java.lang.String[] strArray51 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter52 = printWriter49.printf("ko-KR", (java.lang.Object[]) strArray51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        double double58 = vector3D56.getNorm();
        printWriter49.println((java.lang.Object) vector3D56);
        java.io.PrintStream printStream61 = new java.io.PrintStream("ko-KR");
        printStream61.close();
        java.io.PrintStream printStream64 = new java.io.PrintStream("ko-KR");
        printStream64.close();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream64, false);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.Writer) printWriter67);
        char[] charArray73 = new char[] { '4', 'a', ' ', ' ' };
        printWriter67.write(charArray73);
        printStream61.print(charArray73);
        printWriter49.print(charArray73);
        printWriter37.println(charArray73);
        printWriter27.println(charArray73);
        printStream1.print(charArray73);
        java.io.PrintStream printStream81 = printStream1.append((java.lang.CharSequence) "English");
        printStream1.println(true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[ , x]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(printStream81);
    }

    @Test
    public void test14332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14332");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale locale6 = builder5.build();
        java.io.PrintStream printStream8 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray12 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray12, (java.lang.Throwable) mathException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray17 = mathException16.getSuppressed();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray12, (java.lang.Throwable) mathException16);
        java.lang.Throwable[] throwableArray19 = mathException16.getSuppressed();
        java.io.PrintStream printStream20 = printStream8.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray19);
        java.util.Locale locale22 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream25, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter28);
        printWriter29.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintWriter printWriter40 = printWriter29.format("en", (java.lang.Object[]) doubleArray39);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.lang.String str44 = locale41.getLanguage();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = mathException47.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException50 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray49);
        java.io.PrintWriter printWriter51 = printWriter29.format(locale41, "ZXZ", (java.lang.Object[]) throwableArray49);
        java.io.PrintStream printStream52 = printStream20.printf(locale22, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray49);
        java.util.Locale locale54 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleKeys();
        java.lang.String str56 = locale22.getDisplayVariant(locale54);
        java.util.Set<java.lang.String> strSet57 = locale54.getUnicodeLocaleKeys();
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.lang.String str62 = locale60.getDisplayScript(locale61);
        java.lang.String str63 = locale58.getDisplayLanguage(locale60);
        java.util.Locale.setDefault(locale58);
        java.util.Set<java.lang.String> strSet65 = locale58.getUnicodeLocaleKeys();
        java.lang.String str66 = locale54.getDisplayVariant(locale58);
        java.lang.String str67 = locale6.getDisplayLanguage(locale54);
        java.lang.Object obj68 = locale54.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertEquals(locale22.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en" + "'", str44, "en");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertEquals(locale54.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "xyz");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "xyz");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "xyz");
    }

    @Test
    public void test14333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14333");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray15 = rotation14.getMatrix();
        java.io.PrintWriter printWriter16 = printWriter5.format("en", (java.lang.Object[]) doubleArray15);
        printWriter16.write("CHN", (int) 'x', (-1));
        printWriter16.print(false);
        printWriter16.close();
        printWriter16.print(100L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(printWriter16);
    }

    @Test
    public void test14334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14334");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YXY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        java.lang.String str2 = rotationOrder0.toString();
        java.lang.String str3 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation(vector3D4, (-0.027465204694318915d));
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "YXY" + "'", str2, "YXY");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YXY" + "'", str3, "YXY");
        org.junit.Assert.assertNotNull(vector3D4);
    }

    @Test
    public void test14335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14335");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\uc774\ud0c8\ub9ac\uc544\uc5b4", "\u82f1\u570b");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ??");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14336");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.flush();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter18.print(false);
        java.io.PrintWriter printWriter22 = printWriter18.append((java.lang.CharSequence) "\u97d3\u6587");
        printWriter22.println((int) 'a');
        printWriter22.flush();
        java.util.Locale locale29 = new java.util.Locale("en-CA", "TWN", "ko-KR");
        java.lang.String str30 = locale29.getVariant();
        java.lang.String str31 = locale29.getCountry();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double39 = rotation38.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D40 = rotation38.getAxis();
        double[][] doubleArray41 = rotation38.getMatrix();
        java.io.PrintWriter printWriter42 = printWriter22.format(locale29, "", (java.lang.Object[]) doubleArray41);
        java.lang.String str43 = locale29.getCountry();
        java.lang.String str44 = locale29.getCountry();
        java.util.Set<java.lang.String> strSet45 = locale29.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertEquals(locale29.toString(), "en-ca_TWN_ko-KR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ko-KR" + "'", str30, "ko-KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "TWN" + "'", str31, "TWN");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "TWN" + "'", str43, "TWN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "TWN" + "'", str44, "TWN");
        org.junit.Assert.assertNotNull(strSet45);
    }

    @Test
    public void test14337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14337");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        printWriter4.println(charArray21);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale25.getVariant();
        java.lang.String[] strArray30 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter32 = printWriter4.printf(locale25, "English", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Locale locale35 = locale34.stripExtensions();
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        printWriter40.println((float) (byte) -1);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter40, true);
        java.lang.String[] strArray47 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter48 = printWriter40.printf("KR", (java.lang.Object[]) strArray47);
        java.io.PrintStream printStream50 = new java.io.PrintStream("ko-KR");
        printStream50.close();
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream50, false);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.Writer) printWriter53);
        char[] charArray57 = new char[] { ' ', 'x' };
        printWriter54.write(charArray57);
        printWriter40.println(charArray57);
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.lang.String str62 = locale60.getDisplayScript(locale61);
        java.lang.String str63 = locale61.getVariant();
        java.lang.String[] strArray66 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66);
        java.io.PrintWriter printWriter68 = printWriter40.printf(locale61, "English", (java.lang.Object[]) strArray66);
        java.lang.String str69 = locale61.getScript();
        java.lang.String str70 = locale34.getDisplayLanguage(locale61);
        printWriter33.print((java.lang.Object) str70);
        printWriter33.print((float) 1);
        printWriter33.println();
        printWriter33.close();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , x]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test14338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14338");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayLanguage(locale2);
        java.util.Locale locale6 = locale0.stripExtensions();
        java.util.Locale locale7 = locale0.stripExtensions();
        java.lang.String str8 = locale0.getDisplayCountry();
        java.lang.String str9 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test14339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14339");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        java.lang.String[] strArray21 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray21);
        mathException19.addSuppressed((java.lang.Throwable) mathException22);
        java.lang.Throwable[] throwableArray24 = mathException22.getSuppressed();
        java.io.PrintStream printStream25 = printStream15.format("French", (java.lang.Object[]) throwableArray24);
        printStream15.close();
        java.io.PrintStream printStream28 = printStream15.append((java.lang.CharSequence) "zho");
        printStream15.print("\ub3c5\uc77c");
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("YZY");
        java.lang.String str36 = locale32.getDisplayCountry(locale35);
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleKeys();
        java.io.PrintStream printStream41 = new java.io.PrintStream("ko-KR");
        printStream41.close();
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream41, false);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter44);
        char[] charArray48 = new char[] { ' ', 'x' };
        printWriter45.write(charArray48);
        printWriter45.write((int) (byte) 1);
        printWriter45.print((int) (short) 0);
        printWriter45.println("org.apache.commons.math.MathException: ZXZ");
        printWriter45.println('4');
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray60 = mathException59.getSuppressed();
        java.lang.Object[] objArray61 = mathException59.getArguments();
        java.io.PrintWriter printWriter62 = printWriter45.printf("\u97d3\u6587)", objArray61);
        java.io.PrintStream printStream63 = printStream15.printf(locale35, "japon\350s", objArray61);
        boolean boolean64 = locale35.hasExtensions();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "yzy");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "yzy" + "'", str37, "yzy");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test14340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14340");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        printWriter4.println(charArray21);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale25.getVariant();
        java.lang.String[] strArray30 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter32 = printWriter4.printf(locale25, "English", (java.lang.Object[]) strArray30);
        java.lang.String str33 = locale25.getScript();
        java.util.Locale locale34 = locale25.stripExtensions();
        java.util.Set<java.lang.Character> charSet35 = locale25.getExtensionKeys();
        java.lang.String str36 = locale25.toLanguageTag();
        java.util.Set<java.lang.String> strSet37 = locale25.getUnicodeLocaleKeys();
        java.io.PrintStream printStream39 = new java.io.PrintStream("ko-KR");
        printStream39.close();
        java.util.Locale locale41 = java.util.Locale.UK;
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream44 = printStream39.format(locale41, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray43);
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream39, false);
        java.io.PrintStream printStream48 = printStream39.append('4');
        java.io.PrintStream printStream50 = printStream39.append((java.lang.CharSequence) "hi!");
        printStream50.flush();
        java.io.PrintStream printStream52 = new java.io.PrintStream((java.io.OutputStream) printStream50);
        boolean boolean53 = locale25.equals((java.lang.Object) printStream50);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zh-TW" + "'", str36, "zh-TW");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printStream50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test14341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14341");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray43 = mathException40.getSuppressed();
        java.io.PrintStream printStream44 = printStream32.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray43);
        printStream44.println((long) 0);
        java.io.PrintStream printStream48 = new java.io.PrintStream("ko-KR");
        printStream48.close();
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream53 = printStream48.format(locale50, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray52);
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream48, false);
        printStream48.println(10.0f);
        java.io.PrintStream printStream60 = new java.io.PrintStream("ko-KR");
        printStream60.close();
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream60, false);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.Writer) printWriter63);
        printWriter64.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation73 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray74 = rotation73.getMatrix();
        java.io.PrintWriter printWriter75 = printWriter64.format("en", (java.lang.Object[]) doubleArray74);
        java.io.PrintStream printStream76 = printStream48.printf("YZY", (java.lang.Object[]) doubleArray74);
        java.io.PrintStream printStream77 = new java.io.PrintStream((java.io.OutputStream) printStream76);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) -1 };
        printStream76.write(byteArray80);
        printStream44.write(byteArray80);
        printStream29.write(byteArray80, 10, (int) (byte) 1);
        printStream29.print(0);
        printStream29.write((int) (byte) 1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, -1]");
    }

    @Test
    public void test14342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14342");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        printStream29.print(1);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintStream printStream38 = printStream33.append((java.lang.CharSequence) "en");
        char[] charArray45 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream38.println(charArray45);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream38);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 0 };
        printStream38.write(byteArray51, 1, (int) (short) 0);
        printStream29.write(byteArray51, (int) (byte) 1, (int) 'x');
        printStream29.println((long) (short) 1);
        printStream29.println();
        printStream29.println((int) (byte) 0);
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream29);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a,  , #, a, #, x]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 0]");
    }

    @Test
    public void test14343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14343");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.print(true);
        printStream1.println(' ');
        printStream1.print('a');
        boolean boolean12 = printStream1.checkError();
        printStream1.println((-12804.0d));
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1, true, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14344");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        printWriter5.print((int) 'u');
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter14);
        printWriter15.print((long) (short) 100);
        printWriter15.print((int) 'u');
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        printWriter24.println((float) (byte) -1);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter24, true);
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter32 = printWriter24.printf("KR", (java.lang.Object[]) strArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        char[] charArray41 = new char[] { ' ', 'x' };
        printWriter38.write(charArray41);
        printWriter24.println(charArray41);
        printWriter15.print(charArray41);
        printWriter5.write(charArray41);
        printWriter5.print((float) (byte) 100);
        java.io.PrintWriter printWriter49 = printWriter5.append((java.lang.CharSequence) "\u82f1\u56fd");
        printWriter49.print((long) '4');
        printWriter49.print("org.apache.commons.math.geometry.NotARotationMatrixException: x-lvariant-TWN");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test14345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14345");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream4, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        char[] charArray13 = new char[] { '4', 'a', ' ', ' ' };
        printWriter7.write(charArray13);
        printStream1.print(charArray13);
        java.lang.CharSequence charSequence16 = null;
        java.io.PrintStream printStream17 = printStream1.append(charSequence16);
        printStream17.print((-0.6692079985630428d));
        java.io.PrintStream printStream21 = printStream17.append('#');
        boolean boolean22 = printStream17.checkError();
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test14346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14346");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException2);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException3);
        java.lang.Throwable[] throwableArray5 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException3);
        java.io.PrintStream printStream10 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray15 = new char[] { ' ', 'a', '#', 'a' };
        printStream10.println(charArray15);
        printStream10.print(false);
        printStream10.flush();
        printStream10.println((float) '4');
        printStream10.println(false);
        printStream10.print(false);
        printStream10.println(false);
        java.util.Locale locale31 = new java.util.Locale("TW", "zxz_fran\347ais", "");
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        java.io.PrintStream printStream41 = printStream10.printf(locale31, "zh", (java.lang.Object[]) throwableArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ja");
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray40, (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("\u5fb7\u6587", (java.lang.Throwable) mathException43);
        java.lang.String[] strArray51 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray51, (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray56 = mathException55.getSuppressed();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray51, (java.lang.Throwable) mathException55);
        java.lang.Throwable[] throwableArray58 = mathException55.getSuppressed();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ko_KR", (java.lang.Object[]) throwableArray58);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException60 = new org.apache.commons.math.geometry.NotARotationMatrixException("TW", (java.lang.Object[]) throwableArray58);
        java.lang.String str61 = notARotationMatrixException60.getPattern();
        java.lang.String str62 = notARotationMatrixException60.getPattern();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) notARotationMatrixException60);
        java.lang.Throwable[] throwableArray64 = notARotationMatrixException60.getSuppressed();
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("YXY", (java.lang.Throwable) notARotationMatrixException60);
        mathException45.addSuppressed((java.lang.Throwable) mathException65);
        mathException6.addSuppressed((java.lang.Throwable) mathException45);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , a, #, a]");
        org.junit.Assert.assertEquals(locale31.toString(), "tw_ZXZ_FRAN\347AIS");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "TW" + "'", str61, "TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "TW" + "'", str62, "TW");
        org.junit.Assert.assertNotNull(throwableArray64);
    }

    @Test
    public void test14347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14347");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale locale6 = builder5.build();
        java.io.PrintStream printStream8 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray12 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray12, (java.lang.Throwable) mathException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray17 = mathException16.getSuppressed();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray12, (java.lang.Throwable) mathException16);
        java.lang.Throwable[] throwableArray19 = mathException16.getSuppressed();
        java.io.PrintStream printStream20 = printStream8.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray19);
        java.util.Locale locale22 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream25, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter28);
        printWriter29.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintWriter printWriter40 = printWriter29.format("en", (java.lang.Object[]) doubleArray39);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.lang.String str44 = locale41.getLanguage();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray48 = mathException47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = mathException47.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException50 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray49);
        java.io.PrintWriter printWriter51 = printWriter29.format(locale41, "ZXZ", (java.lang.Object[]) throwableArray49);
        java.io.PrintStream printStream52 = printStream20.printf(locale22, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray49);
        java.util.Locale locale54 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleKeys();
        java.lang.String str56 = locale22.getDisplayVariant(locale54);
        java.util.Set<java.lang.String> strSet57 = locale54.getUnicodeLocaleKeys();
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.lang.String str62 = locale60.getDisplayScript(locale61);
        java.lang.String str63 = locale58.getDisplayLanguage(locale60);
        java.util.Locale.setDefault(locale58);
        java.util.Set<java.lang.String> strSet65 = locale58.getUnicodeLocaleKeys();
        java.lang.String str66 = locale54.getDisplayVariant(locale58);
        java.lang.String str67 = locale6.getDisplayLanguage(locale54);
        java.lang.String str68 = locale6.getDisplayScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertEquals(locale22.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en" + "'", str44, "en");
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(printStream52);
        org.junit.Assert.assertEquals(locale54.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test14348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14348");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.5440211108893698d), (-0.25886627012188185d), (-1.4070751110264845d));
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.18625021851313195d), 2.9778714378213818d, 27.29993135674214d);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D8);
    }

    @Test
    public void test14349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14349");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(0.9588510772084059d, (-0.001300383134934591d), (-0.995037190209989d), 0.3338737790442066d, true);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation(6.096348819394107E8d, (-7.180266874456925d), (-0.5752220392306202d), 0.3799892837204258d, false);
        org.apache.commons.math.geometry.Rotation rotation13 = rotation5.applyInverseTo(rotation12);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(rotation13);
    }

    @Test
    public void test14350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14350");
        java.util.Locale locale2 = new java.util.Locale("en-ca_TWN_ko-KR", "XYX");
        org.junit.Assert.assertEquals(locale2.toString(), "en-ca_twn_ko-kr_XYX");
    }

    @Test
    public void test14351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14351");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Locale.setDefault(category2, locale4);
        java.util.Locale.setDefault(category1, locale4);
        java.util.Locale locale9 = java.util.Locale.getDefault(category1);
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale.setDefault(locale9);
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale14.getDisplayLanguage(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.lang.String str22 = locale20.getDisplayName();
        java.lang.String str23 = locale20.getDisplayScript();
        java.lang.String str24 = locale20.getScript();
        java.lang.String str25 = locale20.getVariant();
        java.lang.String str26 = locale14.getDisplayName(locale20);
        java.lang.String str27 = locale9.getDisplayScript(locale14);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "German" + "'", str21, "German");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test14352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14352");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getDisplayLanguage(locale6);
        java.lang.String str10 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale14 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale15.getDisplayLanguage(locale18);
        java.lang.String str21 = locale14.getDisplayVariant(locale18);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.lang.String str26 = locale14.getDisplayVariant(locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str30 = locale29.toLanguageTag();
        java.lang.String str32 = locale29.getExtension('u');
        java.util.Set<java.lang.Character> charSet33 = locale29.getExtensionKeys();
        java.lang.String str34 = locale29.toLanguageTag();
        java.lang.String str35 = locale29.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale29);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertEquals(locale14.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587" + "'", str20, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "germany" + "'", str30, "germany");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "germany" + "'", str34, "germany");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "germany" + "'", str35, "germany");
    }

    @Test
    public void test14353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14353");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        printStream15.close();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream15, false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter18);
        printWriter18.println((float) (byte) -1);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter18, true);
        java.lang.String[] strArray25 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter26 = printWriter18.printf("KR", (java.lang.Object[]) strArray25);
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream28, false);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.Writer) printWriter31);
        char[] charArray35 = new char[] { ' ', 'x' };
        printWriter32.write(charArray35);
        printWriter18.println(charArray35);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale38.getDisplayScript(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String[] strArray44 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray44);
        java.io.PrintWriter printWriter46 = printWriter18.printf(locale39, "English", (java.lang.Object[]) strArray44);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException51);
        java.lang.Object[] objArray53 = mathException51.getArguments();
        java.io.PrintStream printStream54 = printStream13.format(locale39, "fra", objArray53);
        java.util.Locale locale55 = locale39.stripExtensions();
        java.lang.String str56 = locale55.toLanguageTag();
        boolean boolean57 = locale55.hasExtensions();
        boolean boolean58 = locale55.hasExtensions();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , x]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zh-TW" + "'", str56, "zh-TW");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test14354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14354");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "\u97d3\u6587");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: ??");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14355");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        printStream1.println((int) (short) 100);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter17.println('a');
        printWriter17.close();
        printWriter17.print("ZYZ");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
    }

    @Test
    public void test14356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14356");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale9 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str14 = locale9.getDisplayName(locale11);
        java.lang.String str15 = locale11.getDisplayName();
        java.lang.String str16 = locale6.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder17 = builder0.setLocale(locale6);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale6.getDisplayVariant(locale18);
        java.lang.String str20 = locale18.getLanguage();
        java.util.Locale locale23 = new java.util.Locale("Chinesisch (China)", "org.apache.commons.math.MathException: fra");
        java.lang.String str24 = locale18.getDisplayCountry(locale23);
        java.lang.String str25 = locale18.toLanguageTag();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u97d3\u6587)" + "'", str14, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ja" + "'", str20, "ja");
        org.junit.Assert.assertEquals(locale23.toString(), "chinesisch (china)_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: FRA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ja" + "'", str25, "ja");
    }

    @Test
    public void test14357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14357");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray15 = rotation14.getMatrix();
        java.io.PrintWriter printWriter16 = printWriter5.format("en", (java.lang.Object[]) doubleArray15);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getLanguage();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = mathException23.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException26 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray25);
        java.io.PrintWriter printWriter27 = printWriter5.format(locale17, "ZXZ", (java.lang.Object[]) throwableArray25);
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter30 = printWriter5.format("\u97d3\u6587", (java.lang.Object[]) strArray29);
        printWriter5.flush();
        printWriter5.close();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str35 = locale34.toLanguageTag();
        java.lang.String str37 = locale34.getExtension('u');
        java.lang.String[] strArray41 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException43);
        java.lang.String[] strArray48 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray48, (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray48, (java.lang.Throwable) mathException52);
        java.lang.Throwable[] throwableArray55 = mathException52.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException56 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray55);
        mathException44.addSuppressed((java.lang.Throwable) notARotationMatrixException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("TWN", (java.lang.Throwable) mathException44);
        java.lang.Object[] objArray59 = mathException58.getArguments();
        java.io.PrintWriter printWriter60 = printWriter5.printf(locale34, "germany", objArray59);
        printWriter5.flush();
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "germany" + "'", str35, "germany");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(printWriter60);
    }

    @Test
    public void test14358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14358");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.io.PrintStream printStream8 = new java.io.PrintStream("ko-KR");
        printStream8.close();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream8, false);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter11);
        char[] charArray15 = new char[] { ' ', 'x' };
        printWriter12.write(charArray15);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray28 = rotation27.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter12.format(locale17, "YZY", (java.lang.Object[]) doubleArray28);
        java.lang.String str30 = locale5.getDisplayCountry(locale17);
        java.lang.String str31 = locale17.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet32 = locale17.getExtensionKeys();
        java.lang.String str33 = locale17.getScript();
        java.lang.String str34 = locale17.getDisplayName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , x]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Germany" + "'", str30, "Germany");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English" + "'", str34, "English");
    }

    @Test
    public void test14359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14359");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\uc911\uad6d\uc5b4");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "\uc911\uad6d");
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test14360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14360");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) (byte) 100, 0.0d, (-0.13715201283077028d), (double) 0L, false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = rotation11.applyTo(vector3D13);
        double double18 = rotation11.getAngle();
        double double19 = rotation11.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D30 = vector3D22.subtract((double) 10L, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotation11.applyTo(vector3D31);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation(vector3D31, (-0.0d));
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double41 = rotation40.getQ0();
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double48 = rotation47.getQ0();
        org.apache.commons.math.geometry.Rotation rotation49 = rotation40.applyTo(rotation47);
        org.apache.commons.math.geometry.Rotation rotation50 = rotation34.applyTo(rotation47);
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation(vector3D53, (double) 1);
        org.apache.commons.math.geometry.Vector3D vector3D57 = vector3D53.scalarMultiply((-5.440211108893697d));
        org.apache.commons.math.geometry.Vector3D vector3D58 = rotation34.applyTo(vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotation5.applyTo(vector3D53);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
    }

    @Test
    public void test14361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14361");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream19 = printStream17.append((java.lang.CharSequence) "Chinese");
        printStream19.print((int) (short) 100);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter26);
        printWriter27.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation36 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray37 = rotation36.getMatrix();
        java.io.PrintWriter printWriter38 = printWriter27.format("en", (java.lang.Object[]) doubleArray37);
        printWriter38.println('a');
        printWriter38.println('a');
        printWriter38.println(false);
        java.io.PrintStream printStream46 = new java.io.PrintStream("ko-KR");
        printStream46.close();
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream46, false);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.Writer) printWriter49);
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter53 = printWriter50.printf("ko-KR", (java.lang.Object[]) strArray52);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D55, (double) (byte) 100, vector3D57);
        double double59 = vector3D57.getNorm();
        printWriter50.println((java.lang.Object) vector3D57);
        java.io.PrintStream printStream62 = new java.io.PrintStream("ko-KR");
        printStream62.close();
        java.io.PrintStream printStream65 = new java.io.PrintStream("ko-KR");
        printStream65.close();
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.OutputStream) printStream65, false);
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter((java.io.Writer) printWriter68);
        char[] charArray74 = new char[] { '4', 'a', ' ', ' ' };
        printWriter68.write(charArray74);
        printStream62.print(charArray74);
        printWriter50.print(charArray74);
        printWriter38.print(charArray74);
        printStream19.println(charArray74);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[4, a,  ,  ]");
    }

    @Test
    public void test14362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14362");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("tedesco", "\uce90\ub098\ub2e4");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: zxz_??????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14363");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        java.io.PrintStream printStream19 = printStream1.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        char[] charArray28 = new char[] { ' ', 'x' };
        printWriter25.write(charArray28);
        java.io.PrintWriter printWriter31 = printWriter25.append((java.lang.CharSequence) "Canada");
        boolean boolean32 = printWriter31.checkError();
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintStream printStream39 = printStream34.append((java.lang.CharSequence) "en");
        printStream34.print((int) ' ');
        printStream34.println((double) 100.0f);
        java.io.PrintStream printStream45 = new java.io.PrintStream("ko-KR");
        printStream45.close();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream45, false);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter48);
        char[] charArray52 = new char[] { ' ', 'x' };
        printWriter49.write(charArray52);
        printStream34.print(charArray52);
        printWriter31.write(charArray52);
        printStream1.print(charArray52);
        boolean boolean57 = printStream1.checkError();
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        org.apache.commons.math.geometry.Rotation rotation66 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double67 = rotation66.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D68 = rotation66.getAxis();
        double double69 = rotation66.getQ2();
        double[][] doubleArray70 = rotation66.getMatrix();
        java.io.PrintStream printStream71 = printStream59.format("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) doubleArray70);
        printStream59.print('#');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , x]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 100.0d + "'", double67 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(printStream71);
    }

    @Test
    public void test14364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14364");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguage("ja");
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("TWN");
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Taiwan");
        java.util.Locale.Builder builder10 = builder8.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setLanguageTag("org.apache.commons.math.MathException: French");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: org.apache.commons.math.MathException: French [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test14365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14365");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet11 = locale7.getUnicodeLocaleKeys();
        java.lang.String str12 = locale7.getScript();
        java.util.Locale locale13 = locale7.stripExtensions();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str16 = locale13.getExtension('u');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Canada" + "'", str9, "Canada");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test14366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14366");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        double double22 = rotation21.getAngle();
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = rotation28.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D40, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation36.applyTo(vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation36.getAxis();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation36.revert();
        org.apache.commons.math.geometry.Rotation rotation51 = rotation21.applyInverseTo(rotation50);
        double double52 = rotation21.getQ1();
        double double53 = rotation21.getQ1();
        double double54 = rotation21.getQ1();
        double double55 = rotation21.getAngle();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 84.29633443762866d + "'", double52 == 84.29633443762866d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 84.29633443762866d + "'", double53 == 84.29633443762866d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 84.29633443762866d + "'", double54 == 84.29633443762866d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test14367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14367");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale9 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str10 = locale9.getDisplayVariant();
        java.util.Locale locale13 = new java.util.Locale("Italy", "US");
        java.lang.String str14 = locale9.getDisplayScript(locale13);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale13);
        java.util.Locale.Builder builder17 = builder15.setVariant("");
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        java.lang.String str23 = locale18.getDisplayLanguage(locale20);
        java.util.Locale locale24 = locale18.stripExtensions();
        java.lang.String str25 = locale18.getDisplayLanguage();
        java.util.Locale locale26 = locale18.stripExtensions();
        java.lang.String str27 = locale18.toLanguageTag();
        java.lang.String str28 = locale18.getLanguage();
        java.util.Locale.Builder builder29 = builder15.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder29.setRegion("de_DE_#a-ko-kr");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: de_DE_#a-ko-kr [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale13.toString(), "italy_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "und" + "'", str27, "und");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test14368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14368");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print(true);
        printWriter5.flush();
        printWriter5.print((double) 'x');
        printWriter5.flush();
        printWriter5.print(0.23295968413075419d);
    }

    @Test
    public void test14369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14369");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.close();
        printStream1.print('#');
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        printStream15.close();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream20 = printStream15.format(locale17, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray19);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream15, false);
        printStream15.println(10.0f);
        java.lang.String[] strArray27 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray27);
        java.io.PrintStream printStream29 = printStream15.format("\u97d3\u6587", (java.lang.Object[]) strArray27);
        printStream15.println((long) (short) 1);
        printStream15.println((float) (short) 0);
        printStream15.print("it");
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale39 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category36, locale39);
        java.util.Locale locale42 = new java.util.Locale("\uc601\uc5b4");
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Locale.setDefault(category36, locale42);
        java.lang.String str45 = locale42.getCountry();
        org.apache.commons.math.geometry.Rotation rotation53 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double54 = rotation53.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D55 = rotation53.getAxis();
        double[][] doubleArray56 = rotation53.getMatrix();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException57 = new org.apache.commons.math.geometry.NotARotationMatrixException("CA", (java.lang.Object[]) doubleArray56);
        java.io.PrintStream printStream58 = printStream15.printf(locale42, "German", (java.lang.Object[]) doubleArray56);
        printStream1.print((java.lang.Object) printStream15);
        java.io.PrintStream printStream63 = new java.io.PrintStream("ko-KR");
        printStream63.close();
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.OutputStream) printStream63, false);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.Writer) printWriter66);
        java.lang.String[] strArray69 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter70 = printWriter67.printf("ko-KR", (java.lang.Object[]) strArray69);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.util.Locale locale72 = java.util.Locale.TAIWAN;
        java.lang.String str73 = locale71.getDisplayScript(locale72);
        java.lang.String str74 = locale72.getVariant();
        printWriter70.print((java.lang.Object) str74);
        org.apache.commons.math.geometry.RotationOrder rotationOrder77 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotationOrder77.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D79 = rotationOrder77.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D80 = rotationOrder77.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D81 = rotationOrder77.getA3();
        org.apache.commons.math.geometry.Rotation rotation85 = new org.apache.commons.math.geometry.Rotation(rotationOrder77, (-0.09950371902099892d), (double) (-1), (double) ' ');
        double[][] doubleArray86 = rotation85.getMatrix();
        java.io.PrintWriter printWriter87 = printWriter70.format("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray86);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: KO_KR");
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)", (java.lang.Throwable) mathException90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)", (java.lang.Object[]) doubleArray86, (java.lang.Throwable) mathException90);
        java.io.PrintStream printStream93 = printStream15.format("zxz", (java.lang.Object[]) doubleArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation95 = new org.apache.commons.math.geometry.Rotation(doubleArray86, (-9990.0d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.FORMAT + "'", category36.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale39.toString(), "zxz_KO_KR");
        org.junit.Assert.assertEquals(locale42.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(rotationOrder77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printStream93);
    }

    @Test
    public void test14370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14370");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation22 = rotation15.applyTo(rotation21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream24, false);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter27);
        java.lang.String[] strArray30 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter31 = printWriter28.printf("ko-KR", (java.lang.Object[]) strArray30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        double double37 = vector3D35.getNorm();
        printWriter28.println((java.lang.Object) vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D40, (double) (byte) 100, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D35, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = rotation15.applyTo(vector3D35);
        double double46 = rotation15.getAngle();
        double double47 = rotation15.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
    }

    @Test
    public void test14371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14371");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D9 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D3, (double) 0L, vector3D8);
        org.apache.commons.math.geometry.Rotation rotation15 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double16 = rotation15.getQ0();
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation24 = rotation15.applyTo(rotation22);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotation15.applyInverseTo(vector3D28);
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D45, (double) (byte) 100, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation43.applyTo(vector3D45);
        double double50 = rotation43.getAngle();
        double double51 = rotation43.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D62 = vector3D54.subtract((double) 10L, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D64 = rotation43.applyTo(vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D65 = vector3D36.subtract(0.8414709848078965d, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D66 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D9, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D67 = vector3D9.normalize();
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
    }

    @Test
    public void test14372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14372");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("German");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream7, false);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter10);
        printWriter11.println('a');
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder20 = builder14.setLocale(locale19);
        java.lang.Object[] objArray22 = null;
        java.io.PrintWriter printWriter23 = printWriter11.format(locale19, "TWN", objArray22);
        boolean boolean24 = languageRange1.equals((java.lang.Object) printWriter11);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "german" + "'", str2, "german");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "german" + "'", str3, "german");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "german" + "'", str4, "german");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test14373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14373");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getDisplayLanguage(locale6);
        java.lang.String str10 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale14 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale15.getDisplayLanguage(locale18);
        java.lang.String str21 = locale14.getDisplayVariant(locale18);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.lang.String str26 = locale14.getDisplayVariant(locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale29 = java.util.Locale.getDefault(category0);
        java.util.Locale locale30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertEquals(locale14.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587" + "'", str20, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
    }

    @Test
    public void test14374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14374");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream10.flush();
        java.io.PrintStream printStream13 = new java.io.PrintStream((java.io.OutputStream) printStream10, false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
    }

    @Test
    public void test14375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14375");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = printWriter5.append((java.lang.CharSequence) "ko-KR");
        printWriter9.println((double) (short) 0);
        printWriter9.write((int) 'a');
        printWriter9.write((int) '#');
        printWriter9.println(0);
        printWriter9.println('x');
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray25 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray25, (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray30 = mathException29.getSuppressed();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray25, (java.lang.Throwable) mathException29);
        java.lang.Throwable[] throwableArray32 = mathException29.getSuppressed();
        java.io.PrintStream printStream33 = printStream21.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray32);
        java.util.Locale locale35 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream38 = new java.io.PrintStream("ko-KR");
        printStream38.close();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream38, false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        printWriter42.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray52 = rotation51.getMatrix();
        java.io.PrintWriter printWriter53 = printWriter42.format("en", (java.lang.Object[]) doubleArray52);
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        java.lang.String str57 = locale54.getLanguage();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray61 = mathException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = mathException60.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException63 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter64 = printWriter42.format(locale54, "ZXZ", (java.lang.Object[]) throwableArray62);
        java.io.PrintStream printStream65 = printStream33.printf(locale35, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray62);
        printStream33.println(0.0f);
        java.io.PrintStream printStream69 = new java.io.PrintStream("ko-KR");
        printStream69.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream69, false);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter72);
        char[] charArray78 = new char[] { '4', 'a', ' ', ' ' };
        printWriter72.write(charArray78);
        printStream33.println(charArray78);
        printWriter9.print(charArray78);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertEquals(locale35.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "en" + "'", str57, "en");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[4, a,  ,  ]");
    }

    @Test
    public void test14376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14376");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA1();
        java.lang.String str6 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder0.getA3();
        double double10 = vector3D9.getAlpha();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "XYZ" + "'", str6, "XYZ");
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test14377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14377");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder8 = builder0.setUnicodeLocaleKeyword("KR", "zxz");
        java.util.Locale.Builder builder10 = builder0.addUnicodeLocaleAttribute("zho");
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream17 = printStream12.format(locale14, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream19);
        printWriter20.print("\u97d3\u6587");
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder28 = builder23.setExtension('u', "");
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale32 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        boolean boolean35 = locale34.hasExtensions();
        java.util.Locale.setDefault(category33, locale34);
        java.lang.String str37 = locale32.getDisplayName(locale34);
        java.lang.String str38 = locale34.getDisplayName();
        java.lang.String str39 = locale29.getDisplayLanguage(locale34);
        java.util.Locale.Builder builder40 = builder23.setLocale(locale29);
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = locale29.getDisplayVariant(locale41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = mathException44.getSuppressed();
        java.io.PrintWriter printWriter47 = printWriter20.printf(locale29, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) throwableArray46);
        java.util.Locale.Builder builder48 = builder10.setLocale(locale29);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder54 = builder49.setExtension('u', "");
        java.util.Locale.Builder builder56 = builder54.setVariant("");
        java.util.Locale.Builder builder58 = builder54.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale59 = builder54.build();
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleKeys();
        java.util.Locale locale61 = locale59.stripExtensions();
        java.util.Locale.Builder builder62 = builder48.setLocale(locale61);
        java.util.Locale.Builder builder64 = builder62.setLanguageTag("XYZ");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder67 = builder64.setExtension(' ', "x-lvariant-TWN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category33.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u97d3\u6587)" + "'", str37, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English" + "'", str38, "English");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English" + "'", str39, "English");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test14378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14378");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D3 = vector3D2.negate();
        org.apache.commons.math.geometry.Vector3D vector3D7 = new org.apache.commons.math.geometry.Vector3D((-3.141592653589793d), 0.0d, (double) 10L);
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) 10L, vector3D11);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double19 = rotation18.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D20 = rotation18.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D21 = vector3D12.add(vector3D20);
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation(vector3D7, vector3D20);
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D29 = rotation28.getAxis();
        org.apache.commons.math.geometry.Rotation rotation30 = rotation28.revert();
        org.apache.commons.math.geometry.Rotation rotation31 = rotation22.applyTo(rotation30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D41 = vector3D33.subtract((double) 10L, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D46, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D40.subtract((double) 0, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D55 = rotation22.applyInverseTo(vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D2.subtract(vector3D40);
        double double57 = vector3D56.getY();
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D56.orthogonal();
        org.apache.commons.math.geometry.Rotation rotation60 = new org.apache.commons.math.geometry.Rotation(vector3D58, 0.9314590104177871d);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.1371520128307702d + "'", double57 == 1.1371520128307702d);
        org.junit.Assert.assertNotNull(vector3D58);
    }

    @Test
    public void test14379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14379");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        java.io.PrintStream printStream92 = printStream1.append((java.lang.CharSequence) "english_DEU");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertNotNull(printStream92);
    }

    @Test
    public void test14380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14380");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        printWriter6.println((float) (byte) -1);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter6, true);
        java.lang.String[] strArray13 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter14 = printWriter6.printf("KR", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        char[] charArray23 = new char[] { ' ', 'x' };
        printWriter20.write(charArray23);
        printWriter6.println(charArray23);
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str28 = locale26.getDisplayScript(locale27);
        java.lang.String str29 = locale27.getVariant();
        java.lang.String[] strArray32 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray32);
        java.io.PrintWriter printWriter34 = printWriter6.printf(locale27, "English", (java.lang.Object[]) strArray32);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("\u6cd5\u6587", (java.lang.Object[]) strArray32);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("chinois (Chine)", (java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , x]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(throwableArray37);
    }

    @Test
    public void test14381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14381");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(0.0d, 0.0d, 3.141592653589793d, (-0.13715201283077028d), true);
        double double6 = rotation5.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9990484001299658d + "'", double6 == 0.9990484001299658d);
    }

    @Test
    public void test14382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14382");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("YZY");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        printWriter7.close();
        java.util.Locale locale10 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter7.println((java.lang.Object) locale10);
        java.util.Set<java.lang.Character> charSet12 = locale10.getExtensionKeys();
        java.lang.String str13 = locale1.getDisplayVariant(locale10);
        boolean boolean14 = locale10.hasExtensions();
        java.util.Set<java.lang.Character> charSet15 = locale10.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "yzy");
        org.junit.Assert.assertEquals(locale10.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSet15);
    }

    @Test
    public void test14383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14383");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.lang.String str32 = locale30.getDisplayName();
        java.lang.String str33 = locale30.getScript();
        java.util.Set<java.lang.String> strSet34 = locale30.getUnicodeLocaleKeys();
        java.io.PrintStream printStream37 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream37.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray47 = rotation46.getMatrix();
        java.io.PrintStream printStream48 = printStream37.printf("fra", (java.lang.Object[]) doubleArray47);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder49.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder54 = builder49.setExtension('u', "");
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale58 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category59 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        boolean boolean61 = locale60.hasExtensions();
        java.util.Locale.setDefault(category59, locale60);
        java.lang.String str63 = locale58.getDisplayName(locale60);
        java.lang.String str64 = locale60.getDisplayName();
        java.lang.String str65 = locale55.getDisplayLanguage(locale60);
        java.util.Locale.Builder builder66 = builder49.setLocale(locale55);
        java.io.PrintStream printStream69 = new java.io.PrintStream("ko-KR");
        printStream69.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream69, false);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter72);
        java.lang.String[] strArray75 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter76 = printWriter73.printf("ko-KR", (java.lang.Object[]) strArray75);
        java.io.PrintStream printStream77 = printStream37.printf(locale55, "TWN", (java.lang.Object[]) strArray75);
        java.io.PrintWriter printWriter78 = printWriter9.printf(locale30, "", (java.lang.Object[]) strArray75);
        java.util.Locale.Category category79 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale81 = new java.util.Locale("\uc911\uad6d\uc5b4");
        java.util.Locale.setDefault(category79, locale81);
        java.lang.String str83 = locale81.getCountry();
        java.lang.String str84 = locale30.getDisplayName(locale81);
        java.lang.String str85 = locale81.getDisplayScript();
        java.lang.String str86 = locale81.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "German" + "'", str32, "German");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category59.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u97d3\u6587)" + "'", str63, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English" + "'", str64, "English");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "English" + "'", str65, "English");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(printStream77);
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertTrue("'" + category79 + "' != '" + java.util.Locale.Category.FORMAT + "'", category79.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale81.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "German" + "'", str84, "German");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test14384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14384");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.setScript("");
        java.util.Locale.Builder builder10 = builder6.setLanguage("TW");
        java.util.Locale.Builder builder12 = builder6.setRegion("US");
        java.util.Locale locale13 = builder12.build();
        java.util.Locale.Builder builder14 = builder12.clearExtensions();
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        java.util.Locale locale16 = builder12.build();
        java.util.Locale locale18 = new java.util.Locale("French");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray24 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray24, (java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray29 = mathException28.getSuppressed();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray24, (java.lang.Throwable) mathException28);
        java.lang.Throwable[] throwableArray31 = mathException28.getSuppressed();
        java.io.PrintStream printStream32 = printStream20.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray31);
        java.util.Locale locale34 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        printWriter41.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation50 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray51 = rotation50.getMatrix();
        java.io.PrintWriter printWriter52 = printWriter41.format("en", (java.lang.Object[]) doubleArray51);
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        java.lang.String str56 = locale53.getLanguage();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray60 = mathException59.getSuppressed();
        java.lang.Throwable[] throwableArray61 = mathException59.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException62 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray61);
        java.io.PrintWriter printWriter63 = printWriter41.format(locale53, "ZXZ", (java.lang.Object[]) throwableArray61);
        java.io.PrintStream printStream64 = printStream32.printf(locale34, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray61);
        java.util.Locale locale66 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        java.lang.String str68 = locale34.getDisplayVariant(locale66);
        java.util.Set<java.lang.String> strSet69 = locale66.getUnicodeLocaleAttributes();
        java.lang.String str70 = locale18.getDisplayScript(locale66);
        java.lang.String str71 = locale18.getVariant();
        java.lang.String str72 = locale16.getDisplayVariant(locale18);
        java.lang.String str73 = locale18.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "tw_US");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "tw_US");
        org.junit.Assert.assertEquals(locale18.toString(), "french");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertEquals(locale34.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en" + "'", str56, "en");
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertEquals(locale66.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test14385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14385");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        printWriter6.println((float) (byte) -1);
        java.lang.String[] strArray12 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray12, (java.lang.Throwable) mathException14);
        java.io.PrintWriter printWriter16 = printWriter6.printf("it", (java.lang.Object[]) strArray12);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException17 = new org.apache.commons.math.geometry.NotARotationMatrixException("de-DE", (java.lang.Object[]) strArray12);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("Germany", (java.lang.Throwable) notARotationMatrixException17);
        java.lang.String str19 = mathException18.toString();
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.math.MathException: Germany" + "'", str19, "org.apache.commons.math.MathException: Germany");
    }

    @Test
    public void test14386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14386");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        printWriter4.println(charArray21);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale25.getVariant();
        java.lang.String[] strArray30 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter32 = printWriter4.printf(locale25, "English", (java.lang.Object[]) strArray30);
        java.lang.String str33 = locale25.getScript();
        java.util.Locale locale34 = locale25.stripExtensions();
        java.lang.String str35 = locale25.getISO3Country();
        java.lang.String str36 = locale25.getDisplayLanguage();
        java.util.Locale locale40 = new java.util.Locale("Germania", "KR", "org.apache.commons.math.geometry.NotARotationMatrixException: ko-KR");
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale25.getDisplayName(locale41);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "TWN" + "'", str35, "TWN");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinese" + "'", str36, "Chinese");
        org.junit.Assert.assertEquals(locale40.toString(), "germania_KR_org.apache.commons.math.geometry.NotARotationMatrixException: ko-KR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "germania_KR_org.apache.commons.math.geometry.NotARotationMatrixException: ko-KR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese (Taiwan)" + "'", str42, "Chinese (Taiwan)");
    }

    @Test
    public void test14387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14387");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc))");
    }

    @Test
    public void test14388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14388");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray15 = rotation14.getMatrix();
        java.io.PrintWriter printWriter16 = printWriter5.format("en", (java.lang.Object[]) doubleArray15);
        printWriter16.println((long) 1);
        java.util.Locale locale21 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str24 = locale21.getExtension('x');
        java.lang.String str25 = locale21.getDisplayVariant();
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D35, vector3D40);
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray50 = rotation49.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D52, (double) (byte) 100, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D54, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotation49.applyInverseTo(vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D62, vector3D63);
        org.apache.commons.math.geometry.Rotation rotation71 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D75 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D73, (double) (byte) 100, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D77 = rotation71.applyTo(vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D78 = vector3D73.negate();
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.zero;
        double double81 = vector3D80.getY();
        org.apache.commons.math.geometry.Vector3D vector3D82 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D35, (double) ' ', vector3D62, (double) (-1.0f), vector3D78, (double) 10.0f, vector3D80);
        printStream29.print((java.lang.Object) ' ');
        java.lang.String[] strArray85 = java.util.Locale.getISOLanguages();
        java.io.PrintStream printStream86 = printStream29.format("\uce90\ub098\ub2e4", (java.lang.Object[]) strArray85);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException87 = new org.apache.commons.math.geometry.NotARotationMatrixException("CHN", (java.lang.Object[]) strArray85);
        java.io.PrintWriter printWriter88 = printWriter16.format(locale21, "yzy", (java.lang.Object[]) strArray85);
        java.io.PrintWriter printWriter90 = new java.io.PrintWriter((java.io.Writer) printWriter88, false);
        java.lang.Object obj91 = null;
        printWriter90.print(obj91);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(printWriter16);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zxz_fran\347ais" + "'", str22, "zxz_fran\347ais");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(printStream86);
        org.junit.Assert.assertNotNull(printWriter88);
    }

    @Test
    public void test14389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14389");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale8);
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.lang.String str12 = locale10.getDisplayScript(locale11);
        java.lang.String str13 = locale8.getDisplayLanguage(locale11);
        java.lang.String str15 = locale8.getExtension('a');
        java.util.Set<java.lang.String> strSet16 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale8);
        java.lang.String str19 = locale8.getExtension('a');
        java.util.Locale locale21 = new java.util.Locale("de_DE");
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale24 = locale22.stripExtensions();
        java.lang.String str25 = locale21.getDisplayLanguage(locale22);
        java.lang.String str26 = locale8.getDisplayName(locale21);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u97d3\u6587" + "'", str13, "\u97d3\u6587");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals(locale21.toString(), "de_de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "de_de" + "'", str25, "de_de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Korean (South Korea)" + "'", str26, "Korean (South Korea)");
    }

    @Test
    public void test14390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14390");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray2 = mathException1.getSuppressed();
        java.lang.Throwable[] throwableArray3 = mathException1.getSuppressed();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException1);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test14391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14391");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.println((float) (-1));
        printStream1.print(true);
        printStream1.println((long) ' ');
        printStream1.println(0.0f);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter14);
        printWriter14.print((double) (byte) 100);
        printWriter14.println();
        printWriter14.close();
        printWriter14.print((long) (byte) 10);
        printWriter14.println(false);
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream25, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter28);
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter32 = printWriter29.printf("ko-KR", (java.lang.Object[]) strArray31);
        printWriter32.println(0.0d);
        printWriter32.write(0);
        java.io.PrintWriter printWriter38 = printWriter32.append('4');
        printWriter38.print((double) 'a');
        java.io.PrintStream printStream42 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray47 = new char[] { ' ', 'a', '#', 'a' };
        printStream42.println(charArray47);
        printWriter38.print(charArray47);
        printWriter14.print(charArray47);
        printStream1.println(charArray47);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.println(0L);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ , a, #, a]");
    }

    @Test
    public void test14392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14392");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.setScript("");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException19);
        java.lang.Throwable[] throwableArray22 = mathException19.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray22);
        java.util.Locale locale25 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream28, false);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.Writer) printWriter31);
        printWriter32.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray42 = rotation41.getMatrix();
        java.io.PrintWriter printWriter43 = printWriter32.format("en", (java.lang.Object[]) doubleArray42);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.lang.String str47 = locale44.getLanguage();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray51 = mathException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = mathException50.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException53 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray52);
        java.io.PrintWriter printWriter54 = printWriter32.format(locale44, "ZXZ", (java.lang.Object[]) throwableArray52);
        java.io.PrintStream printStream55 = printStream23.printf(locale25, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray52);
        java.util.Locale locale57 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.lang.String str59 = locale25.getDisplayVariant(locale57);
        java.util.Set<java.lang.String> strSet60 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale57.getCountry();
        java.lang.String str62 = locale57.getScript();
        java.util.Locale.Builder builder63 = builder8.setLocale(locale57);
        java.util.Locale locale64 = builder63.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder66 = builder63.setScript("ca");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ca [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertEquals(locale25.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertEquals(locale57.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "xyz");
    }

    @Test
    public void test14393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14393");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = printWriter5.append('4');
        printWriter13.close();
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test14394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14394");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print(1.2220476682666177d);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        printWriter24.println((float) (byte) -1);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter24, true);
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter32 = printWriter24.printf("KR", (java.lang.Object[]) strArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        char[] charArray41 = new char[] { ' ', 'x' };
        printWriter38.write(charArray41);
        printWriter24.println(charArray41);
        printWriter19.write(charArray41, 0, 1);
        printWriter12.print(charArray41);
        printWriter12.print((float) (byte) 100);
        printWriter12.print((double) (short) 10);
        java.io.PrintStream printStream53 = new java.io.PrintStream("ko-KR");
        printStream53.close();
        java.util.Locale locale55 = java.util.Locale.UK;
        java.lang.String[] strArray57 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream58 = printStream53.format(locale55, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray57);
        printStream58.close();
        printWriter12.println((java.lang.Object) printStream58);
        printStream58.println();
        java.util.Locale locale65 = new java.util.Locale("\ub300\ud55c\ubbfc\uad6d", "Chinese (China)", "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        printStream58.println((java.lang.Object) "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        char[] charArray67 = null;
        printStream58.println(charArray67);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , x]");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(printStream58);
// flaky:         org.junit.Assert.assertEquals(locale65.toString(), "\ub300\ud55c\ubbfc\uad6d\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
    }

    @Test
    public void test14395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14395");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguage("ja");
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("TWN");
        java.util.Locale locale7 = builder4.build();
        java.util.Locale locale8 = builder4.build();
        java.lang.String str9 = locale8.getDisplayScript();
        java.lang.String str10 = locale8.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja__#u-twn");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja__#u-twn");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test14396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14396");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-0.4869163399816042d), (double) (-1.0f), (-0.29022442084922856d), 0.0d, false);
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotation5.getAxis();
        double double7 = rotation5.getAngle();
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double15 = rotation14.getQ1();
        double double16 = rotation14.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D26 = vector3D18.subtract((double) 10L, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation14.applyInverseTo(vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D33, vector3D38);
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray48 = rotation47.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D55, (double) (byte) 100, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D52, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotation47.applyInverseTo(vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D60, vector3D61);
        org.apache.commons.math.geometry.Rotation rotation69 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D71, (double) (byte) 100, vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D75 = rotation69.applyTo(vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D76 = vector3D71.negate();
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        double double79 = vector3D78.getY();
        org.apache.commons.math.geometry.Vector3D vector3D80 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D33, (double) ' ', vector3D60, (double) (-1.0f), vector3D76, (double) 10.0f, vector3D78);
        double double81 = vector3D60.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D85 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D86 = vector3D85.negate();
        org.apache.commons.math.geometry.Vector3D vector3D87 = new org.apache.commons.math.geometry.Vector3D((double) (short) -1, vector3D25, 10.0d, vector3D60, 100.0d, vector3D85);
        org.apache.commons.math.geometry.Vector3D vector3D88 = vector3D25.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D89 = vector3D88.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D90 = rotation5.applyTo(vector3D89);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
    }

    @Test
    public void test14397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14397");
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D4, (double) (byte) 100, vector3D6);
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D6, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D24, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D11, (double) (byte) 1, vector3D19, (double) (short) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D33 = vector3D11.negate();
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D11);
        double double35 = vector3D11.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D11.scalarMultiply((double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D39, (double) (byte) 100, vector3D41);
        double double43 = vector3D41.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D44 = vector3D11.subtract(vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D45 = vector3D11.negate();
        double double46 = vector3D11.getDelta();
        org.apache.commons.math.geometry.RotationOrder rotationOrder48 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotationOrder48.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D50 = rotationOrder48.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D51 = rotationOrder48.getA3();
        java.lang.String str52 = rotationOrder48.toString();
        org.apache.commons.math.geometry.Vector3D vector3D53 = rotationOrder48.getA1();
        org.apache.commons.math.geometry.RotationOrder rotationOrder55 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation59 = new org.apache.commons.math.geometry.Rotation(rotationOrder55, 0.0d, 52.0d, (double) (byte) 1);
        org.apache.commons.math.geometry.RotationOrder rotationOrder60 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str61 = rotationOrder60.toString();
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotationOrder60.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotationOrder60.getA3();
        java.lang.String str64 = rotationOrder60.toString();
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotationOrder60.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D66 = rotationOrder60.getA3();
        double[] doubleArray67 = rotation59.getAngles(rotationOrder60);
        org.apache.commons.math.geometry.Vector3D vector3D68 = rotationOrder60.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D69 = new org.apache.commons.math.geometry.Vector3D((-60.912721436461325d), vector3D11, 0.4663020147736518d, vector3D53, (-0.43638600702710073d), vector3D68);
        org.apache.commons.math.geometry.Vector3D vector3D70 = vector3D11.negate();
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(rotationOrder48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "XZY" + "'", str52, "XZY");
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(rotationOrder55);
        org.junit.Assert.assertNotNull(rotationOrder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ZXZ" + "'", str61, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ZXZ" + "'", str64, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-2.9778714378213818, 0.9999999999999997, -1.5707963267948966]");
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D70);
    }

    @Test
    public void test14398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14398");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder9 = builder0.setExtension('a', "und");
        java.util.Locale locale11 = new java.util.Locale("French");
        java.util.Locale.Builder builder12 = builder0.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder0.setExtension('#', "org.apache.commons.math.MathException: French");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "french");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test14399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14399");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder20 = builder14.setLocale(locale19);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder22 = builder14.setLocale(locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale21);
        java.lang.String str25 = locale21.getDisplayVariant();
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray29, (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray29, (java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray36 = mathException33.getSuppressed();
        java.io.PrintWriter printWriter37 = printWriter13.format(locale21, "ita", (java.lang.Object[]) throwableArray36);
        java.io.PrintWriter printWriter39 = printWriter37.append('a');
        org.apache.commons.math.geometry.RotationOrder rotationOrder40 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str41 = rotationOrder40.toString();
        org.apache.commons.math.geometry.Vector3D vector3D42 = rotationOrder40.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotationOrder40.getA3();
        java.lang.String str44 = rotationOrder40.toString();
        org.apache.commons.math.geometry.Vector3D vector3D45 = rotationOrder40.getA1();
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation(rotationOrder40, (double) 'x', (double) (byte) 100, 0.9999500037496876d);
        org.apache.commons.math.geometry.Rotation rotation53 = new org.apache.commons.math.geometry.Rotation(rotationOrder40, 623129.1985591752d, 0.0d, 1040.0d);
        org.apache.commons.math.geometry.Vector3D vector3D54 = rotationOrder40.getA2();
        printWriter39.print((java.lang.Object) vector3D54);
        printWriter39.print("org.apache.commons.math.MathException: KR");
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(rotationOrder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ZXZ" + "'", str41, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ZXZ" + "'", str44, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D54);
    }

    @Test
    public void test14400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14400");
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D3, (double) (byte) 100, vector3D5);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D5, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D23, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D10, (double) (byte) 1, vector3D18, (double) (short) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D32 = vector3D10.negate();
        org.apache.commons.math.geometry.Vector3D vector3D33 = vector3D10.negate();
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D10);
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray47 = rotation46.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D51, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotation46.applyInverseTo(vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotation46.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotation40.applyInverseTo(vector3D60);
        double double62 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D34, vector3D60);
        org.apache.commons.math.geometry.Rotation rotation68 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation74 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray75 = rotation74.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D77 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D79 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D80 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D77, (double) (byte) 100, vector3D79);
        org.apache.commons.math.geometry.Vector3D vector3D82 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D84 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D85 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D82, (double) (byte) 100, vector3D84);
        org.apache.commons.math.geometry.Vector3D vector3D86 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D79, vector3D84);
        org.apache.commons.math.geometry.Vector3D vector3D87 = rotation74.applyInverseTo(vector3D79);
        org.apache.commons.math.geometry.Vector3D vector3D88 = rotation74.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D89 = rotation68.applyInverseTo(vector3D88);
        org.apache.commons.math.geometry.Vector3D vector3D90 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D60, vector3D88);
        org.apache.commons.math.geometry.Vector3D vector3D94 = new org.apache.commons.math.geometry.Vector3D(1.5583111948973258d, (double) (byte) -1, (-9.479526035547039d));
        org.apache.commons.math.geometry.Vector3D vector3D95 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D60, vector3D94);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-0.0d) + "'", double62 == (-0.0d));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D95);
    }

    @Test
    public void test14401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14401");
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D13 = rotation7.applyTo(vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D14 = new org.apache.commons.math.geometry.Vector3D((double) 'x', vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D(10.099504938362077d, vector3D14);
        double double16 = vector3D15.getX();
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test14402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14402");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        printWriter29.print((long) '#');
        printWriter29.print((int) 'x');
        printWriter29.print(false);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
    }

    @Test
    public void test14403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14403");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\uc911\uad6d\uc5b4\ub300\ub9cc))", "italian-x-lvariant-CHN");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: italian-x-lvariant-CHN");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14404");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.write((int) (short) 10);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15, true);
        java.io.PrintWriter printWriter21 = printWriter19.append('u');
        printWriter19.print((int) ' ');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printWriter21);
    }

    @Test
    public void test14405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14405");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        printStream85.println((int) (byte) -1);
        printStream85.println((long) (byte) 1);
        java.io.PrintStream printStream90 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        java.io.PrintStream printStream92 = new java.io.PrintStream((java.io.OutputStream) printStream85, true);
        java.io.PrintWriter printWriter94 = new java.io.PrintWriter((java.io.OutputStream) printStream92, false);
        java.io.PrintWriter printWriter96 = printWriter94.append((java.lang.CharSequence) "org.apache.commons.math.geometry.NotARotationMatrixException: Canada");
        printWriter96.print(0.6496369390800625d);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printWriter96);
    }

    @Test
    public void test14406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14406");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        boolean boolean8 = printWriter7.checkError();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        boolean boolean10 = printWriter9.checkError();
        printWriter9.write((int) (short) 10);
        java.io.PrintWriter printWriter14 = printWriter9.append('x');
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        printWriter20.print((double) (byte) 100);
        printWriter20.println();
        printWriter20.println('#');
        printWriter20.println(false);
        printWriter20.close();
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        printStream32.close();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream32, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter35);
        char[] charArray39 = new char[] { ' ', 'x' };
        printWriter36.write(charArray39);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.lang.String str44 = locale41.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray52 = rotation51.getMatrix();
        java.io.PrintWriter printWriter53 = printWriter36.format(locale41, "YZY", (java.lang.Object[]) doubleArray52);
        printWriter53.print((-1L));
        java.util.Locale locale56 = java.util.Locale.PRC;
        java.lang.String str57 = locale56.getScript();
        java.lang.String[] strArray62 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray62, (java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray67 = mathException66.getSuppressed();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray62, (java.lang.Throwable) mathException66);
        java.lang.Throwable[] throwableArray69 = mathException66.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException70 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray69);
        java.lang.Throwable[] throwableArray71 = notARotationMatrixException70.getSuppressed();
        java.io.PrintWriter printWriter72 = printWriter53.printf(locale56, "CHN", (java.lang.Object[]) throwableArray71);
        java.io.PrintWriter printWriter73 = printWriter20.format("", (java.lang.Object[]) throwableArray71);
        java.io.PrintWriter printWriter74 = printWriter9.format("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)", (java.lang.Object[]) throwableArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter78 = printWriter9.append((java.lang.CharSequence) "en_ca", 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , x]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en" + "'", str44, "en");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter74);
    }

    @Test
    public void test14407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14407");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((float) 10);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(0.6212338797254471d);
        java.io.PrintStream printStream24 = printStream1.append('a');
        printStream1.println();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream24);
    }

    @Test
    public void test14408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14408");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print((double) 0.0f);
        java.io.PrintWriter printWriter16 = printWriter12.append('a');
        printWriter12.write("italy");
        printWriter12.println('a');
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter16);
    }

    @Test
    public void test14409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14409");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream6, true);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream8);
        printStream9.println(10L);
        printStream9.println((int) (byte) 1);
        printStream9.println(true);
        org.junit.Assert.assertNotNull(printStream6);
    }

    @Test
    public void test14410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14410");
        java.io.PrintStream printStream1 = new java.io.PrintStream("us");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter2.println(0);
    }

    @Test
    public void test14411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14411");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream12 = printStream7.format(locale9, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.String str26 = locale23.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        java.io.PrintWriter printWriter35 = printWriter18.format(locale23, "YZY", (java.lang.Object[]) doubleArray34);
        java.lang.String str36 = locale9.getDisplayCountry(locale23);
        java.util.Locale.Builder builder37 = builder5.setLocale(locale9);
        java.util.Locale.Builder builder38 = builder5.clear();
        java.io.PrintStream printStream40 = new java.io.PrintStream("ko-KR");
        printStream40.close();
        java.util.Locale locale42 = java.util.Locale.UK;
        java.lang.String[] strArray44 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream45 = printStream40.format(locale42, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray44);
        java.io.PrintStream printStream47 = new java.io.PrintStream((java.io.OutputStream) printStream40, false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream47);
        printWriter48.print("\u97d3\u6587");
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder51.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder56 = builder51.setExtension('u', "");
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale60 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category61 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        boolean boolean63 = locale62.hasExtensions();
        java.util.Locale.setDefault(category61, locale62);
        java.lang.String str65 = locale60.getDisplayName(locale62);
        java.lang.String str66 = locale62.getDisplayName();
        java.lang.String str67 = locale57.getDisplayLanguage(locale62);
        java.util.Locale.Builder builder68 = builder51.setLocale(locale57);
        java.util.Locale locale69 = java.util.Locale.JAPANESE;
        java.lang.String str70 = locale57.getDisplayVariant(locale69);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray73 = mathException72.getSuppressed();
        java.lang.Throwable[] throwableArray74 = mathException72.getSuppressed();
        java.io.PrintWriter printWriter75 = printWriter48.printf(locale57, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) throwableArray74);
        java.lang.String str76 = locale57.getDisplayVariant();
        java.lang.String str77 = locale57.getDisplayVariant();
        java.util.Locale locale78 = locale57.stripExtensions();
        java.util.Locale.Builder builder79 = builder38.setLocale(locale78);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United Kingdom" + "'", str36, "United Kingdom");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category61.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u97d3\u6587)" + "'", str65, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "English" + "'", str66, "English");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English" + "'", str67, "English");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test14412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14412");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        boolean boolean86 = printStream1.checkError();
        printStream1.flush();
        printStream1.println();
        java.io.PrintWriter printWriter90 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printWriter90.println((int) (short) 0);
        printWriter90.flush();
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test14413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14413");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        printStream1.println((float) 100);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter18.close();
        java.util.Locale locale21 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter18.println((java.lang.Object) locale21);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Object[] objArray27 = mathException25.getArguments();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("eng", objArray27);
        java.io.PrintStream printStream29 = printStream1.printf(locale21, "germany", objArray27);
        printStream29.print("GB");
        printStream29.close();
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        printStream33.println("zxz_fran\347ais");
        printStream33.println("kor");
        printStream33.print((long) 10);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertEquals(locale21.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test14414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14414");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-0.0d), (double) 'a');
        double double3 = vector3D2.getY();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test14415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14415");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ko_KR", (java.lang.Object[]) throwableArray12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("United Kingdom", (java.lang.Throwable) mathException13);
        java.lang.Object[] objArray15 = mathException14.getArguments();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException16 = new org.apache.commons.math.geometry.NotARotationMatrixException("", objArray15);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
    }

    @Test
    public void test14416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14416");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(0.27829965900511133d, 0.29931591013414527d);
    }

    @Test
    public void test14417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14417");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(vector3D2, (double) 1);
        org.apache.commons.math.geometry.Vector3D vector3D6 = vector3D2.scalarMultiply((-5.440211108893697d));
        double double7 = vector3D2.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D8 = vector3D2.normalize();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.5440211108893698d) + "'", double7 == (-0.5440211108893698d));
        org.junit.Assert.assertNotNull(vector3D8);
    }

    @Test
    public void test14418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14418");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print("");
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale.setDefault(category9, locale12);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray24 = rotation23.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotation23.applyInverseTo(vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation23.getAxis();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation23.revert();
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintStream printStream40 = printStream1.format(locale12, "KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream42 = printStream1.append('u');
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        printStream42.println(true);
        printStream42.print("yzy");
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printStream42);
    }

    @Test
    public void test14419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14419");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale5.getDisplayLanguage(locale9);
        java.lang.String str11 = locale5.getISO3Country();
        java.lang.String str12 = locale1.getDisplayLanguage(locale5);
        java.util.Locale locale13 = locale5.stripExtensions();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale.setDefault(category16, locale17);
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale.setDefault(category14, locale17);
        java.lang.String str22 = locale17.getDisplayVariant();
        java.lang.String str23 = locale17.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getISO3Language();
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getLanguage();
        java.lang.String str28 = locale17.getDisplayScript(locale24);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("China");
        java.lang.String str31 = locale17.getDisplayVariant(locale30);
        java.lang.String str32 = locale13.getDisplayLanguage(locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale33.getScript();
        java.lang.String str36 = locale13.getDisplayLanguage(locale33);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "French" + "'", str12, "French");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ita" + "'", str25, "ita");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it" + "'", str27, "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "china");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test14420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14420");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = locale2.getDisplayLanguage();
        java.util.Locale.setDefault(category1, locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale2.getDisplayLanguage(locale6);
        java.lang.String str8 = locale2.getISO3Country();
        java.lang.String str9 = locale2.getLanguage();
        java.lang.String str10 = locale2.getVariant();
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale.setDefault(category13, locale14);
        java.lang.String str17 = locale11.getDisplayScript(locale14);
        java.util.Locale locale18 = locale14.stripExtensions();
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = locale21.getDisplayName();
        boolean boolean23 = locale21.hasExtensions();
        java.util.Locale.setDefault(category19, locale21);
        java.util.Locale locale25 = java.util.Locale.getDefault(category19);
        java.util.Locale locale29 = new java.util.Locale("org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uc911\uad6d\uc5b4", "Italy");
        java.util.Locale.setDefault(category19, locale29);
        java.util.Locale locale31 = java.util.Locale.getDefault(category19);
        java.lang.String str32 = locale18.getDisplayCountry(locale31);
        java.lang.String str33 = locale2.getDisplayVariant(locale31);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test14421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14421");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder17 = builder4.setLanguage("fr");
        java.util.Locale.Builder builder19 = builder4.setVariant("French");
        java.util.Locale.Builder builder20 = builder4.clear();
        java.util.Locale locale21 = builder4.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French" + "'", str11, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
    }

    @Test
    public void test14422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14422");
        java.util.Locale locale2 = new java.util.Locale("zxz", "\uce90\ub098\ub2e4");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.String str4 = locale2.getDisplayLanguage();
        java.lang.String str5 = locale2.getDisplayCountry();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zxz" + "'", str4, "zxz");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uce90\ub098\ub2e4" + "'", str5, "\uce90\ub098\ub2e4");
    }

    @Test
    public void test14423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14423");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder16 = builder4.clearExtensions();
        java.util.Locale.Builder builder17 = builder4.clear();
        java.util.Locale locale20 = new java.util.Locale("\u52a0\u62ff\u5927", "org.apache.commons.math.geometry.NotARotationMatrixException: ja");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder4.setLocale(locale20);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French" + "'", str11, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals(locale20.toString(), "\u52a0\u62ff\u5927_ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: JA");
    }

    @Test
    public void test14424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14424");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("XYZ", strMap1);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder7 = builder3.setLanguage("ZXZ");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder9 = builder3.setLocale(locale8);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder11 = builder3.setLocale(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet14 = locale10.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayLanguage();
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale19, locale20, locale21, locale22, locale23, locale24, locale26, locale27, locale28 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.lang.String str47 = locale46.getDisplayLanguage();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray51 = new java.util.Locale[] { locale41, locale42, locale43, locale44, locale45, locale46, locale48, locale49, locale50 };
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList52, filteringMode54);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = locale64.getDisplayLanguage();
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale59, locale60, locale61, locale62, locale63, locale64, locale66, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList70, filteringMode72);
        java.util.Locale locale74 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList73);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode72.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNull(locale74);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(localeList76);
    }

    @Test
    public void test14425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14425");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        double double15 = rotation5.getQ0();
        double double16 = rotation5.getQ0();
        double double17 = rotation5.getAngle();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test14426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14426");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test14427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14427");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(0.0d, (double) 'x', 9610.932890332206d);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D10, (double) 0.0f, vector3D22);
        double double25 = vector3D24.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D35, (double) (byte) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D32, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D53, (double) (byte) 100, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D50, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D37, (double) (byte) 1, vector3D45, (double) (short) 100, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D59 = vector3D37.negate();
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D24, (double) 100L, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D();
        org.apache.commons.math.geometry.Vector3D vector3D63 = vector3D60.subtract(vector3D62);
        double double64 = vector3D62.getX();
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((-43.756491210010616d), vector3D62);
        double double66 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D3, vector3D62);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
    }

    @Test
    public void test14428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14428");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale6 = new java.util.Locale("eng", "org.apache.commons.math.MathException");
        java.lang.String str7 = locale1.getDisplayScript(locale6);
        java.io.PrintStream printStream9 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray13 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13, (java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray13, (java.lang.Throwable) mathException17);
        java.lang.Throwable[] throwableArray20 = mathException17.getSuppressed();
        java.io.PrintStream printStream21 = printStream9.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray20);
        java.util.Locale locale23 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream26 = new java.io.PrintStream("ko-KR");
        printStream26.close();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter29);
        printWriter30.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray40 = rotation39.getMatrix();
        java.io.PrintWriter printWriter41 = printWriter30.format("en", (java.lang.Object[]) doubleArray40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale42.getDisplayCountry(locale43);
        java.lang.String str45 = locale42.getLanguage();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray49 = mathException48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = mathException48.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException51 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray50);
        java.io.PrintWriter printWriter52 = printWriter30.format(locale42, "ZXZ", (java.lang.Object[]) throwableArray50);
        java.io.PrintStream printStream53 = printStream21.printf(locale23, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray50);
        java.util.Locale locale55 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.lang.String str57 = locale23.getDisplayVariant(locale55);
        java.lang.String str58 = locale1.getDisplayScript(locale23);
        boolean boolean59 = locale1.hasExtensions();
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals(locale6.toString(), "eng_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(printStream21);
        org.junit.Assert.assertEquals(locale23.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "en" + "'", str45, "en");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertEquals(locale55.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test14429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14429");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D6, (double) 0L, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D12.negate();
        org.apache.commons.math.geometry.Vector3D vector3D14 = vector3D13.normalize();
        double double15 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D2, vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D16 = vector3D2.orthogonal();
        double double17 = vector3D2.getZ();
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0000000000000002d) + "'", double15 == (-1.0000000000000002d));
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.8414709848078965d + "'", double17 == 0.8414709848078965d);
    }

    @Test
    public void test14430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14430");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: ko-KR", "chinois (chine)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: chinois (chine)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14431");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("TWN", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("kor", strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale9, locale10, locale11, locale12, locale13, locale14, locale16, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale27, locale28, locale29, locale30, locale31, locale32, locale34, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList38, filteringMode40);
        java.lang.String[] strArray45 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList46);
        java.lang.String str49 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strList46);
        java.util.Collection<java.util.Locale> localeCollection50 = null;
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, localeCollection50);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap52);
        java.util.Locale.LanguageRange languageRange56 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str57 = languageRange56.getRange();
        java.util.Locale.LanguageRange languageRange60 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str61 = languageRange60.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] { languageRange56, languageRange60 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale locale72 = java.util.Locale.GERMANY;
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.lang.String str74 = locale73.getDisplayLanguage();
        java.util.Locale locale75 = java.util.Locale.FRENCH;
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.util.Locale locale77 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray78 = new java.util.Locale[] { locale68, locale69, locale70, locale71, locale72, locale73, locale75, locale76, locale77 };
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.Locale.FilteringMode filteringMode81 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.util.Locale>) localeList79, filteringMode81);
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale locale84 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale.Builder builder85 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder87 = builder85.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder89 = builder85.setLanguage("ZXZ");
        java.util.Locale locale90 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder91 = builder85.setLocale(locale90);
        java.util.Locale locale92 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder93 = builder85.setLocale(locale92);
        java.lang.String str94 = locale92.getDisplayCountry();
        java.util.Set<java.lang.String> strSet95 = locale92.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet96 = locale92.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList97 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet96);
        java.lang.String str98 = java.util.Locale.lookupTag(languageRangeList5, (java.util.Collection<java.lang.String>) strSet96);
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet96);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode40.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zxz" + "'", str57, "zxz");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zxz" + "'", str61, "zxz");
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + filteringMode81 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode81.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNull(locale84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Canada" + "'", str94, "Canada");
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(strList97);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test14432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14432");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.println((float) 1L);
        printStream1.print((int) (short) 10);
        printStream1.print("zho");
        printStream1.write((int) '#');
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter("org.apache.commons.math.MathException: ko_KR");
        printWriter24.print((float) (byte) 10);
        printWriter24.print("\u5fb7\u6587");
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        printWriter31.println(1.0d);
        printWriter31.write((int) '4');
        java.io.PrintStream printStream38 = new java.io.PrintStream("ko-KR");
        printStream38.close();
        java.util.Locale locale40 = java.util.Locale.UK;
        java.lang.String[] strArray42 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream43 = printStream38.format(locale40, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray42);
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream38, false);
        printStream38.println(10.0f);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream38);
        printStream38.println();
        java.io.PrintStream printStream51 = printStream38.append('a');
        java.util.Locale.Category category52 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayLanguage();
        java.util.Locale.setDefault(category52, locale53);
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        boolean boolean58 = locale57.hasExtensions();
        java.util.Locale.setDefault(category56, locale57);
        java.util.Locale.setDefault(category52, locale57);
        java.util.Set<java.lang.String> strSet61 = locale57.getUnicodeLocaleKeys();
        org.apache.commons.math.geometry.Rotation rotation70 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double71 = rotation70.getQ0();
        org.apache.commons.math.geometry.Rotation rotation77 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double78 = rotation77.getQ0();
        org.apache.commons.math.geometry.Rotation rotation79 = rotation70.applyTo(rotation77);
        double double80 = rotation70.getQ0();
        double double81 = rotation70.getQ0();
        double[][] doubleArray82 = rotation70.getMatrix();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("Canada", (java.lang.Object[]) doubleArray82);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException84 = new org.apache.commons.math.geometry.NotARotationMatrixException("fr", (java.lang.Object[]) doubleArray82);
        java.lang.Object[] objArray85 = notARotationMatrixException84.getArguments();
        java.io.PrintStream printStream86 = printStream38.format(locale57, "", objArray85);
        java.io.PrintWriter printWriter87 = printWriter31.printf("xzy", objArray85);
        java.io.PrintWriter printWriter88 = printWriter24.printf("ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)", objArray85);
        java.io.PrintStream printStream89 = printStream1.printf("\uc601\uc5b4 (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION)", objArray85);
        printStream89.println((-0.0d));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(printStream43);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertTrue("'" + category52 + "' != '" + java.util.Locale.Category.FORMAT + "'", category52.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 52.0d + "'", double71 == 52.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 52.0d + "'", double78 == 52.0d);
        org.junit.Assert.assertNotNull(rotation79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 52.0d + "'", double80 == 52.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 52.0d + "'", double81 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[[25407.0, 1040.0, 2000.0], [-1040.0, 5407.0, 10400.0], [2000.0, -10400.0, 5607.0]]");
        org.junit.Assert.assertNotNull(printStream86);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printWriter88);
        org.junit.Assert.assertNotNull(printStream89);
    }

    @Test
    public void test14433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14433");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder6 = builder2.setLanguage("ZXZ");
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder8 = builder2.setLocale(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder10 = builder2.setLocale(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleKeys();
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter20.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray30 = rotation29.getMatrix();
        java.io.PrintWriter printWriter31 = printWriter20.format("en", (java.lang.Object[]) doubleArray30);
        java.io.PrintStream printStream32 = printStream1.format(locale9, "French", (java.lang.Object[]) doubleArray30);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37, (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray37, (java.lang.Throwable) mathException41);
        java.lang.Throwable[] throwableArray44 = mathException41.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException45 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray44);
        java.lang.Throwable[] throwableArray46 = notARotationMatrixException45.getSuppressed();
        java.io.PrintStream printStream47 = printStream32.format("YZY", (java.lang.Object[]) throwableArray46);
        java.io.PrintStream printStream49 = printStream47.append((java.lang.CharSequence) "Germany");
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.OutputStream) printStream49);
        printStream49.print((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale53);
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.lang.String str57 = locale55.getDisplayScript(locale56);
        java.lang.String str58 = locale53.getDisplayLanguage(locale56);
        java.lang.String str59 = locale53.getScript();
        java.lang.String str60 = locale53.getVariant();
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (-1), (double) 10L, (-5.539714827914696d));
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation(vector3D65, 48.0d);
        double[][] doubleArray68 = rotation67.getMatrix();
        java.io.PrintStream printStream69 = printStream49.format(locale53, "yzy", (java.lang.Object[]) doubleArray68);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u97d3\u6587" + "'", str58, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(printStream69);
    }

    @Test
    public void test14434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14434");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("United Kingdom");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException(throwable2);
        java.lang.String[] strArray5 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5);
        mathException3.addSuppressed((java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray8 = mathException6.getSuppressed();
        mathException1.addSuppressed((java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray14 = mathException13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = mathException13.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException13);
        java.lang.String[] strArray18 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray18, (java.lang.Throwable) mathException20);
        java.lang.String str22 = mathException21.getPattern();
        mathException16.addSuppressed((java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("zxz", (java.lang.Throwable) mathException16);
        java.lang.String[] strArray27 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray27, (java.lang.Throwable) mathException30);
        mathException24.addSuppressed((java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("\ub300\ud55c\ubbfc\uad6d", (java.lang.Throwable) mathException31);
        mathException1.addSuppressed((java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray35 = mathException1.getSuppressed();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ZXZ" + "'", str22, "ZXZ");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test14435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14435");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.lang.String str3 = locale2.getDisplayName();
        boolean boolean4 = locale2.hasExtensions();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = new java.util.Locale("org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uc911\uad6d\uc5b4", "Italy");
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.lang.String str17 = locale12.getDisplayLanguage(locale14);
        java.util.Locale locale18 = locale12.stripExtensions();
        java.lang.String str19 = locale12.getDisplayLanguage();
        java.util.Locale locale20 = locale12.stripExtensions();
        java.util.Set<java.lang.String> strSet21 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale23 = locale12.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale24.getDisplayName();
        boolean boolean26 = locale24.hasExtensions();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = locale24.getDisplayVariant(locale27);
        java.lang.String str29 = locale24.getDisplayCountry();
        java.lang.String str30 = locale12.getDisplayCountry(locale24);
        java.lang.String str31 = locale12.toLanguageTag();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4" + "'", str3, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English" + "'", str25, "English");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "und" + "'", str31, "und");
    }

    @Test
    public void test14436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14436");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder17 = builder4.setLanguage("fr");
        java.util.Locale.Builder builder18 = builder4.clear();
        java.util.Locale.Builder builder19 = builder4.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French" + "'", str11, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test14437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14437");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("org.apache.commons.math.MathException: German");
        java.lang.String str2 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14438");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) (byte) 100, (double) (short) 10, (-0.13715201283077028d), (double) ' ', true);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation7 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation8 = rotation5.revert();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9481327383354655d + "'", double6 == 0.9481327383354655d);
        org.junit.Assert.assertNotNull(rotation7);
        org.junit.Assert.assertNotNull(rotation8);
    }

    @Test
    public void test14439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14439");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        boolean boolean86 = printStream1.checkError();
        boolean boolean87 = printStream1.checkError();
        java.io.PrintStream printStream89 = printStream1.append((java.lang.CharSequence) "YZY");
        printStream89.println((-0.8230677854004599d));
        java.lang.Object[] objArray93 = null;
        java.io.PrintStream printStream94 = printStream89.printf("yzy", objArray93);
        java.lang.Object obj95 = null;
        printStream94.println(obj95);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(printStream89);
        org.junit.Assert.assertNotNull(printStream94);
    }

    @Test
    public void test14440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14440");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        double double3 = vector3D2.getY();
        double double4 = vector3D2.getY();
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Rotation rotation15 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation15.applyInverseTo(rotation21);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D27, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = rotation23.applyTo(vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D40, (double) (byte) 100, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D48 = vector3D40.subtract((double) 10L, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D48, (double) 10L, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        double double56 = vector3D55.getY();
        double double57 = vector3D55.getY();
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) 0L, vector3D52, (-52.0d), vector3D55);
        double double59 = vector3D55.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D60 = vector3D35.add((-0.0d), vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.plusJ;
        org.apache.commons.math.geometry.Rotation rotation68 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray69 = rotation68.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D71, (double) (byte) 100, vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D79 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D76, (double) (byte) 100, vector3D78);
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D73, vector3D78);
        org.apache.commons.math.geometry.Vector3D vector3D81 = rotation68.applyInverseTo(vector3D73);
        double double82 = vector3D73.getX();
        org.apache.commons.math.geometry.Vector3D vector3D83 = vector3D62.subtract(vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D84 = new org.apache.commons.math.geometry.Vector3D((-0.4869163399816042d), vector3D2, 0.0d, vector3D8, (-1.0d), vector3D35, 52.0d, vector3D83);
        org.apache.commons.math.geometry.RotationOrder rotationOrder86 = org.apache.commons.math.geometry.RotationOrder.YZX;
        org.apache.commons.math.geometry.Vector3D vector3D87 = rotationOrder86.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D88 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, 0.0d, vector3D87);
        org.apache.commons.math.geometry.Vector3D vector3D89 = vector3D87.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Vector3D vector3D92 = vector3D89.subtract(0.0024680600121295393d, vector3D91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(rotationOrder86);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D89);
    }

    @Test
    public void test14441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14441");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        boolean boolean86 = printStream1.checkError();
        boolean boolean87 = printStream1.checkError();
        java.io.PrintStream printStream89 = printStream1.append((java.lang.CharSequence) "YZY");
        printStream89.print(1);
        printStream89.flush();
        java.io.PrintStream printStream94 = printStream89.append((java.lang.CharSequence) "Chinese");
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(printStream89);
        org.junit.Assert.assertNotNull(printStream94);
    }

    @Test
    public void test14442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14442");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale1.getExtension('x');
        java.lang.String str7 = locale1.getISO3Language();
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.lang.String str11 = locale8.getLanguage();
        java.lang.String str12 = locale8.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str15 = locale8.getDisplayLanguage(locale14);
        java.lang.String str16 = locale1.getDisplayScript(locale14);
        java.util.Set<java.lang.Character> charSet17 = locale1.getExtensionKeys();
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = locale1.getDisplayName(locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eng" + "'", str7, "eng");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
    }

    @Test
    public void test14443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14443");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print("XYZ");
        printWriter4.close();
        printWriter4.print("\ud55c\uad6d\uc5b4");
        printWriter4.println(false);
        printWriter4.print((long) (short) 1);
        printWriter4.write("org.apache.commons.math.geometry.NotARotationMatrixException: zxz (KO_KR)", (int) (byte) 10, (int) (byte) -1);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
    }

    @Test
    public void test14444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14444");
        java.util.Locale locale2 = new java.util.Locale("\u82f1\u56fd", "de_DE_#a-ko-kr");
        org.junit.Assert.assertEquals(locale2.toString(), "\u82f1\u56fd_DE_DE_#A-KO-KR");
    }

    @Test
    public void test14445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14445");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale10.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray21 = rotation20.getMatrix();
        java.io.PrintWriter printWriter22 = printWriter5.format(locale10, "YZY", (java.lang.Object[]) doubleArray21);
        printWriter22.println("it");
        printWriter22.write("\uc911\uad6d\uc5b4");
        org.apache.commons.math.geometry.RotationOrder rotationOrder28 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str29 = rotationOrder28.toString();
        org.apache.commons.math.geometry.Vector3D vector3D30 = rotationOrder28.getA2();
        java.lang.String str31 = rotationOrder28.toString();
        org.apache.commons.math.geometry.Rotation rotation35 = new org.apache.commons.math.geometry.Rotation(rotationOrder28, (-0.8230677854004599d), (-0.6655420184408231d), (-6782.273252612676d));
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotationOrder28.getA3();
        java.lang.String str37 = rotationOrder28.toString();
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation(rotationOrder28, (double) (byte) 10, (-52.0d), (-9990.0d));
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double48 = rotation47.getQ1();
        double double49 = rotation47.getQ0();
        double[][] doubleArray50 = rotation47.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation51 = rotation41.applyTo(rotation47);
        double[][] doubleArray52 = rotation51.getMatrix();
        java.io.PrintWriter printWriter53 = printWriter22.printf("\u7fa9\u5927\u5229\u6587)", (java.lang.Object[]) doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation(doubleArray52, (-0.789201659956388d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(rotationOrder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "YZY" + "'", str29, "YZY");
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "YZY" + "'", str31, "YZY");
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "YZY" + "'", str37, "YZY");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(printWriter53);
    }

    @Test
    public void test14446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14446");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.close();
        printWriter5.println(false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        printWriter5.flush();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        printWriter5.println("it__#u-english");
    }

    @Test
    public void test14447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14447");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u97d3\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception: ??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14448");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getDisplayLanguage(locale6);
        java.lang.String str10 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale14 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale15.getDisplayLanguage(locale18);
        java.lang.String str21 = locale14.getDisplayVariant(locale18);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.lang.String str26 = locale14.getDisplayVariant(locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.lang.String str28 = locale23.getDisplayName();
        java.lang.String str29 = locale23.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertEquals(locale14.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587" + "'", str20, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)" + "'", str28, "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ko" + "'", str29, "ko");
    }

    @Test
    public void test14449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14449");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zho");
        java.io.PrintStream printStream2 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.print(1.7932371536978438d);
        printStream1.println((float) (short) -1);
        boolean boolean7 = printStream1.checkError();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test14450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14450");
        java.io.PrintStream printStream1 = new java.io.PrintStream("zho");
        java.io.PrintStream printStream2 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        boolean boolean6 = locale3.hasExtensions();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder7.setExtension('u', "");
        java.util.Locale.Builder builder14 = builder12.setVariant("");
        java.util.Locale locale15 = builder14.build();
        java.lang.String str16 = locale3.getDisplayName(locale15);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        java.lang.String[] strArray25 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter26 = printWriter23.printf("ko-KR", (java.lang.Object[]) strArray25);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        java.lang.String str30 = locale28.getVariant();
        printWriter26.print((java.lang.Object) str30);
        org.apache.commons.math.geometry.RotationOrder rotationOrder33 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotationOrder33.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D35 = rotationOrder33.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotationOrder33.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotationOrder33.getA3();
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation(rotationOrder33, (-0.09950371902099892d), (double) (-1), (double) ' ');
        double[][] doubleArray42 = rotation41.getMatrix();
        java.io.PrintWriter printWriter43 = printWriter26.format("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray42);
        java.io.PrintStream printStream44 = printStream2.printf(locale15, "\ub3c5\uc77c", (java.lang.Object[]) doubleArray42);
        printStream44.println(false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(rotationOrder33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(printWriter43);
        org.junit.Assert.assertNotNull(printStream44);
    }

    @Test
    public void test14451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14451");
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D9 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D4, (double) 0L, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D(52.0d, Double.NaN, (double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D16 = vector3D10.subtract(0.9999500037496876d, vector3D15);
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter21.print((double) (byte) 100);
        printWriter21.println();
        printWriter21.println('#');
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double34 = rotation33.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D35 = rotation33.getAxis();
        printWriter21.print((java.lang.Object) rotation33);
        org.apache.commons.math.geometry.Rotation rotation37 = rotation33.revert();
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D41 = vector3D40.negate();
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D51, (double) (byte) 100, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D56, (double) (byte) 100, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D53, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D63, (double) (byte) 100, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D71, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D79 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D58, (double) (byte) 1, vector3D66, (double) (short) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D80 = vector3D58.negate();
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D58);
        double double82 = vector3D58.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D83 = vector3D46.subtract((double) (short) -1, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D84 = vector3D40.add((double) (byte) 0, vector3D58);
        double double85 = vector3D84.getY();
        org.apache.commons.math.geometry.Vector3D vector3D86 = rotation37.applyInverseTo(vector3D84);
        org.apache.commons.math.geometry.Vector3D vector3D87 = vector3D15.add(vector3D84);
        org.apache.commons.math.geometry.Vector3D vector3D88 = new org.apache.commons.math.geometry.Vector3D((-0.4933235701589626d), vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + (-0.13715201283077028d) + "'", double85 == (-0.13715201283077028d));
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D87);
    }

    @Test
    public void test14452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14452");
        java.util.Locale locale1 = new java.util.Locale("china (CHINESISCH (CHINA))");
        org.junit.Assert.assertEquals(locale1.toString(), "china (chinesisch (china))");
    }

    @Test
    public void test14453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14453");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D23 = rotation20.applyTo(vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = vector3D23.negate();
        org.apache.commons.math.geometry.RotationOrder rotationOrder26 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotationOrder26.getA3();
        double double28 = vector3D27.getX();
        org.apache.commons.math.geometry.RotationOrder rotationOrder30 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotationOrder30.getA1();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation(vector3D31, Double.NaN);
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D(0.5514266812416906d, vector3D27, 0.8414709848078965d, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D41 = vector3D38.scalarMultiply((-0.07863815249432443d));
        org.apache.commons.math.geometry.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D46, vector3D51);
        double double54 = vector3D46.getAlpha();
        double double55 = vector3D46.getY();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation56 = new org.apache.commons.math.geometry.Rotation(vector3D23, vector3D31, vector3D42, vector3D46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: zero norm for rotation defining vector");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(rotationOrder26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(rotationOrder30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test14454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14454");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter5.println((float) (byte) -1);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        printWriter10.println();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter10, false);
        printWriter10.println((float) 'a');
        printWriter10.print(' ');
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str24 = locale22.getDisplayScript(locale23);
        java.lang.String str25 = locale21.getDisplayLanguage(locale22);
        java.lang.String str26 = locale18.getDisplayName(locale21);
        java.util.Set<java.lang.String> strSet27 = locale18.getUnicodeLocaleKeys();
        java.lang.String[] strArray30 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray30);
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.io.PrintWriter printWriter33 = printWriter10.format(locale18, "cor\351en (Cor\351e du Sud)", (java.lang.Object[]) throwableArray32);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37);
        java.lang.Object[] objArray39 = mathException38.getArguments();
        java.lang.String str40 = mathException38.getPattern();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("ITA", (java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("japon\350s", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) mathException44);
        java.lang.Throwable[] throwableArray46 = mathException45.getSuppressed();
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fran\347ais" + "'", str25, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "anglais" + "'", str26, "anglais");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ZXZ" + "'", str40, "ZXZ");
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test14455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14455");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder8.setRegion("");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getVariant();
        java.util.Locale.Builder builder15 = builder10.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.lang.String str22 = locale17.getDisplayLanguage(locale19);
        java.lang.String str24 = locale17.getExtension('u');
        java.util.Locale.Builder builder25 = builder15.setLocale(locale17);
        java.util.Locale.Builder builder27 = builder25.setRegion("GB");
        java.util.Locale.Builder builder29 = builder27.addUnicodeLocaleAttribute("italy");
        java.util.Locale.Builder builder30 = builder27.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test14456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14456");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray11 = rotation10.getMatrix();
        java.io.PrintStream printStream12 = printStream1.printf("fra", (java.lang.Object[]) doubleArray11);
        printStream12.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream12);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintStream printStream18 = printStream12.append('u');
        java.io.PrintStream printStream20 = printStream18.append(' ');
        java.lang.String[] strArray24 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray24);
        java.lang.Object[] objArray26 = mathException25.getArguments();
        java.lang.String str27 = mathException25.getPattern();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException25);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException25);
        java.lang.Object[] objArray30 = mathException25.getArguments();
        java.lang.Object[] objArray31 = mathException25.getArguments();
        java.io.PrintStream printStream32 = printStream18.format("und-Italian", objArray31);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ZXZ" + "'", str27, "ZXZ");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream32);
    }

    @Test
    public void test14457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14457");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print((double) 0.0f);
        printWriter12.println("zxz (KO_KR)");
        printWriter12.write((int) ' ');
        printWriter12.print((long) (byte) 0);
        java.io.PrintWriter printWriter22 = printWriter12.append((java.lang.CharSequence) "\u82f1\u6587");
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        printWriter24.close();
        printWriter24.println((-8087.321164150444d));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test14458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14458");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "\ud504\ub791\uc2a4\uc5b4,KR)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: Italian (?????????,KR)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14459");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        printStream15.println("XYZ");
        printStream15.println();
        printStream15.print(false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        java.io.PrintStream printStream24 = printStream15.append((java.lang.CharSequence) "YXZ");
        printStream15.close();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream24);
    }

    @Test
    public void test14460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14460");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str3 = languageRange2.getRange();
        java.lang.String str4 = languageRange2.getRange();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        java.lang.String str8 = languageRange2.getRange();
        java.lang.String str9 = languageRange2.getRange();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zxz" + "'", str3, "zxz");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zxz" + "'", str4, "zxz");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zxz" + "'", str7, "zxz");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zxz" + "'", str8, "zxz");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zxz" + "'", str9, "zxz");
    }

    @Test
    public void test14461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14461");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getLanguage();
        java.util.Locale locale2 = locale0.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
    }

    @Test
    public void test14462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14462");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale locale1 = locale0.stripExtensions();
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        printWriter6.println((float) (byte) -1);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter6, true);
        java.lang.String[] strArray13 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter14 = printWriter6.printf("KR", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        char[] charArray23 = new char[] { ' ', 'x' };
        printWriter20.write(charArray23);
        printWriter6.println(charArray23);
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str28 = locale26.getDisplayScript(locale27);
        java.lang.String str29 = locale27.getVariant();
        java.lang.String[] strArray32 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray32);
        java.io.PrintWriter printWriter34 = printWriter6.printf(locale27, "English", (java.lang.Object[]) strArray32);
        java.lang.String str35 = locale27.getScript();
        java.lang.String str36 = locale0.getDisplayLanguage(locale27);
        java.io.PrintStream printStream38 = new java.io.PrintStream("ko-KR");
        printStream38.close();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream38, false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        printWriter41.println((float) (byte) -1);
        printWriter41.print('a');
        java.util.Locale locale48 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter41.print((java.lang.Object) locale48);
        java.lang.String str50 = locale48.getDisplayName();
        java.util.Set<java.lang.String> strSet51 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale48.getDisplayName();
        boolean boolean53 = locale48.hasExtensions();
        java.lang.String str54 = locale48.getDisplayName();
        java.lang.String str55 = locale48.toLanguageTag();
        java.lang.String str56 = locale27.getDisplayLanguage(locale48);
        java.lang.String str57 = locale48.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , x]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u97d3\u6587" + "'", str36, "\u97d3\u6587");
        org.junit.Assert.assertEquals(locale48.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str50, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str52, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str54, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "und" + "'", str55, "und");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese" + "'", str56, "Chinese");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test14463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14463");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder20 = builder14.setLocale(locale19);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder22 = builder14.setLocale(locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale21);
        java.lang.String str25 = locale21.getDisplayVariant();
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray29, (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray29, (java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray36 = mathException33.getSuppressed();
        java.io.PrintWriter printWriter37 = printWriter13.format(locale21, "ita", (java.lang.Object[]) throwableArray36);
        java.io.PrintWriter printWriter39 = printWriter37.append('a');
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream44 = new java.io.PrintStream("ko-KR");
        printStream44.close();
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream44, false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter47);
        printWriter47.println((float) (byte) -1);
        printWriter47.print("XYZ");
        java.util.Locale locale53 = java.util.Locale.ENGLISH;
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        java.util.Locale.Category category56 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category57 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.util.Locale.setDefault(category57, locale58);
        java.util.Locale.setDefault(category56, locale58);
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.lang.String str63 = locale58.getDisplayLanguage(locale62);
        java.lang.String str64 = locale58.getISO3Country();
        java.lang.String str65 = locale54.getDisplayLanguage(locale58);
        java.util.Locale locale66 = locale58.stripExtensions();
        java.lang.String[] strArray70 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray70);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray70, (java.lang.Throwable) mathException73);
        java.io.PrintWriter printWriter75 = printWriter47.format(locale66, "", (java.lang.Object[]) strArray70);
        java.io.PrintWriter printWriter76 = printWriter37.format(locale41, "\u82f1\u56fd", (java.lang.Object[]) strArray70);
        printWriter37.println((long) (short) 1);
        printWriter37.print(0L);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(printWriter39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.FORMAT + "'", category56.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.FORMAT + "'", category57.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "French" + "'", str65, "French");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printWriter76);
    }

    @Test
    public void test14464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14464");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("fr");
        java.util.Locale.Builder builder10 = builder8.setLanguageTag("german");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setLanguage("chinesisch (china)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: chinesisch (china) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test14465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14465");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream13 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale17 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale.setDefault(category18, locale19);
        java.lang.String str22 = locale17.getDisplayName(locale19);
        java.lang.String str23 = locale19.getDisplayName();
        java.lang.String str24 = locale14.getDisplayLanguage(locale19);
        printStream13.println((java.lang.Object) locale19);
        java.lang.String str26 = locale19.getCountry();
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        printWriter34.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray44 = rotation43.getMatrix();
        java.io.PrintWriter printWriter45 = printWriter34.format("en", (java.lang.Object[]) doubleArray44);
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.lang.String str49 = locale46.getLanguage();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = mathException52.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException55 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray54);
        java.io.PrintWriter printWriter56 = printWriter34.format(locale46, "ZXZ", (java.lang.Object[]) throwableArray54);
        java.lang.String str57 = locale46.getDisplayCountry();
        java.lang.String str58 = locale46.getISO3Language();
        java.lang.String str59 = locale46.getISO3Language();
        java.util.Set<java.lang.String> strSet60 = locale46.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale46);
        java.util.Locale locale62 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale62);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.lang.String str66 = locale64.getDisplayScript(locale65);
        java.lang.String str67 = locale62.getDisplayLanguage(locale65);
        java.lang.String str68 = locale62.getScript();
        java.util.Locale.setDefault(category0, locale62);
        java.util.Locale locale70 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u97d3\u6587)" + "'", str22, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "en" + "'", str49, "en");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "eng" + "'", str58, "eng");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "eng" + "'", str59, "eng");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u97d3\u6587" + "'", str67, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko_KR");
    }

    @Test
    public void test14466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14466");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        printStream8.println((double) 1);
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        printStream15.close();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream15, false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter18);
        printWriter18.println((float) (byte) -1);
        printWriter18.print('a');
        java.util.Locale locale25 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter18.print((java.lang.Object) locale25);
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D30 = vector3D29.negate();
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D40, (double) (byte) 100, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D45, (double) (byte) 100, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D42, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D52, (double) (byte) 100, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D58, (double) (byte) 100, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D63, (double) (byte) 100, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D60, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D47, (double) (byte) 1, vector3D55, (double) (short) 100, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D69 = vector3D47.negate();
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D47);
        double double71 = vector3D47.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D72 = vector3D35.subtract((double) (short) -1, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D73 = vector3D29.add((double) (byte) 0, vector3D47);
        double double74 = vector3D73.getY();
        printWriter18.println((java.lang.Object) double74);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException81);
        java.lang.Object[] objArray83 = mathException81.getArguments();
        java.io.PrintStream printStream86 = new java.io.PrintStream("ko-KR");
        printStream86.close();
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream86, false);
        java.io.PrintWriter printWriter90 = new java.io.PrintWriter((java.io.Writer) printWriter89);
        java.lang.String[] strArray92 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter93 = printWriter90.printf("ko-KR", (java.lang.Object[]) strArray92);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException94 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray92);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("German", objArray83, (java.lang.Throwable) notARotationMatrixException94);
        java.io.PrintWriter printWriter96 = printWriter18.printf("\uc911\uad6d\uc5b4", objArray83);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException97 = new org.apache.commons.math.geometry.NotARotationMatrixException("en", objArray83);
        java.io.PrintStream printStream98 = printStream8.format("org.apache.commons.math.geometry.NotARotationMatrixException: zxz (KO_KR)", objArray83);
        java.io.PrintStream printStream99 = new java.io.PrintStream((java.io.OutputStream) printStream98);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertEquals(locale25.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-0.13715201283077028d) + "'", double74 == (-0.13715201283077028d));
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(printWriter93);
        org.junit.Assert.assertNotNull(printWriter96);
        org.junit.Assert.assertNotNull(printStream98);
    }

    @Test
    public void test14467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14467");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print("XYZ");
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale.setDefault(category13, locale15);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale15.getDisplayLanguage(locale19);
        java.lang.String str21 = locale15.getISO3Country();
        java.lang.String str22 = locale11.getDisplayLanguage(locale15);
        java.util.Locale locale23 = locale15.stripExtensions();
        java.lang.String[] strArray27 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray27, (java.lang.Throwable) mathException30);
        java.io.PrintWriter printWriter32 = printWriter4.format(locale23, "", (java.lang.Object[]) strArray27);
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double41 = rotation40.getQ0();
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double48 = rotation47.getQ0();
        org.apache.commons.math.geometry.Rotation rotation49 = rotation40.applyTo(rotation47);
        double[][] doubleArray50 = rotation47.getMatrix();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException51 = new org.apache.commons.math.geometry.NotARotationMatrixException("zxz (KO_KR)", (java.lang.Object[]) doubleArray50);
        java.io.PrintWriter printWriter52 = printWriter32.format("\uce90\ub098\ub2e4", (java.lang.Object[]) doubleArray50);
        printWriter32.print((-40.752877659587945d));
        printWriter32.print(0.2378366942243697d);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "French" + "'", str22, "French");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(printWriter52);
    }

    @Test
    public void test14468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14468");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("de", "zxz (ko_kr)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zxz (ko_kr)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14469");
        java.lang.String[] strArray1 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray1);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("XZY");
        mathException2.addSuppressed((java.lang.Throwable) mathException4);
        java.lang.Throwable[] throwableArray6 = mathException2.getSuppressed();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test14470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14470");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale4);
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getDisplayLanguage(locale7);
        java.util.Locale.setDefault(category0, locale7);
        java.lang.String str11 = locale7.getCountry();
        java.util.Locale locale14 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        boolean boolean17 = locale16.hasExtensions();
        java.util.Locale.setDefault(category15, locale16);
        java.lang.String str19 = locale14.getDisplayName(locale16);
        java.lang.String str20 = locale14.getDisplayCountry();
        java.lang.String str21 = locale14.getISO3Language();
        java.lang.String str22 = locale14.getLanguage();
        java.lang.String str23 = locale14.getVariant();
        java.util.Set<java.lang.Character> charSet24 = locale14.getExtensionKeys();
        java.io.PrintStream printStream26 = new java.io.PrintStream("ko-KR");
        printStream26.close();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter29);
        printWriter29.println((float) (byte) -1);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter29, true);
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter37 = printWriter29.printf("KR", (java.lang.Object[]) strArray36);
        java.io.PrintStream printStream39 = new java.io.PrintStream("ko-KR");
        printStream39.close();
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream39, false);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter42);
        char[] charArray46 = new char[] { ' ', 'x' };
        printWriter43.write(charArray46);
        printWriter29.println(charArray46);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale49.getDisplayScript(locale50);
        java.lang.String str52 = locale50.getVariant();
        java.lang.String[] strArray55 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray55);
        java.io.PrintWriter printWriter57 = printWriter29.printf(locale50, "English", (java.lang.Object[]) strArray55);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.Writer) printWriter29);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getDisplayLanguage();
        printWriter29.println((java.lang.Object) locale59);
        java.lang.String str62 = locale14.getDisplayLanguage(locale59);
        java.lang.String str63 = locale59.getISO3Language();
        java.util.Set<java.lang.String> strSet64 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str65 = locale7.getDisplayCountry(locale59);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder66.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder69 = builder68.clearExtensions();
        java.util.Locale.Builder builder71 = builder69.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream73 = new java.io.PrintStream("ko-KR");
        printStream73.close();
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter((java.io.OutputStream) printStream73, false);
        java.io.PrintWriter printWriter77 = new java.io.PrintWriter((java.io.Writer) printWriter76);
        printWriter77.println('a');
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder82 = builder80.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder84 = builder80.setLanguage("ZXZ");
        java.util.Locale locale85 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder86 = builder80.setLocale(locale85);
        java.lang.Object[] objArray88 = null;
        java.io.PrintWriter printWriter89 = printWriter77.format(locale85, "TWN", objArray88);
        java.util.Set<java.lang.String> strSet90 = locale85.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder91 = builder69.setLocale(locale85);
        java.lang.String str92 = locale59.getDisplayVariant(locale85);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u97d3\u6587" + "'", str9, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TW" + "'", str11, "TW");
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u97d3\u6587)" + "'", str19, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587" + "'", str20, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ , x]");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "German" + "'", str60, "German");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "deu" + "'", str63, "deu");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Taiwan" + "'", str65, "Taiwan");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(printWriter89);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test14471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14471");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale5.getDisplayLanguage(locale9);
        java.lang.String str11 = locale5.getISO3Country();
        java.lang.String str12 = locale1.getDisplayLanguage(locale5);
        java.util.Locale locale13 = locale5.stripExtensions();
        java.util.Locale.Category category14 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale.setDefault(category16, locale17);
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale.setDefault(category14, locale17);
        java.lang.String str22 = locale17.getDisplayVariant();
        java.lang.String str23 = locale17.getDisplayName();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = locale24.getISO3Language();
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getLanguage();
        java.lang.String str28 = locale17.getDisplayScript(locale24);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("China");
        java.lang.String str31 = locale17.getDisplayVariant(locale30);
        java.lang.String str32 = locale13.getDisplayLanguage(locale30);
        java.lang.String str33 = locale13.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "French" + "'", str12, "French");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.FORMAT + "'", category14.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ita" + "'", str25, "ita");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it" + "'", str27, "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "china");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test14472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14472");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(1.4070751110264852d, (-1.5707963267948966d), (double) (byte) 0, 0.49778714378213806d, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test14473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14473");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("ko-kr");
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale locale9 = builder6.build();
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale locale11 = builder6.build();
        java.util.Locale.Builder builder13 = builder6.removeUnicodeLocaleAttribute("ita");
        java.util.Locale.Builder builder14 = builder6.clear();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder20 = builder15.setExtension('u', "");
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale24 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale.setDefault(category25, locale26);
        java.lang.String str29 = locale24.getDisplayName(locale26);
        java.lang.String str30 = locale26.getDisplayName();
        java.lang.String str31 = locale21.getDisplayLanguage(locale26);
        java.util.Locale.Builder builder32 = builder15.setLocale(locale21);
        java.lang.String str33 = locale21.getDisplayLanguage();
        java.lang.String str34 = locale21.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet35 = locale21.getExtensionKeys();
        java.util.Locale.Builder builder36 = builder6.setLocale(locale21);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u97d3\u6587)" + "'", str29, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English" + "'", str30, "English");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English" + "'", str33, "English");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English" + "'", str34, "English");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test14474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14474");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("Chinese");
        java.lang.String str2 = mathException1.getPattern();
        java.lang.String str3 = mathException1.getPattern();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinese" + "'", str2, "Chinese");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Chinese" + "'", str3, "Chinese");
    }

    @Test
    public void test14475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14475");
        org.apache.commons.math.geometry.CardanEulerSingularityException cardanEulerSingularityException1 = new org.apache.commons.math.geometry.CardanEulerSingularityException(true);
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) cardanEulerSingularityException1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) cardanEulerSingularityException1);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        java.lang.Object[] objArray10 = mathException8.getArguments();
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter20 = printWriter17.printf("ko-KR", (java.lang.Object[]) strArray19);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException21 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("German", objArray10, (java.lang.Throwable) notARotationMatrixException21);
        java.lang.String str23 = mathException22.getPattern();
        java.lang.String str24 = mathException22.getPattern();
        mathException3.addSuppressed((java.lang.Throwable) mathException22);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "German" + "'", str23, "German");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "German" + "'", str24, "German");
    }

    @Test
    public void test14476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14476");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        java.io.PrintWriter printWriter12 = printWriter4.append('#');
        printWriter12.close();
        printWriter12.print('#');
        printWriter12.println(1.0f);
        boolean boolean18 = printWriter12.checkError();
        java.lang.String[] strArray24 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray24, (java.lang.Throwable) mathException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray29 = mathException28.getSuppressed();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray24, (java.lang.Throwable) mathException28);
        java.lang.Throwable[] throwableArray31 = mathException28.getSuppressed();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("ko_KR", (java.lang.Object[]) throwableArray31);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException33 = new org.apache.commons.math.geometry.NotARotationMatrixException("TW", (java.lang.Object[]) throwableArray31);
        java.lang.String str34 = notARotationMatrixException33.getPattern();
        java.lang.String str35 = notARotationMatrixException33.getPattern();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException((java.lang.Throwable) notARotationMatrixException33);
        java.lang.Throwable[] throwableArray37 = notARotationMatrixException33.getSuppressed();
        java.io.PrintWriter printWriter38 = printWriter12.format("germany", (java.lang.Object[]) throwableArray37);
        printWriter38.print("\u97d3\u6587");
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "TW" + "'", str34, "TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "TW" + "'", str35, "TW");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test14477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14477");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream8 = printStream3.format(locale5, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ko-KR");
        printStream10.close();
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream10, false);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter13);
        char[] charArray17 = new char[] { ' ', 'x' };
        printWriter14.write(charArray17);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        java.lang.String str22 = locale19.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray30 = rotation29.getMatrix();
        java.io.PrintWriter printWriter31 = printWriter14.format(locale19, "YZY", (java.lang.Object[]) doubleArray30);
        java.lang.String str32 = locale5.getDisplayCountry(locale19);
        java.lang.String str33 = locale0.getDisplayVariant(locale5);
        java.lang.String str34 = locale0.getDisplayVariant();
        java.util.Locale.Category category35 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.util.Locale.setDefault(category37, locale38);
        java.util.Locale.setDefault(category36, locale38);
        java.util.Locale.setDefault(category35, locale38);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.lang.String str44 = locale38.getDisplayScript(locale43);
        java.lang.String str45 = locale43.getDisplayCountry();
        java.lang.String str46 = locale43.getDisplayVariant();
        java.util.Locale locale48 = new java.util.Locale("\ub3c5\uc77c\uc5b4");
        java.io.PrintStream printStream50 = new java.io.PrintStream("ko-KR");
        printStream50.close();
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream55 = printStream50.format(locale52, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray54);
        java.lang.String str56 = locale52.getDisplayLanguage();
        java.lang.String str57 = locale48.getDisplayVariant(locale52);
        java.lang.String str58 = locale43.getDisplayName(locale52);
        java.lang.String str59 = locale0.getDisplayVariant(locale52);
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.lang.String str62 = locale60.getExtension('a');
        java.lang.String str63 = locale60.getDisplayScript();
        java.lang.String str64 = locale60.getLanguage();
        java.lang.String str65 = locale52.getDisplayVariant(locale60);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , x]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "United Kingdom" + "'", str32, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.FORMAT + "'", category35.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.FORMAT + "'", category36.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category37 + "' != '" + java.util.Locale.Category.FORMAT + "'", category37.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "China" + "'", str45, "China");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals(locale48.toString(), "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printStream55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "English" + "'", str56, "English");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese (China)" + "'", str58, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko_KR");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ko" + "'", str64, "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test14478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14478");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        printWriter4.println(charArray21);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale25.getVariant();
        java.lang.String[] strArray30 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter32 = printWriter4.printf(locale25, "English", (java.lang.Object[]) strArray30);
        printWriter4.print(' ');
        java.io.PrintWriter printWriter36 = printWriter4.append('a');
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder41 = builder37.setLanguage("ZXZ");
        java.util.Locale.Builder builder42 = builder37.clear();
        java.util.Locale.Category category43 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category44 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayLanguage();
        java.util.Locale.setDefault(category44, locale45);
        java.util.Locale.setDefault(category43, locale45);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale45.getDisplayLanguage(locale49);
        java.util.Locale.Builder builder51 = builder37.setLocale(locale49);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str54 = locale49.getDisplayLanguage(locale53);
        java.lang.Object[] objArray56 = null;
        java.io.PrintWriter printWriter57 = printWriter4.printf(locale49, "ita", objArray56);
        printWriter57.write("\ub3c5\uc77c\uc5b4", (int) (byte) 0, (int) (short) 0);
        printWriter57.println(0.479425538604203d);
        printWriter57.print((long) '#');
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.FORMAT + "'", category43.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.FORMAT + "'", category44.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "German" + "'", str54, "German");
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test14479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14479");
        java.io.PrintStream printStream1 = new java.io.PrintStream("chn");
    }

    @Test
    public void test14480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14480");
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D4, (double) (byte) 100, vector3D6);
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D6, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D24, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D11, (double) (byte) 1, vector3D19, (double) (short) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D33 = vector3D11.negate();
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D11);
        double double35 = vector3D11.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D11.scalarMultiply((double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D39, (double) (byte) 100, vector3D41);
        double double43 = vector3D41.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D44 = vector3D11.subtract(vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D(0.5840734641020676d, vector3D44);
        double double46 = vector3D44.getNorm();
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test14481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14481");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D16);
        double double19 = rotation5.getQ0();
        double double20 = rotation5.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D(1.7932371536978438d, 3.141592653589793d);
        org.apache.commons.math.geometry.Vector3D vector3D24 = rotation5.applyTo(vector3D23);
        double double25 = vector3D24.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((-3.141592653589793d), 0.0d, (double) 10L);
        org.apache.commons.math.geometry.RotationOrder rotationOrder30 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation(rotationOrder30, 0.0d, 52.0d, (double) (byte) 1);
        org.apache.commons.math.geometry.RotationOrder rotationOrder35 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str36 = rotationOrder35.toString();
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotationOrder35.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D38 = rotationOrder35.getA3();
        java.lang.String str39 = rotationOrder35.toString();
        org.apache.commons.math.geometry.Vector3D vector3D40 = rotationOrder35.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D41 = rotationOrder35.getA3();
        double[] doubleArray42 = rotation34.getAngles(rotationOrder35);
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotationOrder35.getA1();
        double double44 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D29, vector3D43);
        double double45 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D24, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((-3818.802471205947d), 0.20112376381681635d, 3.0852190676658116d);
        org.apache.commons.math.geometry.Vector3D vector3D51 = vector3D43.subtract(0.5773502691896258d, vector3D50);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 12782.86818986133d + "'", double25 == 12782.86818986133d);
        org.junit.Assert.assertNotNull(rotationOrder30);
        org.junit.Assert.assertNotNull(rotationOrder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ZXZ" + "'", str36, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ZXZ" + "'", str39, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-2.9778714378213818, 0.9999999999999997, -1.5707963267948966]");
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10584.98550868947d + "'", double45 == 10584.98550868947d);
        org.junit.Assert.assertNotNull(vector3D51);
    }

    @Test
    public void test14482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14482");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.lang.String[] strArray6 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream7 = printStream2.format(locale4, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray6);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream2, false);
        java.io.PrintStream printStream11 = printStream2.append('4');
        printStream11.print("Chinesisch (China)");
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale locale19 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str20 = locale14.getDisplayLanguage(locale19);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getISO3Language();
        boolean boolean23 = locale21.hasExtensions();
        boolean boolean24 = locale21.hasExtensions();
        java.lang.String str25 = locale14.getDisplayVariant(locale21);
        java.util.Locale locale26 = locale14.stripExtensions();
        java.lang.String str27 = locale26.getLanguage();
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        printWriter33.println((float) (byte) -1);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter33, true);
        org.apache.commons.math.geometry.Rotation rotation45 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double46 = rotation45.getQ0();
        org.apache.commons.math.geometry.Rotation rotation52 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double53 = rotation52.getQ0();
        org.apache.commons.math.geometry.Rotation rotation54 = rotation45.applyTo(rotation52);
        double double55 = rotation45.getQ0();
        double double56 = rotation45.getQ0();
        double[][] doubleArray57 = rotation45.getMatrix();
        java.io.PrintWriter printWriter58 = printWriter38.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray57);
        java.lang.String[] strArray62 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray62, (java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray67 = mathException66.getSuppressed();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray62, (java.lang.Throwable) mathException66);
        java.lang.Throwable[] throwableArray69 = mathException66.getSuppressed();
        java.io.PrintWriter printWriter70 = printWriter58.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray69);
        java.io.PrintStream printStream71 = printStream11.printf(locale26, "\ubbf8\uad6d", (java.lang.Object[]) throwableArray69);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException72 = new org.apache.commons.math.geometry.NotARotationMatrixException("Chine", (java.lang.Object[]) throwableArray69);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(printStream11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale19.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "French" + "'", str20, "French");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ita" + "'", str22, "ita");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fr" + "'", str27, "fr");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 52.0d + "'", double46 == 52.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(printWriter58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printStream71);
    }

    @Test
    public void test14483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14483");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        java.io.PrintWriter printWriter10 = printWriter5.append('x');
        printWriter5.println("French");
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException23);
        java.lang.Throwable[] throwableArray26 = mathException23.getSuppressed();
        java.io.PrintStream printStream27 = printStream15.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray26);
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        printWriter32.println((float) (byte) -1);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter32, true);
        java.lang.String[] strArray39 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter40 = printWriter32.printf("KR", (java.lang.Object[]) strArray39);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ko-KR");
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        char[] charArray49 = new char[] { ' ', 'x' };
        printWriter46.write(charArray49);
        printWriter32.println(charArray49);
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = locale52.getDisplayScript(locale53);
        java.lang.String str55 = locale53.getVariant();
        java.lang.String[] strArray58 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray58);
        java.io.PrintWriter printWriter60 = printWriter32.printf(locale53, "English", (java.lang.Object[]) strArray58);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        java.lang.Object[] objArray67 = mathException65.getArguments();
        java.io.PrintStream printStream68 = printStream27.format(locale53, "fra", objArray67);
        java.io.PrintWriter printWriter69 = printWriter5.printf("zh", objArray67);
        printWriter5.println("ko-kr (ITA)");
        printWriter5.flush();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , x]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test14484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14484");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(vector3D2, (double) 1);
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotation4.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D10, (double) 0.0f, vector3D22);
        double double25 = vector3D24.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation4.applyInverseTo(vector3D24);
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double33 = rotation32.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double40 = rotation39.getQ0();
        org.apache.commons.math.geometry.Rotation rotation41 = rotation32.applyTo(rotation39);
        double[][] doubleArray42 = rotation39.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) (byte) 1, (double) 1.0f, 0.0d, 1.0d, true);
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double55 = rotation54.getQ0();
        org.apache.commons.math.geometry.Rotation rotation61 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double62 = rotation61.getQ0();
        org.apache.commons.math.geometry.Rotation rotation63 = rotation54.applyTo(rotation61);
        double double64 = rotation54.getQ0();
        double double65 = rotation54.getQ0();
        double[][] doubleArray66 = rotation54.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation67 = rotation48.applyInverseTo(rotation54);
        org.apache.commons.math.geometry.Rotation rotation68 = rotation39.applyInverseTo(rotation67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotation67.getAxis();
        org.apache.commons.math.geometry.Rotation rotation70 = rotation4.applyInverseTo(rotation67);
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        double double72 = vector3D71.getY();
        double double73 = vector3D71.getY();
        org.apache.commons.math.geometry.Vector3D vector3D74 = vector3D71.negate();
        org.apache.commons.math.geometry.Vector3D vector3D75 = rotation4.applyInverseTo(vector3D74);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 52.0d + "'", double62 == 52.0d);
        org.junit.Assert.assertNotNull(rotation63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 52.0d + "'", double64 == 52.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 52.0d + "'", double65 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(rotation68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
    }

    @Test
    public void test14485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14485");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Canada", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test14486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14486");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zyx (FRA)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=zyx(fra)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14487");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.lang.String[] strArray6 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream7 = printStream2.format(locale4, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray6);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream2, false);
        printStream2.println(10.0f);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter18.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray28 = rotation27.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter18.format("en", (java.lang.Object[]) doubleArray28);
        java.io.PrintStream printStream30 = printStream2.printf("YZY", (java.lang.Object[]) doubleArray28);
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        printStream32.close();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream32, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter35);
        char[] charArray39 = new char[] { ' ', 'x' };
        printWriter36.write(charArray39);
        printStream2.println(charArray39);
        printStream2.close();
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder43.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder48 = builder43.setExtension('u', "");
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale52 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category53 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        boolean boolean55 = locale54.hasExtensions();
        java.util.Locale.setDefault(category53, locale54);
        java.lang.String str57 = locale52.getDisplayName(locale54);
        java.lang.String str58 = locale54.getDisplayName();
        java.lang.String str59 = locale49.getDisplayLanguage(locale54);
        java.util.Locale.Builder builder60 = builder43.setLocale(locale49);
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.lang.String str62 = locale49.getDisplayVariant(locale61);
        java.lang.String str63 = locale61.getLanguage();
        java.lang.String str64 = locale61.getDisplayName();
        java.lang.String str65 = locale61.getScript();
        java.lang.String[] strArray69 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray69, (java.lang.Throwable) mathException71);
        java.lang.String[] strArray76 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray76, (java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray81 = mathException80.getSuppressed();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray76, (java.lang.Throwable) mathException80);
        java.lang.Throwable[] throwableArray83 = mathException80.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException84 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray83);
        mathException72.addSuppressed((java.lang.Throwable) notARotationMatrixException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("TWN", (java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException86);
        java.lang.Throwable[] throwableArray88 = mathException87.getSuppressed();
        java.io.PrintStream printStream89 = printStream2.format(locale61, "zh_TW", (java.lang.Object[]) throwableArray88);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("Italian (Italy)", (java.lang.Object[]) throwableArray88);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , x]");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category53.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u97d3\u6587)" + "'", str57, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English" + "'", str58, "English");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "English" + "'", str59, "English");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ja" + "'", str63, "ja");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Japanese" + "'", str64, "Japanese");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(printStream89);
    }

    @Test
    public void test14488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14488");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.write("ko-KR");
        printWriter4.println(true);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.print((long) (short) 100);
        printWriter4.println((java.lang.Object) printWriter17);
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.util.Locale locale24 = java.util.Locale.UK;
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream27 = printStream22.format(locale24, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray26);
        java.io.PrintStream printStream29 = new java.io.PrintStream((java.io.OutputStream) printStream22, false);
        printStream22.println(10.0f);
        java.lang.String[] strArray34 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray34);
        java.io.PrintStream printStream36 = printStream22.format("\u97d3\u6587", (java.lang.Object[]) strArray34);
        printStream36.close();
        java.io.PrintStream printStream39 = new java.io.PrintStream("ko-KR");
        printStream39.close();
        java.util.Locale locale41 = java.util.Locale.UK;
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream44 = printStream39.format(locale41, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray43);
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream39, false);
        printStream39.println(10.0f);
        java.io.PrintStream printStream51 = new java.io.PrintStream("ko-KR");
        printStream51.close();
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.OutputStream) printStream51, false);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.Writer) printWriter54);
        printWriter55.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation64 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray65 = rotation64.getMatrix();
        java.io.PrintWriter printWriter66 = printWriter55.format("en", (java.lang.Object[]) doubleArray65);
        java.io.PrintStream printStream67 = printStream39.printf("YZY", (java.lang.Object[]) doubleArray65);
        java.io.PrintStream printStream69 = new java.io.PrintStream("ko-KR");
        printStream69.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream69, false);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter72);
        char[] charArray76 = new char[] { ' ', 'x' };
        printWriter73.write(charArray76);
        printStream39.println(charArray76);
        printStream36.print(charArray76);
        printWriter4.print((java.lang.Object) printStream36);
        printStream36.print((float) (short) 1);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(printWriter66);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[ , x]");
    }

    @Test
    public void test14489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14489");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("ko-KR", strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap6);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("chinois");
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale13, locale14, locale15, locale16, locale17, locale18, locale20, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray41 = new java.util.Locale[] { locale31, locale32, locale33, locale34, locale35, locale36, locale38, locale39, locale40 };
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList42, filteringMode44);
        java.lang.String[] strArray49 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList50);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList50);
        java.util.Collection<java.util.Locale> localeCollection54 = null;
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, localeCollection54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap56);
        java.util.Locale.LanguageRange languageRange60 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str61 = languageRange60.getRange();
        java.util.Locale.LanguageRange languageRange64 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str65 = languageRange64.getRange();
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] { languageRange60, languageRange64 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = java.util.Locale.GERMANY;
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.lang.String str78 = locale77.getDisplayLanguage();
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.util.Locale locale81 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray82 = new java.util.Locale[] { locale72, locale73, locale74, locale75, locale76, locale77, locale79, locale80, locale81 };
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList83, filteringMode85);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList83);
        java.util.Locale locale88 = java.util.Locale.lookup(languageRangeList57, (java.util.Collection<java.util.Locale>) localeList87);
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList87);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter(languageRangeList3, (java.util.Collection<java.util.Locale>) localeList87);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale91 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode26.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zxz" + "'", str61, "zxz");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "zxz" + "'", str65, "zxz");
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode85.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNull(locale88);
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertNotNull(localeList90);
    }

    @Test
    public void test14490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14490");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.addUnicodeLocaleAttribute("\u97d3\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test14491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14491");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 9610.932890332206d, 10.0d, (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D11, (double) (byte) 100, vector3D13);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D13, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D31, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D18, (double) (byte) 1, vector3D26, (double) (short) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D40 = vector3D18.negate();
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D43 = vector3D18.scalarMultiply((double) 'u');
        double double44 = vector3D18.getY();
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (-1.0f), vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D55 = vector3D47.subtract((double) 10L, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D47.negate();
        org.apache.commons.math.geometry.RotationOrder rotationOrder58 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotationOrder58.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotationOrder58.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotationOrder58.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D62 = vector3D56.subtract((-12804.0d), vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D18, vector3D61);
        double double64 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D6, vector3D18);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(rotationOrder58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
    }

    @Test
    public void test14492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14492");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream4, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        char[] charArray13 = new char[] { '4', 'a', ' ', ' ' };
        printWriter7.write(charArray13);
        printStream1.print(charArray13);
        java.io.PrintStream printStream17 = printStream1.append('#');
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(printStream17);
    }

    @Test
    public void test14493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14493");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale3.getDisplayCountry(locale10);
        java.lang.String str13 = locale10.getDisplayScript();
        java.util.Locale locale15 = new java.util.Locale("CA");
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale10.getDisplayName(locale15);
        java.util.Locale locale20 = new java.util.Locale("und", "zh_CN");
        java.lang.String str21 = locale10.getDisplayVariant(locale20);
        java.lang.String str22 = locale20.getDisplayName();
        java.lang.String str23 = locale20.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale15.toString(), "ca");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "japon\350s" + "'", str17, "japon\350s");
        org.junit.Assert.assertEquals(locale20.toString(), "und_ZH_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Undetermined (ZH_CN)" + "'", str22, "Undetermined (ZH_CN)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Undetermined (ZH_CN)" + "'", str23, "Undetermined (ZH_CN)");
    }

    @Test
    public void test14494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14494");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D10);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double25 = rotation24.getQ1();
        double double26 = rotation24.getQ0();
        org.apache.commons.math.geometry.Rotation rotation27 = rotation5.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D(0.6311497403463439d, 0.9588510772084059d);
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotation5.applyInverseTo(vector3D30);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(vector3D31);
    }

    @Test
    public void test14495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14495");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        org.apache.commons.math.geometry.Vector3D vector3D6 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D6, (double) (byte) 100, vector3D8);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D11, (double) (byte) 100, vector3D13);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D8, vector3D13);
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray23 = rotation22.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D27, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = rotation22.applyInverseTo(vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D35, vector3D36);
        org.apache.commons.math.geometry.Rotation rotation44 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D46, (double) (byte) 100, vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D50 = rotation44.applyTo(vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D51 = vector3D46.negate();
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        double double54 = vector3D53.getY();
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D8, (double) ' ', vector3D35, (double) (-1.0f), vector3D51, (double) 10.0f, vector3D53);
        printStream2.print((java.lang.Object) ' ');
        java.lang.String[] strArray58 = java.util.Locale.getISOLanguages();
        java.io.PrintStream printStream59 = printStream2.format("\uce90\ub098\ub2e4", (java.lang.Object[]) strArray58);
        java.io.PrintStream printStream63 = new java.io.PrintStream("ko-KR");
        printStream63.close();
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.OutputStream) printStream63, false);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.Writer) printWriter66);
        char[] charArray70 = new char[] { ' ', 'x' };
        printWriter67.write(charArray70);
        java.util.Locale locale72 = java.util.Locale.ENGLISH;
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.lang.String str74 = locale72.getDisplayCountry(locale73);
        java.lang.String str75 = locale72.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation82 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray83 = rotation82.getMatrix();
        java.io.PrintWriter printWriter84 = printWriter67.format(locale72, "YZY", (java.lang.Object[]) doubleArray83);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException85 = new org.apache.commons.math.geometry.NotARotationMatrixException("ko-KR", (java.lang.Object[]) doubleArray83);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("KR");
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("it", (java.lang.Object[]) doubleArray83, (java.lang.Throwable) mathException87);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("de-DE", (java.lang.Object[]) strArray58, (java.lang.Throwable) mathException88);
        java.lang.Object[] objArray90 = mathException89.getArguments();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ , x]");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "en" + "'", str75, "en");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(printWriter84);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[aa, ab, ae, af, ak, am, an, ar, as, av, ay, az, ba, be, bg, bh, bi, bm, bn, bo, br, bs, ca, ce, ch, co, cr, cs, cu, cv, cy, da, de, dv, dz, ee, el, en, eo, es, et, eu, fa, ff, fi, fj, fo, fr, fy, ga, gd, gl, gn, gu, gv, ha, he, hi, ho, hr, ht, hu, hy, hz, ia, id, ie, ig, ii, ik, in, io, is, it, iu, iw, ja, ji, jv, ka, kg, ki, kj, kk, kl, km, kn, ko, kr, ks, ku, kv, kw, ky, la, lb, lg, li, ln, lo, lt, lu, lv, mg, mh, mi, mk, ml, mn, mo, mr, ms, mt, my, na, nb, nd, ne, ng, nl, nn, no, nr, nv, ny, oc, oj, om, or, os, pa, pi, pl, ps, pt, qu, rm, rn, ro, ru, rw, sa, sc, sd, se, sg, si, sk, sl, sm, sn, so, sq, sr, ss, st, su, sv, sw, ta, te, tg, th, ti, tk, tl, tn, to, tr, ts, tt, tw, ty, ug, uk, ur, uz, ve, vi, vo, wa, wo, xh, yi, yo, za, zh, zu]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[aa, ab, ae, af, ak, am, an, ar, as, av, ay, az, ba, be, bg, bh, bi, bm, bn, bo, br, bs, ca, ce, ch, co, cr, cs, cu, cv, cy, da, de, dv, dz, ee, el, en, eo, es, et, eu, fa, ff, fi, fj, fo, fr, fy, ga, gd, gl, gn, gu, gv, ha, he, hi, ho, hr, ht, hu, hy, hz, ia, id, ie, ig, ii, ik, in, io, is, it, iu, iw, ja, ji, jv, ka, kg, ki, kj, kk, kl, km, kn, ko, kr, ks, ku, kv, kw, ky, la, lb, lg, li, ln, lo, lt, lu, lv, mg, mh, mi, mk, ml, mn, mo, mr, ms, mt, my, na, nb, nd, ne, ng, nl, nn, no, nr, nv, ny, oc, oj, om, or, os, pa, pi, pl, ps, pt, qu, rm, rn, ro, ru, rw, sa, sc, sd, se, sg, si, sk, sl, sm, sn, so, sq, sr, ss, st, su, sv, sw, ta, te, tg, th, ti, tk, tl, tn, to, tr, ts, tt, tw, ty, ug, uk, ur, uz, ve, vi, vo, wa, wo, xh, yi, yo, za, zh, zu]");
    }

    @Test
    public void test14496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14496");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream13 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale17 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale.setDefault(category18, locale19);
        java.lang.String str22 = locale17.getDisplayName(locale19);
        java.lang.String str23 = locale19.getDisplayName();
        java.lang.String str24 = locale14.getDisplayLanguage(locale19);
        printStream13.println((java.lang.Object) locale19);
        java.lang.String str26 = locale19.getCountry();
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        printWriter34.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray44 = rotation43.getMatrix();
        java.io.PrintWriter printWriter45 = printWriter34.format("en", (java.lang.Object[]) doubleArray44);
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.lang.String str49 = locale46.getLanguage();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = mathException52.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException55 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray54);
        java.io.PrintWriter printWriter56 = printWriter34.format(locale46, "ZXZ", (java.lang.Object[]) throwableArray54);
        java.lang.String str57 = locale46.getDisplayCountry();
        java.lang.String str58 = locale46.getISO3Language();
        java.lang.String str59 = locale46.getISO3Language();
        java.util.Set<java.lang.String> strSet60 = locale46.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale46);
        java.util.Locale locale62 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u97d3\u6587)" + "'", str22, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "en" + "'", str49, "en");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "eng" + "'", str58, "eng");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "eng" + "'", str59, "eng");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
    }

    @Test
    public void test14497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14497");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        java.io.PrintWriter printWriter10 = printWriter5.append('x');
        printWriter5.println(' ');
        java.io.PrintStream printStream14 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream14.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray24 = rotation23.getMatrix();
        java.io.PrintStream printStream25 = printStream14.printf("fra", (java.lang.Object[]) doubleArray24);
        printStream25.close();
        printStream25.print(10L);
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String[] strArray34 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream35 = printStream30.format(locale32, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream30, false);
        java.io.PrintStream printStream39 = printStream30.append('4');
        printStream30.print(10L);
        java.io.PrintStream printStream43 = new java.io.PrintStream("ko-KR");
        printStream43.close();
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream43, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter46);
        printWriter47.print((long) (short) 100);
        printWriter47.print((int) 'u');
        java.io.PrintStream printStream53 = new java.io.PrintStream("ko-KR");
        printStream53.close();
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.OutputStream) printStream53, false);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.Writer) printWriter56);
        printWriter57.print((long) (short) 100);
        printWriter57.print((int) 'u');
        java.io.PrintStream printStream63 = new java.io.PrintStream("ko-KR");
        printStream63.close();
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.OutputStream) printStream63, false);
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.Writer) printWriter66);
        printWriter66.println((float) (byte) -1);
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter((java.io.Writer) printWriter66, true);
        java.lang.String[] strArray73 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter74 = printWriter66.printf("KR", (java.lang.Object[]) strArray73);
        java.io.PrintStream printStream76 = new java.io.PrintStream("ko-KR");
        printStream76.close();
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.OutputStream) printStream76, false);
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter((java.io.Writer) printWriter79);
        char[] charArray83 = new char[] { ' ', 'x' };
        printWriter80.write(charArray83);
        printWriter66.println(charArray83);
        printWriter57.print(charArray83);
        printWriter47.write(charArray83);
        printStream30.println(charArray83);
        printStream25.println(charArray83);
        printWriter5.print(charArray83);
        printWriter5.println('x');
        printWriter5.println((-1408440.0d));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(printWriter74);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[ , x]");
    }

    @Test
    public void test14498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14498");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: de-DE");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream4, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        java.lang.String[] strArray14 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray14);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray14, (java.lang.Throwable) mathException17);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException19 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray14);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException20 = new org.apache.commons.math.geometry.NotARotationMatrixException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray14);
        java.io.PrintWriter printWriter21 = printWriter8.printf("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray14);
        printWriter21.println();
        printWriter21.write("fr");
        java.util.Locale locale26 = new java.util.Locale("de_DE");
        java.lang.String str28 = locale26.getExtension('a');
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale31.getDisplayScript(locale32);
        java.lang.String str34 = locale29.getDisplayLanguage(locale31);
        java.util.Locale.setDefault(locale29);
        java.util.Set<java.lang.String> strSet36 = locale29.getUnicodeLocaleKeys();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str39 = locale29.getDisplayName(locale38);
        java.lang.String str40 = locale29.getISO3Language();
        java.lang.String str41 = locale26.getDisplayLanguage(locale29);
        boolean boolean42 = locale29.hasExtensions();
        java.lang.String[] strArray48 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray48);
        java.lang.Object[] objArray50 = mathException49.getArguments();
        java.lang.String str51 = mathException49.getPattern();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("CHN", (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("fran\347\u6cd5\u6587)", (java.lang.Throwable) mathException52);
        java.lang.Object[] objArray55 = mathException52.getArguments();
        java.io.PrintWriter printWriter56 = printWriter21.format(locale29, "", objArray55);
        java.io.PrintStream printStream57 = printStream1.format("org.apache.commons.math.MathException: Cardan angles singularity", objArray55);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(printWriter21);
        org.junit.Assert.assertEquals(locale26.toString(), "de_de");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de_de" + "'", str41, "de_de");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ZXZ" + "'", str51, "ZXZ");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(printStream57);
    }

    @Test
    public void test14499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14499");
        org.apache.commons.math.geometry.CardanEulerSingularityException cardanEulerSingularityException1 = new org.apache.commons.math.geometry.CardanEulerSingularityException(true);
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) cardanEulerSingularityException1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException((java.lang.Throwable) cardanEulerSingularityException1);
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException((java.lang.Throwable) cardanEulerSingularityException1);
        java.lang.String str5 = mathException4.getPattern();
        java.lang.String str6 = mathException4.getPattern();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Cardan angles singularity" + "'", str5, "Cardan angles singularity");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Cardan angles singularity" + "'", str6, "Cardan angles singularity");
    }

    @Test
    public void test14500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14500");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        java.io.PrintWriter printWriter10 = printWriter5.append('x');
        printWriter5.print(false);
        printWriter5.print((int) (byte) 100);
        printWriter5.println(100L);
        printWriter5.write((int) (byte) 10);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter10);
    }
}

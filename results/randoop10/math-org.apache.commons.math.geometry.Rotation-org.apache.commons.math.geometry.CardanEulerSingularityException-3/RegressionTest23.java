import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D12, vector3D20);
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray28 = rotation27.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D35, (double) (byte) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D32, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D40 = rotation27.applyInverseTo(vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D46, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D56, (double) (byte) 100, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D67, (double) (byte) 100, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D64, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D51, (double) (byte) 1, vector3D59, (double) (short) 100, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D73 = vector3D51.negate();
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D51);
        double double75 = vector3D51.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D32, vector3D51);
        double double77 = vector3D51.getY();
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D12, vector3D51);
        double double79 = vector3D12.getAlpha();
        org.apache.commons.math.geometry.RotationOrder rotationOrder80 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str81 = rotationOrder80.toString();
        org.apache.commons.math.geometry.Vector3D vector3D82 = rotationOrder80.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D83 = rotationOrder80.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D84 = rotationOrder80.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D85 = rotationOrder80.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D86 = vector3D12.subtract(vector3D85);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ZXZ" + "'", str81, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("org.apache.commons.math.geometry.notarotationmatrixexception:  (zxz_fran\347ais)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.geometry.notarotationmatrixexception:  (zxz_franc?ais)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale.Builder builder11 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder7.addUnicodeLocaleAttribute("\u97d3\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale0.getISO3Language();
        java.lang.String str5 = locale0.getCountry();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder10 = builder6.setLanguage("ZXZ");
        java.util.Locale.Builder builder11 = builder6.clear();
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale14.getDisplayLanguage(locale18);
        java.util.Locale.Builder builder20 = builder6.setLocale(locale18);
        java.util.Locale.Builder builder22 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder24 = builder6.setLanguage("it");
        java.io.PrintStream printStream26 = new java.io.PrintStream("ko-KR");
        printStream26.close();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter29);
        printWriter30.println('a');
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder37 = builder33.setLanguage("ZXZ");
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder39 = builder33.setLocale(locale38);
        java.lang.Object[] objArray41 = null;
        java.io.PrintWriter printWriter42 = printWriter30.format(locale38, "TWN", objArray41);
        java.util.Set<java.lang.String> strSet43 = locale38.getUnicodeLocaleKeys();
        java.lang.String str44 = locale38.getDisplayCountry();
        java.util.Locale.Builder builder45 = builder24.setLocale(locale38);
        java.util.Locale locale47 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.lang.String str49 = locale38.getDisplayLanguage(locale47);
        java.lang.String str50 = locale0.getDisplayName(locale38);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "kor" + "'", str2, "kor");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "kor" + "'", str4, "kor");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "KR" + "'", str5, "KR");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ub3c5\uc77c" + "'", str44, "\ub3c5\uc77c");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals(locale47.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "German" + "'", str49, "German");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Koreanisch (S\374dkorea)" + "'", str50, "Koreanisch (S\374dkorea)");
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA1();
        double double6 = vector3D5.getY();
        org.apache.commons.math.geometry.Vector3D vector3D7 = vector3D5.negate();
        double double8 = vector3D7.getNorm();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("KR");
        java.io.PrintWriter printWriter3 = printWriter1.append(' ');
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray43 = mathException40.getSuppressed();
        java.io.PrintStream printStream44 = printStream32.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray43);
        printStream44.println((long) 0);
        java.io.PrintStream printStream48 = new java.io.PrintStream("ko-KR");
        printStream48.close();
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream53 = printStream48.format(locale50, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray52);
        java.io.PrintStream printStream55 = new java.io.PrintStream((java.io.OutputStream) printStream48, false);
        printStream48.println(10.0f);
        java.io.PrintStream printStream60 = new java.io.PrintStream("ko-KR");
        printStream60.close();
        java.io.PrintWriter printWriter63 = new java.io.PrintWriter((java.io.OutputStream) printStream60, false);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.Writer) printWriter63);
        printWriter64.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation73 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray74 = rotation73.getMatrix();
        java.io.PrintWriter printWriter75 = printWriter64.format("en", (java.lang.Object[]) doubleArray74);
        java.io.PrintStream printStream76 = printStream48.printf("YZY", (java.lang.Object[]) doubleArray74);
        java.io.PrintStream printStream77 = new java.io.PrintStream((java.io.OutputStream) printStream76);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) -1 };
        printStream76.write(byteArray80);
        printStream44.write(byteArray80);
        printStream29.write(byteArray80, 10, (int) (byte) 1);
        printStream29.print(0);
        printStream29.println(false);
        org.apache.commons.math.geometry.Vector3D vector3D93 = new org.apache.commons.math.geometry.Vector3D((-1.2792393947944187d), 0.4705227400680958d, (double) (byte) 1);
        printStream29.print((java.lang.Object) vector3D93);
        printStream29.println((int) (byte) 10);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, -1]");
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        printWriter11.print('u');
        printWriter11.print('a');
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter21, false);
        java.io.PrintWriter printWriter26 = printWriter21.append('a');
        printWriter26.print((int) (short) 1);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray32 = mathException31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = mathException31.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException34 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter35 = printWriter26.format("XYZ", (java.lang.Object[]) throwableArray33);
        java.io.PrintWriter printWriter36 = printWriter11.printf("Italy", (java.lang.Object[]) throwableArray33);
        printWriter11.print(0.8760580505981934d);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(printWriter36);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder20 = builder14.setLocale(locale19);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder22 = builder14.setLocale(locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale21);
        java.lang.String str25 = locale21.getDisplayVariant();
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray29, (java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray29, (java.lang.Throwable) mathException33);
        java.lang.Throwable[] throwableArray36 = mathException33.getSuppressed();
        java.io.PrintWriter printWriter37 = printWriter13.format(locale21, "ita", (java.lang.Object[]) throwableArray36);
        java.lang.String str38 = locale21.getISO3Country();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder43 = builder39.setLanguage("ZXZ");
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder45 = builder39.setLocale(locale44);
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder47 = builder39.setLocale(locale46);
        java.lang.String str48 = locale46.getDisplayCountry();
        java.lang.String str49 = locale46.getDisplayLanguage();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = locale50.getDisplayScript(locale51);
        java.util.Locale locale55 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str56 = locale50.getDisplayLanguage(locale55);
        java.lang.String str57 = locale46.getDisplayVariant(locale55);
        java.lang.String str58 = locale21.getDisplayCountry(locale46);
        java.lang.String str59 = locale21.getDisplayLanguage();
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CAN" + "'", str38, "CAN");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Canada" + "'", str48, "Canada");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English" + "'", str49, "English");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals(locale55.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "French" + "'", str56, "French");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "English" + "'", str59, "English");
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream3 = printStream1.append(' ');
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        char[] charArray12 = new char[] { ' ', 'x' };
        printWriter9.write(charArray12);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.lang.String str17 = locale14.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray25 = rotation24.getMatrix();
        java.io.PrintWriter printWriter26 = printWriter9.format(locale14, "YZY", (java.lang.Object[]) doubleArray25);
        printWriter26.print((-1L));
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = locale29.getScript();
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray40 = mathException39.getSuppressed();
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException39);
        java.lang.Throwable[] throwableArray42 = mathException39.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray42);
        java.lang.Throwable[] throwableArray44 = notARotationMatrixException43.getSuppressed();
        java.io.PrintWriter printWriter45 = printWriter26.printf(locale29, "CHN", (java.lang.Object[]) throwableArray44);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("\u97d3\u6587)");
        java.lang.String str48 = locale29.getDisplayVariant(locale47);
        java.lang.String[] strArray51 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray51);
        java.lang.Object[] objArray53 = mathException52.getArguments();
        java.io.PrintStream printStream54 = printStream3.format(locale47, "\u97d3\u6587)", objArray53);
        printStream3.print(false);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream60 = printStream3.append((java.lang.CharSequence) "china", 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 35");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream3);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , x]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en" + "'", str17, "en");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream54);
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-0.35293433482477937d), 0.9481327383354655d, 0.7571048020859654d, (-0.9150497319696589d), false);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("en_CA");
        java.io.PrintWriter printWriter3 = printWriter1.append('#');
        printWriter3.println('u');
        printWriter3.println((long) (short) 1);
        java.io.PrintStream printStream9 = new java.io.PrintStream("ko-KR");
        printStream9.close();
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        char[] charArray21 = new char[] { '4', 'a', ' ', ' ' };
        printWriter15.write(charArray21);
        printStream9.print(charArray21);
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream25, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter28);
        printWriter29.print((long) (short) 100);
        printWriter29.print((int) 'u');
        java.io.PrintStream printStream35 = new java.io.PrintStream("ko-KR");
        printStream35.close();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream35, false);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.Writer) printWriter38);
        printWriter38.println((float) (byte) -1);
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter38, true);
        java.lang.String[] strArray45 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter46 = printWriter38.printf("KR", (java.lang.Object[]) strArray45);
        java.io.PrintStream printStream48 = new java.io.PrintStream("ko-KR");
        printStream48.close();
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream48, false);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter51);
        char[] charArray55 = new char[] { ' ', 'x' };
        printWriter52.write(charArray55);
        printWriter38.println(charArray55);
        printWriter29.print(charArray55);
        printStream9.println(charArray55);
        printWriter3.print(charArray55);
        printWriter3.println('4');
        boolean boolean63 = printWriter3.checkError();
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , x]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        printWriter1.println((-5.440211108893697d));
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream7, false);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter10);
        java.lang.String[] strArray13 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter14 = printWriter11.printf("ko-KR", (java.lang.Object[]) strArray13);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException15 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray13);
        java.io.PrintWriter printWriter16 = printWriter1.format("French", (java.lang.Object[]) strArray13);
        printWriter16.println("eng");
        printWriter16.flush();
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((-2000.0d), 0.567725116225552d, 3.141592653589793d);
        printWriter16.println((java.lang.Object) vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = vector3D23.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D26 = vector3D25.normalize();
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotation5.getAxis();
        double double7 = rotation5.getAngle();
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.141592653589793d + "'", double7 == 3.141592653589793d);
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        printStream29.print(1.2220476682666177d);
        java.io.PrintStream printStream32 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        printStream29.print((long) 'a');
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        printWriter36.print('x');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter42 = printWriter36.append((java.lang.CharSequence) "\u610f\u5927\u5229", (int) (byte) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotation5.getAxis();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation22 = rotation21.revert();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation21.revert();
        double[][] doubleArray24 = rotation21.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation(doubleArray24, 3.140030642045497d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertNotNull(rotation22);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", 0.3294090826638426d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        java.io.PrintStream printStream10 = new java.io.PrintStream("ko-KR");
        printStream10.close();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String[] strArray14 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream15 = printStream10.format(locale12, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray14);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream10, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream17);
        printWriter18.print((float) (short) 10);
        printWriter4.println((java.lang.Object) printWriter18);
        java.io.PrintWriter printWriter23 = printWriter18.append('u');
        java.io.PrintStream printStream26 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream26.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation35 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray36 = rotation35.getMatrix();
        java.io.PrintStream printStream37 = printStream26.printf("fra", (java.lang.Object[]) doubleArray36);
        printStream37.close();
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream37);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str41 = locale40.getScript();
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.getDefault(category42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayScript(locale44);
        java.lang.String str46 = locale40.getDisplayName(locale43);
        java.util.Locale locale47 = locale40.stripExtensions();
        java.util.Locale locale48 = locale40.stripExtensions();
        java.lang.Throwable throwable50 = null;
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException(throwable50);
        java.lang.String[] strArray53 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray53);
        mathException51.addSuppressed((java.lang.Throwable) mathException54);
        java.lang.Throwable[] throwableArray56 = mathException54.getSuppressed();
        java.io.PrintWriter printWriter57 = printWriter39.format(locale48, "ita", (java.lang.Object[]) throwableArray56);
        java.io.PrintWriter printWriter58 = printWriter23.format("japanese", (java.lang.Object[]) throwableArray56);
        printWriter23.write(10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (Taiwan)" + "'", str46, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(printWriter57);
        org.junit.Assert.assertNotNull(printWriter58);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.ZYX;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.46117363094228814d, (-406.8324446847964d), 1.5726305995240337d);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ZYX" + "'", str1, "ZYX");
        org.junit.Assert.assertNotNull(vector3D2);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException(throwable0);
        java.lang.String[] strArray3 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray3);
        mathException1.addSuppressed((java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray8 = mathException6.getSuppressed();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder9 = builder0.setExtension('a', "CA");
        java.util.Locale.Builder builder11 = builder0.removeUnicodeLocaleAttribute("XYZ");
        java.util.Locale locale12 = builder0.build();
        java.lang.String str13 = locale12.getDisplayVariant();
        java.util.Locale.setDefault(locale12);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("twi");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("Canada");
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder14 = builder9.setExtension('u', "");
        java.util.Locale.Builder builder16 = builder14.setVariant("");
        java.util.Locale locale17 = builder16.build();
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale21 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Locale.setDefault(category22, locale23);
        java.lang.String str26 = locale21.getDisplayName(locale23);
        java.lang.String str27 = locale23.getDisplayName();
        java.lang.String str28 = locale18.getDisplayLanguage(locale23);
        java.util.Locale.Builder builder29 = builder16.setLocale(locale23);
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        java.util.Locale.Builder builder32 = builder29.addUnicodeLocaleAttribute("italian");
        java.util.Locale locale33 = builder32.build();
        java.util.Locale.Builder builder34 = builder8.setLocale(locale33);
        java.util.Locale locale35 = locale33.stripExtensions();
        java.lang.String str36 = locale35.getCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u97d3\u6587)" + "'", str26, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English" + "'", str27, "English");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en__#u-italian");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation16.getAxis();
        printWriter4.print((java.lang.Object) rotation16);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print(false);
        char[] charArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            printWriter4.print(charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D18);
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Collection<java.lang.String> strCollection1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = java.util.Locale.lookupTag(languageRangeList0, strCollection1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-3818.802471205947d), 0.20112376381681635d, 3.0852190676658116d);
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(vector3D3, 0.0d);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale13);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        java.lang.String str18 = locale13.getDisplayLanguage(locale16);
        java.util.Locale.setDefault(category9, locale16);
        java.lang.String str20 = locale16.getScript();
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale23 = new java.util.Locale("\uc601\uc5b4");
        java.lang.String str24 = locale23.getDisplayScript();
        java.util.Locale locale25 = locale23.stripExtensions();
        java.lang.String str26 = locale23.toLanguageTag();
        java.util.Locale locale28 = new java.util.Locale("\u82f1\u56fd");
        java.util.Locale locale31 = new java.util.Locale("eng", "org.apache.commons.math.MathException: United Kingdom");
        java.lang.String str32 = locale28.getDisplayName(locale31);
        java.lang.String str33 = locale23.getDisplayName(locale28);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale37 = new java.util.Locale("\u52a0\u62ff\u5927", "DEU");
        java.util.Locale.setDefault(category0, locale37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = locale37.getUnicodeLocaleType("org.apache.commons.math.MathException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: org.apache.commons.math.MathException: hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale3.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zxz_KO_KR");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u97d3\u6587" + "'", str18, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale23.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
        org.junit.Assert.assertEquals(locale28.toString(), "\u82f1\u56fd");
        org.junit.Assert.assertEquals(locale31.toString(), "eng_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: UNITED KINGDOM");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u82f1\u56fd" + "'", str32, "\u82f1\u56fd");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc601\uc5b4" + "'", str33, "\uc601\uc5b4");
        org.junit.Assert.assertEquals(locale37.toString(), "\u52a0\u62ff\u5927_DEU");
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        java.io.PrintStream printStream87 = printStream85.append('4');
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream85, false);
        java.io.PrintStream printStream91 = printStream85.append('4');
        java.io.PrintStream printStream93 = printStream85.append(' ');
        printStream85.println("org.apache.commons.math.MathException: ZXZ");
        boolean boolean96 = printStream85.checkError();
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream91);
        org.junit.Assert.assertNotNull(printStream93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        org.apache.commons.math.geometry.Vector3D vector3D0 = org.apache.commons.math.geometry.Vector3D.plusJ;
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray7 = rotation6.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D11, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotation6.applyInverseTo(vector3D11);
        double double20 = vector3D11.getX();
        org.apache.commons.math.geometry.Vector3D vector3D21 = vector3D0.subtract(vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((-5.539714827914696d), 0.4705227400680958d, (-1.0d));
        org.apache.commons.math.geometry.Vector3D vector3D27 = vector3D11.subtract((-2.141592653589793d), vector3D26);
        double double28 = vector3D26.getDelta();
        double double29 = vector3D26.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) 0, (double) (short) 1);
        org.apache.commons.math.geometry.Vector3D vector3D33 = vector3D26.subtract(vector3D32);
        double double34 = vector3D33.getY();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.17796418399046268d) + "'", double28 == (-0.17796418399046268d));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.17796418399046268d) + "'", double29 == (-0.17796418399046268d));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.4705227400680958d + "'", double34 == 0.4705227400680958d);
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        java.util.Locale locale2 = new java.util.Locale("\uc911\uad6d", "\u97d3\u6587");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d\u97d3\u6587");
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        java.lang.String str4 = locale1.getCountry();
        java.io.PrintStream printStream6 = new java.io.PrintStream("ko-KR");
        printStream6.close();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream6, false);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter9);
        printWriter9.println((float) (byte) -1);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.Writer) printWriter9, true);
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double29 = rotation28.getQ0();
        org.apache.commons.math.geometry.Rotation rotation30 = rotation21.applyTo(rotation28);
        double double31 = rotation21.getQ0();
        double double32 = rotation21.getQ0();
        double[][] doubleArray33 = rotation21.getMatrix();
        java.io.PrintWriter printWriter34 = printWriter14.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getDisplayLanguage();
        java.lang.String str37 = locale35.getDisplayName();
        java.lang.String str38 = locale35.getScript();
        java.util.Set<java.lang.String> strSet39 = locale35.getUnicodeLocaleKeys();
        java.io.PrintStream printStream42 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream42.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray52 = rotation51.getMatrix();
        java.io.PrintStream printStream53 = printStream42.printf("fra", (java.lang.Object[]) doubleArray52);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder54.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder59 = builder54.setExtension('u', "");
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale63 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category64 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale65 = java.util.Locale.ENGLISH;
        boolean boolean66 = locale65.hasExtensions();
        java.util.Locale.setDefault(category64, locale65);
        java.lang.String str68 = locale63.getDisplayName(locale65);
        java.lang.String str69 = locale65.getDisplayName();
        java.lang.String str70 = locale60.getDisplayLanguage(locale65);
        java.util.Locale.Builder builder71 = builder54.setLocale(locale60);
        java.io.PrintStream printStream74 = new java.io.PrintStream("ko-KR");
        printStream74.close();
        java.io.PrintWriter printWriter77 = new java.io.PrintWriter((java.io.OutputStream) printStream74, false);
        java.io.PrintWriter printWriter78 = new java.io.PrintWriter((java.io.Writer) printWriter77);
        java.lang.String[] strArray80 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter81 = printWriter78.printf("ko-KR", (java.lang.Object[]) strArray80);
        java.io.PrintStream printStream82 = printStream42.printf(locale60, "TWN", (java.lang.Object[]) strArray80);
        java.io.PrintWriter printWriter83 = printWriter14.printf(locale35, "", (java.lang.Object[]) strArray80);
        java.lang.String str84 = locale35.getDisplayScript();
        java.lang.String str85 = locale1.getDisplayLanguage(locale35);
        java.util.Locale locale86 = java.util.Locale.ENGLISH;
        java.util.Locale locale87 = java.util.Locale.FRENCH;
        java.lang.String str88 = locale86.getDisplayCountry(locale87);
        java.lang.String str89 = locale87.getScript();
        java.util.Locale locale91 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str92 = locale91.getDisplayVariant();
        java.util.Locale locale94 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str95 = locale91.getDisplayScript(locale94);
        java.lang.String str96 = locale94.toLanguageTag();
        java.lang.String str97 = locale87.getDisplayScript(locale94);
        java.lang.String str98 = locale94.getISO3Country();
        java.lang.String str99 = locale1.getDisplayVariant(locale94);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str36, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str37, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(printStream53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale63.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category64.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u97d3\u6587)" + "'", str68, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English" + "'", str69, "English");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English" + "'", str70, "English");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(printWriter81);
        org.junit.Assert.assertNotNull(printStream82);
        org.junit.Assert.assertNotNull(printWriter83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "germany" + "'", str96, "germany");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double7 = rotation6.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double14 = rotation13.getQ0();
        org.apache.commons.math.geometry.Rotation rotation15 = rotation6.applyTo(rotation13);
        org.apache.commons.math.geometry.Rotation rotation16 = rotation6.revert();
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation24 = rotation6.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.Rotation rotation30 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double31 = rotation30.getQ0();
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double38 = rotation37.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = rotation30.applyTo(rotation37);
        org.apache.commons.math.geometry.Rotation rotation40 = rotation30.revert();
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double47 = rotation46.getQ0();
        org.apache.commons.math.geometry.Rotation rotation48 = rotation30.applyInverseTo(rotation46);
        double double49 = rotation48.getAngle();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation24.applyInverseTo(rotation48);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D55, (double) 0L, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D(52.0d, Double.NaN, (double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D67 = vector3D61.subtract(0.9999500037496876d, vector3D66);
        org.apache.commons.math.geometry.Vector3D vector3D68 = rotation50.applyInverseTo(vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D73 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D78 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D79 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D73, (double) 0L, vector3D78);
        org.apache.commons.math.geometry.RotationOrder rotationOrder80 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation84 = new org.apache.commons.math.geometry.Rotation(rotationOrder80, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Vector3D vector3D85 = rotationOrder80.getA1();
        double double86 = vector3D85.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D87 = vector3D78.subtract(vector3D85);
        org.apache.commons.math.geometry.Vector3D vector3D88 = new org.apache.commons.math.geometry.Vector3D((-43.80155030821067d), vector3D68, (-0.08806429469916818d), vector3D85);
        double double89 = vector3D88.getDelta();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(rotationOrder80);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-0.9999999999999998d) + "'", double89 == (-0.9999999999999998d));
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream29);
        printStream30.println('x');
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream30, true);
        printStream30.print(true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, (double) (byte) 100, vector3D4);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D4, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D22, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D9, (double) (byte) 1, vector3D17, (double) (short) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D31 = vector3D9.negate();
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D31.subtract(vector3D36);
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D45, (double) (byte) 100, vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation43.applyTo(vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D50 = vector3D45.negate();
        double double51 = vector3D50.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D36, vector3D50);
        double double53 = vector3D50.getZ();
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-0.0d) + "'", double51 == (-0.0d));
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-0.0d) + "'", double53 == (-0.0d));
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        java.lang.String[] strArray3 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray3, (java.lang.Throwable) mathException5);
        java.lang.String str7 = mathException6.getPattern();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException8);
        java.lang.String str10 = mathException8.getPattern();
        java.lang.String str11 = mathException8.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ZXZ" + "'", str7, "ZXZ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str11, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        java.util.Locale locale15 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getLanguage();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter22.format(locale34, "ZXZ", (java.lang.Object[]) throwableArray42);
        java.io.PrintStream printStream45 = printStream13.printf(locale15, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray42);
        printStream13.println(0.0f);
        printStream13.println();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream52 = printStream13.append((java.lang.CharSequence) "\ub3c5\uc77c", (-1), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertEquals(locale15.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        printStream29.print(1.2220476682666177d);
        printStream29.println(false);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        boolean boolean36 = locale35.hasExtensions();
        java.util.Set<java.lang.Character> charSet37 = locale35.getExtensionKeys();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray44 = mathException43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = mathException43.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException46 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray45);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException47 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray45);
        java.lang.Throwable[] throwableArray48 = notARotationMatrixException47.getSuppressed();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("zho", (java.lang.Object[]) throwableArray48);
        java.lang.Object[] objArray50 = mathException49.getArguments();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: United Kingdom", objArray50);
        java.lang.Throwable[] throwableArray52 = mathException51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = mathException51.getSuppressed();
        java.io.PrintStream printStream54 = printStream29.printf(locale35, "en-ca_TWN_ko-KR", (java.lang.Object[]) throwableArray53);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "\u52a0\u62ff\u5927_DEU");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printStream54);
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("anglais");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale locale6 = java.util.Locale.getDefault(category2);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale10 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale.setDefault(category11, locale12);
        java.lang.String str15 = locale10.getDisplayName(locale12);
        java.lang.String str16 = locale12.getDisplayName();
        java.lang.String str17 = locale7.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(category2, locale7);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale locale24 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str25 = locale19.getDisplayLanguage(locale24);
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = locale26.getISO3Language();
        boolean boolean28 = locale26.hasExtensions();
        boolean boolean29 = locale26.hasExtensions();
        java.lang.String str30 = locale19.getDisplayVariant(locale26);
        java.lang.String str32 = locale19.getExtension('a');
        java.util.Locale.setDefault(category2, locale19);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.lang.String str38 = locale36.getDisplayScript(locale37);
        java.lang.String str39 = locale34.getDisplayLanguage(locale36);
        java.util.Locale.setDefault(locale34);
        java.util.Set<java.lang.String> strSet41 = locale34.getUnicodeLocaleKeys();
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str44 = locale34.getDisplayName(locale43);
        java.lang.String str45 = locale19.getDisplayName(locale34);
        org.apache.commons.math.geometry.Rotation rotation53 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (short) 1, 1.7607846147136124d, 1.0d, false);
        org.apache.commons.math.geometry.Rotation rotation54 = rotation53.revert();
        double[][] doubleArray55 = rotation54.getMatrix();
        double[][] doubleArray56 = rotation54.getMatrix();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("eng", (java.lang.Object[]) doubleArray56, (java.lang.Throwable) mathException59);
        java.io.PrintWriter printWriter62 = printWriter1.printf(locale34, "org.apache.commons.math.MathException: English (Canada)", (java.lang.Object[]) doubleArray56);
        java.io.PrintWriter printWriter64 = printWriter62.append('4');
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u97d3\u6587)" + "'", str15, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English" + "'", str17, "English");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(locale24.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "French" + "'", str25, "French");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ita" + "'", str27, "ita");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "French" + "'", str45, "French");
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(printWriter64);
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("TW");
        java.util.Locale.Builder builder6 = builder0.setVariant("German");
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale7.getDisplayLanguage(locale9);
        java.util.Locale.setDefault(locale7);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale7);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Locale locale16 = locale15.stripExtensions();
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter21.println((float) (byte) -1);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter21, true);
        java.lang.String[] strArray28 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter29 = printWriter21.printf("KR", (java.lang.Object[]) strArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream("ko-KR");
        printStream31.close();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream31, false);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter34);
        char[] charArray38 = new char[] { ' ', 'x' };
        printWriter35.write(charArray38);
        printWriter21.println(charArray38);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale41.getDisplayScript(locale42);
        java.lang.String str44 = locale42.getVariant();
        java.lang.String[] strArray47 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray47);
        java.io.PrintWriter printWriter49 = printWriter21.printf(locale42, "English", (java.lang.Object[]) strArray47);
        java.lang.String str50 = locale42.getScript();
        java.lang.String str51 = locale15.getDisplayLanguage(locale42);
        java.lang.String str52 = locale7.getDisplayVariant(locale15);
        java.lang.String str53 = locale15.getDisplayName();
        java.lang.String str54 = locale15.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , x]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D3, (double) (byte) 100, vector3D5);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D5, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D5, (double) 0.0f, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D21 = vector3D19.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D23 = vector3D19.scalarMultiply((double) 'x');
        org.apache.commons.math.geometry.RotationOrder rotationOrder26 = org.apache.commons.math.geometry.RotationOrder.YXY;
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotationOrder26.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D33, vector3D38);
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray48 = rotation47.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D55, (double) (byte) 100, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D52, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotation47.applyInverseTo(vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D60, vector3D61);
        org.apache.commons.math.geometry.Rotation rotation69 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D71, (double) (byte) 100, vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D75 = rotation69.applyTo(vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D76 = vector3D71.negate();
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        double double79 = vector3D78.getY();
        org.apache.commons.math.geometry.Vector3D vector3D80 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D33, (double) ' ', vector3D60, (double) (-1.0f), vector3D76, (double) 10.0f, vector3D78);
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (short) 1, vector3D27, (-0.6655420184408231d), vector3D76);
        double double82 = vector3D81.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D83 = new org.apache.commons.math.geometry.Vector3D((-0.4486833917904329d), vector3D23, 34.58376452852547d, vector3D81);
        double double84 = vector3D83.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D85 = vector3D83.negate();
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(rotationOrder26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 34.58376452852547d + "'", double84 == 34.58376452852547d);
        org.junit.Assert.assertNotNull(vector3D85);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        printWriter1.println((-5.440211108893697d));
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream7, false);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter10);
        java.lang.String[] strArray13 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter14 = printWriter11.printf("ko-KR", (java.lang.Object[]) strArray13);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException15 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray13);
        java.io.PrintWriter printWriter16 = printWriter1.format("French", (java.lang.Object[]) strArray13);
        printWriter1.close();
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.util.Locale.setDefault(category18, locale19);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale22.getDisplayLanguage(locale24);
        java.lang.String str28 = locale24.getDisplayName();
        java.util.Locale.setDefault(category18, locale24);
        java.util.Locale locale32 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale33);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = locale35.getDisplayScript(locale36);
        java.lang.String str38 = locale33.getDisplayLanguage(locale36);
        java.lang.String str39 = locale32.getDisplayVariant(locale36);
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayScript(locale42);
        java.lang.String str44 = locale32.getDisplayVariant(locale41);
        java.util.Locale.setDefault(category18, locale41);
        java.util.Locale locale46 = locale41.stripExtensions();
        java.util.Locale.setDefault(locale41);
        java.lang.String str49 = locale41.getExtension('x');
        org.apache.commons.math.geometry.Rotation rotation56 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double57 = rotation56.getQ0();
        org.apache.commons.math.geometry.Rotation rotation63 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double64 = rotation63.getQ0();
        org.apache.commons.math.geometry.Rotation rotation65 = rotation56.applyTo(rotation63);
        org.apache.commons.math.geometry.Rotation rotation66 = rotation56.revert();
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double73 = rotation72.getQ0();
        org.apache.commons.math.geometry.Rotation rotation74 = rotation56.applyInverseTo(rotation72);
        double[][] doubleArray75 = rotation72.getMatrix();
        java.io.PrintWriter printWriter76 = printWriter1.printf(locale41, "china", (java.lang.Object[]) doubleArray75);
        java.io.PrintWriter printWriter80 = printWriter1.append((java.lang.CharSequence) "ANGLAIS", 0, 0);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "French" + "'", str28, "French");
        org.junit.Assert.assertEquals(locale32.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u97d3\u6587" + "'", str38, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko_KR");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 52.0d + "'", double64 == 52.0d);
        org.junit.Assert.assertNotNull(rotation65);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 52.0d + "'", double73 == 52.0d);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertNotNull(printWriter80);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-1.4070751110264845d), (double) 10);
        org.apache.commons.math.geometry.RotationOrder rotationOrder5 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str6 = rotationOrder5.toString();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder5.getA2();
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(rotationOrder5, (-0.7035975447302918d), (double) '#', (-0.09950371902099892d));
        org.apache.commons.math.geometry.Rotation rotation15 = new org.apache.commons.math.geometry.Rotation(rotationOrder5, (-0.5440211108893699d), (-100.0d), (-1.0d));
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotation15.getAxis();
        org.apache.commons.math.geometry.RotationOrder rotationOrder17 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str18 = rotationOrder17.toString();
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotationOrder17.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D20 = vector3D16.add(vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((-2.5575191894877256d), vector3D3, 42.66111777000904d, vector3D19);
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray28 = rotation27.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D35, (double) (byte) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D32, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D40 = rotation27.applyInverseTo(vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D46, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D56, (double) (byte) 100, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D67, (double) (byte) 100, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D64, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D51, (double) (byte) 1, vector3D59, (double) (short) 100, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D73 = vector3D51.negate();
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D51);
        double double75 = vector3D51.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D32, vector3D51);
        double double77 = vector3D32.getAlpha();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation78 = new org.apache.commons.math.geometry.Rotation(vector3D21, vector3D32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: zero norm for rotation defining vector");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rotationOrder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "YZY" + "'", str6, "YZY");
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(rotationOrder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ZXZ" + "'", str18, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.write((int) (byte) 1);
        printWriter5.print((int) (short) 0);
        printWriter5.println("org.apache.commons.math.MathException: ZXZ");
        printWriter5.println('4');
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        java.lang.Object[] objArray21 = mathException19.getArguments();
        java.io.PrintWriter printWriter22 = printWriter5.printf("\u97d3\u6587)", objArray21);
        java.lang.String[] strArray26 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) strArray26);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException31 = new org.apache.commons.math.geometry.NotARotationMatrixException("italian-x-lvariant-CHN", (java.lang.Object[]) strArray26);
        printWriter22.println((java.lang.Object) "italian-x-lvariant-CHN");
        printWriter22.print(true);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException37);
        java.lang.Object[] objArray41 = mathException40.getArguments();
        java.io.PrintWriter printWriter42 = printWriter22.format("\uc911\uad6d\uc5b4", objArray41);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.RotationOrder rotationOrder44 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str45 = rotationOrder44.toString();
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotationOrder44.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D43.add(vector3D46);
        printWriter22.println((java.lang.Object) vector3D47);
        printWriter22.print((long) 'u');
        boolean boolean51 = printWriter22.checkError();
        printWriter22.print(4.04503944209149E-5d);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(rotationOrder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ZXZ" + "'", str45, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        java.io.PrintStream printStream87 = printStream85.append('4');
        printStream85.close();
        printStream85.print((int) (short) 1);
        java.io.PrintStream printStream92 = new java.io.PrintStream((java.io.OutputStream) printStream85, false);
        printStream92.println("zxz_fran\347ais");
        java.io.PrintStream printStream96 = printStream92.append(' ');
        printStream92.close();
        java.io.PrintStream printStream99 = printStream92.append('u');
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream96);
        org.junit.Assert.assertNotNull(printStream99);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D16);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray25 = rotation24.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D29, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation24.applyInverseTo(vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D38 = rotation24.getAxis();
        org.apache.commons.math.geometry.Rotation rotation39 = rotation24.revert();
        org.apache.commons.math.geometry.Rotation rotation45 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double46 = rotation45.getQ0();
        org.apache.commons.math.geometry.Rotation rotation52 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double53 = rotation52.getQ0();
        org.apache.commons.math.geometry.Rotation rotation54 = rotation45.applyTo(rotation52);
        double double55 = rotation45.getQ0();
        double double56 = rotation45.getQ0();
        double[][] doubleArray57 = rotation45.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation58 = rotation39.applyInverseTo(rotation45);
        double double59 = rotation39.getQ3();
        org.apache.commons.math.geometry.Rotation rotation60 = rotation5.applyInverseTo(rotation39);
        double double61 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D64 = new org.apache.commons.math.geometry.Vector3D((-0.13715201283077028d), (-40.752877659587945d));
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotation5.applyInverseTo(vector3D64);
        double[][] doubleArray66 = rotation5.getMatrix();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 52.0d + "'", double46 == 52.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertNotNull(rotation54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 52.0d + "'", double55 == 52.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.0d + "'", double56 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 52.0d + "'", double61 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(doubleArray66);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        printStream1.print(false);
        printStream1.flush();
        boolean boolean11 = printStream1.checkError();
        printStream1.println((int) (short) 100);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("TWN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap4);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.lang.String str8 = java.util.Locale.lookupTag(languageRangeList5, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap9);
        java.util.Locale locale14 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)", "de_DE", "fran\347ais");
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.Class<?> wildcardClass17 = languageRangeList10.getClass();
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertEquals(locale14.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)_DE_DE_fran\347ais");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        printWriter5.println((long) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter13 = printWriter5.append((java.lang.CharSequence) "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)", (int) (byte) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("YXY");
        java.util.Collection<java.lang.String> strCollection2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = java.util.Locale.lookupTag(languageRangeList1, strCollection2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        java.util.Locale locale15 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getLanguage();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter22.format(locale34, "ZXZ", (java.lang.Object[]) throwableArray42);
        java.io.PrintStream printStream45 = printStream13.printf(locale15, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray42);
        printStream13.println(0.0f);
        printStream13.write((int) '#');
        printStream13.println(1L);
        printStream13.print('u');
        printStream13.print(false);
        printStream13.print("kor");
        printStream13.flush();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertEquals(locale15.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale11);
        java.util.Locale.setDefault(locale9);
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ0();
        org.apache.commons.math.geometry.Rotation rotation31 = rotation22.applyTo(rotation29);
        org.apache.commons.math.geometry.Rotation rotation32 = rotation22.revert();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double39 = rotation38.getQ0();
        org.apache.commons.math.geometry.Rotation rotation40 = rotation22.applyInverseTo(rotation38);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double47 = rotation46.getQ1();
        double double48 = rotation46.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D50.subtract((double) 10L, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotation46.applyInverseTo(vector3D57);
        org.apache.commons.math.geometry.Rotation rotation60 = rotation22.applyInverseTo(rotation46);
        double[][] doubleArray61 = rotation22.getMatrix();
        java.io.PrintStream printStream62 = printStream8.format(locale9, "und", (java.lang.Object[]) doubleArray61);
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream62, false);
        printStream64.println(true);
        boolean boolean67 = printStream64.checkError();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotation5.getAxis();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = rotation5.revert();
        double double22 = rotation21.getQ3();
        double double23 = rotation21.getAngle();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        java.util.Locale locale1 = new java.util.Locale("\u4e2d\u6587");
        java.lang.String str2 = locale1.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for ??");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        java.util.Locale locale2 = new java.util.Locale("org.apache.commons.math.geometry.notarotationmatrixexception: _ZXZ_FRAN\347AIS", "china");
        java.lang.Object obj3 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "org.apache.commons.math.geometry.notarotationmatrixexception: _zxz_fran\347ais_CHINA");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "org.apache.commons.math.geometry.notarotationmatrixexception: _zxz_fran\347ais_CHINA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "org.apache.commons.math.geometry.notarotationmatrixexception: _zxz_fran\347ais_CHINA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "org.apache.commons.math.geometry.notarotationmatrixexception: _zxz_fran\347ais_CHINA");
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print((double) 0.0f);
        printWriter12.println("zxz (KO_KR)");
        printWriter12.write((int) ' ');
        printWriter12.print((long) (byte) 0);
        java.io.PrintWriter printWriter22 = printWriter12.append((java.lang.CharSequence) "\u82f1\u6587");
        printWriter22.println((long) 'u');
        printWriter22.flush();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double7 = rotation6.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double14 = rotation13.getQ0();
        org.apache.commons.math.geometry.Rotation rotation15 = rotation6.applyTo(rotation13);
        org.apache.commons.math.geometry.Rotation rotation16 = rotation6.revert();
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation23 = rotation16.applyTo(rotation22);
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream25, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter28);
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter32 = printWriter29.printf("ko-KR", (java.lang.Object[]) strArray31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        double double38 = vector3D36.getNorm();
        printWriter29.println((java.lang.Object) vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D36, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotation16.applyTo(vector3D36);
        double double47 = rotation16.getQ3();
        double[][] doubleArray48 = rotation16.getMatrix();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray54 = mathException53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = mathException53.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException56 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray55);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException57 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray55);
        java.lang.Throwable[] throwableArray58 = notARotationMatrixException57.getSuppressed();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("zho", (java.lang.Object[]) throwableArray58);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray62 = mathException61.getSuppressed();
        java.lang.Throwable[] throwableArray63 = mathException61.getSuppressed();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException61);
        java.lang.String[] strArray66 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66, (java.lang.Throwable) mathException68);
        java.lang.String str70 = mathException69.getPattern();
        mathException64.addSuppressed((java.lang.Throwable) mathException69);
        mathException59.addSuppressed((java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("ja-u-twn", (java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("chinesisch (china)", (java.lang.Object[]) doubleArray48, (java.lang.Throwable) mathException75);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ZXZ" + "'", str70, "ZXZ");
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.println((float) 1L);
        printStream1.print((int) (short) 10);
        printStream1.print("zho");
        printStream1.write((int) '#');
        printStream1.print((long) 'a');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        java.util.Locale locale3 = new java.util.Locale("org.apache.commons.math.MathException: ko_KR", "\u82f1\u56fd", "german");
        java.lang.String str4 = locale3.getDisplayLanguage();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u56fd_german");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.math.mathexception: ko_kr" + "'", str4, "org.apache.commons.math.mathexception: ko_kr");
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("United Kingdom");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException(throwable2);
        java.lang.String[] strArray5 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5);
        mathException3.addSuppressed((java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray8 = mathException6.getSuppressed();
        mathException1.addSuppressed((java.lang.Throwable) mathException6);
        java.lang.Object[] objArray10 = mathException1.getArguments();
        java.lang.Object[] objArray11 = mathException1.getArguments();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Rotation rotation8 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 11983.257028037076d, 0.3799892837204258d, 0.6212338797254471d);
        double double9 = rotation8.getQ0();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ZXZ" + "'", str1, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.5934013209336104d) + "'", double9 == (-0.5934013209336104d));
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale11);
        java.util.Locale.setDefault(locale9);
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ0();
        org.apache.commons.math.geometry.Rotation rotation31 = rotation22.applyTo(rotation29);
        org.apache.commons.math.geometry.Rotation rotation32 = rotation22.revert();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double39 = rotation38.getQ0();
        org.apache.commons.math.geometry.Rotation rotation40 = rotation22.applyInverseTo(rotation38);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double47 = rotation46.getQ1();
        double double48 = rotation46.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D50.subtract((double) 10L, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotation46.applyInverseTo(vector3D57);
        org.apache.commons.math.geometry.Rotation rotation60 = rotation22.applyInverseTo(rotation46);
        double[][] doubleArray61 = rotation22.getMatrix();
        java.io.PrintStream printStream62 = printStream8.format(locale9, "und", (java.lang.Object[]) doubleArray61);
        java.io.PrintStream printStream64 = new java.io.PrintStream((java.io.OutputStream) printStream62, false);
        printStream62.println("en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertNotNull(rotation31);
        org.junit.Assert.assertNotNull(rotation32);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(printStream62);
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream8 = printStream3.format(locale5, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream3, false);
        printStream3.println(10.0f);
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        printStream15.close();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream15, false);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter18);
        printWriter19.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray29 = rotation28.getMatrix();
        java.io.PrintWriter printWriter30 = printWriter19.format("en", (java.lang.Object[]) doubleArray29);
        java.io.PrintStream printStream31 = printStream3.printf("YZY", (java.lang.Object[]) doubleArray29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("KOR", (java.lang.Object[]) doubleArray29);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("zxz (FRAN\347AIS)", (java.lang.Object[]) doubleArray29);
        java.lang.String str34 = mathException33.getPattern();
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zxz (FRAN\347AIS)" + "'", str34, "zxz (FRAN\347AIS)");
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        org.apache.commons.math.geometry.Vector3D vector3D0 = null;
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str2 = rotationOrder1.toString();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder1.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D5 = vector3D3.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation12.applyTo(vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D3, vector3D19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D0, vector3D20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ZXZ" + "'", str2, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ3();
        org.apache.commons.math.geometry.Rotation rotation7 = rotation5.revert();
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D11, (double) (byte) 100, vector3D13);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D13, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D31, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D18, (double) (byte) 1, vector3D26, (double) (short) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D40 = vector3D18.negate();
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D46, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D56, (double) (byte) 100, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D46, (double) 0.0f, vector3D58);
        org.apache.commons.math.geometry.Vector3D vector3D62 = vector3D60.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D41, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D64 = rotation7.applyInverseTo(vector3D63);
        org.apache.commons.math.geometry.Rotation rotation70 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double71 = rotation70.getQ1();
        double double72 = rotation70.getQ3();
        org.apache.commons.math.geometry.Rotation rotation73 = rotation7.applyTo(rotation70);
        double[][] doubleArray74 = rotation7.getMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation76 = new org.apache.commons.math.geometry.Rotation(doubleArray74, 6657946.548728053d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(rotation7);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(doubleArray74);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        java.util.Locale locale2 = new java.util.Locale("\u4e2d\u56fd\u8a9e", "italian");
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder8 = builder3.setExtension('u', "");
        java.util.Locale.Builder builder10 = builder8.setVariant("");
        java.util.Locale.Builder builder12 = builder8.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale13 = builder8.build();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.util.Locale locale15 = locale13.stripExtensions();
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.lang.String str17 = locale2.getDisplayLanguage(locale15);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder22 = builder18.setLanguage("ZXZ");
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder24 = builder18.setLocale(locale23);
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder26 = builder18.setLocale(locale25);
        java.lang.String str27 = locale25.getDisplayCountry();
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet29 = locale25.getUnicodeLocaleKeys();
        java.lang.String str30 = locale25.getScript();
        java.util.Locale locale31 = locale25.stripExtensions();
        java.lang.String str32 = locale31.getISO3Language();
        java.lang.String str33 = locale15.getDisplayCountry(locale31);
        org.junit.Assert.assertEquals(locale2.toString(), "\u4e2d\u56fd\u8a9e_ITALIAN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str17, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Canada" + "'", str27, "Canada");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "eng" + "'", str32, "eng");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintStream printStream16 = printStream11.append((java.lang.CharSequence) "en");
        char[] charArray23 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream16.println(charArray23);
        printWriter4.println(charArray23);
        java.io.PrintWriter printWriter27 = printWriter4.append(' ');
        printWriter27.println('a');
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter27);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a,  , #, a, #, x]");
        org.junit.Assert.assertNotNull(printWriter27);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale10.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray21 = rotation20.getMatrix();
        java.io.PrintWriter printWriter22 = printWriter5.format(locale10, "YZY", (java.lang.Object[]) doubleArray21);
        printWriter22.println();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getDisplayLanguage();
        java.util.Locale.setDefault(category26, locale27);
        java.util.Locale.setDefault(category25, locale27);
        java.util.Locale.setDefault(category24, locale27);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.lang.String str33 = locale27.getDisplayScript(locale32);
        java.lang.String str34 = locale32.getDisplayCountry();
        java.lang.String str35 = locale32.getDisplayVariant();
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double43 = rotation42.getQ0();
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double50 = rotation49.getQ0();
        org.apache.commons.math.geometry.Rotation rotation51 = rotation42.applyTo(rotation49);
        org.apache.commons.math.geometry.Rotation rotation52 = rotation42.revert();
        org.apache.commons.math.geometry.Rotation rotation58 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double59 = rotation58.getQ0();
        org.apache.commons.math.geometry.Rotation rotation60 = rotation42.applyInverseTo(rotation58);
        double[][] doubleArray61 = rotation58.getMatrix();
        java.io.PrintWriter printWriter62 = printWriter22.printf(locale32, "Chinese (China)", (java.lang.Object[]) doubleArray61);
        java.io.PrintStream printStream64 = new java.io.PrintStream("ko-KR");
        printStream64.close();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream64, false);
        java.io.PrintStream printStream69 = new java.io.PrintStream("ko-KR");
        printStream69.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream69, false);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter72);
        printWriter72.println((float) (byte) -1);
        java.io.PrintWriter printWriter77 = new java.io.PrintWriter((java.io.Writer) printWriter72, true);
        java.lang.String[] strArray79 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter80 = printWriter72.printf("KR", (java.lang.Object[]) strArray79);
        java.io.PrintStream printStream82 = new java.io.PrintStream("ko-KR");
        printStream82.close();
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter((java.io.OutputStream) printStream82, false);
        java.io.PrintWriter printWriter86 = new java.io.PrintWriter((java.io.Writer) printWriter85);
        char[] charArray89 = new char[] { ' ', 'x' };
        printWriter86.write(charArray89);
        printWriter72.println(charArray89);
        printWriter67.write(charArray89, 0, 1);
        printWriter22.write(charArray89);
        printWriter22.println();
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "China" + "'", str34, "China");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 52.0d + "'", double43 == 52.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 52.0d + "'", double50 == 52.0d);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(rotation52);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 52.0d + "'", double59 == 52.0d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(printWriter62);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[ , x]");
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        java.util.Locale locale2 = new java.util.Locale("China", "chinesisch (china)");
        java.lang.String str3 = locale2.getDisplayName();
        org.junit.Assert.assertEquals(locale2.toString(), "china_CHINESISCH (CHINA)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "china (CHINESISCH (CHINA))" + "'", str3, "china (CHINESISCH (CHINA))");
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation16.getAxis();
        printWriter4.print((java.lang.Object) rotation16);
        printWriter4.close();
        printWriter4.print(false);
        printWriter4.println((float) 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D18);
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter5.println();
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "\uce90\ub098\ub2e4");
        printWriter11.print('4');
        printWriter11.println("KOR");
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray21 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray21, (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray21, (java.lang.Throwable) mathException25);
        java.lang.Throwable[] throwableArray28 = mathException25.getSuppressed();
        java.io.PrintStream printStream29 = printStream17.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray28);
        printStream29.println((long) 0);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintStream printStream36 = new java.io.PrintStream("ko-KR");
        printStream36.close();
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream36, false);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.Writer) printWriter39);
        char[] charArray45 = new char[] { '4', 'a', ' ', ' ' };
        printWriter39.write(charArray45);
        printStream33.print(charArray45);
        printStream29.println(charArray45);
        printWriter11.print(charArray45);
        printWriter11.println(117701.61270356533d);
        printWriter11.write(1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[4, a,  ,  ]");
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = printWriter5.append((java.lang.CharSequence) "ko-KR");
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        char[] charArray20 = new char[] { ' ', 'x' };
        printWriter17.write(charArray20);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.lang.String str25 = locale22.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray33 = rotation32.getMatrix();
        java.io.PrintWriter printWriter34 = printWriter17.format(locale22, "YZY", (java.lang.Object[]) doubleArray33);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException35 = new org.apache.commons.math.geometry.NotARotationMatrixException("en", (java.lang.Object[]) doubleArray33);
        java.io.PrintWriter printWriter36 = printWriter9.printf("TWN", (java.lang.Object[]) doubleArray33);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("YXY");
        java.io.PrintStream printStream41 = new java.io.PrintStream("ko-KR");
        printStream41.close();
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream41, false);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter44);
        printWriter44.println((float) (byte) -1);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter44, true);
        java.lang.String[] strArray51 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter52 = printWriter44.printf("KR", (java.lang.Object[]) strArray51);
        printWriter52.print((double) 0.0f);
        printWriter52.println("zxz (KO_KR)");
        printWriter52.write(0);
        java.io.PrintWriter printWriter60 = printWriter52.append('a');
        printWriter60.print((float) 'x');
        java.util.Locale locale65 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category66 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale67 = java.util.Locale.ENGLISH;
        boolean boolean68 = locale67.hasExtensions();
        java.util.Locale.setDefault(category66, locale67);
        java.lang.String str70 = locale65.getDisplayName(locale67);
        java.lang.String str71 = locale67.getDisplayName();
        java.io.PrintStream printStream74 = new java.io.PrintStream("ko-KR");
        printStream74.close();
        java.util.Locale locale76 = java.util.Locale.UK;
        java.lang.String[] strArray78 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream79 = printStream74.format(locale76, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray78);
        java.io.PrintStream printStream81 = new java.io.PrintStream((java.io.OutputStream) printStream74, false);
        printStream74.println(10.0f);
        java.lang.String[] strArray86 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray86);
        java.io.PrintStream printStream88 = printStream74.format("\u97d3\u6587", (java.lang.Object[]) strArray86);
        java.io.PrintWriter printWriter89 = printWriter60.printf(locale67, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) strArray86);
        java.io.PrintWriter printWriter90 = printWriter9.printf(locale38, "TW", (java.lang.Object[]) strArray86);
        printWriter90.println((long) 'x');
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ , x]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en" + "'", str25, "en");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "yxy");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(printWriter60);
// flaky:         org.junit.Assert.assertEquals(locale65.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category66 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category66.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u97d3\u6587)" + "'", str70, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "English" + "'", str71, "English");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(printStream79);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(printStream88);
        org.junit.Assert.assertNotNull(printWriter89);
        org.junit.Assert.assertNotNull(printWriter90);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        printWriter5.write(0);
        printWriter5.print("\uc601\uc5b4\uc601\uad6d)");
        printWriter5.print(2.3122509176395862d);
        printWriter5.write("");
        printWriter5.write("canada");
        org.junit.Assert.assertNotNull(printWriter11);
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(1.7932371536978438d, 3.141592653589793d);
        org.apache.commons.math.geometry.RotationOrder rotationOrder5 = org.apache.commons.math.geometry.RotationOrder.YXY;
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder5.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D12, vector3D17);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D31, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D39 = rotation26.applyInverseTo(vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D39, vector3D40);
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D54 = rotation48.applyTo(vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D55 = vector3D50.negate();
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        double double58 = vector3D57.getY();
        org.apache.commons.math.geometry.Vector3D vector3D59 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D12, (double) ' ', vector3D39, (double) (-1.0f), vector3D55, (double) 10.0f, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (short) 1, vector3D6, (-0.6655420184408231d), vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D61 = vector3D2.add(1.7607846147136124d, vector3D60);
        double double62 = vector3D60.getAlpha();
        org.junit.Assert.assertNotNull(rotationOrder5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5707963267948966d + "'", double62 == 1.5707963267948966d);
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, (double) (byte) 100, vector3D4);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D4, vector3D9);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray19 = rotation18.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D23, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotation18.applyInverseTo(vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D31, vector3D32);
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotation40.applyTo(vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D47 = vector3D42.negate();
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        double double50 = vector3D49.getY();
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D4, (double) ' ', vector3D31, (double) (-1.0f), vector3D47, (double) 10.0f, vector3D49);
        org.apache.commons.math.geometry.RotationOrder rotationOrder52 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str53 = rotationOrder52.toString();
        org.apache.commons.math.geometry.Vector3D vector3D54 = rotationOrder52.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D56 = vector3D54.scalarMultiply((double) (byte) 100);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D51, vector3D54);
        double double58 = vector3D57.getDelta();
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ZXZ" + "'", str53, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        printStream7.close();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream12 = printStream7.format(locale9, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.String str26 = locale23.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        java.io.PrintWriter printWriter35 = printWriter18.format(locale23, "YZY", (java.lang.Object[]) doubleArray34);
        java.lang.String str36 = locale9.getDisplayCountry(locale23);
        java.util.Locale.Builder builder37 = builder5.setLocale(locale9);
        java.util.Locale.Builder builder38 = builder5.clear();
        java.util.Locale.Builder builder40 = builder38.addUnicodeLocaleAttribute("Canada");
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Locale.Category category42 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category43 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Locale.setDefault(category43, locale44);
        java.util.Locale.setDefault(category42, locale44);
        java.lang.String str48 = locale41.getDisplayVariant(locale44);
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.lang.String str51 = locale44.getDisplayCountry(locale49);
        java.lang.String str52 = locale44.getDisplayName();
        java.lang.String str53 = locale44.getISO3Language();
        java.util.Locale.Builder builder54 = builder40.setLocale(locale44);
        java.lang.String str55 = locale44.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United Kingdom" + "'", str36, "United Kingdom");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.FORMAT + "'", category42.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.FORMAT + "'", category43.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double7 = rotation6.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double14 = rotation13.getQ0();
        org.apache.commons.math.geometry.Rotation rotation15 = rotation6.applyTo(rotation13);
        org.apache.commons.math.geometry.Rotation rotation16 = rotation6.revert();
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation24 = rotation6.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.Rotation rotation30 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double31 = rotation30.getQ0();
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double38 = rotation37.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = rotation30.applyTo(rotation37);
        org.apache.commons.math.geometry.Rotation rotation40 = rotation30.revert();
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double47 = rotation46.getQ0();
        org.apache.commons.math.geometry.Rotation rotation48 = rotation30.applyInverseTo(rotation46);
        double double49 = rotation48.getAngle();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation24.applyInverseTo(rotation48);
        org.apache.commons.math.geometry.Rotation rotation56 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double57 = rotation56.getQ1();
        double double58 = rotation56.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D60, (double) (byte) 100, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D67 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D68 = vector3D60.subtract((double) 10L, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotation56.applyInverseTo(vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = vector3D69.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D71 = rotation50.applyInverseTo(vector3D70);
        double[][] doubleArray72 = rotation50.getMatrix();
        java.lang.String[] strArray77 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException80);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException82 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray77);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException83 = new org.apache.commons.math.geometry.NotARotationMatrixException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray72, (java.lang.Throwable) notARotationMatrixException83);
        java.lang.Throwable[] throwableArray85 = notARotationMatrixException83.getSuppressed();
        java.lang.String str86 = notARotationMatrixException83.toString();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 52.0d + "'", double58 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str86, "\ub3c5\uc77c\uc5b4");
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        boolean boolean8 = printWriter7.checkError();
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        printWriter9.write("fran\347\u6cd5\u6587)_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ");
        boolean boolean12 = printWriter9.checkError();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.MathException: ITA");
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale1.getDisplayScript();
        java.lang.String str4 = locale1.getLanguage();
        java.util.Set<java.lang.String> strSet5 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale1.getISO3Country();
        java.util.Set<java.lang.Character> charSet7 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "germany" + "'", str2, "germany");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "germany" + "'", str4, "germany");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(charSet7);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        printWriter5.println('#');
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray23 = mathException22.getSuppressed();
        java.lang.Throwable[] throwableArray24 = mathException22.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException25 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray24);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException26 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray24);
        java.lang.Throwable[] throwableArray27 = notARotationMatrixException26.getSuppressed();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("zho", (java.lang.Object[]) throwableArray27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = mathException30.getSuppressed();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException30);
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException37);
        java.lang.String str39 = mathException38.getPattern();
        mathException33.addSuppressed((java.lang.Throwable) mathException38);
        mathException28.addSuppressed((java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray42 = mathException28.getSuppressed();
        java.io.PrintWriter printWriter43 = printWriter5.format("org.apache.commons.math.MathException: zxz (KO_KR)", (java.lang.Object[]) throwableArray42);
        printWriter43.write("de_de");
        printWriter43.println(0L);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ZXZ" + "'", str39, "ZXZ");
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter43);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder16 = builder4.clearExtensions();
        java.util.Locale locale17 = builder16.build();
        java.util.Locale.Builder builder19 = builder16.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder16.setExtension('#', "french");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French" + "'", str11, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("Chinesisch");
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.flush();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printWriter18.write((int) (byte) 10);
        printWriter18.print('a');
        printWriter18.println();
        printWriter18.println();
        printWriter18.write("\uc911\uad6d\uc5b4");
        printWriter18.close();
        printWriter18.print((float) (short) 10);
        printWriter18.println((long) 0);
        printWriter18.close();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-1.4070751110264852d), 0.0d, 0.3331734424927659d);
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (short) 1, 1.7607846147136124d, 1.0d, false);
        org.apache.commons.math.geometry.Rotation rotation6 = rotation5.revert();
        double[][] doubleArray7 = rotation6.getMatrix();
        double[][] doubleArray8 = rotation6.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation(vector3D11, (double) 1);
        org.apache.commons.math.geometry.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D15 = rotation6.applyInverseTo(vector3D14);
        org.junit.Assert.assertNotNull(rotation6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        printStream90.println('#');
        java.io.PrintStream printStream94 = printStream90.append((java.lang.CharSequence) "Germany");
        printStream90.print((float) 1);
        printStream90.close();
        printStream90.println("\u82f1\u570b");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertNotNull(printStream94);
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder9 = builder4.setVariant("");
        java.util.Locale.Builder builder10 = builder4.clearExtensions();
        java.util.Locale locale11 = builder10.build();
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println('a');
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder24 = builder20.setLanguage("ZXZ");
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder26 = builder20.setLocale(locale25);
        java.lang.Object[] objArray28 = null;
        java.io.PrintWriter printWriter29 = printWriter17.format(locale25, "TWN", objArray28);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str32 = locale25.getDisplayScript(locale31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        printWriter38.close();
        java.util.Locale locale41 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter38.println((java.lang.Object) locale41);
        java.util.Set<java.lang.Character> charSet43 = locale41.getExtensionKeys();
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder44.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder49 = builder44.setExtension('u', "");
        java.util.Locale.Builder builder51 = builder49.setVariant("");
        java.util.Locale locale52 = builder51.build();
        java.lang.String str53 = locale41.getDisplayName(locale52);
        java.lang.String str54 = locale25.getDisplayName(locale52);
        java.lang.String str55 = locale52.getISO3Language();
        java.util.Locale locale58 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category59 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        boolean boolean61 = locale60.hasExtensions();
        java.util.Locale.setDefault(category59, locale60);
        java.lang.String str63 = locale58.getDisplayName(locale60);
        java.lang.String str64 = locale52.getDisplayVariant(locale58);
        boolean boolean65 = locale11.equals((java.lang.Object) locale52);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals(locale41.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str53, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "German (Germany)" + "'", str54, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category59.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u97d3\u6587)" + "'", str63, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) -1 };
        printStream15.write(byteArray19);
        boolean boolean21 = printStream15.checkError();
        printStream15.print('4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream26 = new java.io.PrintStream((java.io.OutputStream) printStream15, true, "FRAN\347AIS");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: FRANc?AIS");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = printStream1.append(' ');
        printStream1.print((long) 'a');
        java.io.PrintStream printStream35 = printStream1.append((java.lang.CharSequence) "CA");
        printStream35.print('4');
        java.io.PrintStream printStream39 = printStream35.append((java.lang.CharSequence) "org.apache.commons.math.geometry.NotARotationMatrixException: x-lvariant-TWN");
        printStream39.print(0.0d);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printStream39);
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        printStream1.print('a');
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = locale22.getScript();
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayScript(locale26);
        java.lang.String str28 = locale22.getDisplayName(locale25);
        java.util.Locale locale29 = locale22.stripExtensions();
        java.util.Set<java.lang.String> strSet30 = locale22.getUnicodeLocaleKeys();
        java.lang.String str31 = locale22.getVariant();
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter36);
        printWriter36.println((float) (byte) -1);
        printWriter36.print('a');
        java.util.Locale locale43 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter36.print((java.lang.Object) locale43);
        java.lang.String str45 = locale43.getDisplayName();
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale43.getDisplayCountry();
        java.lang.String str48 = locale22.getDisplayLanguage(locale43);
        java.lang.String[] strArray51 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray51, (java.lang.Throwable) mathException53);
        java.lang.String[] strArray58 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray58, (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray58, (java.lang.Throwable) mathException62);
        java.lang.Throwable[] throwableArray65 = mathException62.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException66 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray65);
        mathException54.addSuppressed((java.lang.Throwable) notARotationMatrixException66);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException70);
        notARotationMatrixException66.addSuppressed((java.lang.Throwable) mathException71);
        java.lang.String str73 = notARotationMatrixException66.getPattern();
        java.lang.Object[] objArray74 = notARotationMatrixException66.getArguments();
        java.lang.Object[] objArray75 = notARotationMatrixException66.getArguments();
        java.io.PrintStream printStream76 = printStream1.printf(locale43, "zxz_FRAN\347AIS", objArray75);
        java.lang.String str77 = locale43.getScript();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinese (Taiwan)" + "'", str28, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals(locale43.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str45, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese" + "'", str48, "Chinese");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\u97d3\u6587)");
        printStream1.println(9610.932890332206d);
        printStream1.print(10.0d);
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("zxz", "chinesisch (china)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: chinesisch (china)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        printWriter5.print((int) 'u');
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter14);
        printWriter15.print((long) (short) 100);
        printWriter15.print((int) 'u');
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        printWriter24.println((float) (byte) -1);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter24, true);
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter32 = printWriter24.printf("KR", (java.lang.Object[]) strArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        char[] charArray41 = new char[] { ' ', 'x' };
        printWriter38.write(charArray41);
        printWriter24.println(charArray41);
        printWriter15.print(charArray41);
        printWriter5.write(charArray41);
        printWriter5.print((float) (byte) 100);
        java.io.PrintWriter printWriter49 = printWriter5.append((java.lang.CharSequence) "\u82f1\u56fd");
        printWriter5.println('x');
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("chn", "DEU");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: DEU");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("German");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "german" + "'", str2, "german");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "german" + "'", str4, "german");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "german" + "'", str5, "german");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("org.apache.commons.math.MathException: org.apache.commons.math.MathException: zxz (KO_KR)");
        java.io.PrintWriter printWriter3 = printWriter1.append((java.lang.CharSequence) "Chine");
        org.junit.Assert.assertNotNull(printWriter3);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D21 = vector3D19.negate();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("German");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        java.io.PrintStream printStream9 = new java.io.PrintStream("ko-KR");
        printStream9.close();
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream9, false);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter12);
        printWriter12.println((float) (byte) -1);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter12, true);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double25 = rotation24.getQ0();
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double32 = rotation31.getQ0();
        org.apache.commons.math.geometry.Rotation rotation33 = rotation24.applyTo(rotation31);
        double double34 = rotation24.getQ0();
        double double35 = rotation24.getQ0();
        double[][] doubleArray36 = rotation24.getMatrix();
        java.io.PrintWriter printWriter37 = printWriter17.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray36);
        java.lang.String[] strArray41 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray46 = mathException45.getSuppressed();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException45);
        java.lang.Throwable[] throwableArray48 = mathException45.getSuppressed();
        java.io.PrintWriter printWriter49 = printWriter37.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray48);
        printWriter37.write("fran\347ais");
        printWriter37.print(false);
        printWriter37.write((int) (byte) 100);
        printWriter37.write("english");
        printWriter37.println(false);
        boolean boolean60 = languageRange1.equals((java.lang.Object) printWriter37);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "german" + "'", str2, "german");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "german" + "'", str3, "german");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "german" + "'", str4, "german");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Canada");
        java.util.Locale.Builder builder18 = builder0.setLanguage("it");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        printWriter24.println('a');
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter24.format(locale32, "TWN", objArray35);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.lang.String str38 = locale32.getDisplayCountry();
        java.util.Locale.Builder builder39 = builder18.setLocale(locale32);
        java.util.Locale.Builder builder40 = builder18.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder43 = builder18.setUnicodeLocaleKeyword("\u30d5\u30e9\u30f3\u30b9\u8a9e", "anglais (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Germany" + "'", str38, "Germany");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(vector3D2, (double) 1);
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotation4.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D10, (double) 0.0f, vector3D22);
        double double25 = vector3D24.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation4.applyInverseTo(vector3D24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation(vector3D26, (-0.4933235701589626d));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: zero norm for rotation axis");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D26);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("TWN");
        java.io.PrintWriter printWriter3 = printWriter1.append('#');
        java.util.Locale locale5 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter3.println((java.lang.Object) "\uc911\uad6d\uc5b4");
        printWriter3.println(false);
        printWriter3.write("de_DE", (int) (byte) 1, (int) (short) 0);
        org.junit.Assert.assertNotNull(printWriter3);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        byte[] byteArray10 = new byte[] { (byte) 100, (byte) -1, (byte) 10, (byte) 1 };
        printStream1.write(byteArray10);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream12, true);
        printStream12.print(false);
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getLanguage();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter22.format(locale34, "ZXZ", (java.lang.Object[]) throwableArray42);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter47 = printWriter22.format("\u97d3\u6587", (java.lang.Object[]) strArray46);
        java.io.PrintStream printStream49 = new java.io.PrintStream("ko-KR");
        printStream49.close();
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.OutputStream) printStream49, false);
        java.io.PrintStream printStream54 = printStream49.append((java.lang.CharSequence) "en");
        char[] charArray61 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream54.println(charArray61);
        printWriter47.write(charArray61, (int) (byte) 1, (int) (byte) 1);
        printStream12.print(charArray61);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[100, -1, 10, 1]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[a,  , #, a, #, x]");
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale12 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale.setDefault(category13, locale14);
        java.lang.String str17 = locale12.getDisplayName(locale14);
        java.lang.String str18 = locale14.getDisplayName();
        java.lang.String str19 = locale9.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder20 = builder7.setLocale(locale14);
        java.util.Set<java.lang.String> strSet21 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale.setDefault(category23, locale25);
        java.util.Locale.setDefault(category22, locale25);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.lang.String str31 = locale25.getDisplayScript(locale30);
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale25.getDisplayCountry(locale32);
        java.util.Locale.setDefault(locale32);
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray41 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray46 = mathException45.getSuppressed();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException45);
        java.lang.Throwable[] throwableArray48 = mathException45.getSuppressed();
        java.io.PrintStream printStream49 = printStream37.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray48);
        java.util.Locale locale51 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream54 = new java.io.PrintStream("ko-KR");
        printStream54.close();
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.OutputStream) printStream54, false);
        java.io.PrintWriter printWriter58 = new java.io.PrintWriter((java.io.Writer) printWriter57);
        printWriter58.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray68 = rotation67.getMatrix();
        java.io.PrintWriter printWriter69 = printWriter58.format("en", (java.lang.Object[]) doubleArray68);
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale70.getDisplayCountry(locale71);
        java.lang.String str73 = locale70.getLanguage();
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray77 = mathException76.getSuppressed();
        java.lang.Throwable[] throwableArray78 = mathException76.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException79 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray78);
        java.io.PrintWriter printWriter80 = printWriter58.format(locale70, "ZXZ", (java.lang.Object[]) throwableArray78);
        java.io.PrintStream printStream81 = printStream49.printf(locale51, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray78);
        java.util.Locale locale83 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleKeys();
        java.lang.String str85 = locale51.getDisplayVariant(locale83);
        java.lang.String str87 = locale83.getExtension('u');
        java.lang.String str88 = locale32.getDisplayName(locale83);
        java.lang.String str89 = locale14.getDisplayVariant(locale32);
        java.lang.String str90 = locale14.getCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u97d3\u6587)" + "'", str17, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English" + "'", str18, "English");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English" + "'", str19, "English");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ja" + "'", str33, "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertEquals(locale51.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "en" + "'", str73, "en");
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(printWriter80);
        org.junit.Assert.assertNotNull(printStream81);
        org.junit.Assert.assertEquals(locale83.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Japanese" + "'", str88, "Japanese");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print((int) ' ');
        printStream1.println((double) 100.0f);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        char[] charArray19 = new char[] { ' ', 'x' };
        printWriter16.write(charArray19);
        printStream1.print(charArray19);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter26);
        printWriter26.println((float) (byte) -1);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.Writer) printWriter26, true);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintStream printStream38 = printStream33.append((java.lang.CharSequence) "en");
        char[] charArray45 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream38.println(charArray45);
        printWriter26.println(charArray45);
        printStream1.println(charArray45);
        printStream1.println();
        printStream1.println();
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , x]");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a,  , #, a, #, x]");
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        printWriter9.print("\u97d3\u6587");
        printWriter9.write((int) 'u');
        printWriter9.println();
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        char[] charArray23 = new char[] { ' ', 'x' };
        printWriter20.write(charArray23);
        printWriter20.write((int) (byte) 1);
        printWriter20.print((int) (short) 0);
        printWriter20.println("org.apache.commons.math.MathException: ZXZ");
        printWriter20.println('4');
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray35 = mathException34.getSuppressed();
        java.lang.Object[] objArray36 = mathException34.getArguments();
        java.io.PrintWriter printWriter37 = printWriter20.printf("\u97d3\u6587)", objArray36);
        java.lang.String[] strArray41 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) strArray41);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException46 = new org.apache.commons.math.geometry.NotARotationMatrixException("italian-x-lvariant-CHN", (java.lang.Object[]) strArray41);
        printWriter37.println((java.lang.Object) "italian-x-lvariant-CHN");
        printWriter37.print(true);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray53 = mathException52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = mathException52.getSuppressed();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException52);
        java.lang.Object[] objArray56 = mathException55.getArguments();
        java.io.PrintWriter printWriter57 = printWriter37.format("\uc911\uad6d\uc5b4", objArray56);
        printWriter9.println((java.lang.Object) "\uc911\uad6d\uc5b4");
        printWriter9.print((int) (short) 10);
        printWriter9.print("org.apache.commons.math.geometry.NotARotationMatrixException: en");
        printWriter9.print(1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream13 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale17 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale.setDefault(category18, locale19);
        java.lang.String str22 = locale17.getDisplayName(locale19);
        java.lang.String str23 = locale19.getDisplayName();
        java.lang.String str24 = locale14.getDisplayLanguage(locale19);
        printStream13.println((java.lang.Object) locale19);
        java.lang.String str26 = locale19.getCountry();
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale31.getDisplayScript(locale32);
        java.lang.String str34 = locale29.getDisplayLanguage(locale31);
        java.lang.String str35 = locale31.getDisplayName();
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.lang.String str37 = locale31.getDisplayVariant(locale36);
        java.lang.String str38 = locale36.getScript();
        java.lang.String str39 = locale36.getLanguage();
        java.util.Locale.setDefault(category0, locale36);
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category42 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category43 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Locale.setDefault(category43, locale44);
        java.util.Locale.setDefault(category42, locale44);
        java.util.Locale.setDefault(category41, locale44);
        java.util.Locale locale49 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale49);
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = locale51.getDisplayScript(locale52);
        java.lang.String str54 = locale49.getDisplayLanguage(locale52);
        java.lang.String str56 = locale49.getExtension('a');
        java.util.Set<java.lang.String> strSet57 = locale49.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category41, locale49);
        java.util.Set<java.lang.String> strSet59 = locale49.getUnicodeLocaleKeys();
        java.lang.String str60 = locale49.getISO3Country();
        java.util.Locale.setDefault(category0, locale49);
        java.lang.String str62 = locale49.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u97d3\u6587)" + "'", str22, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "French" + "'", str35, "French");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh" + "'", str39, "zh");
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.FORMAT + "'", category42.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.FORMAT + "'", category43.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u97d3\u6587" + "'", str54, "\u97d3\u6587");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "KOR" + "'", str60, "KOR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ko_KR" + "'", str62, "ko_KR");
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        java.util.Locale locale2 = new java.util.Locale("ko-kr (ITA)", "en_GB");
        org.junit.Assert.assertEquals(locale2.toString(), "ko-kr (ita)_EN_GB");
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(2.692332829084591d, 0.5840734641020676d, (-30.57346292255037d));
        org.apache.commons.math.geometry.Vector3D vector3D4 = vector3D3.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D6 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D6);
        double double8 = vector3D6.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D3.add(vector3D6);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D9);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = new java.io.PrintStream("ko-KR");
        printStream31.close();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream31, false);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter34);
        char[] charArray38 = new char[] { ' ', 'x' };
        printWriter35.write(charArray38);
        printStream1.println(charArray38);
        printStream1.write((int) '#');
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , x]");
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        printStream1.print(' ');
        printStream1.print("ko");
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.close();
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.7035975447302918d), (double) '#', (-0.09950371902099892d));
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (byte) -1, 0.23295968413075419d, 0.0024680600121295393d);
        org.apache.commons.math.geometry.Vector3D vector3D12 = rotationOrder0.getA3();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D12);
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        printStream1.print(0L);
        printStream1.println((int) (byte) -1);
        printStream1.println((int) (byte) 0);
        printStream1.flush();
        boolean boolean98 = printStream1.checkError();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter6.print((long) (short) 100);
        printWriter6.print((int) 'u');
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        printWriter15.println((float) (byte) -1);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter15, true);
        java.lang.String[] strArray22 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter23 = printWriter15.printf("KR", (java.lang.Object[]) strArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream25, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter28);
        char[] charArray32 = new char[] { ' ', 'x' };
        printWriter29.write(charArray32);
        printWriter15.println(charArray32);
        printWriter6.print(charArray32);
        printWriter6.print((int) (byte) 0);
        java.util.Locale.Category category38 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.util.Locale.setDefault(category38, locale39);
        java.util.Locale locale42 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale42);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = locale44.getDisplayScript(locale45);
        java.lang.String str47 = locale42.getDisplayLanguage(locale45);
        java.util.Locale.setDefault(category38, locale45);
        org.apache.commons.math.geometry.Rotation rotation55 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray56 = rotation55.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D58, (double) (byte) 100, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D63, (double) (byte) 100, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D60, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D68 = rotation55.applyInverseTo(vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotation55.getAxis();
        org.apache.commons.math.geometry.Rotation rotation70 = rotation55.revert();
        org.apache.commons.math.geometry.Rotation rotation71 = rotation55.revert();
        org.apache.commons.math.geometry.Rotation rotation72 = rotation71.revert();
        org.apache.commons.math.geometry.Rotation rotation73 = rotation71.revert();
        double[][] doubleArray74 = rotation71.getMatrix();
        java.io.PrintWriter printWriter75 = printWriter6.printf(locale45, "ZYX", (java.lang.Object[]) doubleArray74);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException76 = new org.apache.commons.math.geometry.NotARotationMatrixException("taiwan", (java.lang.Object[]) doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation78 = new org.apache.commons.math.geometry.Rotation(doubleArray74, (-0.09917726107940238d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(printWriter23);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , x]");
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.FORMAT + "'", category38.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u97d3\u6587" + "'", str47, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(rotation70);
        org.junit.Assert.assertNotNull(rotation71);
        org.junit.Assert.assertNotNull(rotation72);
        org.junit.Assert.assertNotNull(rotation73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(printWriter75);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        org.apache.commons.math.geometry.Vector3D vector3D2 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D2, (double) (byte) 100, vector3D4);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D4, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D14 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D15 = vector3D14.negate();
        org.apache.commons.math.geometry.Vector3D vector3D16 = vector3D4.subtract(vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D16.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) 100, vector3D16);
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double26 = rotation25.getQ0();
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double33 = rotation32.getQ0();
        org.apache.commons.math.geometry.Rotation rotation34 = rotation25.applyTo(rotation32);
        org.apache.commons.math.geometry.Rotation rotation35 = rotation25.revert();
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double42 = rotation41.getQ0();
        org.apache.commons.math.geometry.Rotation rotation43 = rotation25.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation((double) (byte) 1, (double) 1.0f, 0.0d, 1.0d, true);
        org.apache.commons.math.geometry.Rotation rotation50 = rotation25.applyInverseTo(rotation49);
        double[][] doubleArray51 = rotation25.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D52 = rotation25.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D53 = vector3D16.subtract((-0.18442331349635016d), vector3D52);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Rotation rotation9 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.0d, 0.4663020147736518d, 0.009858925131239106d);
        org.apache.commons.math.geometry.Vector3D vector3D10 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D12 = rotationOrder0.getA3();
        double double13 = vector3D12.getNorm();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream4, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter7);
        printWriter8.println('a');
        printWriter8.print(true);
        printWriter8.flush();
        java.lang.String[] strArray17 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray17, (java.lang.Throwable) mathException20);
        java.lang.Throwable[] throwableArray22 = mathException21.getSuppressed();
        java.io.PrintWriter printWriter23 = printWriter8.format("zho", (java.lang.Object[]) throwableArray22);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException24 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4\ub300\ub9cc)", (java.lang.Object[]) throwableArray22);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException25 = new org.apache.commons.math.geometry.NotARotationMatrixException("org.apache.commons.math.MathException: ko_KR", (java.lang.Object[]) throwableArray22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("Germania", (java.lang.Throwable) notARotationMatrixException25);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printWriter23);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("tedesco");
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D1.subtract((double) 10L, vector3D8);
        org.apache.commons.math.geometry.Vector3D vector3D10 = vector3D1.negate();
        org.apache.commons.math.geometry.RotationOrder rotationOrder12 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D13 = rotationOrder12.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D14 = rotationOrder12.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D15 = rotationOrder12.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D16 = vector3D10.subtract((-12804.0d), vector3D15);
        org.apache.commons.math.geometry.RotationOrder rotationOrder17 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str18 = rotationOrder17.toString();
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotationOrder17.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D20 = rotationOrder17.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D21 = rotationOrder17.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D22 = rotationOrder17.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D25 = vector3D22.scalarMultiply(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation(vector3D10, vector3D25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: zero norm for rotation defining vector");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(rotationOrder12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(rotationOrder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "YZY" + "'", str18, "YZY");
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        java.lang.String[] strArray2 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray2, (java.lang.Throwable) mathException4);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException6 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray2);
        java.lang.Throwable[] throwableArray7 = notARotationMatrixException6.getSuppressed();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray13 = mathException12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = mathException12.getSuppressed();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("ja", (java.lang.Throwable) mathException12);
        java.lang.String[] strArray17 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray17, (java.lang.Throwable) mathException19);
        java.lang.String str21 = mathException20.getPattern();
        mathException15.addSuppressed((java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("zxz", (java.lang.Throwable) mathException15);
        java.lang.String[] strArray26 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray26);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray26, (java.lang.Throwable) mathException29);
        mathException23.addSuppressed((java.lang.Throwable) mathException30);
        java.lang.Throwable[] throwableArray32 = mathException30.getSuppressed();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.geometry.notarotationmatrixexception: _ZXZ_FRAN\347AIS", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException34 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray32);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("China");
        notARotationMatrixException34.addSuppressed((java.lang.Throwable) mathException36);
        notARotationMatrixException6.addSuppressed((java.lang.Throwable) notARotationMatrixException34);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ZXZ" + "'", str21, "ZXZ");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getISO3Language();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale5 = new java.util.Locale("\u97d3\u6587", "\ub3c5\uc77c\uc5b4");
        java.lang.String str6 = locale0.getDisplayCountry(locale5);
        boolean boolean7 = locale5.hasExtensions();
        boolean boolean8 = locale5.hasExtensions();
        java.lang.String str9 = locale5.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ita" + "'", str1, "ita");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "\u97d3\u6587\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italy" + "'", str6, "Italy");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D4, (double) (byte) 100, vector3D6);
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D6, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D6, (double) 0.0f, vector3D18);
        double double21 = vector3D20.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D46, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D33, (double) (byte) 1, vector3D41, (double) (short) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D55 = vector3D33.negate();
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D20, (double) 100L, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double68 = rotation67.getQ0();
        org.apache.commons.math.geometry.Rotation rotation74 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double75 = rotation74.getQ0();
        org.apache.commons.math.geometry.Rotation rotation76 = rotation67.applyTo(rotation74);
        org.apache.commons.math.geometry.Vector3D vector3D77 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation67.applyInverseTo(vector3D77);
        org.apache.commons.math.geometry.Vector3D vector3D79 = vector3D61.subtract(vector3D77);
        org.apache.commons.math.geometry.Vector3D vector3D80 = vector3D57.add((-52.0d), vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D82 = org.apache.commons.math.geometry.Vector3D.minusJ;
        org.apache.commons.math.geometry.Vector3D vector3D85 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D86 = vector3D82.add(vector3D85);
        double double87 = vector3D85.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D88 = new org.apache.commons.math.geometry.Vector3D(51.466293725059224d, vector3D61, (-0.34521355447787627d), vector3D85);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.0d + "'", double68 == 52.0d);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 52.0d + "'", double75 == 52.0d);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.8414709848078965d + "'", double87 == 0.8414709848078965d);
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale7);
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale7.getDisplayLanguage(locale10);
        java.util.Locale.setDefault(category5, locale10);
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream16 = printStream1.format(locale10, "fran\347ais", (java.lang.Object[]) strArray15);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter23.println('a');
        printWriter23.print((int) (short) -1);
        printWriter23.close();
        printWriter23.println(' ');
        printWriter23.close();
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter36);
        char[] charArray42 = new char[] { '4', 'a', ' ', ' ' };
        printWriter36.write(charArray42);
        printWriter36.write((int) (short) 100);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter36);
        printWriter36.println((double) 'a');
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.lang.String str50 = locale49.getCountry();
        java.io.PrintStream printStream54 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream54.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation63 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray64 = rotation63.getMatrix();
        java.io.PrintStream printStream65 = printStream54.printf("fra", (java.lang.Object[]) doubleArray64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR", (java.lang.Object[]) doubleArray64);
        java.io.PrintWriter printWriter67 = printWriter36.format(locale49, "x-lvariant-TWN", (java.lang.Object[]) doubleArray64);
        printWriter23.print((java.lang.Object) printWriter36);
        printWriter36.flush();
        printWriter36.println('x');
        printWriter36.flush();
        java.lang.String[] strArray76 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray76, (java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray81 = mathException80.getSuppressed();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray76, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray84 = mathException83.getSuppressed();
        mathException82.addSuppressed((java.lang.Throwable) mathException83);
        java.lang.Object[] objArray86 = mathException83.getArguments();
        java.io.PrintWriter printWriter87 = printWriter36.printf("Allemagne", objArray86);
        java.io.PrintStream printStream88 = printStream16.format("Vereinigtes K\366nigreich", objArray86);
        printStream88.close();
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u97d3\u6587" + "'", str12, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "KR" + "'", str50, "KR");
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertNotNull(printStream88);
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        java.util.Locale locale1 = new java.util.Locale("English");
        java.lang.String str2 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "english");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.ZXY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.8230677854004599d), (-1.2792393947944187d), 0.0d);
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder0.getA2();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray5, (java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray12 = mathException9.getSuppressed();
        java.io.PrintStream printStream13 = printStream1.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray12);
        java.util.Locale locale15 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter22.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray32 = rotation31.getMatrix();
        java.io.PrintWriter printWriter33 = printWriter22.format("en", (java.lang.Object[]) doubleArray32);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.lang.String str37 = locale34.getLanguage();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = mathException40.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException43 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter44 = printWriter22.format(locale34, "ZXZ", (java.lang.Object[]) throwableArray42);
        java.io.PrintStream printStream45 = printStream13.printf(locale15, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray42);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream13, true);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(printStream13);
        org.junit.Assert.assertEquals(locale15.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(printWriter33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en" + "'", str37, "en");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale.setDefault(category9, locale11);
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YXY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        java.lang.String str2 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA1();
        java.lang.String str5 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Rotation rotation9 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-60.912721436461325d), (-0.5309649148733837d), 9.950371902099892d);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "YXY" + "'", str2, "YXY");
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "YXY" + "'", str5, "YXY");
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        printStream1.flush();
        java.io.PrintStream printStream4 = new java.io.PrintStream("ko-KR");
        printStream4.close();
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String[] strArray8 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream9 = printStream4.format(locale6, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray8);
        java.io.PrintStream printStream11 = new java.io.PrintStream((java.io.OutputStream) printStream4, false);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.OutputStream) printStream11);
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 0, (byte) 1, (byte) -1 };
        printStream11.write(byteArray17);
        printStream1.write(byteArray17);
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray25 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray25, (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray30 = mathException29.getSuppressed();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray25, (java.lang.Throwable) mathException29);
        java.lang.Throwable[] throwableArray32 = mathException29.getSuppressed();
        java.io.PrintStream printStream33 = printStream21.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray32);
        printStream33.println((long) 0);
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintStream printStream40 = new java.io.PrintStream("ko-KR");
        printStream40.close();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream40, false);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.Writer) printWriter43);
        char[] charArray49 = new char[] { '4', 'a', ' ', ' ' };
        printWriter43.write(charArray49);
        printStream37.print(charArray49);
        printStream33.println(charArray49);
        printStream1.print(charArray49);
        java.io.PrintWriter printWriter55 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, -1]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[4, a,  ,  ]");
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        java.io.PrintWriter printWriter10 = printWriter5.append('x');
        printWriter5.println("French");
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException23);
        java.lang.Throwable[] throwableArray26 = mathException23.getSuppressed();
        java.io.PrintStream printStream27 = printStream15.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray26);
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        printWriter32.println((float) (byte) -1);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter32, true);
        java.lang.String[] strArray39 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter40 = printWriter32.printf("KR", (java.lang.Object[]) strArray39);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ko-KR");
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        char[] charArray49 = new char[] { ' ', 'x' };
        printWriter46.write(charArray49);
        printWriter32.println(charArray49);
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = locale52.getDisplayScript(locale53);
        java.lang.String str55 = locale53.getVariant();
        java.lang.String[] strArray58 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray58);
        java.io.PrintWriter printWriter60 = printWriter32.printf(locale53, "English", (java.lang.Object[]) strArray58);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        java.lang.Object[] objArray67 = mathException65.getArguments();
        java.io.PrintStream printStream68 = printStream27.format(locale53, "fra", objArray67);
        java.io.PrintWriter printWriter69 = printWriter5.printf("zh", objArray67);
        printWriter69.print((-0.5242792709397996d));
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , x]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        java.io.PrintStream printStream1 = new java.io.PrintStream("us");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.print(true);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        printWriter4.print((int) (byte) -1);
        printWriter4.println(false);
        printWriter4.print(false);
        printWriter4.write((int) (short) -1);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D7, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D28, (double) (byte) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D25, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D12, (double) (byte) 1, vector3D20, (double) (short) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D34 = vector3D12.negate();
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D12);
        double double36 = vector3D12.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D38 = vector3D12.scalarMultiply((double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D40, (double) (byte) 100, vector3D42);
        double double44 = vector3D42.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D45 = vector3D12.subtract(vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D46 = vector3D12.negate();
        double double47 = vector3D12.getDelta();
        org.apache.commons.math.geometry.RotationOrder rotationOrder49 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D50 = rotationOrder49.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D51 = rotationOrder49.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D52 = rotationOrder49.getA3();
        java.lang.String str53 = rotationOrder49.toString();
        org.apache.commons.math.geometry.Vector3D vector3D54 = rotationOrder49.getA1();
        org.apache.commons.math.geometry.RotationOrder rotationOrder56 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation60 = new org.apache.commons.math.geometry.Rotation(rotationOrder56, 0.0d, 52.0d, (double) (byte) 1);
        org.apache.commons.math.geometry.RotationOrder rotationOrder61 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str62 = rotationOrder61.toString();
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotationOrder61.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D64 = rotationOrder61.getA3();
        java.lang.String str65 = rotationOrder61.toString();
        org.apache.commons.math.geometry.Vector3D vector3D66 = rotationOrder61.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D67 = rotationOrder61.getA3();
        double[] doubleArray68 = rotation60.getAngles(rotationOrder61);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotationOrder61.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((-60.912721436461325d), vector3D12, 0.4663020147736518d, vector3D54, (-0.43638600702710073d), vector3D69);
        org.apache.commons.math.geometry.RotationOrder rotationOrder71 = org.apache.commons.math.geometry.RotationOrder.YXZ;
        org.apache.commons.math.geometry.Vector3D vector3D72 = rotationOrder71.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotationOrder71.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D74 = rotationOrder71.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D75 = rotationOrder71.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D76 = vector3D54.add(vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D80 = new org.apache.commons.math.geometry.Vector3D((double) 1.0f, 52.0d);
        org.apache.commons.math.geometry.RotationOrder rotationOrder81 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str82 = rotationOrder81.toString();
        org.apache.commons.math.geometry.Vector3D vector3D83 = rotationOrder81.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D84 = rotationOrder81.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D85 = rotationOrder81.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D86 = vector3D85.normalize();
        double double87 = vector3D86.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D88 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D80, vector3D86);
        org.apache.commons.math.geometry.Vector3D vector3D89 = new org.apache.commons.math.geometry.Vector3D(0.031080913271464266d, vector3D75, 0.9481327383354655d, vector3D86);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(rotationOrder49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "XZY" + "'", str53, "XZY");
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(rotationOrder56);
        org.junit.Assert.assertNotNull(rotationOrder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ZXZ" + "'", str62, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ZXZ" + "'", str65, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-2.9778714378213818, 0.9999999999999997, -1.5707963267948966]");
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(rotationOrder71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(rotationOrder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ZXZ" + "'", str82, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D88);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        printStream29.print(1.2220476682666177d);
        printStream29.println(false);
        boolean boolean34 = printStream29.checkError();
        java.io.PrintStream printStream36 = printStream29.append((java.lang.CharSequence) "XZX");
        byte[] byteArray38 = new byte[] { (byte) -1 };
        printStream29.write(byteArray38, (int) ' ', (int) 'u');
        java.lang.String[] strArray45 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray45, (java.lang.Throwable) mathException47);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException49 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray45);
        java.io.PrintStream printStream52 = new java.io.PrintStream("ko-KR");
        printStream52.close();
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream57 = printStream52.format(locale54, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray56);
        java.io.PrintStream printStream59 = new java.io.PrintStream((java.io.OutputStream) printStream52, false);
        printStream52.println(10.0f);
        java.io.PrintStream printStream64 = new java.io.PrintStream("ko-KR");
        printStream64.close();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream64, false);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.Writer) printWriter67);
        printWriter68.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation77 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray78 = rotation77.getMatrix();
        java.io.PrintWriter printWriter79 = printWriter68.format("en", (java.lang.Object[]) doubleArray78);
        java.io.PrintStream printStream80 = printStream52.printf("YZY", (java.lang.Object[]) doubleArray78);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("KOR", (java.lang.Object[]) doubleArray78);
        notARotationMatrixException49.addSuppressed((java.lang.Throwable) mathException81);
        java.lang.Object[] objArray83 = mathException81.getArguments();
        java.io.PrintStream printStream84 = printStream29.format("", objArray83);
        java.io.PrintWriter printWriter85 = new java.io.PrintWriter((java.io.OutputStream) printStream29);
        java.io.PrintWriter printWriter86 = new java.io.PrintWriter((java.io.OutputStream) printStream29);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream90 = printStream29.append((java.lang.CharSequence) "cor\351en (Cor\351e du Sud)", 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -101");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printStream57);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[[25407.0, 1040.0, 2000.0], [-1040.0, 5407.0, 10400.0], [2000.0, -10400.0, 5607.0]]");
        org.junit.Assert.assertNotNull(printStream84);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale1.getExtension('x');
        java.lang.String str7 = locale1.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale1.getUnicodeLocaleType("Kanada");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Kanada");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("taiwan", "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zxz_franc?ais_???????? (?????)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale11 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream13 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale17 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale.setDefault(category18, locale19);
        java.lang.String str22 = locale17.getDisplayName(locale19);
        java.lang.String str23 = locale19.getDisplayName();
        java.lang.String str24 = locale14.getDisplayLanguage(locale19);
        printStream13.println((java.lang.Object) locale19);
        java.lang.String str26 = locale19.getCountry();
        java.util.Locale.setDefault(category0, locale19);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("ZXZ");
        java.util.Locale.setDefault(category0, locale29);
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        boolean boolean37 = locale36.hasExtensions();
        java.util.Locale.setDefault(category35, locale36);
        java.util.Locale.setDefault(category31, locale36);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.lang.String str43 = locale42.getDisplayLanguage();
        java.util.Locale.setDefault(category41, locale42);
        java.util.Locale.setDefault(category40, locale42);
        java.util.Locale.setDefault(category31, locale42);
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale49.getDisplayScript(locale50);
        java.lang.String str52 = locale47.getDisplayLanguage(locale49);
        java.util.Locale locale53 = locale47.stripExtensions();
        java.lang.String str54 = locale53.getDisplayLanguage();
        java.lang.String str55 = locale42.getDisplayName(locale53);
        boolean boolean56 = locale42.hasExtensions();
        java.util.Locale.setDefault(category0, locale42);
        java.util.Locale locale58 = java.util.Locale.getDefault(category0);
        java.util.Locale locale59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u97d3\u6587)" + "'", str22, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zxz");
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category35.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = printStream1.append(' ');
        printStream1.print((long) 'a');
        printStream1.write((int) (short) 10);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream37.println((int) (byte) 1);
        printStream37.print((float) '4');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D3 = vector3D2.negate();
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D15, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D33, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D20, (double) (byte) 1, vector3D28, (double) (short) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D42 = vector3D20.negate();
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D20);
        double double44 = vector3D20.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D45 = vector3D8.subtract((double) (short) -1, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D46 = vector3D2.add((double) (byte) 0, vector3D20);
        double double47 = vector3D46.getY();
        double double48 = vector3D46.getX();
        double double49 = vector3D46.getZ();
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-0.13715201283077028d) + "'", double47 == (-0.13715201283077028d));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-0.08806429469916818d) + "'", double48 == (-0.08806429469916818d));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.9866275920404853d + "'", double49 == 0.9866275920404853d);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print((double) 0.0f);
        printWriter12.println("zxz (KO_KR)");
        printWriter12.println();
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintStream printStream26 = printStream21.append((java.lang.CharSequence) "en");
        printStream21.print("");
        java.util.Locale.Category category29 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category31 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale.setDefault(category30, locale32);
        java.util.Locale.setDefault(category29, locale32);
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray44 = rotation43.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D46, (double) (byte) 100, vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D51, (double) (byte) 100, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D48, vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D56 = rotation43.applyInverseTo(vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D57 = rotation43.getAxis();
        org.apache.commons.math.geometry.Rotation rotation58 = rotation43.revert();
        double[][] doubleArray59 = rotation58.getMatrix();
        java.io.PrintStream printStream60 = printStream21.format(locale32, "KR", (java.lang.Object[]) doubleArray59);
        java.io.PrintStream printStream62 = printStream21.append('u');
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleKeys();
        java.util.Locale locale65 = locale63.stripExtensions();
        java.io.PrintStream printStream68 = new java.io.PrintStream("ko-KR");
        printStream68.close();
        java.io.PrintWriter printWriter71 = new java.io.PrintWriter((java.io.OutputStream) printStream68, false);
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.Writer) printWriter71);
        printWriter71.println((float) (byte) -1);
        java.io.PrintWriter printWriter76 = new java.io.PrintWriter((java.io.Writer) printWriter71, true);
        java.lang.String[] strArray78 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter79 = printWriter71.printf("KR", (java.lang.Object[]) strArray78);
        java.io.PrintStream printStream80 = printStream21.printf(locale63, "United Kingdom", (java.lang.Object[]) strArray78);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException81 = new org.apache.commons.math.geometry.NotARotationMatrixException("German", (java.lang.Object[]) strArray78);
        java.io.PrintWriter printWriter82 = printWriter12.printf("\uc601\uad6d", (java.lang.Object[]) strArray78);
        printWriter12.println(true);
        printWriter12.print((long) 0);
        printWriter12.println(true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.FORMAT + "'", category29.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category31 + "' != '" + java.util.Locale.Category.FORMAT + "'", category31.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(printStream60);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(printWriter79);
        org.junit.Assert.assertNotNull(printStream80);
        org.junit.Assert.assertNotNull(printWriter82);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ko-KR", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = new java.util.Locale("\uc911\uad6d\uc5b4");
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getDisplayLanguage();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale9.getDisplayLanguage(locale11);
        java.util.Locale.setDefault(locale9);
        java.util.Set<java.lang.String> strSet16 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str19 = locale9.getDisplayName(locale18);
        java.lang.String str20 = locale9.getISO3Language();
        java.util.Locale.setDefault(category5, locale9);
        java.util.Locale locale22 = java.util.Locale.getDefault(category5);
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleKeys();
        java.lang.String str24 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet23);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale7.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder1.setLanguage("ZXZ");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder13 = builder9.setLanguage("ZXZ");
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder15 = builder9.setLocale(locale14);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder17 = builder9.setLocale(locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        java.lang.String str19 = locale16.getDisplayLanguage();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        java.util.Locale locale25 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str26 = locale20.getDisplayLanguage(locale25);
        java.lang.String str27 = locale16.getDisplayVariant(locale25);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale31 = new java.util.Locale("\u4e2d\u6587", "german (KOR)");
        java.lang.String str32 = locale31.getDisplayVariant();
        java.util.Locale locale33 = locale31.stripExtensions();
        java.util.Locale.setDefault(category0, locale31);
        java.io.PrintStream printStream36 = new java.io.PrintStream("ko-KR");
        printStream36.close();
        java.util.Locale locale38 = java.util.Locale.UK;
        java.lang.String[] strArray40 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream41 = printStream36.format(locale38, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray40);
        java.io.PrintStream printStream43 = new java.io.PrintStream((java.io.OutputStream) printStream36, false);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream43);
        printWriter44.print("\u97d3\u6587");
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder52 = builder47.setExtension('u', "");
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale locale56 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        boolean boolean59 = locale58.hasExtensions();
        java.util.Locale.setDefault(category57, locale58);
        java.lang.String str61 = locale56.getDisplayName(locale58);
        java.lang.String str62 = locale58.getDisplayName();
        java.lang.String str63 = locale53.getDisplayLanguage(locale58);
        java.util.Locale.Builder builder64 = builder47.setLocale(locale53);
        java.util.Locale locale65 = java.util.Locale.JAPANESE;
        java.lang.String str66 = locale53.getDisplayVariant(locale65);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray69 = mathException68.getSuppressed();
        java.lang.Throwable[] throwableArray70 = mathException68.getSuppressed();
        java.io.PrintWriter printWriter71 = printWriter44.printf(locale53, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) throwableArray70);
        java.util.Set<java.lang.Character> charSet72 = locale53.getExtensionKeys();
        java.util.Set<java.lang.String> strSet73 = locale53.getUnicodeLocaleAttributes();
        java.lang.String str74 = locale53.getScript();
        java.util.Locale locale78 = new java.util.Locale("Chinese (Taiwan)", "org.apache.commons.math.geometry.NotARotationMatrixException: zxz (KO_KR)", "Italian");
        java.lang.String str79 = locale78.getDisplayCountry();
        java.lang.String str80 = locale53.getDisplayLanguage(locale78);
        java.util.Locale.setDefault(category0, locale53);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Kanada" + "'", str18, "Kanada");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Englisch" + "'", str19, "Englisch");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale25.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "French" + "'", str26, "French");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale31.toString(), "\u4e2d\u6587_GERMAN (KOR)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "\u4e2d\u6587_GERMAN (KOR)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category57.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u97d3\u6587)" + "'", str61, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "English" + "'", str62, "English");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "English" + "'", str63, "English");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertNotNull(charSet72);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals(locale78.toString(), "chinese (taiwan)_ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)_Italian");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)" + "'", str79, "ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "English" + "'", str80, "English");
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.print(false);
        java.io.PrintWriter printWriter13 = printWriter5.append('4');
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream6, true);
        java.io.PrintStream printStream10 = new java.io.PrintStream("ko-KR");
        printStream10.close();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String[] strArray14 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream15 = printStream10.format(locale12, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray14);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream10, false);
        printStream10.println(10.0f);
        java.lang.String[] strArray22 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray22);
        java.io.PrintStream printStream24 = printStream10.format("\u97d3\u6587", (java.lang.Object[]) strArray22);
        printStream10.println((long) (short) 1);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream10, false);
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray34 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray34, (java.lang.Throwable) mathException36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray39 = mathException38.getSuppressed();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray34, (java.lang.Throwable) mathException38);
        java.lang.Throwable[] throwableArray41 = mathException38.getSuppressed();
        java.io.PrintStream printStream42 = printStream30.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray41);
        printStream42.println((long) 0);
        java.io.PrintStream printStream46 = new java.io.PrintStream("ko-KR");
        printStream46.close();
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String[] strArray50 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream51 = printStream46.format(locale48, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray50);
        java.io.PrintStream printStream53 = new java.io.PrintStream((java.io.OutputStream) printStream46, false);
        printStream46.println(10.0f);
        java.io.PrintStream printStream58 = new java.io.PrintStream("ko-KR");
        printStream58.close();
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.OutputStream) printStream58, false);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.Writer) printWriter61);
        printWriter62.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation71 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray72 = rotation71.getMatrix();
        java.io.PrintWriter printWriter73 = printWriter62.format("en", (java.lang.Object[]) doubleArray72);
        java.io.PrintStream printStream74 = printStream46.printf("YZY", (java.lang.Object[]) doubleArray72);
        java.io.PrintStream printStream75 = new java.io.PrintStream((java.io.OutputStream) printStream74);
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) -1 };
        printStream74.write(byteArray78);
        printStream42.write(byteArray78);
        printStream10.write(byteArray78, (int) '4', (int) (short) 1);
        printStream6.write(byteArray78);
        printStream6.println(1.0f);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, -1]");
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print('4');
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale.setDefault(locale3);
        java.lang.String str9 = locale3.getLanguage();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder14 = builder10.setLanguage("ZXZ");
        java.util.Locale.Builder builder15 = builder10.clear();
        java.util.Locale.Builder builder16 = builder10.clear();
        java.util.Locale.Builder builder18 = builder16.setLanguageTag("fr");
        java.util.Locale.Builder builder20 = builder16.setLanguage("");
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder26 = builder21.setExtension('u', "");
        java.util.Locale locale27 = builder26.build();
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintStream printStream41 = printStream29.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray40);
        java.util.Locale locale43 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream46 = new java.io.PrintStream("ko-KR");
        printStream46.close();
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream46, false);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.Writer) printWriter49);
        printWriter50.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation59 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray60 = rotation59.getMatrix();
        java.io.PrintWriter printWriter61 = printWriter50.format("en", (java.lang.Object[]) doubleArray60);
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = locale62.getDisplayCountry(locale63);
        java.lang.String str65 = locale62.getLanguage();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray69 = mathException68.getSuppressed();
        java.lang.Throwable[] throwableArray70 = mathException68.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException71 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray70);
        java.io.PrintWriter printWriter72 = printWriter50.format(locale62, "ZXZ", (java.lang.Object[]) throwableArray70);
        java.io.PrintStream printStream73 = printStream41.printf(locale43, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray70);
        java.util.Locale locale75 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleKeys();
        java.lang.String str77 = locale43.getDisplayVariant(locale75);
        java.util.Set<java.lang.String> strSet78 = locale75.getUnicodeLocaleKeys();
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.lang.String str80 = locale79.getDisplayLanguage();
        java.util.Locale locale81 = java.util.Locale.FRENCH;
        java.util.Locale locale82 = java.util.Locale.TAIWAN;
        java.lang.String str83 = locale81.getDisplayScript(locale82);
        java.lang.String str84 = locale79.getDisplayLanguage(locale81);
        java.util.Locale.setDefault(locale79);
        java.util.Set<java.lang.String> strSet86 = locale79.getUnicodeLocaleKeys();
        java.lang.String str87 = locale75.getDisplayVariant(locale79);
        java.lang.String str88 = locale27.getDisplayLanguage(locale75);
        java.util.Locale.Builder builder89 = builder20.setLocale(locale27);
        boolean boolean90 = locale27.hasExtensions();
        java.lang.String str91 = locale3.getDisplayVariant(locale27);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printStream41);
        org.junit.Assert.assertEquals(locale43.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "en" + "'", str65, "en");
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printStream73);
        org.junit.Assert.assertEquals(locale75.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-0.09917726107940238d), 3.141592653589793d);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str17 = locale12.getDisplayLanguage(locale16);
        java.lang.String str18 = locale16.getDisplayName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "German" + "'", str17, "German");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder8.setRegion("");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getVariant();
        java.util.Locale.Builder builder15 = builder10.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.lang.String str22 = locale17.getDisplayLanguage(locale19);
        java.lang.String str24 = locale17.getExtension('u');
        java.util.Locale.Builder builder25 = builder15.setLocale(locale17);
        java.util.Locale.Builder builder27 = builder25.setRegion("GB");
        java.util.Locale.Builder builder29 = builder27.addUnicodeLocaleAttribute("italy");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder29.setExtension('#', "zxz (ko_kr)_FRAN\347AIS");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder8.setRegion("");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getVariant();
        java.util.Locale.Builder builder15 = builder10.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale18 = new java.util.Locale("XYZ");
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.lang.String str26 = locale19.getDisplayVariant(locale22);
        java.lang.String str27 = locale18.getDisplayScript(locale19);
        java.util.Locale.Builder builder28 = builder15.setLocale(locale18);
        boolean boolean29 = locale18.hasExtensions();
        boolean boolean30 = locale18.hasExtensions();
        java.lang.String str31 = locale18.getISO3Language();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale18.toString(), "xyz");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "xyz" + "'", str31, "xyz");
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        char[] charArray13 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream6.println(charArray13);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream6, true);
        printStream6.println(100L);
        printStream6.println(0.7826371500223388d);
        printStream6.print((-1));
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.util.Locale locale26 = java.util.Locale.UK;
        java.lang.String[] strArray28 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream29 = printStream24.format(locale26, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream((java.io.OutputStream) printStream24, false);
        printStream24.println(10.0f);
        java.lang.String[] strArray36 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36);
        java.io.PrintStream printStream38 = printStream24.format("\u97d3\u6587", (java.lang.Object[]) strArray36);
        printStream38.print(100.0f);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.OutputStream) printStream38, false);
        java.io.PrintStream printStream44 = new java.io.PrintStream("ko-KR");
        printStream44.close();
        java.util.Locale locale46 = java.util.Locale.UK;
        java.lang.String[] strArray48 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream49 = printStream44.format(locale46, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray48);
        java.io.PrintStream printStream51 = new java.io.PrintStream((java.io.OutputStream) printStream44, false);
        printStream44.println(10.0f);
        java.lang.String[] strArray56 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray56);
        java.io.PrintStream printStream58 = printStream44.format("\u97d3\u6587", (java.lang.Object[]) strArray56);
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) -1 };
        printStream58.write(byteArray62);
        printStream38.write(byteArray62, (-1), 0);
        printStream6.write(byteArray62, (int) 'a', (int) (byte) -1);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[a,  , #, a, #, x]");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(printStream49);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printStream58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, -1]");
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        java.io.PrintStream printStream2 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream2.println((float) 100L);
        printStream2.println((float) 10L);
        printStream2.println(' ');
        printStream2.print((double) 1.0f);
        printStream2.print((float) 1L);
        printStream2.println(false);
        java.lang.String[] strArray17 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray17, (java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray22 = mathException21.getSuppressed();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray17, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray25 = mathException24.getSuppressed();
        mathException23.addSuppressed((java.lang.Throwable) mathException24);
        printStream2.println((java.lang.Object) mathException23);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("zxz (FRAN\347AIS)", (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException33);
        java.lang.Object[] objArray35 = mathException33.getArguments();
        java.io.PrintStream printStream38 = new java.io.PrintStream("ko-KR");
        printStream38.close();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream38, false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        java.lang.String[] strArray44 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter45 = printWriter42.printf("ko-KR", (java.lang.Object[]) strArray44);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException46 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("German", objArray35, (java.lang.Throwable) notARotationMatrixException46);
        java.lang.String str48 = mathException47.getPattern();
        java.lang.String str49 = mathException47.getPattern();
        mathException28.addSuppressed((java.lang.Throwable) mathException47);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "German" + "'", str48, "German");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "German" + "'", str49, "German");
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter(file0, "zxz_fran\347ais (org.apache.commons.math.geometry.NotARotationMatrixException: ja)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: zxz_franc?ais (org.apache.commons.math.geometry.NotARotationMatrixException: ja)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("German");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "german" + "'", str2, "german");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "german" + "'", str3, "german");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "german" + "'", str4, "german");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        printWriter5.print((int) 'u');
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter14);
        printWriter14.println((float) (byte) -1);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.Writer) printWriter14, true);
        java.lang.String[] strArray21 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter22 = printWriter14.printf("KR", (java.lang.Object[]) strArray21);
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream24, false);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter27);
        char[] charArray31 = new char[] { ' ', 'x' };
        printWriter28.write(charArray31);
        printWriter14.println(charArray31);
        printWriter5.print(charArray31);
        printWriter5.print((int) (byte) 0);
        printWriter5.println(0.0f);
        printWriter5.println('u');
        printWriter5.flush();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        printWriter43.print(1.7607891322640317d);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , x]");
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter5.println();
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "\uce90\ub098\ub2e4");
        printWriter11.print('4');
        printWriter11.println("KOR");
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray21 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray21, (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray21, (java.lang.Throwable) mathException25);
        java.lang.Throwable[] throwableArray28 = mathException25.getSuppressed();
        java.io.PrintStream printStream29 = printStream17.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray28);
        printStream29.println((long) 0);
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintStream printStream36 = new java.io.PrintStream("ko-KR");
        printStream36.close();
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.OutputStream) printStream36, false);
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.Writer) printWriter39);
        char[] charArray45 = new char[] { '4', 'a', ' ', ' ' };
        printWriter39.write(charArray45);
        printStream33.print(charArray45);
        printStream29.println(charArray45);
        printWriter11.print(charArray45);
        printWriter11.println(117701.61270356533d);
        java.io.PrintWriter printWriter53 = printWriter11.append('x');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(printWriter53);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ja", strMap1);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.lang.String str6 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet5);
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.lang.String str10 = locale9.getDisplayName();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale13 = java.util.Locale.getDefault(category7);
        java.util.Locale locale17 = new java.util.Locale("org.apache.commons.math.geometry.NotARotationMatrixException: ", "\uc911\uad6d\uc5b4", "Italy");
        java.util.Locale.setDefault(category7, locale17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.lang.String str24 = locale19.getDisplayLanguage(locale21);
        java.util.Locale locale25 = locale19.stripExtensions();
        java.lang.String str26 = locale19.getDisplayLanguage();
        java.util.Locale locale27 = locale19.stripExtensions();
        java.util.Set<java.lang.String> strSet28 = locale19.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category7, locale19);
        java.util.Set<java.lang.String> strSet30 = locale19.getUnicodeLocaleKeys();
        java.lang.String str31 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap32);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\uc911\uad6d\uc5b4_Italy");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(languageRangeList33);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-270.0479994061875d), 0.2885878967731183d, 665808.0d, 0.7756610118220089d, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ1();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.2885878967731183d + "'", double6 == 0.2885878967731183d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.2885878967731183d + "'", double7 == 0.2885878967731183d);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = printStream1.append(' ');
        printStream1.print('#');
        printStream1.println(0.0f);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((-6782.273252612676d), (double) (short) 1, 0.8414709848078965d, (double) 100.0f, false);
        printStream1.println((java.lang.Object) rotation41);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("China");
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException45);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.io.PrintStream printStream48 = printStream1.format("zh", (java.lang.Object[]) throwableArray47);
        printStream1.print('a');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(printStream48);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getDisplayLanguage(locale6);
        java.lang.String str10 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.String str14 = locale12.getDisplayVariant();
        java.util.Locale.setDefault(locale12);
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        printStream1.println((float) 100);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter18.close();
        java.util.Locale locale21 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter18.println((java.lang.Object) locale21);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Object[] objArray27 = mathException25.getArguments();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("eng", objArray27);
        java.io.PrintStream printStream29 = printStream1.printf(locale21, "germany", objArray27);
        printStream1.flush();
        java.lang.Object[] objArray32 = null;
        java.io.PrintStream printStream33 = printStream1.printf("ja", objArray32);
        printStream33.println((int) ' ');
        printStream33.print((long) 'x');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertEquals(locale21.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream33);
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        printStream6.close();
        printStream6.println((long) 0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((int) (short) -1);
        printWriter5.close();
        printWriter5.print((int) (byte) -1);
        printWriter5.println((long) (byte) 1);
        printWriter5.print(false);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.lang.String str20 = locale18.getDisplayScript(locale19);
        java.lang.String str21 = locale17.getDisplayLanguage(locale18);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        java.lang.Object[] objArray25 = mathException23.getArguments();
        java.io.PrintWriter printWriter26 = printWriter5.printf(locale17, "eng", objArray25);
        printWriter26.print('4');
        java.io.PrintStream printStream30 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder31.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder35 = builder31.setLanguage("ZXZ");
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder37 = builder31.setLocale(locale36);
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder39 = builder31.setLocale(locale38);
        java.lang.String str40 = locale38.getDisplayCountry();
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleKeys();
        java.io.PrintStream printStream45 = new java.io.PrintStream("ko-KR");
        printStream45.close();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream45, false);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter48);
        printWriter49.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation58 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray59 = rotation58.getMatrix();
        java.io.PrintWriter printWriter60 = printWriter49.format("en", (java.lang.Object[]) doubleArray59);
        java.io.PrintStream printStream61 = printStream30.format(locale38, "French", (java.lang.Object[]) doubleArray59);
        java.lang.String[] strArray66 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66, (java.lang.Throwable) mathException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray66, (java.lang.Throwable) mathException70);
        java.lang.Throwable[] throwableArray73 = mathException70.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException74 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray73);
        java.lang.Throwable[] throwableArray75 = notARotationMatrixException74.getSuppressed();
        java.io.PrintStream printStream76 = printStream61.format("YZY", (java.lang.Object[]) throwableArray75);
        printStream61.print(10);
        java.io.PrintStream printStream80 = printStream61.append((java.lang.CharSequence) "\u97d3\u6587)");
        printWriter26.println((java.lang.Object) printStream80);
        printStream80.print((-0.02786191713456967d));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais" + "'", str21, "fran\347ais");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Kanada" + "'", str40, "Kanada");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(printStream76);
        org.junit.Assert.assertNotNull(printStream80);
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream("ko-KR");
        printStream8.close();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream8, false);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter11);
        char[] charArray15 = new char[] { ' ', 'x' };
        printWriter12.write(charArray15);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray28 = rotation27.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter12.format(locale17, "YZY", (java.lang.Object[]) doubleArray28);
        java.lang.String str30 = locale3.getDisplayCountry(locale17);
        java.lang.String str31 = locale3.getDisplayName();
        java.lang.String str32 = locale3.getDisplayCountry();
        boolean boolean33 = locale3.hasExtensions();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , x]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "United Kingdom" + "'", str30, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str31, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Vereinigtes K\366nigreich" + "'", str32, "Vereinigtes K\366nigreich");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.println(' ');
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.write((int) (short) -1);
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray16);
        java.lang.Object[] objArray18 = mathException17.getArguments();
        java.lang.String str19 = mathException17.getPattern();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("CHN", (java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("fran\347\u6cd5\u6587)", (java.lang.Throwable) mathException20);
        java.lang.Object[] objArray23 = mathException20.getArguments();
        printStream1.println((java.lang.Object) mathException20);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream27 = new java.io.PrintStream((java.io.OutputStream) printStream1, false, "german (kor)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: german (kor)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZXZ" + "'", str19, "ZXZ");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        java.io.PrintStream printStream9 = printStream1.append('#');
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter16.println((float) (byte) -1);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter16, true);
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double29 = rotation28.getQ0();
        org.apache.commons.math.geometry.Rotation rotation35 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double36 = rotation35.getQ0();
        org.apache.commons.math.geometry.Rotation rotation37 = rotation28.applyTo(rotation35);
        double double38 = rotation28.getQ0();
        double double39 = rotation28.getQ0();
        double[][] doubleArray40 = rotation28.getMatrix();
        java.io.PrintWriter printWriter41 = printWriter21.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR");
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Object[]) doubleArray40, (java.lang.Throwable) mathException43);
        java.io.PrintStream printStream45 = printStream1.printf("YZX", (java.lang.Object[]) doubleArray40);
        printStream45.println((long) 'x');
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printStream45);
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        java.lang.String str3 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 1.2220476682666177d, 0.0d, (double) (short) 10);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-0.0d), (double) (short) 100, (double) '4');
        org.apache.commons.math.geometry.Rotation rotation15 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-1.4070751110264845d), 2.904353524465863E17d, (double) (short) -1);
        double[][] doubleArray16 = rotation15.getMatrix();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YZY" + "'", str3, "YZY");
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException(throwable0);
        java.lang.String[] strArray3 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray3);
        mathException1.addSuppressed((java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException12);
        java.lang.String str14 = mathException13.getPattern();
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException13);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException13);
        mathException6.addSuppressed((java.lang.Throwable) mathException16);
        java.lang.String[] strArray20 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray20, (java.lang.Throwable) mathException23);
        mathException6.addSuppressed((java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException24);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZXZ" + "'", str14, "ZXZ");
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        double double15 = rotation5.getQ0();
        double double16 = rotation5.getQ0();
        double double17 = rotation5.getQ0();
        double double18 = rotation5.getAngle();
        double double19 = rotation5.getQ3();
        double[][] doubleArray20 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Vector3D vector3D22 = rotation5.applyInverseTo(vector3D21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayScript(locale2);
        java.lang.String str4 = locale2.getDisplayCountry();
        java.lang.String str5 = locale2.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("GERMAN (KOR)");
        java.lang.String str8 = locale2.getDisplayCountry(locale7);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        printStream1.close();
        printStream1.print(1);
        printStream1.write((int) (short) 100);
        printStream1.print(false);
        java.io.PrintStream printStream17 = new java.io.PrintStream("ko-KR");
        printStream17.close();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream17, false);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        java.lang.String[] strArray23 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter24 = printWriter21.printf("ko-KR", (java.lang.Object[]) strArray23);
        printWriter24.println(0.0d);
        printWriter24.write(0);
        java.io.PrintWriter printWriter30 = printWriter24.append('4');
        printWriter30.print((double) 'a');
        printWriter30.print((double) (short) 100);
        printWriter30.print(true);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter30, true);
        printWriter38.println();
        java.util.Locale locale42 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale.setDefault(category43, locale44);
        java.lang.String str47 = locale42.getDisplayName(locale44);
        java.lang.String str48 = locale42.getDisplayCountry();
        java.lang.String[] strArray50 = java.util.Locale.getISOLanguages();
        java.io.PrintWriter printWriter51 = printWriter38.format(locale42, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray50);
        java.io.PrintStream printStream52 = printStream1.printf("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray50);
        printStream52.println();
        printStream52.println((-0.03306189853298793d));
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(printWriter24);
        org.junit.Assert.assertNotNull(printWriter30);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category43.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u97d3\u6587)" + "'", str47, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u97d3\u6587" + "'", str48, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(printWriter51);
        org.junit.Assert.assertNotNull(printStream52);
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("Royaume-Uni", throwable1);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        printStream1.close();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str15 = locale13.getDisplayVariant();
        java.lang.String str16 = locale13.getDisplayLanguage();
        java.lang.String str17 = locale13.getDisplayCountry();
        java.lang.Object[] objArray19 = null;
        java.io.PrintStream printStream20 = printStream1.format(locale13, "YZY", objArray19);
        java.io.PrintStream printStream22 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale26 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale.setDefault(category27, locale28);
        java.lang.String str31 = locale26.getDisplayName(locale28);
        java.lang.String str32 = locale28.getDisplayName();
        java.lang.String str33 = locale23.getDisplayLanguage(locale28);
        printStream22.println((java.lang.Object) locale28);
        java.lang.String str35 = locale28.getCountry();
        java.lang.String str36 = locale28.getDisplayLanguage();
        java.io.PrintStream printStream39 = new java.io.PrintStream("ko-KR");
        printStream39.close();
        java.util.Locale locale41 = java.util.Locale.UK;
        java.lang.String[] strArray43 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream44 = printStream39.format(locale41, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray43);
        java.io.PrintStream printStream46 = new java.io.PrintStream((java.io.OutputStream) printStream39, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream46);
        printWriter47.print("\u97d3\u6587");
        printWriter47.close();
        printWriter47.print((-3.141592653589793d));
        boolean boolean53 = printWriter47.checkError();
        java.io.PrintStream printStream57 = new java.io.PrintStream("ko-KR");
        printStream57.close();
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream57, false);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter60);
        printWriter60.println((float) (byte) -1);
        java.lang.String[] strArray66 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66, (java.lang.Throwable) mathException68);
        java.io.PrintWriter printWriter70 = printWriter60.printf("it", (java.lang.Object[]) strArray66);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException71 = new org.apache.commons.math.geometry.NotARotationMatrixException("de-DE", (java.lang.Object[]) strArray66);
        java.io.PrintWriter printWriter72 = printWriter47.format("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray66);
        java.io.PrintStream printStream73 = printStream20.printf(locale28, "\u97d3\u6587", (java.lang.Object[]) strArray66);
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter((java.io.OutputStream) printStream20);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "German" + "'", str16, "German");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Germany" + "'", str17, "Germany");
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u97d3\u6587)" + "'", str31, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English" + "'", str32, "English");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English" + "'", str33, "English");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English" + "'", str36, "English");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(printWriter70);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(printStream73);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        java.util.Locale locale1 = new java.util.Locale("\u7fa9\u5927\u5229\u6587");
        java.lang.String str2 = locale1.getISO3Country();
        org.junit.Assert.assertEquals(locale1.toString(), "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        java.io.PrintStream printStream1 = new java.io.PrintStream("anglais");
        printStream1.println(100.0f);
        printStream1.println(1L);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("jpn");
        java.lang.String str8 = locale7.getLanguage();
        printStream1.print((java.lang.Object) str8);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "jpn");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "jpn" + "'", str8, "jpn");
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ub3c5\uc77c\uc5b4");
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayCountry(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder8 = builder6.setLanguage("KR");
        java.util.Locale.Builder builder10 = builder6.setLanguage("KOR");
        java.util.Locale.Builder builder12 = builder10.setVariant("italiano");
        java.util.Locale.Builder builder13 = builder12.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLanguageTag("\ud504\ub791\uc2a4\uc5b4,KR)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Italian (?????????,KR) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter8.println(0.0d);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String[] strArray17 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream18 = printStream13.format(locale15, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream13, false);
        printStream13.println(10.0f);
        java.lang.String[] strArray25 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray25);
        java.io.PrintStream printStream27 = printStream13.format("\u97d3\u6587", (java.lang.Object[]) strArray25);
        printStream27.close();
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException(throwable30);
        java.lang.String[] strArray33 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33);
        mathException31.addSuppressed((java.lang.Throwable) mathException34);
        java.lang.Throwable[] throwableArray36 = mathException34.getSuppressed();
        java.io.PrintStream printStream37 = printStream27.format("French", (java.lang.Object[]) throwableArray36);
        java.io.PrintWriter printWriter38 = printWriter8.printf("x-lvariant-TWN", (java.lang.Object[]) throwableArray36);
        // The following exception was thrown during execution in test generation
        try {
            printWriter38.write("zxz_fran\347ais", (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 98");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (-3.141592653589793d), (double) ' ', (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.Rotation rotation7 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder8 = org.apache.commons.math.geometry.RotationOrder.XYX;
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder8.getA1();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation(rotationOrder8, 9610.932890332206d, 10.0d, (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D14 = rotation13.getAxis();
        org.apache.commons.math.geometry.Rotation rotation15 = rotation7.applyTo(rotation13);
        org.apache.commons.math.geometry.Rotation rotation16 = rotation7.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder17 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str18 = rotationOrder17.toString();
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotationOrder17.getA2();
        java.lang.String str20 = rotationOrder17.toString();
        org.apache.commons.math.geometry.Vector3D vector3D21 = rotationOrder17.getA1();
        double[] doubleArray22 = rotation7.getAngles(rotationOrder17);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(rotation7);
        org.junit.Assert.assertNotNull(rotationOrder8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertNotNull(rotationOrder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "YZY" + "'", str18, "YZY");
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "YZY" + "'", str20, "YZY");
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.1252706021823883E-16, 1.407075111026485, -2.5575191894877256]");
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.flush();
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException23);
        java.lang.Object[] objArray25 = mathException23.getArguments();
        java.io.PrintWriter printWriter26 = printWriter18.printf("anglais", objArray25);
        printWriter26.print(false);
        printWriter26.println(' ');
        printWriter26.println((int) (byte) 10);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(printWriter26);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        double double22 = rotation21.getAngle();
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = rotation28.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D40, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation36.applyTo(vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation36.getAxis();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation36.revert();
        org.apache.commons.math.geometry.Rotation rotation51 = rotation21.applyInverseTo(rotation50);
        double double52 = rotation21.getQ3();
        org.apache.commons.math.geometry.Rotation rotation58 = new org.apache.commons.math.geometry.Rotation((-8087.321164150444d), 0.9999500037496876d, (-8087.321164150444d), (-43.80155030821067d), true);
        org.apache.commons.math.geometry.Rotation rotation59 = rotation21.applyTo(rotation58);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-10.358482905538347d) + "'", double52 == (-10.358482905538347d));
        org.junit.Assert.assertNotNull(rotation59);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException12);
        java.io.PrintWriter printWriter14 = printWriter4.printf("it", (java.lang.Object[]) strArray10);
        java.io.PrintWriter printWriter16 = printWriter14.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.io.PrintWriter printWriter18 = printWriter14.append((java.lang.CharSequence) "Italian");
        java.io.PrintWriter printWriter20 = printWriter14.append('4');
        printWriter20.println((float) (short) 0);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter20);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("English", "\u4e2d\u6587\u4e2d\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ?? (??)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(1.7607846147136124d, (double) (byte) -1);
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double11 = rotation10.getQ1();
        double double12 = rotation10.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D22 = vector3D14.subtract((double) 10L, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D23 = rotation10.applyInverseTo(vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D24 = vector3D3.subtract(1.7607846147136124d, vector3D21);
        org.apache.commons.math.geometry.RotationOrder rotationOrder27 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str28 = rotationOrder27.toString();
        org.apache.commons.math.geometry.Vector3D vector3D29 = rotationOrder27.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D(0.4705227400680958d, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) 'a', vector3D3, (-52.0d), vector3D30);
        double double32 = vector3D31.getY();
        double double33 = vector3D31.getX();
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(rotationOrder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ZXZ" + "'", str28, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 51.466293725059224d + "'", double32 == 51.466293725059224d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-9.897364177896005d) + "'", double33 == (-9.897364177896005d));
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getDisplayLanguage(locale6);
        java.lang.String str10 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale14 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale15.getDisplayLanguage(locale18);
        java.lang.String str21 = locale14.getDisplayVariant(locale18);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.getDefault(category22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.lang.String str26 = locale14.getDisplayVariant(locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale28 = locale23.stripExtensions();
        java.lang.String str29 = locale28.getScript();
        java.lang.String str30 = locale28.getScript();
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.lang.String str33 = locale28.getDisplayScript(locale31);
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleKeys();
        java.util.Locale.Category category35 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.util.Locale.setDefault(category35, locale36);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale41.getDisplayScript(locale42);
        java.lang.String str44 = locale39.getDisplayLanguage(locale41);
        java.lang.String str45 = locale41.getDisplayName();
        java.util.Locale.setDefault(category35, locale41);
        java.lang.String str47 = locale41.getISO3Language();
        java.lang.String str48 = locale41.getCountry();
        java.lang.String str49 = locale31.getDisplayCountry(locale41);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertEquals(locale14.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u97d3\u6587" + "'", str20, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.FORMAT + "'", category35.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str45, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fra" + "'", str47, "fra");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("French");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale1.getDisplayCountry(locale2);
        java.lang.String str4 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale5 = locale0.stripExtensions();
        boolean boolean6 = locale0.hasExtensions();
        java.lang.Object obj7 = null;
        boolean boolean8 = locale0.equals(obj7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) (byte) 1, (double) 1.0f, 0.0d, 1.0d, true);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ0();
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double19 = rotation18.getQ0();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation11.applyTo(rotation18);
        double double21 = rotation11.getQ0();
        double double22 = rotation11.getQ0();
        double[][] doubleArray23 = rotation11.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation24 = rotation5.applyInverseTo(rotation11);
        org.apache.commons.math.geometry.Rotation rotation30 = new org.apache.commons.math.geometry.Rotation(0.567725116225552d, (-1.63942416E8d), (-0.6692079985630428d), (double) (byte) -1, false);
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D34, (double) 0L, vector3D39);
        double double41 = vector3D40.getY();
        double double42 = vector3D40.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotation30.applyTo(vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation11.applyInverseTo(vector3D43);
        org.apache.commons.math.geometry.Rotation rotation50 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double51 = rotation50.getQ0();
        org.apache.commons.math.geometry.Rotation rotation57 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double58 = rotation57.getQ0();
        org.apache.commons.math.geometry.Rotation rotation59 = rotation50.applyTo(rotation57);
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotation50.applyInverseTo(vector3D60);
        double double62 = vector3D61.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D63 = vector3D61.negate();
        org.apache.commons.math.geometry.Vector3D vector3D64 = vector3D43.subtract(vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D65 = null;
        org.apache.commons.math.geometry.RotationOrder rotationOrder66 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation70 = new org.apache.commons.math.geometry.Rotation(rotationOrder66, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D71 = rotationOrder66.getA1();
        double double72 = vector3D71.getY();
        org.apache.commons.math.geometry.Vector3D vector3D73 = vector3D71.negate();
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        double double75 = vector3D74.getY();
        double double76 = vector3D74.getY();
        org.apache.commons.math.geometry.Vector3D vector3D77 = vector3D74.negate();
        org.apache.commons.math.geometry.Vector3D vector3D78 = vector3D73.subtract(vector3D77);
        org.apache.commons.math.geometry.Vector3D vector3D83 = new org.apache.commons.math.geometry.Vector3D((-5.539714827914696d), 0.4705227400680958d, (-1.0d));
        org.apache.commons.math.geometry.Vector3D vector3D84 = vector3D77.subtract(1040.0d, vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D88 = new org.apache.commons.math.geometry.Vector3D(Double.NaN, (-1.4070751110264852d), 1.7932371536978438d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation89 = new org.apache.commons.math.geometry.Rotation(vector3D63, vector3D65, vector3D84, vector3D88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 52.0d + "'", double51 == 52.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 52.0d + "'", double58 == 52.0d);
        org.junit.Assert.assertNotNull(rotation59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-0.4869163399816042d) + "'", double62 == (-0.4869163399816042d));
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(rotationOrder66);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D84);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print('a');
        java.util.Locale locale11 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter4.print((java.lang.Object) locale11);
        java.lang.String str13 = locale11.getDisplayName();
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str15 = locale11.getDisplayCountry();
        java.util.Set<java.lang.String> strSet16 = locale11.getUnicodeLocaleKeys();
        java.lang.String str17 = locale11.getISO3Language();
        org.junit.Assert.assertEquals(locale11.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str13, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str17, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.print(true);
        printStream1.println(' ');
        printStream1.print(true);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.util.Locale locale15 = new java.util.Locale("ZXZ", "ko_KR");
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.String str17 = locale15.toLanguageTag();
        printStream12.println((java.lang.Object) locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zxz_KO_KR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zxz (KO_KR)" + "'", str16, "zxz (KO_KR)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zxz" + "'", str17, "zxz");
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        double double12 = rotation5.getAngle();
        double double13 = rotation5.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D24 = vector3D16.subtract((double) 10L, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation5.applyTo(vector3D25);
        org.apache.commons.math.geometry.Rotation rotation27 = rotation5.revert();
        java.lang.Class<?> wildcardClass28 = rotation27.getClass();
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder9 = builder7.setLanguage("fra");
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale locale12 = new java.util.Locale("CA");
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Locale.Builder builder14 = builder7.setLocale(locale12);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals(locale12.toString(), "ca");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ca" + "'", str13, "ca");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder8.setRegion("");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getVariant();
        java.util.Locale.Builder builder15 = builder10.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder10.clearExtensions();
        java.util.Locale.Builder builder18 = builder16.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("german (kor)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: german (kor) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.lang.String str7 = locale0.getDisplayVariant(locale3);
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.lang.String str11 = locale8.getDisplayName();
        java.lang.String str12 = locale8.getISO3Language();
        java.lang.String str13 = locale8.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str11, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "deu" + "'", str12, "deu");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "de-DE" + "'", str13, "de-DE");
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("China");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        char[] charArray12 = new char[] { '4', 'a', ' ', ' ' };
        printWriter6.write(charArray12);
        printWriter6.write((int) (short) 100);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        printWriter6.println((double) 'a');
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale19.getCountry();
        java.io.PrintStream printStream24 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream24.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        java.io.PrintStream printStream35 = printStream24.printf("fra", (java.lang.Object[]) doubleArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR", (java.lang.Object[]) doubleArray34);
        java.io.PrintWriter printWriter37 = printWriter6.format(locale19, "x-lvariant-TWN", (java.lang.Object[]) doubleArray34);
        printWriter37.flush();
        printWriter37.println();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("\uce90\ub098\ub2e4");
        java.io.PrintStream printStream46 = new java.io.PrintStream("ko-KR");
        printStream46.close();
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.OutputStream) printStream46, false);
        java.io.PrintWriter printWriter50 = new java.io.PrintWriter((java.io.Writer) printWriter49);
        java.lang.String[] strArray52 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter53 = printWriter50.printf("ko-KR", (java.lang.Object[]) strArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray52);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("und", (java.lang.Object[]) strArray52);
        java.io.PrintWriter printWriter56 = printWriter37.printf(locale41, "ZYZ", (java.lang.Object[]) strArray52);
        java.io.PrintStream printStream58 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        java.io.PrintStream printStream60 = new java.io.PrintStream("ko-KR");
        printStream60.close();
        java.util.Locale locale62 = java.util.Locale.UK;
        java.lang.String[] strArray64 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream65 = printStream60.format(locale62, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray64);
        java.io.PrintStream printStream67 = new java.io.PrintStream((java.io.OutputStream) printStream60, false);
        printStream60.println(10.0f);
        java.lang.String[] strArray72 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray72);
        java.io.PrintStream printStream74 = printStream60.format("\u97d3\u6587", (java.lang.Object[]) strArray72);
        printStream60.flush();
        java.io.PrintWriter printWriter77 = new java.io.PrintWriter((java.io.OutputStream) printStream60, false);
        printWriter77.write((int) (byte) 10);
        char[] charArray83 = new char[] { 'a', '4', 'a' };
        printWriter77.print(charArray83);
        printStream58.print(charArray83);
        printWriter37.println(charArray83);
        // The following exception was thrown during execution in test generation
        try {
            printWriter1.write(charArray83, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "KR" + "'", str20, "KR");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(printStream35);
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(printStream65);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(printStream74);
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "a4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "a4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[a, 4, a]");
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        java.util.Locale locale1 = new java.util.Locale("kor");
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "kor");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str2, "\ud55c\uad6d\uc5b4");
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        java.io.PrintStream printStream1 = new java.io.PrintStream("XZX");
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Object[] objArray9 = mathException7.getArguments();
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        java.lang.String[] strArray18 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter19 = printWriter16.printf("ko-KR", (java.lang.Object[]) strArray18);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException20 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("German", objArray9, (java.lang.Throwable) notARotationMatrixException20);
        java.io.PrintStream printStream22 = printStream1.printf("XZX", objArray9);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream22);
        printWriter23.print('4');
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertNotNull(printStream22);
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        java.io.PrintWriter printWriter92 = new java.io.PrintWriter((java.io.OutputStream) printStream90, true);
        java.io.PrintWriter printWriter94 = printWriter92.append('u');
        printWriter92.println();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertNotNull(printWriter94);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("China");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException1);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Object[] objArray9 = mathException7.getArguments();
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        java.lang.String[] strArray18 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter19 = printWriter16.printf("ko-KR", (java.lang.Object[]) strArray18);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException20 = new org.apache.commons.math.geometry.NotARotationMatrixException("English", (java.lang.Object[]) strArray18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("German", objArray9, (java.lang.Throwable) notARotationMatrixException20);
        java.lang.String str22 = mathException21.getPattern();
        java.lang.String str23 = mathException21.getPattern();
        java.lang.String str24 = mathException21.getPattern();
        mathException1.addSuppressed((java.lang.Throwable) mathException21);
        java.lang.Object[] objArray26 = mathException21.getArguments();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(printWriter19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "German" + "'", str23, "German");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "German" + "'", str24, "German");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print((double) (byte) 100);
        printWriter4.println();
        printWriter4.println('#');
        java.io.PrintWriter printWriter12 = printWriter4.append('#');
        java.io.PrintWriter printWriter14 = printWriter12.append('u');
        // The following exception was thrown during execution in test generation
        try {
            printWriter14.write("org.apache.commons.math.MathException: ", (int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 42");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter14);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale locale4 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale5 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale8);
        java.lang.String str11 = locale4.getDisplayVariant(locale8);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder16 = builder12.setLanguage("ZXZ");
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder18 = builder12.setLocale(locale17);
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder20 = builder12.setLocale(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale4.getDisplayScript(locale19);
        java.io.PrintStream printStream24 = new java.io.PrintStream("ko-KR");
        printStream24.close();
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream24, false);
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.Writer) printWriter27);
        printWriter28.print((long) (short) 100);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.Writer) printWriter28, true);
        java.io.PrintWriter printWriter34 = printWriter28.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter28, false);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder41 = builder37.setLanguage("ZXZ");
        java.util.Locale.Builder builder42 = builder37.clear();
        java.util.Locale.Category category43 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category44 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale45.getDisplayLanguage();
        java.util.Locale.setDefault(category44, locale45);
        java.util.Locale.setDefault(category43, locale45);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale45.getDisplayLanguage(locale49);
        java.util.Locale.Builder builder51 = builder37.setLocale(locale49);
        java.lang.String str52 = locale49.getDisplayCountry();
        java.lang.Object[] objArray54 = null;
        java.io.PrintWriter printWriter55 = printWriter36.format(locale49, "en", objArray54);
        java.lang.String str56 = locale19.getDisplayVariant(locale49);
        java.io.PrintStream printStream58 = new java.io.PrintStream("ko-KR");
        printStream58.close();
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.OutputStream) printStream58, false);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.Writer) printWriter61);
        printWriter61.println((float) (byte) -1);
        java.io.PrintWriter printWriter66 = new java.io.PrintWriter((java.io.Writer) printWriter61, true);
        java.lang.String[] strArray68 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter69 = printWriter61.printf("KR", (java.lang.Object[]) strArray68);
        java.io.PrintStream printStream71 = new java.io.PrintStream("ko-KR");
        printStream71.close();
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter((java.io.OutputStream) printStream71, false);
        java.io.PrintWriter printWriter75 = new java.io.PrintWriter((java.io.Writer) printWriter74);
        char[] charArray78 = new char[] { ' ', 'x' };
        printWriter75.write(charArray78);
        printWriter61.println(charArray78);
        java.util.Locale locale81 = java.util.Locale.FRENCH;
        java.util.Locale locale82 = java.util.Locale.TAIWAN;
        java.lang.String str83 = locale81.getDisplayScript(locale82);
        java.lang.String str84 = locale82.getVariant();
        java.lang.String[] strArray87 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray87);
        java.io.PrintWriter printWriter89 = printWriter61.printf(locale82, "English", (java.lang.Object[]) strArray87);
        java.lang.String str90 = locale82.getScript();
        java.util.Locale locale91 = locale82.stripExtensions();
        java.lang.String str92 = locale49.getDisplayLanguage(locale91);
        java.util.Locale locale93 = java.util.Locale.ROOT;
        java.lang.String str94 = locale93.getDisplayLanguage();
        java.lang.String str95 = locale49.getDisplayVariant(locale93);
        java.lang.String str96 = locale0.getDisplayVariant(locale49);
        java.lang.Object obj97 = locale49.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ita" + "'", str1, "ita");
        org.junit.Assert.assertEquals(locale4.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u97d3\u6587" + "'", str10, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uce90\ub098\ub2e4" + "'", str21, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.FORMAT + "'", category43.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.FORMAT + "'", category44.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(printWriter69);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[ , x]");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(printWriter89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "\u5fb7\u6587" + "'", str92, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertEquals(obj97.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj97), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj97), "de");
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        java.io.PrintStream printStream1 = new java.io.PrintStream("French (Canada)");
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-23.219721941835267d), 3.1415926522785314d);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale locale9 = builder0.build();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale10.getScript();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.lang.String str16 = locale10.getDisplayName(locale13);
        java.lang.String str17 = locale13.getDisplayLanguage();
        java.util.Locale locale18 = java.util.Locale.UK;
        java.lang.String str19 = locale18.getVariant();
        java.lang.String str20 = locale13.getDisplayVariant(locale18);
        java.lang.String str21 = locale18.getScript();
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale9.getDisplayScript(locale18);
        java.lang.String str24 = locale18.getDisplayVariant();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str16, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str17, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        java.lang.String str3 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.6335396845240875d, 0.7826371500223388d, (-0.5440211108893699d));
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) 10, 0.18998822293489467d, (-1.9130824422046033d));
        double double12 = rotation11.getQ0();
        double double13 = rotation11.getQ0();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YZY" + "'", str1, "YZY");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YZY" + "'", str3, "YZY");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.6173511371948187d) + "'", double12 == (-0.6173511371948187d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.6173511371948187d) + "'", double13 == (-0.6173511371948187d));
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        java.util.Locale locale3 = new java.util.Locale("en_US", "\ub3c5\uc77c", "FRA");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\ub3c5\uc77c_FRA");
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Canada");
        java.util.Locale.Builder builder18 = builder0.setLanguage("it");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        printWriter24.println('a');
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter24.format(locale32, "TWN", objArray35);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.lang.String str38 = locale32.getDisplayCountry();
        java.util.Locale.Builder builder39 = builder18.setLocale(locale32);
        java.util.Locale.Builder builder40 = builder18.clearExtensions();
        java.util.Locale.Builder builder43 = builder40.setExtension('a', "ko-KR");
        java.util.Locale locale44 = builder40.build();
        java.util.Locale.Builder builder46 = builder40.setLanguageTag("german");
        java.util.Locale.Builder builder48 = builder46.setLanguageTag("Etats-Unis");
        java.util.Locale locale49 = builder48.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ub3c5\uc77c" + "'", str38, "\ub3c5\uc77c");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE_#a-ko-kr");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "etats__#Unis");
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray11 = rotation10.getMatrix();
        java.io.PrintStream printStream12 = printStream1.printf("fra", (java.lang.Object[]) doubleArray11);
        printStream12.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream12);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintStream printStream18 = printStream12.append('u');
        java.io.PrintStream printStream20 = printStream18.append(' ');
        java.util.Locale locale22 = new java.util.Locale("allemand");
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        printWriter26.println(1.0d);
        printWriter26.write((int) '4');
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream33, false);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter36);
        printWriter37.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray47 = rotation46.getMatrix();
        java.io.PrintWriter printWriter48 = printWriter37.format("en", (java.lang.Object[]) doubleArray47);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale49.getDisplayCountry(locale50);
        java.lang.String str52 = locale49.getLanguage();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray56 = mathException55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = mathException55.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException58 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray57);
        java.io.PrintWriter printWriter59 = printWriter37.format(locale49, "ZXZ", (java.lang.Object[]) throwableArray57);
        java.io.PrintWriter printWriter60 = printWriter26.format("\ub3c5\uc77c", (java.lang.Object[]) throwableArray57);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("ko", (java.lang.Object[]) throwableArray57);
        java.io.PrintStream printStream62 = printStream20.format(locale22, "\u5fb7\u6587", (java.lang.Object[]) throwableArray57);
        java.io.PrintStream printStream64 = printStream62.append('#');
        java.io.PrintStream printStream66 = printStream64.append('u');
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream64);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertEquals(locale22.toString(), "allemand");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en" + "'", str52, "en");
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(printStream62);
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printStream66);
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D10);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) (byte) 100, (-0.0d), (double) (byte) 0, (double) 1, true);
        double double25 = rotation24.getQ0();
        org.apache.commons.math.geometry.Rotation rotation26 = rotation5.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = rotation32.applyTo(vector3D34);
        double double39 = rotation32.getAngle();
        double double40 = rotation32.getQ3();
        org.apache.commons.math.geometry.Rotation rotation41 = rotation5.applyInverseTo(rotation32);
        org.apache.commons.math.geometry.Rotation rotation42 = rotation41.revert();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9999500037496876d + "'", double25 == 0.9999500037496876d);
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertNotNull(rotation42);
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(rotationOrder1, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder1.getA2();
        double double7 = vector3D6.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((-52.0d), vector3D6);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray15 = rotation14.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D19, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation14.applyInverseTo(vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D27, vector3D28);
        org.apache.commons.math.geometry.RotationOrder rotationOrder31 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotationOrder31.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D41, (double) (byte) 100, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D38, vector3D43);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D38, (double) 0.0f, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D52.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) '#', vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D29, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D57 = vector3D55.orthogonal();
        double double58 = org.apache.commons.math.geometry.Vector3D.angle(vector3D8, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D67, (double) (byte) 100, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D64, vector3D69);
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D(1.7607891322640317d, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = vector3D57.subtract(0.009999500037496875d, vector3D71);
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(rotationOrder31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3.141592653589793d + "'", double58 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        java.io.PrintWriter printWriter9 = printWriter5.append('a');
        printWriter9.println((int) (short) 0);
        printWriter9.println("Chinesisch (China)");
        printWriter9.write((int) 'x');
        java.io.PrintWriter printWriter17 = printWriter9.append((java.lang.CharSequence) "org.apache.commons.math.MathException: ZXZ");
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        char[] charArray28 = new char[] { ' ', 'x' };
        printWriter25.write(charArray28);
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale30.getDisplayCountry(locale31);
        java.lang.String str33 = locale30.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray41 = rotation40.getMatrix();
        java.io.PrintWriter printWriter42 = printWriter25.format(locale30, "YZY", (java.lang.Object[]) doubleArray41);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException46);
        java.lang.Throwable[] throwableArray48 = mathException46.getSuppressed();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray41, (java.lang.Throwable) mathException49);
        java.io.PrintWriter printWriter51 = printWriter9.format("KOR", (java.lang.Object[]) doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation53 = new org.apache.commons.math.geometry.Rotation(doubleArray41, (-43.80155030821067d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , x]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(printWriter51);
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D3, (double) (byte) 100, vector3D5);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D5, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D23, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D10, (double) (byte) 1, vector3D18, (double) (short) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D32 = vector3D10.negate();
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D10);
        double double34 = vector3D10.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D36 = vector3D10.scalarMultiply((double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        double double42 = vector3D40.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D43 = vector3D10.subtract(vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = vector3D10.negate();
        double double45 = vector3D10.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D46 = vector3D10.negate();
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray55 = rotation54.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D66 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D59, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D67 = rotation54.applyInverseTo(vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D68 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D67, vector3D68);
        org.apache.commons.math.geometry.RotationOrder rotationOrder71 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D72 = rotationOrder71.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D79 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D76, (double) (byte) 100, vector3D78);
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D83 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D84 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D81, (double) (byte) 100, vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D85 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D78, vector3D83);
        org.apache.commons.math.geometry.Vector3D vector3D88 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D90 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D91 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D88, (double) (byte) 100, vector3D90);
        org.apache.commons.math.geometry.Vector3D vector3D92 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D78, (double) 0.0f, vector3D90);
        org.apache.commons.math.geometry.Vector3D vector3D94 = vector3D92.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D95 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D72, (double) '#', vector3D94);
        org.apache.commons.math.geometry.Vector3D vector3D96 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D69, vector3D95);
        org.apache.commons.math.geometry.Vector3D vector3D97 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D96);
        org.apache.commons.math.geometry.Vector3D vector3D98 = new org.apache.commons.math.geometry.Vector3D((-6782.273252612676d), vector3D96);
        double double99 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D46, vector3D98);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(rotationOrder71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D90);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertNotNull(vector3D96);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d);
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        double double22 = rotation21.getAngle();
        double double23 = rotation21.getAngle();
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D(10400.0d, 2.9516808406523407d);
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation21.applyTo(vector3D26);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(vector3D27);
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print((int) ' ');
        printStream1.println((double) 100.0f);
        printStream1.print(' ');
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException17);
        java.lang.String str19 = mathException18.getPattern();
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.Object[] objArray22 = mathException21.getArguments();
        printStream1.println((java.lang.Object) objArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream25.print((long) 100);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZXZ" + "'", str19, "ZXZ");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA3();
        java.lang.String str5 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA2();
        java.lang.String str7 = rotationOrder0.toString();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "XZY" + "'", str5, "XZY");
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "XZY" + "'", str7, "XZY");
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        java.io.PrintStream printStream3 = new java.io.PrintStream("ko-KR");
        printStream3.close();
        java.util.Locale locale5 = java.util.Locale.UK;
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream8 = printStream3.format(locale5, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray7);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream3, false);
        printStream3.println(10.0f);
        java.lang.String[] strArray15 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray15);
        java.io.PrintStream printStream17 = printStream3.format("\u97d3\u6587", (java.lang.Object[]) strArray15);
        printStream3.flush();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream3, false);
        printWriter20.write((int) (byte) 10);
        printWriter20.println(true);
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("zxz_FRAN\347AIS");
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter32, false);
        java.io.PrintWriter printWriter37 = printWriter32.append('a');
        printWriter37.print((int) (short) 1);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray43 = mathException42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = mathException42.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException45 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter46 = printWriter37.format("XYZ", (java.lang.Object[]) throwableArray44);
        java.io.PrintWriter printWriter47 = printWriter20.printf(locale26, "ita", (java.lang.Object[]) throwableArray44);
        java.lang.String[] strArray50 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray50, (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("zxz", (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray44, (java.lang.Throwable) mathException52);
        java.lang.Object[] objArray56 = mathException55.getArguments();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException57 = new org.apache.commons.math.geometry.NotARotationMatrixException("\u97d3\u6587)", objArray56);
        java.lang.Object[] objArray58 = notARotationMatrixException57.getArguments();
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(printWriter37);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        printWriter5.flush();
        printWriter5.println(0.011716141877645815d);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        java.util.Locale locale2 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale3);
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.lang.String str8 = locale3.getDisplayLanguage(locale6);
        java.lang.String str9 = locale2.getDisplayVariant(locale6);
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale2.getDisplayVariant(locale11);
        java.lang.String str15 = locale2.getDisplayName();
        java.lang.String str16 = locale2.toLanguageTag();
        java.util.Locale locale19 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str20 = locale19.getDisplayVariant();
        java.lang.String str21 = locale19.getDisplayScript();
        java.lang.String str22 = locale19.getVariant();
        java.lang.String str23 = locale19.getDisplayVariant();
        java.lang.String str24 = locale2.getDisplayLanguage(locale19);
        org.junit.Assert.assertEquals(locale2.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u97d3\u6587" + "'", str8, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zxz (KO_KR)" + "'", str15, "zxz (KO_KR)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zxz" + "'", str16, "zxz");
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zxz" + "'", str24, "zxz");
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        java.io.PrintWriter printWriter10 = printWriter5.append('x');
        printWriter5.println("French");
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray19, (java.lang.Throwable) mathException23);
        java.lang.Throwable[] throwableArray26 = mathException23.getSuppressed();
        java.io.PrintStream printStream27 = printStream15.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray26);
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        printWriter32.println((float) (byte) -1);
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.Writer) printWriter32, true);
        java.lang.String[] strArray39 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter40 = printWriter32.printf("KR", (java.lang.Object[]) strArray39);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ko-KR");
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        char[] charArray49 = new char[] { ' ', 'x' };
        printWriter46.write(charArray49);
        printWriter32.println(charArray49);
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = locale52.getDisplayScript(locale53);
        java.lang.String str55 = locale53.getVariant();
        java.lang.String[] strArray58 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray58);
        java.io.PrintWriter printWriter60 = printWriter32.printf(locale53, "English", (java.lang.Object[]) strArray58);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException65);
        java.lang.Object[] objArray67 = mathException65.getArguments();
        java.io.PrintStream printStream68 = printStream27.format(locale53, "fra", objArray67);
        java.io.PrintWriter printWriter69 = printWriter5.printf("zh", objArray67);
        printWriter69.println(' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , x]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(printStream68);
        org.junit.Assert.assertNotNull(printWriter69);
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        printStream29.print(1.2220476682666177d);
        printStream29.println(false);
        boolean boolean34 = printStream29.checkError();
        java.io.PrintStream printStream36 = printStream29.append((java.lang.CharSequence) "XZX");
        byte[] byteArray38 = new byte[] { (byte) -1 };
        printStream29.write(byteArray38, (int) ' ', (int) 'u');
        printStream29.println((float) (short) 1);
        boolean boolean44 = printStream29.checkError();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("ZXZ");
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException54);
        java.lang.Throwable[] throwableArray56 = mathException54.getSuppressed();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("zh-CN", (java.lang.Object[]) throwableArray50, (java.lang.Throwable) mathException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("x-lvariant-ZXZ", (java.lang.Object[]) throwableArray50);
        java.lang.Object[] objArray60 = mathException59.getArguments();
        java.io.PrintStream printStream61 = printStream29.format("CN", objArray60);
        java.io.PrintWriter printWriter62 = new java.io.PrintWriter((java.io.OutputStream) printStream61);
        java.io.PrintStream printStream63 = new java.io.PrintStream((java.io.OutputStream) printStream61);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(printStream61);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((float) (byte) 100);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter14);
        java.lang.String[] strArray17 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter18 = printWriter15.printf("ko-KR", (java.lang.Object[]) strArray17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        double double24 = vector3D22.getNorm();
        printWriter15.println((java.lang.Object) vector3D22);
        java.io.PrintStream printStream27 = new java.io.PrintStream("ko-KR");
        printStream27.close();
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        char[] charArray39 = new char[] { '4', 'a', ' ', ' ' };
        printWriter33.write(charArray39);
        printStream27.print(charArray39);
        printWriter15.print(charArray39);
        printWriter5.println(charArray39);
        printWriter5.println(1.2220476682666177d);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[4, a,  ,  ]");
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-3.718591544603141d), (-32.8663247953878d), 3.139996415911987d);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Taiwan", (-0.5440211108893698d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-0.5440211108893698");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale.Builder builder19 = builder14.clear();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale22.getDisplayLanguage(locale26);
        java.util.Locale.Builder builder28 = builder14.setLocale(locale26);
        java.lang.String str29 = locale26.getDisplayCountry();
        java.lang.Object[] objArray31 = null;
        java.io.PrintWriter printWriter32 = printWriter13.format(locale26, "en", objArray31);
        printWriter32.close();
        printWriter32.println();
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(printWriter32);
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((int) (short) -1);
        printWriter5.close();
        printWriter5.println(' ');
        printWriter5.close();
        printWriter5.flush();
        printWriter5.flush();
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter23.println('a');
        printWriter23.print(true);
        printWriter23.flush();
        java.lang.String[] strArray32 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray32);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray32, (java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        java.io.PrintWriter printWriter38 = printWriter23.format("zho", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException39 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4\ub300\ub9cc)", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter40 = printWriter5.printf("\uc911\uad6d\uc5b4", (java.lang.Object[]) throwableArray37);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter44 = printWriter5.append((java.lang.CharSequence) "DEU", (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter40);
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("german", 1.3959260554836697d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.3959260554836697");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = rotation5.applyInverseTo(rotation11);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D17, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotation13.applyTo(vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation13.getAxis();
        org.apache.commons.math.geometry.Rotation rotation27 = rotation13.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder28 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D29 = rotationOrder28.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D30 = rotationOrder28.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotationOrder28.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotationOrder28.getA3();
        double[] doubleArray33 = rotation27.getAngles(rotationOrder28);
        double[][] doubleArray34 = rotation27.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double41 = rotation40.getQ0();
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double48 = rotation47.getQ0();
        org.apache.commons.math.geometry.Rotation rotation49 = rotation40.applyTo(rotation47);
        double[][] doubleArray50 = rotation47.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation56 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double57 = rotation56.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D58 = rotation56.getAxis();
        org.apache.commons.math.geometry.Rotation rotation59 = rotation47.applyTo(rotation56);
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotation47.getAxis();
        org.apache.commons.math.geometry.Rotation rotation61 = rotation27.applyInverseTo(rotation47);
        double[][] doubleArray62 = rotation27.getMatrix();
        double[][] doubleArray63 = rotation27.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D64 = rotation27.getAxis();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(rotation13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(rotationOrder28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(rotation59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(vector3D64);
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.ZYZ;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Rotation rotation8 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double9 = rotation8.getQ0();
        org.apache.commons.math.geometry.Rotation rotation15 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double16 = rotation15.getQ0();
        org.apache.commons.math.geometry.Rotation rotation17 = rotation8.applyTo(rotation15);
        org.apache.commons.math.geometry.Rotation rotation18 = rotation8.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder19 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation(rotationOrder19, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation24 = rotation18.applyTo(rotation23);
        double double25 = rotation24.getAngle();
        org.apache.commons.math.geometry.Rotation rotation26 = rotation24.revert();
        double double27 = rotation24.getQ1();
        double double28 = rotation24.getAngle();
        org.apache.commons.math.geometry.Vector3D vector3D29 = rotation24.getAxis();
        org.apache.commons.math.geometry.RotationOrder rotationOrder30 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str31 = rotationOrder30.toString();
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotationOrder30.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D33 = rotationOrder30.getA3();
        java.lang.String str34 = rotationOrder30.toString();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation(rotationOrder30, 1.4248537421341891d, 2.9778714378213818d, 84.29633443762866d);
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation(rotationOrder30, (-2.141592653589793d), 1.2220476682666177d, (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotationOrder30.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation24.applyTo(vector3D43);
        double double45 = org.apache.commons.math.geometry.Vector3D.angle(vector3D2, vector3D44);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ZYZ" + "'", str1, "ZYZ");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertNotNull(rotation17);
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertNotNull(rotationOrder19);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 84.29633443762866d + "'", double27 == 84.29633443762866d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(rotationOrder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ZXZ" + "'", str31, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ZXZ" + "'", str34, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.1979675872981355d + "'", double45 == 1.1979675872981355d);
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.lang.String str13 = locale10.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray21 = rotation20.getMatrix();
        java.io.PrintWriter printWriter22 = printWriter5.format(locale10, "YZY", (java.lang.Object[]) doubleArray21);
        printWriter22.print((-1L));
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.lang.String str26 = locale25.getScript();
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray31, (java.lang.Throwable) mathException33);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray36 = mathException35.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray31, (java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray38 = mathException35.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException39 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray38);
        java.lang.Throwable[] throwableArray40 = notARotationMatrixException39.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter22.printf(locale25, "CHN", (java.lang.Object[]) throwableArray40);
        printWriter41.println(0);
        printWriter41.println(10);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en" + "'", str13, "en");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(printWriter22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((float) 10);
        java.lang.String[] strArray22 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray22);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray22, (java.lang.Throwable) mathException25);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException27 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray22);
        java.io.PrintStream printStream28 = printStream1.printf("jpn", (java.lang.Object[]) strArray22);
        java.util.Locale.Category category29 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale.setDefault(category29, locale30);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.lang.String str35 = locale33.getDisplayScript(locale34);
        java.util.Locale.setDefault(locale33);
        java.util.Locale locale37 = locale33.stripExtensions();
        java.util.Locale.setDefault(category29, locale33);
        printStream1.println((java.lang.Object) locale33);
        printStream1.println(false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertTrue("'" + category29 + "' != '" + java.util.Locale.Category.FORMAT + "'", category29.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "German" + "'", str31, "German");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        java.io.PrintWriter printWriter2 = new java.io.PrintWriter("anglais");
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Locale locale7 = java.util.Locale.getDefault(category3);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale11 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        boolean boolean14 = locale13.hasExtensions();
        java.util.Locale.setDefault(category12, locale13);
        java.lang.String str16 = locale11.getDisplayName(locale13);
        java.lang.String str17 = locale13.getDisplayName();
        java.lang.String str18 = locale8.getDisplayLanguage(locale13);
        java.util.Locale.setDefault(category3, locale8);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        java.util.Locale locale25 = new java.util.Locale("zxz (KO_KR)", "fran\347ais");
        java.lang.String str26 = locale20.getDisplayLanguage(locale25);
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale27.getISO3Language();
        boolean boolean29 = locale27.hasExtensions();
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = locale20.getDisplayVariant(locale27);
        java.lang.String str33 = locale20.getExtension('a');
        java.util.Locale.setDefault(category3, locale20);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.lang.String str36 = locale35.getDisplayLanguage();
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale37.getDisplayScript(locale38);
        java.lang.String str40 = locale35.getDisplayLanguage(locale37);
        java.util.Locale.setDefault(locale35);
        java.util.Set<java.lang.String> strSet42 = locale35.getUnicodeLocaleKeys();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str45 = locale35.getDisplayName(locale44);
        java.lang.String str46 = locale20.getDisplayName(locale35);
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (short) 1, 1.7607846147136124d, 1.0d, false);
        org.apache.commons.math.geometry.Rotation rotation55 = rotation54.revert();
        double[][] doubleArray56 = rotation55.getMatrix();
        double[][] doubleArray57 = rotation55.getMatrix();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("eng", (java.lang.Object[]) doubleArray57, (java.lang.Throwable) mathException60);
        java.io.PrintWriter printWriter63 = printWriter2.printf(locale35, "org.apache.commons.math.MathException: English (Canada)", (java.lang.Object[]) doubleArray57);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("Chinesisch", (java.lang.Object[]) doubleArray57);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "allemand" + "'", str5, "allemand");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u97d3\u6587)" + "'", str16, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English" + "'", str17, "English");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English" + "'", str18, "English");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale25.toString(), "zxz (ko_kr)_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "French" + "'", str26, "French");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ita" + "'", str28, "ita");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "French" + "'", str46, "French");
        org.junit.Assert.assertNotNull(rotation55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(printWriter63);
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        java.util.Locale locale2 = new java.util.Locale("Chinook", "It\340lia");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale6 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale.setDefault(category7, locale8);
        java.lang.String str11 = locale6.getDisplayName(locale8);
        java.lang.String str12 = locale8.getDisplayName();
        java.lang.String str13 = locale3.getDisplayLanguage(locale8);
        java.util.Set<java.lang.Character> charSet14 = locale8.getExtensionKeys();
        java.lang.String str15 = locale8.getDisplayVariant();
        java.lang.String str16 = locale2.getDisplayScript(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale2.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "chinook_IT\340LIA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u97d3\u6587)" + "'", str11, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English" + "'", str12, "English");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English" + "'", str13, "English");
        org.junit.Assert.assertNotNull(charSet14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        java.util.Locale locale1 = new java.util.Locale("zxz (FRAN\347AIS)");
        java.lang.String str2 = locale1.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getDisplayName();
        boolean boolean6 = locale4.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        java.lang.String str8 = locale4.getDisplayVariant(locale7);
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale.setDefault(category9, locale11);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale11.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getDisplayCountry();
        java.lang.String str18 = locale15.getDisplayVariant();
        java.lang.String str19 = locale7.getDisplayName(locale15);
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String[] strArray25 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream26 = printStream21.format(locale23, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray25);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        printWriter29.print("\u97d3\u6587");
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder37 = builder32.setExtension('u', "");
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale41 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        boolean boolean44 = locale43.hasExtensions();
        java.util.Locale.setDefault(category42, locale43);
        java.lang.String str46 = locale41.getDisplayName(locale43);
        java.lang.String str47 = locale43.getDisplayName();
        java.lang.String str48 = locale38.getDisplayLanguage(locale43);
        java.util.Locale.Builder builder49 = builder32.setLocale(locale38);
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.lang.String str51 = locale38.getDisplayVariant(locale50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray54 = mathException53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = mathException53.getSuppressed();
        java.io.PrintWriter printWriter56 = printWriter29.printf(locale38, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) throwableArray55);
        java.util.Set<java.lang.Character> charSet57 = locale38.getExtensionKeys();
        java.util.Set<java.lang.String> strSet58 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str59 = locale38.getScript();
        java.util.Locale locale63 = new java.util.Locale("Chinese (Taiwan)", "org.apache.commons.math.geometry.NotARotationMatrixException: zxz (KO_KR)", "Italian");
        java.lang.String str64 = locale63.getDisplayCountry();
        java.lang.String str65 = locale38.getDisplayLanguage(locale63);
        java.lang.String str66 = locale7.getDisplayVariant(locale38);
        java.lang.String str67 = locale1.getDisplayVariant(locale38);
        java.util.Locale locale68 = locale1.stripExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "zxz (fran\347ais)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English" + "'", str5, "English");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japanisch" + "'", str19, "Japanisch");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u97d3\u6587)" + "'", str46, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "English" + "'", str47, "English");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English" + "'", str48, "English");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals(locale63.toString(), "chinese (taiwan)_ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)_Italian");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)" + "'", str64, "ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "English" + "'", str65, "English");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zxz (fran\347ais)");
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray6 = new char[] { ' ', 'a', '#', 'a' };
        printStream1.println(charArray6);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        boolean boolean10 = printStream1.checkError();
        printStream1.println();
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.print(100.0f);
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream15, false);
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String[] strArray25 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream26 = printStream21.format(locale23, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray25);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream28);
        printStream28.print((-52.0d));
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream38 = printStream33.format(locale35, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray37);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        printStream33.println(10.0f);
        java.lang.String[] strArray45 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray45);
        java.io.PrintStream printStream47 = printStream33.format("\u97d3\u6587", (java.lang.Object[]) strArray45);
        printStream33.println((long) (short) 1);
        java.io.PrintStream printStream51 = printStream33.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.io.PrintStream printStream53 = new java.io.PrintStream("ko-KR");
        printStream53.close();
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.OutputStream) printStream53, false);
        java.io.PrintWriter printWriter57 = new java.io.PrintWriter((java.io.Writer) printWriter56);
        char[] charArray60 = new char[] { ' ', 'x' };
        printWriter57.write(charArray60);
        java.io.PrintWriter printWriter63 = printWriter57.append((java.lang.CharSequence) "Canada");
        boolean boolean64 = printWriter63.checkError();
        java.io.PrintStream printStream66 = new java.io.PrintStream("ko-KR");
        printStream66.close();
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter((java.io.OutputStream) printStream66, false);
        java.io.PrintStream printStream71 = printStream66.append((java.lang.CharSequence) "en");
        printStream66.print((int) ' ');
        printStream66.println((double) 100.0f);
        java.io.PrintStream printStream77 = new java.io.PrintStream("ko-KR");
        printStream77.close();
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter((java.io.OutputStream) printStream77, false);
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.Writer) printWriter80);
        char[] charArray84 = new char[] { ' ', 'x' };
        printWriter81.write(charArray84);
        printStream66.print(charArray84);
        printWriter63.write(charArray84);
        printStream33.print(charArray84);
        printStream28.print(charArray84);
        printStream15.print(charArray84);
        printStream15.print(0.0f);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printStream26);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(printStream71);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray84), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray84), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray84), "[ , x]");
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(0.33700761085327036d, 0.9426177908711146d, 5.403023058681398d);
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Collection<java.lang.String> strCollection1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList2 = java.util.Locale.filterTags(languageRangeList0, strCollection1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Canada");
        java.util.Locale.Builder builder18 = builder0.setLanguage("it");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        printWriter24.println('a');
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter24.format(locale32, "TWN", objArray35);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.lang.String str38 = locale32.getDisplayCountry();
        java.util.Locale.Builder builder39 = builder18.setLocale(locale32);
        java.util.Locale.Builder builder40 = builder18.clearExtensions();
        java.util.Locale.Builder builder43 = builder40.setExtension('a', "ko-KR");
        java.util.Locale.Builder builder45 = builder43.setLanguageTag("XZY");
        java.util.Locale.Category category46 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.util.Locale.setDefault(category48, locale49);
        java.util.Locale.setDefault(category47, locale49);
        java.util.Locale.setDefault(category46, locale49);
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.lang.String str55 = locale49.getDisplayScript(locale54);
        java.util.Locale locale58 = new java.util.Locale("Italy", "US");
        java.lang.String str59 = locale58.getDisplayCountry();
        java.lang.String str60 = locale54.getDisplayScript(locale58);
        java.util.Locale.Builder builder61 = builder45.setLocale(locale54);
        java.util.Locale.Builder builder62 = builder45.clear();
        java.util.Locale locale64 = new java.util.Locale("zxz (FRAN\347AIS)");
        java.lang.String str65 = locale64.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder66 = builder45.setLocale(locale64);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: zxz (franc?ais) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Germany" + "'", str38, "Germany");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + category46 + "' != '" + java.util.Locale.Category.FORMAT + "'", category46.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category47 + "' != '" + java.util.Locale.Category.FORMAT + "'", category47.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.FORMAT + "'", category48.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals(locale58.toString(), "italy_US");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "United States" + "'", str59, "United States");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals(locale64.toString(), "zxz (fran\347ais)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "und" + "'", str65, "und");
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder9 = builder5.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale10 = builder5.build();
        java.util.Locale.Builder builder12 = builder5.addUnicodeLocaleAttribute("TWN");
        java.util.Locale.Builder builder13 = builder5.clear();
        java.util.Locale.Builder builder15 = builder13.setLanguage("");
        java.util.Locale.Category category16 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale.setDefault(category16, locale17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.getDisplayLanguage();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str24 = locale22.getDisplayScript(locale23);
        java.lang.String str25 = locale20.getDisplayLanguage(locale22);
        java.lang.String str26 = locale22.getDisplayName();
        java.util.Locale.setDefault(category16, locale22);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.lang.String str29 = locale28.getDisplayName();
        boolean boolean30 = locale28.hasExtensions();
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.lang.String str35 = locale33.getDisplayScript(locale34);
        java.lang.String str36 = locale31.getDisplayLanguage(locale33);
        java.util.Locale locale37 = locale31.stripExtensions();
        java.lang.String str38 = locale37.getScript();
        java.lang.String str39 = locale28.getDisplayCountry(locale37);
        java.util.Locale.setDefault(category16, locale37);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.lang.String str45 = locale43.getDisplayScript(locale44);
        java.lang.String str46 = locale41.getDisplayLanguage(locale43);
        java.util.Locale.setDefault(category16, locale41);
        java.util.Locale locale48 = java.util.Locale.getDefault(category16);
        java.util.Locale locale49 = java.util.Locale.getDefault(category16);
        java.util.Locale.Builder builder50 = builder15.setLocale(locale49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder52 = builder50.setRegion("\uc774\ud0c8\ub9ac\uc544\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ??????????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.FORMAT + "'", category16.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "French" + "'", str26, "French");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English" + "'", str29, "English");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("org.apache.commons.math.MathException: English", "org.apache.commons.math.MathException: English");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: English");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("EN-CA");
        java.lang.String str2 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en-CA" + "'", str2, "en-CA");
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-0.35293433482477937d), (-0.6173511371948187d), 0.22182369023785745d);
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.close();
        java.util.Locale locale8 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter5.println((java.lang.Object) locale8);
        java.util.Locale.setDefault(locale8);
        java.util.Locale.setDefault(locale8);
        java.lang.Object obj12 = locale8.clone();
        org.junit.Assert.assertEquals(locale8.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayLanguage(locale2);
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet7 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str10 = locale0.getDisplayName(locale9);
        java.lang.String str11 = locale0.getISO3Language();
        java.lang.String str12 = locale0.getVariant();
        java.lang.String str13 = locale0.getISO3Language();
        boolean boolean14 = locale0.hasExtensions();
        java.lang.String str15 = locale0.getDisplayCountry();
        java.lang.String str16 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D1);
        java.lang.Class<?> wildcardClass3 = vector3D1.getClass();
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray6 = mathException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = mathException5.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException8 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray7);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException9 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray7);
        java.lang.Throwable[] throwableArray10 = notARotationMatrixException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("zho", (java.lang.Object[]) throwableArray10);
        java.lang.Object[] objArray12 = mathException11.getArguments();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: United Kingdom", objArray12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.geometry.NotARotationMatrixException: ", objArray12);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.String[] strArray22 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray22);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        java.lang.String str25 = mathException23.getPattern();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("de_DE", (java.lang.Throwable) mathException23);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException23);
        java.lang.Object[] objArray28 = mathException23.getArguments();
        java.lang.Object[] objArray29 = mathException23.getArguments();
        mathException18.addSuppressed((java.lang.Throwable) mathException23);
        mathException14.addSuppressed((java.lang.Throwable) mathException23);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZXZ" + "'", str25, "ZXZ");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale locale6 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        boolean boolean9 = locale8.hasExtensions();
        java.util.Locale.setDefault(category7, locale8);
        java.lang.String str11 = locale6.getDisplayName(locale8);
        java.lang.String str12 = locale8.getDisplayName();
        java.lang.String str13 = locale8.getISO3Language();
        java.lang.String str14 = locale0.getDisplayName(locale8);
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter19.print((double) (byte) 100);
        printWriter19.println();
        printWriter19.println('#');
        java.util.Locale locale27 = new java.util.Locale("French");
        java.io.PrintStream printStream31 = new java.io.PrintStream("ko-KR");
        printStream31.close();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream31, false);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter34);
        printWriter34.print((double) (byte) 100);
        printWriter34.println();
        printWriter34.println('#');
        java.io.PrintWriter printWriter42 = printWriter34.append('#');
        printWriter42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter42, true);
        java.lang.String[] strArray48 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray48);
        java.lang.Throwable[] throwableArray50 = mathException49.getSuppressed();
        java.lang.String str51 = mathException49.getPattern();
        java.lang.Throwable[] throwableArray52 = mathException49.getSuppressed();
        java.io.PrintWriter printWriter53 = printWriter45.printf("\u5fb7\u56fd", (java.lang.Object[]) throwableArray52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("\uc601\uc5b4\uc601\uad6d)", (java.lang.Object[]) throwableArray52);
        java.io.PrintWriter printWriter55 = printWriter19.format(locale27, "CA", (java.lang.Object[]) throwableArray52);
        java.lang.String str56 = locale8.getDisplayScript(locale27);
        java.lang.String str57 = locale27.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u97d3\u6587)" + "'", str11, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English" + "'", str12, "English");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "English" + "'", str14, "English");
        org.junit.Assert.assertEquals(locale27.toString(), "french");
        org.junit.Assert.assertNotNull(printWriter42);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ZXZ" + "'", str51, "ZXZ");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        printWriter5.println('#');
        org.apache.commons.math.geometry.RotationOrder rotationOrder18 = org.apache.commons.math.geometry.RotationOrder.YZX;
        printWriter5.println((java.lang.Object) rotationOrder18);
        java.lang.String str20 = rotationOrder18.toString();
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation(rotationOrder18, (double) (byte) 10, 0.0d, (-5.203623393651532E-5d));
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotationOrder18.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotationOrder18.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D28 = vector3D26.scalarMultiply(0.0d);
        org.apache.commons.math.geometry.Vector3D vector3D29 = vector3D26.orthogonal();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "YZX" + "'", str20, "YZX");
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(1.7607845497297911d, 1.77144092136256d, 23.602352584634914d, (-52.0d), false);
        double double6 = rotation5.getQ0();
        double double7 = rotation5.getAngle();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.7607845497297911d + "'", double6 == 1.7607845497297911d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        printWriter1.println((-5.440211108893697d));
        printWriter1.println("italian (ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ,CHN)");
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        java.util.Locale locale3 = new java.util.Locale("\uce90\ub098\ub2e4", "\uce90\ub098\ub2e4", "TWN");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale3.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for ??????");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uce90\ub098\ub2e4\uce90\ub098\ub2e4_TWN");
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        java.util.Locale locale2 = new java.util.Locale("Germany", "\u7fa9\u5927\u5229\u6587");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.Object obj4 = locale3.clone();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(obj4);
// flaky:         org.junit.Assert.assertEquals(obj4.toString(), "\u7fa9\u5927\u5229\u6587");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "\u7fa9\u5927\u5229\u6587");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "\u7fa9\u5927\u5229\u6587");
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA1();
        double double6 = vector3D5.getY();
        org.apache.commons.math.geometry.Vector3D vector3D7 = vector3D5.negate();
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D7.scalarMultiply((-1.4070751110264845d));
        double double10 = vector3D7.getX();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation(vector3D7, 0.7071993859311818d);
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((float) (byte) 100);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream16 = printStream11.format(locale13, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        printStream11.println(10.0f);
        printStream11.println((float) 100);
        java.io.PrintStream printStream24 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        printWriter5.println((java.lang.Object) printStream24);
        printWriter5.println();
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream28, false);
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.Writer) printWriter31);
        char[] charArray35 = new char[] { ' ', 'x' };
        printWriter32.write(charArray35);
        printWriter32.write((int) (byte) 1);
        printWriter32.print((int) (short) 0);
        java.io.PrintStream printStream42 = new java.io.PrintStream("ko-KR");
        printStream42.close();
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.Writer) printWriter45);
        java.lang.String[] strArray48 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter49 = printWriter46.printf("ko-KR", (java.lang.Object[]) strArray48);
        printWriter49.println(0.0d);
        printWriter49.write(0);
        java.io.PrintWriter printWriter55 = printWriter49.append('4');
        printWriter55.print((double) 'a');
        java.io.PrintStream printStream59 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray64 = new char[] { ' ', 'a', '#', 'a' };
        printStream59.println(charArray64);
        printWriter55.print(charArray64);
        printWriter32.write(charArray64);
        printWriter5.print(charArray64);
        // The following exception was thrown during execution in test generation
        try {
            printWriter5.write("\uc601\uc5b4", (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 100");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , x]");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , a, #, a]");
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        boolean boolean86 = printStream1.checkError();
        printStream1.flush();
        printStream1.println((float) 10);
        java.io.PrintWriter printWriter90 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.print((long) (short) 10);
        printStream1.println();
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder18 = builder14.setLanguage("ZXZ");
        java.util.Locale.Builder builder19 = builder14.clear();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale.setDefault(category20, locale22);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale22.getDisplayLanguage(locale26);
        java.util.Locale.Builder builder28 = builder14.setLocale(locale26);
        java.lang.String str29 = locale26.getDisplayCountry();
        java.lang.Object[] objArray31 = null;
        java.io.PrintWriter printWriter32 = printWriter13.format(locale26, "en", objArray31);
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder37 = builder33.setLanguage("ZXZ");
        java.util.Locale.Builder builder38 = builder33.clear();
        java.util.Locale.Builder builder39 = builder33.clear();
        java.util.Locale.Builder builder41 = builder39.setLanguageTag("fr");
        printWriter13.println((java.lang.Object) builder39);
        printWriter13.print(0);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter13);
        printWriter13.println("org.apache.commons.math.MathException: FRAN\347AIS");
        printWriter13.print((int) (byte) 100);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder9 = builder4.setVariant("");
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("en-CA");
        java.util.Locale.Builder builder13 = builder11.setLanguage("DEU");
        java.util.Locale locale14 = builder11.build();
        java.util.Locale locale15 = builder11.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "deu_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "deu_CA");
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: ");
        printStream1.flush();
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream3.flush();
        printStream3.print((-5.539714827914696d));
        java.io.PrintStream printStream8 = printStream3.append('u');
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream16 = printStream11.format(locale13, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream28 = printStream23.format(locale25, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream23, false);
        printStream23.println(10.0f);
        java.io.PrintStream printStream35 = new java.io.PrintStream("ko-KR");
        printStream35.close();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream35, false);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.Writer) printWriter38);
        printWriter39.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray49 = rotation48.getMatrix();
        java.io.PrintWriter printWriter50 = printWriter39.format("en", (java.lang.Object[]) doubleArray49);
        java.io.PrintStream printStream51 = printStream23.printf("YZY", (java.lang.Object[]) doubleArray49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("KOR", (java.lang.Object[]) doubleArray49);
        java.lang.Object[] objArray53 = mathException52.getArguments();
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray56, (java.lang.Throwable) mathException58);
        java.lang.String str60 = mathException59.getPattern();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("\u52a0\u62ff\u5927", objArray53, (java.lang.Throwable) mathException59);
        java.io.PrintStream printStream64 = printStream11.printf("org.apache.commons.math.MathException: ZXZ", objArray53);
        java.io.PrintStream printStream65 = printStream8.format("ko-kr", objArray53);
        org.junit.Assert.assertNotNull(printStream8);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[[25407.0, 1040.0, 2000.0], [-1040.0, 5407.0, 10400.0], [2000.0, -10400.0, 5607.0]]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ZXZ" + "'", str60, "ZXZ");
        org.junit.Assert.assertNotNull(printStream64);
        org.junit.Assert.assertNotNull(printStream65);
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "Canada");
        java.io.PrintWriter printWriter13 = printWriter5.append('u');
        printWriter5.println((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter19 = printWriter5.append((java.lang.CharSequence) "de-de", 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale2);
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale4.getDisplayScript(locale5);
        java.lang.String str7 = locale2.getDisplayLanguage(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = locale9.getCountry();
        java.lang.String str11 = locale5.getDisplayCountry(locale9);
        java.lang.String str12 = locale9.getISO3Country();
        java.lang.String str13 = locale9.getScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u97d3\u6587" + "'", str7, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "US" + "'", str10, "US");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Taiwan" + "'", str11, "Taiwan");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "USA" + "'", str12, "USA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str2 = mathException1.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str2, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.OutputStream) printStream8);
        printWriter9.print("\u97d3\u6587");
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder17 = builder12.setExtension('u', "");
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale21 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Locale.setDefault(category22, locale23);
        java.lang.String str26 = locale21.getDisplayName(locale23);
        java.lang.String str27 = locale23.getDisplayName();
        java.lang.String str28 = locale18.getDisplayLanguage(locale23);
        java.util.Locale.Builder builder29 = builder12.setLocale(locale18);
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.lang.String str31 = locale18.getDisplayVariant(locale30);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        java.lang.Throwable[] throwableArray35 = mathException33.getSuppressed();
        java.io.PrintWriter printWriter36 = printWriter9.printf(locale18, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) throwableArray35);
        java.lang.String str37 = locale18.toLanguageTag();
        java.lang.Object obj38 = locale18.clone();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u97d3\u6587)" + "'", str26, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English" + "'", str27, "English");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en-CA" + "'", str37, "en-CA");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "en_CA");
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-0.3959260554836696d), (-3.718591544603141d), (-5.440211108893697d), 6.41844639079865d, true);
        double double6 = rotation5.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.04300064603608808d) + "'", double6 == (-0.04300064603608808d));
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder9 = builder0.setExtension('a', "und");
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str14 = locale11.getDisplayLanguage();
        java.io.PrintStream printStream16 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.io.PrintStream printStream18 = printStream16.append(' ');
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        char[] charArray27 = new char[] { ' ', 'x' };
        printWriter24.write(charArray27);
        java.util.Locale locale29 = java.util.Locale.ENGLISH;
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale29.getDisplayCountry(locale30);
        java.lang.String str32 = locale29.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray40 = rotation39.getMatrix();
        java.io.PrintWriter printWriter41 = printWriter24.format(locale29, "YZY", (java.lang.Object[]) doubleArray40);
        printWriter41.print((-1L));
        java.util.Locale locale44 = java.util.Locale.PRC;
        java.lang.String str45 = locale44.getScript();
        java.lang.String[] strArray50 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray50, (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray55 = mathException54.getSuppressed();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray50, (java.lang.Throwable) mathException54);
        java.lang.Throwable[] throwableArray57 = mathException54.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException58 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray57);
        java.lang.Throwable[] throwableArray59 = notARotationMatrixException58.getSuppressed();
        java.io.PrintWriter printWriter60 = printWriter41.printf(locale44, "CHN", (java.lang.Object[]) throwableArray59);
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("\u97d3\u6587)");
        java.lang.String str63 = locale44.getDisplayVariant(locale62);
        java.lang.String[] strArray66 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66);
        java.lang.Object[] objArray68 = mathException67.getArguments();
        java.io.PrintStream printStream69 = printStream18.format(locale62, "\u97d3\u6587)", objArray68);
        java.lang.String str70 = locale11.getDisplayCountry(locale62);
        java.util.Locale.Builder builder71 = builder0.setLocale(locale11);
        java.util.Locale.Builder builder72 = builder71.clearExtensions();
        java.util.Locale.Builder builder74 = builder72.setLanguage("TWN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder76 = builder74.addUnicodeLocaleAttribute("English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: English (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "German" + "'", str12, "German");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "German" + "'", str14, "German");
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , x]");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "en" + "'", str32, "en");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(printWriter60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print((double) 0.0f);
        printWriter12.println("zxz (KO_KR)");
        printWriter12.write(0);
        java.io.PrintWriter printWriter20 = printWriter12.append('a');
        printWriter20.print((float) 'x');
        java.util.Locale locale25 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Locale.setDefault(category26, locale27);
        java.lang.String str30 = locale25.getDisplayName(locale27);
        java.lang.String str31 = locale27.getDisplayName();
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String[] strArray38 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream39 = printStream34.format(locale36, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray38);
        java.io.PrintStream printStream41 = new java.io.PrintStream((java.io.OutputStream) printStream34, false);
        printStream34.println(10.0f);
        java.lang.String[] strArray46 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray46);
        java.io.PrintStream printStream48 = printStream34.format("\u97d3\u6587", (java.lang.Object[]) strArray46);
        java.io.PrintWriter printWriter49 = printWriter20.printf(locale27, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) strArray46);
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        java.io.PrintWriter printWriter52 = printWriter49.printf("org.apache.commons.math.MathException: English (Canada)", objArray51);
        printWriter52.write("zxz (KO_KR)", (int) (byte) -1, 0);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.util.Locale.Category category58 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category59 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.lang.String str61 = locale60.getDisplayLanguage();
        java.util.Locale.setDefault(category59, locale60);
        java.util.Locale.setDefault(category58, locale60);
        java.lang.String str64 = locale57.getDisplayVariant(locale60);
        org.apache.commons.math.geometry.Rotation rotation71 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray72 = rotation71.getMatrix();
        java.io.PrintWriter printWriter73 = printWriter52.printf(locale57, "org.apache.commons.math.geometry.NotARotationMatrixException: ja", (java.lang.Object[]) doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.Rotation rotation75 = new org.apache.commons.math.geometry.Rotation(doubleArray72, (-799.4767897124931d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations");
        } catch (org.apache.commons.math.geometry.NotARotationMatrixException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter20);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u97d3\u6587)" + "'", str30, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(printWriter52);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.FORMAT + "'", category58.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category59 + "' != '" + java.util.Locale.Category.FORMAT + "'", category59.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(printWriter73);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder1.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder1.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder1.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D11, vector3D16);
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray26 = rotation25.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D28, (double) (byte) 100, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D30, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D38 = rotation25.applyInverseTo(vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D38, vector3D39);
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = rotation47.applyTo(vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D49.negate();
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        double double57 = vector3D56.getY();
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D11, (double) ' ', vector3D38, (double) (-1.0f), vector3D54, (double) 10.0f, vector3D56);
        org.apache.commons.math.geometry.Rotation rotation65 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray66 = rotation65.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D68 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D68, (double) (byte) 100, vector3D70);
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D75 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D73, (double) (byte) 100, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D77 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D70, vector3D75);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation65.applyInverseTo(vector3D70);
        org.apache.commons.math.geometry.Vector3D vector3D79 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D78, vector3D79);
        org.apache.commons.math.geometry.Vector3D vector3D81 = vector3D78.negate();
        org.apache.commons.math.geometry.Vector3D vector3D82 = new org.apache.commons.math.geometry.Vector3D((double) 1.0f, vector3D58, 100.0d, vector3D78);
        org.apache.commons.math.geometry.Vector3D vector3D83 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D4, (double) (short) 10, vector3D82);
        double double84 = vector3D83.getAlpha();
        double double85 = vector3D83.getAlpha();
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        java.util.Locale locale1 = new java.util.Locale("org.apache.commons.math.geometry.notarotationmatrixexception:  (ZXZ_FRAN\347AIS)");
        java.util.Locale locale2 = locale1.stripExtensions();
        boolean boolean3 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "org.apache.commons.math.geometry.notarotationmatrixexception:  (zxz_fran\347ais)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "org.apache.commons.math.geometry.notarotationmatrixexception:  (zxz_fran\347ais)");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("English");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getISO3Language();
        java.lang.String str5 = locale1.getDisplayLanguage(locale3);
        java.lang.String str6 = locale1.getISO3Country();
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale.setDefault(category8, locale10);
        java.lang.String str14 = locale7.getDisplayVariant(locale10);
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.lang.String str17 = locale10.getDisplayCountry(locale15);
        java.lang.String str18 = locale10.getDisplayName();
        java.util.Set<java.lang.String> strSet19 = locale10.getUnicodeLocaleKeys();
        java.lang.String str20 = locale1.getDisplayVariant(locale10);
        java.lang.String str21 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "english");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ita" + "'", str4, "ita");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "english" + "'", str5, "english");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        double double22 = rotation15.getAngle();
        org.apache.commons.math.geometry.RotationOrder rotationOrder23 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation(rotationOrder23, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Rotation rotation28 = rotation15.applyTo(rotation27);
        org.apache.commons.math.geometry.RotationOrder rotationOrder29 = org.apache.commons.math.geometry.RotationOrder.ZYX;
        double[] doubleArray30 = rotation27.getAngles(rotationOrder29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotationOrder29.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D33 = vector3D31.scalarMultiply((-0.028183060731179405d));
        double double34 = vector3D31.getNorm();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(rotationOrder23);
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(rotationOrder29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-0.6995216443485193, -0.786766130769684, 1.0349958982147882]");
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException37);
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintWriter printWriter41 = printWriter29.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray40);
        java.lang.String[] strArray44 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray44, (java.lang.Throwable) mathException46);
        java.lang.String str48 = mathException46.getPattern();
        java.lang.Throwable[] throwableArray49 = mathException46.getSuppressed();
        java.io.PrintWriter printWriter50 = printWriter41.printf("\u97d3\u6587", (java.lang.Object[]) throwableArray49);
        printWriter50.print(false);
        java.lang.String[] strArray56 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray56, (java.lang.Throwable) mathException58);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException60 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray56);
        java.io.PrintWriter printWriter61 = printWriter50.printf("TW", (java.lang.Object[]) strArray56);
        printWriter50.println((float) (short) -1);
        java.io.PrintWriter printWriter65 = new java.io.PrintWriter((java.io.Writer) printWriter50, false);
        printWriter65.println(0.0d);
        printWriter65.write("\u52a0\u62ff\u5927");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ko_KR" + "'", str48, "ko_KR");
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(printWriter61);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA1();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (-1L), (double) (short) 10, (double) 'a');
        double double5 = rotation4.getAngle();
        org.apache.commons.math.geometry.Rotation rotation6 = rotation4.revert();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.3122509176395862d + "'", double5 == 2.3122509176395862d);
        org.junit.Assert.assertNotNull(rotation6);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D12 = rotation6.applyTo(vector3D8);
        double double13 = rotation6.getAngle();
        double double14 = rotation6.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D25 = vector3D17.subtract((double) 10L, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation6.applyTo(vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D31 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D32 = vector3D31.negate();
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D44, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D60, (double) (byte) 100, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D62, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D49, (double) (byte) 1, vector3D57, (double) (short) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D71 = vector3D49.negate();
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D49);
        double double73 = vector3D49.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D74 = vector3D37.subtract((double) (short) -1, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D75 = vector3D31.add((double) (byte) 0, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.minusJ;
        org.apache.commons.math.geometry.Vector3D vector3D79 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D80 = vector3D76.add(vector3D79);
        double double81 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D31, vector3D79);
        org.apache.commons.math.geometry.Vector3D vector3D82 = new org.apache.commons.math.geometry.Vector3D((-3.141592653589793d), vector3D26, (double) (byte) 10, vector3D79);
        org.apache.commons.math.geometry.Vector3D vector3D83 = vector3D79.orthogonal();
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.7826371500223388d + "'", double81 == 0.7826371500223388d);
        org.junit.Assert.assertNotNull(vector3D83);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D1.subtract((double) 10L, vector3D8);
        org.apache.commons.math.geometry.Vector3D vector3D10 = vector3D9.normalize();
        double double11 = vector3D9.getY();
        org.apache.commons.math.geometry.RotationOrder rotationOrder12 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D13 = rotationOrder12.getA1();
        org.apache.commons.math.geometry.Rotation rotation17 = new org.apache.commons.math.geometry.Rotation(rotationOrder12, (double) (short) 100, (double) 'x', 10.0d);
        java.lang.String str18 = rotationOrder12.toString();
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotationOrder12.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D20 = vector3D19.negate();
        org.apache.commons.math.geometry.Vector3D vector3D21 = vector3D9.add(vector3D20);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.3715201283077028d + "'", double11 == 1.3715201283077028d);
        org.junit.Assert.assertNotNull(rotationOrder12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "XYZ" + "'", str18, "XYZ");
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ITA", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale locale6 = new java.util.Locale("org.apache.commons.math.MathException: ko_KR");
        java.lang.String str7 = locale6.getScript();
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale12, locale13, locale14, locale15, locale16, locale17, locale19, locale20, locale21 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList23, filteringMode25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("ja", strMap30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList31, strMap32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList31, strMap34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale38.getDisplayScript(locale39);
        java.lang.String str41 = locale36.getDisplayLanguage(locale38);
        java.util.Locale.setDefault(locale36);
        java.util.Set<java.lang.String> strSet43 = locale36.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags(languageRangeList35, (java.util.Collection<java.lang.String>) strSet43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayLanguage();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale48, locale49, locale50, locale51, locale52, locale53, locale55, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale.FilteringMode filteringMode61 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList59, filteringMode61);
        java.lang.String[] strArray66 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList67);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.util.Locale locale74 = java.util.Locale.GERMAN;
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.util.Locale locale78 = java.util.Locale.ROOT;
        java.lang.String str79 = locale78.getDisplayLanguage();
        java.util.Locale locale80 = java.util.Locale.FRENCH;
        java.util.Locale locale81 = java.util.Locale.ROOT;
        java.util.Locale locale82 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray83 = new java.util.Locale[] { locale73, locale74, locale75, locale76, locale77, locale78, locale80, locale81, locale82 };
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.Locale.FilteringMode filteringMode86 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList84, filteringMode86);
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList84, filteringMode88);
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strSet43, filteringMode88);
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet8, filteringMode88);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap92 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList93 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap92);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertEquals(locale6.toString(), "org.apache.commons.math.mathexception: ko_kr");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + filteringMode61 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode61.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + filteringMode86 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode86.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode88.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(languageRangeList93);
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        printWriter12.print((double) 0.0f);
        printWriter12.println("zxz (KO_KR)");
        printWriter12.write(0);
        java.io.PrintWriter printWriter20 = printWriter12.append('a');
        printWriter20.print((float) 'x');
        java.util.Locale locale25 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Locale.setDefault(category26, locale27);
        java.lang.String str30 = locale25.getDisplayName(locale27);
        java.lang.String str31 = locale27.getDisplayName();
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String[] strArray38 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream39 = printStream34.format(locale36, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray38);
        java.io.PrintStream printStream41 = new java.io.PrintStream((java.io.OutputStream) printStream34, false);
        printStream34.println(10.0f);
        java.lang.String[] strArray46 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray46);
        java.io.PrintStream printStream48 = printStream34.format("\u97d3\u6587", (java.lang.Object[]) strArray46);
        java.io.PrintWriter printWriter49 = printWriter20.printf(locale27, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) strArray46);
        printWriter49.print((long) (byte) 10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(printWriter20);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u97d3\u6587)" + "'", str30, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(printStream48);
        org.junit.Assert.assertNotNull(printWriter49);
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de-DE");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "de-de" + "'", str2, "de-de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "de-de" + "'", str3, "de-de");
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        java.util.Locale locale2 = new java.util.Locale("Italian", "zxz_FRAN\347AIS");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "italian_ZXZ_FRAN\347AIS");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.println((float) (-1));
        printStream1.print(true);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
        boolean boolean8 = printStream1.checkError();
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        char[] charArray21 = new char[] { '4', 'a', ' ', ' ' };
        printWriter15.write(charArray21);
        printWriter15.write((int) (short) 100);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter15);
        printWriter15.println((double) 'a');
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.lang.String str29 = locale28.getCountry();
        java.io.PrintStream printStream33 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream33.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray43 = rotation42.getMatrix();
        java.io.PrintStream printStream44 = printStream33.printf("fra", (java.lang.Object[]) doubleArray43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR", (java.lang.Object[]) doubleArray43);
        java.io.PrintWriter printWriter46 = printWriter15.format(locale28, "x-lvariant-TWN", (java.lang.Object[]) doubleArray43);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray52 = mathException51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = mathException51.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException54 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray53);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException55 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray53);
        java.lang.Throwable[] throwableArray56 = notARotationMatrixException55.getSuppressed();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("zho", (java.lang.Object[]) throwableArray56);
        java.lang.Object[] objArray58 = mathException57.getArguments();
        java.io.PrintStream printStream59 = printStream1.format(locale28, "italy", objArray58);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream59);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "italian_ZXZ_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ZXZ_FRAN\347AIS" + "'", str29, "ZXZ_FRAN\347AIS");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(printStream59);
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print("");
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale.setDefault(category9, locale12);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray24 = rotation23.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotation23.applyInverseTo(vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation23.getAxis();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation23.revert();
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintStream printStream40 = printStream1.format(locale12, "KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream42 = printStream1.append('u');
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.OutputStream) printStream42, false);
        printWriter44.print((-0.8230677854004599d));
        java.io.PrintWriter printWriter48 = printWriter44.append('4');
        printWriter48.print('u');
        printWriter48.print('a');
        printWriter48.write((int) (byte) 0);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printWriter48);
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        java.util.Locale locale3 = new java.util.Locale("USA", "ko-kr", "de");
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale3.getLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "usa_KO-KR_de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usa" + "'", str5, "usa");
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("en");
        java.util.Locale.Builder builder14 = builder10.setLanguageTag("und");
        java.util.Locale.Builder builder15 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.addUnicodeLocaleAttribute("org.apache.commons.math.MathException: china");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: org.apache.commons.math.MathException: china [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D1.subtract((double) 10L, vector3D8);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotation16.applyInverseTo(vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D28 = vector3D1.add((-0.0d), vector3D26);
        org.apache.commons.math.geometry.Rotation rotation35 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double42 = rotation41.getQ0();
        org.apache.commons.math.geometry.Rotation rotation43 = rotation35.applyInverseTo(rotation41);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation41.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D45 = vector3D26.add(1.3660691819214432d, vector3D44);
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation(vector3D26, 1.0d);
        org.apache.commons.math.geometry.Vector3D vector3D49 = vector3D26.scalarMultiply((-1040.0d));
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation(vector3D26, (-43.756491210010616d));
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D53, (double) (byte) 100, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D58 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D58, (double) (byte) 100, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D55, vector3D60);
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D66 = vector3D65.negate();
        org.apache.commons.math.geometry.Vector3D vector3D67 = vector3D55.subtract(vector3D65);
        org.apache.commons.math.geometry.RotationOrder rotationOrder68 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation(rotationOrder68, (double) (-1L), (double) (short) 10, (double) 'a');
        java.lang.String str73 = rotationOrder68.toString();
        org.apache.commons.math.geometry.Vector3D vector3D74 = rotationOrder68.getA1();
        double double75 = org.apache.commons.math.geometry.Vector3D.angle(vector3D67, vector3D74);
        double double76 = vector3D67.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D77 = vector3D26.subtract(vector3D67);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(rotationOrder68);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "XYZ" + "'", str73, "XYZ");
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.4826178052075762d + "'", double75 == 1.4826178052075762d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D77);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder17 = builder4.setLanguage("fr");
        java.util.Locale.Builder builder19 = builder17.setLanguageTag("eng");
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder24 = builder20.setLanguage("ZXZ");
        java.util.Locale.Builder builder25 = builder20.clear();
        java.util.Locale.Builder builder26 = builder20.clear();
        java.util.Locale.Builder builder28 = builder26.removeUnicodeLocaleAttribute("YZY");
        java.util.Locale locale29 = builder28.build();
        java.util.Locale.Builder builder30 = builder17.setLocale(locale29);
        java.lang.String str31 = locale29.getLanguage();
        java.lang.String str32 = locale29.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French" + "'", str11, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream("ko-KR");
        printStream8.close();
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.OutputStream) printStream8, false);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter11);
        char[] charArray15 = new char[] { ' ', 'x' };
        printWriter12.write(charArray15);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray28 = rotation27.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter12.format(locale17, "YZY", (java.lang.Object[]) doubleArray28);
        java.lang.String str30 = locale3.getDisplayCountry(locale17);
        java.lang.String str31 = locale17.getDisplayCountry();
        java.lang.String str32 = locale17.getISO3Language();
        java.lang.String str33 = locale17.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , x]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "United Kingdom" + "'", str30, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "eng" + "'", str32, "eng");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder0.setLanguage("fra");
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale14 = builder12.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fra_CA_#u-fra");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fra_CA_#u-fra");
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        java.lang.Throwable throwable18 = null;
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException(throwable18);
        java.lang.String[] strArray21 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray21);
        mathException19.addSuppressed((java.lang.Throwable) mathException22);
        java.lang.Throwable[] throwableArray24 = mathException22.getSuppressed();
        java.io.PrintStream printStream25 = printStream15.format("French", (java.lang.Object[]) throwableArray24);
        printStream15.print("en_CA");
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        printWriter31.println(1.0d);
        printWriter31.write((int) '4');
        java.io.PrintStream printStream38 = new java.io.PrintStream("ko-KR");
        printStream38.close();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream38, false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        printWriter42.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray52 = rotation51.getMatrix();
        java.io.PrintWriter printWriter53 = printWriter42.format("en", (java.lang.Object[]) doubleArray52);
        java.util.Locale locale54 = java.util.Locale.ENGLISH;
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        java.lang.String str57 = locale54.getLanguage();
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray61 = mathException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = mathException60.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException63 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter64 = printWriter42.format(locale54, "ZXZ", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter65 = printWriter31.format("\ub3c5\uc77c", (java.lang.Object[]) throwableArray62);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("ko", (java.lang.Object[]) throwableArray62);
        java.io.PrintStream printStream67 = printStream15.format("inglese", (java.lang.Object[]) throwableArray62);
        java.util.Locale locale71 = new java.util.Locale("fr", "fran\347\u6cd5\u6587)", "");
        java.io.PrintStream printStream75 = new java.io.PrintStream("ko-KR");
        printStream75.close();
        java.io.PrintWriter printWriter78 = new java.io.PrintWriter((java.io.OutputStream) printStream75, false);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.Writer) printWriter78);
        java.lang.String[] strArray81 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter82 = printWriter79.printf("ko-KR", (java.lang.Object[]) strArray81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray81);
        java.io.PrintStream printStream84 = printStream15.format(locale71, "", (java.lang.Object[]) strArray81);
        printStream15.print(10);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "en" + "'", str57, "en");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printStream67);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FRAN\347\u6cd5\u6587)");
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(printWriter82);
        org.junit.Assert.assertNotNull(printStream84);
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-55.797888673382836d), (-0.3171856928430399d), 60.912721436461325d);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.println(' ');
        printStream1.print((double) 1.0f);
        printStream1.print((float) 1L);
        printStream1.println(false);
        printStream1.print((long) (byte) -1);
        printStream1.println();
        java.lang.String[] strArray22 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray22, (java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray22, (java.lang.Throwable) mathException26);
        java.lang.Throwable[] throwableArray29 = mathException26.getSuppressed();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("ko_KR", (java.lang.Object[]) throwableArray29);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException31 = new org.apache.commons.math.geometry.NotARotationMatrixException("TW", (java.lang.Object[]) throwableArray29);
        java.io.PrintStream printStream32 = printStream1.printf("US", (java.lang.Object[]) throwableArray29);
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray35, (java.lang.Throwable) mathException37);
        java.lang.String str39 = mathException37.getPattern();
        java.lang.Throwable[] throwableArray40 = mathException37.getSuppressed();
        java.io.PrintStream printStream41 = printStream32.format("\ub300\ub9cc", (java.lang.Object[]) throwableArray40);
        printStream32.println('4');
        printStream32.print((int) '4');
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ko_KR" + "'", str39, "ko_KR");
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(printStream41);
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("Japanisch");
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        org.apache.commons.math.geometry.RotationOrder rotationOrder1 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str2 = rotationOrder1.toString();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder1.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder1.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D10 = vector3D8.scalarMultiply((double) 10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D15, vector3D20);
        double double23 = vector3D15.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D49, (double) (byte) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D46, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D33, (double) (byte) 1, vector3D41, (double) (short) 100, vector3D51);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D15, vector3D33);
        org.apache.commons.math.geometry.RotationOrder rotationOrder56 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str57 = rotationOrder56.toString();
        org.apache.commons.math.geometry.Vector3D vector3D58 = rotationOrder56.getA2();
        double double59 = vector3D58.getDelta();
        double double60 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D33, vector3D58);
        double double61 = vector3D58.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D62 = vector3D58.negate();
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D(1.4711276743037345d, vector3D4, 1.3715201283077028d, vector3D8, (-0.2576415448910957d), vector3D62);
        double double64 = vector3D4.getZ();
        org.junit.Assert.assertNotNull(rotationOrder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ZXZ" + "'", str2, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(rotationOrder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ZXZ" + "'", str57, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        boolean boolean86 = printStream1.checkError();
        printStream1.flush();
        printStream1.println();
        boolean boolean89 = printStream1.checkError();
        printStream1.close();
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.close();
        printStream1.print('#');
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        printStream15.close();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream20 = printStream15.format(locale17, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray19);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream15, false);
        printStream15.println(10.0f);
        java.lang.String[] strArray27 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray27);
        java.io.PrintStream printStream29 = printStream15.format("\u97d3\u6587", (java.lang.Object[]) strArray27);
        printStream15.println((long) (short) 1);
        printStream15.println((float) (short) 0);
        printStream15.print("it");
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale39 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category36, locale39);
        java.util.Locale locale42 = new java.util.Locale("\uc601\uc5b4");
        java.lang.String str43 = locale42.getDisplayScript();
        java.util.Locale.setDefault(category36, locale42);
        java.lang.String str45 = locale42.getCountry();
        org.apache.commons.math.geometry.Rotation rotation53 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double54 = rotation53.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D55 = rotation53.getAxis();
        double[][] doubleArray56 = rotation53.getMatrix();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException57 = new org.apache.commons.math.geometry.NotARotationMatrixException("CA", (java.lang.Object[]) doubleArray56);
        java.io.PrintStream printStream58 = printStream15.printf(locale42, "German", (java.lang.Object[]) doubleArray56);
        printStream1.print((java.lang.Object) printStream15);
        printStream1.write((int) (short) 0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.FORMAT + "'", category36.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale39.toString(), "zxz_KO_KR");
        org.junit.Assert.assertEquals(locale42.toString(), "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(printStream58);
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("italy", "org.apache.commons.math.MathException: ja");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: ja");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D10);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) (byte) 100, (-0.0d), (double) (byte) 0, (double) 1, true);
        double double25 = rotation24.getQ0();
        org.apache.commons.math.geometry.Rotation rotation26 = rotation5.applyInverseTo(rotation24);
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = rotation32.applyTo(vector3D34);
        double double39 = rotation32.getAngle();
        double double40 = rotation32.getQ3();
        org.apache.commons.math.geometry.Rotation rotation41 = rotation5.applyInverseTo(rotation32);
        double double42 = rotation41.getQ0();
        double[][] doubleArray43 = rotation41.getMatrix();
        double double44 = rotation41.getQ2();
        org.apache.commons.math.geometry.Vector3D vector3D45 = rotation41.getAxis();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.9999500037496876d + "'", double25 == 0.9999500037496876d);
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-12804.0d) + "'", double42 == (-12804.0d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D45);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\uc601\uc5b4", "tw");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: tw");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        java.io.PrintWriter printWriter92 = new java.io.PrintWriter((java.io.OutputStream) printStream90, true);
        boolean boolean93 = printStream90.checkError();
        java.io.PrintStream printStream95 = printStream90.append((java.lang.CharSequence) "Chinese (China)");
        printStream90.print((long) (short) 10);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(printStream95);
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.lang.String str10 = locale8.getISO3Country();
        java.lang.String str11 = locale8.getVariant();
        java.lang.String str12 = locale8.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CHN" + "'", str10, "CHN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh_CN" + "'", str12, "zh_CN");
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\uce90\ub098\ub2e4");
        printWriter1.println((-5.440211108893697d));
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        char[] charArray12 = new char[] { ' ', 'x' };
        printWriter9.write(charArray12);
        java.io.PrintWriter printWriter15 = printWriter9.append((java.lang.CharSequence) "Canada");
        printWriter9.print('#');
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("Germany");
        java.lang.String str20 = locale19.toLanguageTag();
        java.lang.String str21 = locale19.getDisplayScript();
        java.lang.String str22 = locale19.getLanguage();
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale19.getDisplayVariant();
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String[] strArray32 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream33 = printStream28.format(locale30, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray32);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream28, false);
        printStream28.println(10.0f);
        java.io.PrintStream printStream40 = new java.io.PrintStream("ko-KR");
        printStream40.close();
        java.io.PrintWriter printWriter43 = new java.io.PrintWriter((java.io.OutputStream) printStream40, false);
        java.io.PrintWriter printWriter44 = new java.io.PrintWriter((java.io.Writer) printWriter43);
        printWriter44.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation53 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray54 = rotation53.getMatrix();
        java.io.PrintWriter printWriter55 = printWriter44.format("en", (java.lang.Object[]) doubleArray54);
        java.io.PrintStream printStream56 = printStream28.printf("YZY", (java.lang.Object[]) doubleArray54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray54);
        java.lang.String[] strArray59 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray59, (java.lang.Throwable) mathException61);
        java.lang.String[] strArray66 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66, (java.lang.Throwable) mathException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray71 = mathException70.getSuppressed();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray66, (java.lang.Throwable) mathException70);
        java.lang.Throwable[] throwableArray73 = mathException70.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException74 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray73);
        mathException62.addSuppressed((java.lang.Throwable) notARotationMatrixException74);
        mathException57.addSuppressed((java.lang.Throwable) notARotationMatrixException74);
        java.lang.Object[] objArray77 = notARotationMatrixException74.getArguments();
        java.io.PrintWriter printWriter78 = printWriter9.format(locale19, "\uc911\uad6d\uc5b4\ub300\ub9cc)", objArray77);
        java.lang.String[] strArray84 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray84, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ud55c\uad6d\uc5b4", (java.lang.Object[]) strArray84);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\u5fb7\u570b", (java.lang.Object[]) strArray84);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException90 = new org.apache.commons.math.geometry.NotARotationMatrixException("ZXZ_FRAN\347AIS", (java.lang.Object[]) strArray84);
        java.io.PrintWriter printWriter91 = printWriter1.printf(locale19, "\u97d3\u6587", (java.lang.Object[]) strArray84);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "germany" + "'", str20, "germany");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "germany" + "'", str22, "germany");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(printWriter78);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(printWriter91);
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(Double.NaN, (double) 10, (double) '#');
        org.apache.commons.math.geometry.Rotation rotation9 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double10 = rotation9.getQ0();
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation18 = rotation9.applyTo(rotation16);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D20 = rotation9.applyInverseTo(vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D30 = vector3D22.subtract((double) 10L, vector3D29);
        double double31 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D20, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = vector3D3.add(vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D34 = vector3D20.scalarMultiply(1.1475969085E10d);
        org.apache.commons.math.geometry.RotationOrder rotationOrder35 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation(rotationOrder35, (double) (-1L), (double) (short) 10, (double) 'a');
        java.lang.String str40 = rotationOrder35.toString();
        org.apache.commons.math.geometry.Vector3D vector3D41 = rotationOrder35.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D42 = rotationOrder35.getA2();
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation(rotationOrder35, (-1.9812591495014367E19d), (-8087.321164150444d), 0.0d);
        org.apache.commons.math.geometry.Vector3D vector3D47 = rotationOrder35.getA1();
        org.apache.commons.math.geometry.Rotation rotation53 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double54 = rotation53.getQ0();
        org.apache.commons.math.geometry.Rotation rotation60 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double61 = rotation60.getQ0();
        org.apache.commons.math.geometry.Rotation rotation62 = rotation53.applyTo(rotation60);
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotation60.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D64 = rotation60.getAxis();
        double double65 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D47, vector3D64);
        double double66 = org.apache.commons.math.geometry.Vector3D.angle(vector3D34, vector3D47);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6782.273252612676d) + "'", double31 == (-6782.273252612676d));
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(rotationOrder35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "XYZ" + "'", str40, "XYZ");
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 52.0d + "'", double54 == 52.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 52.0d + "'", double61 == 52.0d);
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-0.995037190209989d) + "'", double65 == (-0.995037190209989d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.73848058014558d + "'", double66 == 1.73848058014558d);
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter8.println(0.0d);
        printWriter8.write(0);
        java.io.PrintWriter printWriter14 = printWriter8.append('4');
        printWriter14.print((double) 'a');
        printWriter14.print((double) (short) 100);
        printWriter14.print(true);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter14, true);
        printWriter22.println();
        printWriter22.write((int) (byte) 1);
        printWriter22.print((float) '#');
        printWriter22.println((int) (short) 1);
        printWriter22.println(1L);
        printWriter22.write((int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter14);
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        java.util.Locale locale3 = new java.util.Locale("org.apache.commons.math.geometry.NotARotationMatrixException: ", "Catalan", "chinesisch (china)");
        java.lang.String str4 = locale3.getDisplayVariant();
        org.junit.Assert.assertEquals(locale3.toString(), "org.apache.commons.math.geometry.notarotationmatrixexception: _CATALAN_chinesisch (china)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "chinesisch (china)" + "'", str4, "chinesisch (china)");
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        printStream29.print(1.2220476682666177d);
        printStream29.println(false);
        boolean boolean34 = printStream29.checkError();
        java.io.PrintStream printStream36 = printStream29.append((java.lang.CharSequence) "XZX");
        byte[] byteArray38 = new byte[] { (byte) -1 };
        printStream29.write(byteArray38, (int) ' ', (int) 'u');
        printStream29.println((float) (short) 1);
        boolean boolean44 = printStream29.checkError();
        printStream29.close();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(printStream36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.util.Locale locale20 = java.util.Locale.UK;
        java.lang.String[] strArray22 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream23 = printStream18.format(locale20, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray22);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream18, false);
        printStream18.println(10.0f);
        java.io.PrintStream printStream30 = new java.io.PrintStream("ko-KR");
        printStream30.close();
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.OutputStream) printStream30, false);
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        printWriter34.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray44 = rotation43.getMatrix();
        java.io.PrintWriter printWriter45 = printWriter34.format("en", (java.lang.Object[]) doubleArray44);
        java.io.PrintStream printStream46 = printStream18.printf("YZY", (java.lang.Object[]) doubleArray44);
        java.io.PrintStream printStream48 = new java.io.PrintStream("ko-KR");
        printStream48.close();
        java.io.PrintWriter printWriter51 = new java.io.PrintWriter((java.io.OutputStream) printStream48, false);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter51);
        char[] charArray55 = new char[] { ' ', 'x' };
        printWriter52.write(charArray55);
        printStream18.println(charArray55);
        printStream15.print(charArray55);
        java.io.PrintStream printStream60 = new java.io.PrintStream((java.io.OutputStream) printStream15, false);
        printStream15.print((long) (byte) 100);
        java.io.PrintStream printStream63 = new java.io.PrintStream((java.io.OutputStream) printStream15);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(printWriter45);
        org.junit.Assert.assertNotNull(printStream46);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[ , x]");
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str3 = languageRange2.getRange();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray9 = mathException7.getSuppressed();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        java.lang.Object[] objArray12 = mathException10.getArguments();
        java.lang.Object[] objArray13 = mathException10.getArguments();
        boolean boolean14 = languageRange2.equals((java.lang.Object) mathException10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zxz" + "'", str3, "zxz");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        java.util.Locale locale1 = new java.util.Locale("zxz (ko_kr)");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "zxz (ko_kr)");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        printWriter17.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray27 = rotation26.getMatrix();
        java.io.PrintWriter printWriter28 = printWriter17.format("en", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream29 = printStream1.printf("YZY", (java.lang.Object[]) doubleArray27);
        java.io.PrintStream printStream31 = printStream1.append(' ');
        printStream1.print('#');
        printStream1.println(0.0f);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((-6782.273252612676d), (double) (short) 1, 0.8414709848078965d, (double) 100.0f, false);
        printStream1.println((java.lang.Object) rotation41);
        boolean boolean43 = printStream1.checkError();
        java.io.PrintStream printStream45 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintStream printStream4 = printStream1.append('a');
        printStream1.print((long) 100);
        printStream1.println((float) (short) -1);
        org.junit.Assert.assertNotNull(printStream4);
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D16);
        double double19 = rotation5.getQ0();
        double double20 = rotation5.getQ1();
        double double21 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double28 = rotation27.getQ1();
        double double29 = rotation27.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D39 = vector3D31.subtract((double) 10L, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = rotation27.applyInverseTo(vector3D38);
        org.apache.commons.math.geometry.Rotation rotation41 = rotation5.applyTo(rotation27);
        org.apache.commons.math.geometry.Rotation rotation42 = rotation41.revert();
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotation42.getAxis();
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation((-1040.0d), (-1.0d), (-30.57346292255037d), (double) (short) -1, false);
        double double50 = rotation49.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D51 = rotation49.getAxis();
        org.apache.commons.math.geometry.Rotation rotation52 = rotation42.applyTo(rotation49);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertNotNull(rotation42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(rotation52);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.567725116225552d, 1.6704649792860586d, (double) 10.0f);
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA3();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray15, (java.lang.Throwable) mathException19);
        java.lang.Throwable[] throwableArray22 = mathException19.getSuppressed();
        java.io.PrintStream printStream23 = printStream11.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray22);
        java.io.PrintStream printStream25 = printStream11.append((java.lang.CharSequence) "fra");
        java.io.PrintStream printStream27 = new java.io.PrintStream("ko-KR");
        printStream27.close();
        java.util.Locale locale29 = java.util.Locale.UK;
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream32 = printStream27.format(locale29, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream((java.io.OutputStream) printStream27, false);
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.Object[] objArray37 = null;
        java.io.PrintStream printStream38 = printStream34.format(locale35, "\uc911\uad6d\uc5b4", objArray37);
        java.util.Set<java.lang.Character> charSet39 = locale35.getExtensionKeys();
        java.io.PrintStream printStream43 = new java.io.PrintStream("ko-KR");
        printStream43.close();
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream43, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter46);
        char[] charArray52 = new char[] { '4', 'a', ' ', ' ' };
        printWriter46.write(charArray52);
        printWriter46.write((int) (short) 100);
        java.io.PrintWriter printWriter56 = new java.io.PrintWriter((java.io.Writer) printWriter46);
        printWriter46.println((double) 'a');
        java.util.Locale locale59 = java.util.Locale.getDefault();
        java.lang.String str60 = locale59.getCountry();
        java.io.PrintStream printStream64 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream64.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation73 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray74 = rotation73.getMatrix();
        java.io.PrintStream printStream75 = printStream64.printf("fra", (java.lang.Object[]) doubleArray74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR", (java.lang.Object[]) doubleArray74);
        java.io.PrintWriter printWriter77 = printWriter46.format(locale59, "x-lvariant-TWN", (java.lang.Object[]) doubleArray74);
        printWriter77.flush();
        printWriter77.println();
        java.util.Locale locale81 = java.util.Locale.forLanguageTag("\uce90\ub098\ub2e4");
        java.io.PrintStream printStream86 = new java.io.PrintStream("ko-KR");
        printStream86.close();
        java.io.PrintWriter printWriter89 = new java.io.PrintWriter((java.io.OutputStream) printStream86, false);
        java.io.PrintWriter printWriter90 = new java.io.PrintWriter((java.io.Writer) printWriter89);
        java.lang.String[] strArray92 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter93 = printWriter90.printf("ko-KR", (java.lang.Object[]) strArray92);
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray92);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("und", (java.lang.Object[]) strArray92);
        java.io.PrintWriter printWriter96 = printWriter77.printf(locale81, "ZYZ", (java.lang.Object[]) strArray92);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("zh", (java.lang.Object[]) strArray92);
        java.io.PrintStream printStream98 = printStream25.format(locale35, "\u4e2d\u6587\u53f0\u7063)", (java.lang.Object[]) strArray92);
        java.lang.String str99 = locale8.getDisplayVariant(locale35);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale3.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(printStream23);
        org.junit.Assert.assertNotNull(printStream25);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "italian_ZXZ_FRAN\347AIS");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ZXZ_FRAN\347AIS" + "'", str60, "ZXZ_FRAN\347AIS");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(printStream75);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(printWriter93);
        org.junit.Assert.assertNotNull(printWriter96);
        org.junit.Assert.assertNotNull(printStream98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale1.getScript();
        java.util.Locale locale4 = locale1.stripExtensions();
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale6);
        java.lang.String str8 = locale6.getDisplayScript();
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale6.getCountry();
        java.lang.String str11 = locale6.getDisplayCountry();
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale15 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category12, locale15);
        java.util.Locale locale17 = java.util.Locale.getDefault(category12);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale18.getDisplayName();
        boolean boolean20 = locale18.hasExtensions();
        java.lang.String str21 = locale17.getDisplayLanguage(locale18);
        java.lang.String str22 = locale17.getISO3Language();
        java.lang.String str23 = locale6.getDisplayLanguage(locale17);
        java.lang.String str24 = locale4.getDisplayLanguage(locale17);
        java.lang.String str25 = locale17.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "KR" + "'", str10, "KR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str11, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale15.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4" + "'", str19, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zxz" + "'", str21, "zxz");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zxz" + "'", str22, "zxz");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Korean" + "'", str23, "Korean");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "French" + "'", str24, "French");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zxz" + "'", str25, "zxz");
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        printStream1.println((float) 100);
        printStream1.print((int) 'a');
        printStream1.println();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream19 = printStream1.append((java.lang.CharSequence) "S\374dkorea", 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 35");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Canada");
        java.util.Locale.Builder builder18 = builder0.setLanguage("it");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        printWriter24.println('a');
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter24.format(locale32, "TWN", objArray35);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.lang.String str38 = locale32.getDisplayCountry();
        java.util.Locale.Builder builder39 = builder18.setLocale(locale32);
        java.util.Locale.Builder builder41 = builder18.setVariant("Chinook");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ub3c5\uc77c" + "'", str38, "\ub3c5\uc77c");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        double double12 = rotation5.getAngle();
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D17, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D35, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D22, (double) (byte) 1, vector3D30, (double) (short) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation5.applyTo(vector3D40);
        double double45 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double52 = rotation51.getQ0();
        org.apache.commons.math.geometry.Rotation rotation58 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double59 = rotation58.getQ0();
        org.apache.commons.math.geometry.Rotation rotation60 = rotation51.applyTo(rotation58);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotation51.applyInverseTo(vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotation5.applyTo(vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D67 = new org.apache.commons.math.geometry.Vector3D((-12804.0d), (-0.5440211108893699d), 100.0d);
        org.apache.commons.math.geometry.Vector3D vector3D68 = rotation5.applyTo(vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = vector3D68.normalize();
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 52.0d + "'", double59 == 52.0d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-0.4933235701589626d), 0.12224382244068602d);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.write((int) (byte) 1);
        printWriter5.print((int) (short) 0);
        printWriter5.println((float) 1);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray18 = mathException17.getSuppressed();
        java.lang.Object[] objArray19 = mathException17.getArguments();
        java.io.PrintWriter printWriter20 = printWriter5.format("Chinese (Taiwan)", objArray19);
        printWriter5.println();
        printWriter5.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter5.print("ita");
        printWriter5.print((int) (byte) 10);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(printWriter20);
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        double double4 = vector3D3.getAlpha();
        java.lang.Class<?> wildcardClass5 = vector3D3.getClass();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.33667481938672716d + "'", double4 == 0.33667481938672716d);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder15 = builder0.clear();
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter21.println((float) (byte) -1);
        printWriter21.print('a');
        java.util.Locale locale28 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter21.print((java.lang.Object) locale28);
        java.lang.String str30 = locale28.getDisplayName();
        java.util.Set<java.lang.String> strSet31 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale28.getDisplayName();
        boolean boolean33 = locale28.hasExtensions();
        java.lang.String str34 = locale16.getDisplayVariant(locale28);
        java.util.Locale.Builder builder35 = builder15.setLocale(locale16);
        java.util.Locale locale36 = builder35.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertEquals(locale28.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str30, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str32, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation(1.7607846147136124d, (double) (-1), 0.0d, (double) 1L, false);
        double double6 = rotation5.getQ2();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) (byte) 100, (double) (short) 10, (-0.13715201283077028d), (double) ' ', true);
        org.apache.commons.math.geometry.Rotation rotation13 = rotation5.applyInverseTo(rotation12);
        double double14 = rotation13.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(rotation13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.8780467408011772d) + "'", double14 == (-1.8780467408011772d));
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray10 = new char[] { '4', 'a', ' ', ' ' };
        printWriter4.write(charArray10);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.lang.String str16 = locale12.getDisplayLanguage(locale13);
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        char[] charArray26 = new char[] { ' ', 'x' };
        printWriter23.write(charArray26);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.lang.String str31 = locale28.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation38 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintWriter printWriter40 = printWriter23.format(locale28, "YZY", (java.lang.Object[]) doubleArray39);
        java.io.PrintWriter printWriter41 = printWriter4.printf(locale13, "ko-KR", (java.lang.Object[]) doubleArray39);
        java.io.PrintStream printStream44 = new java.io.PrintStream("ko-KR");
        printStream44.close();
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.OutputStream) printStream44, false);
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.Writer) printWriter47);
        printWriter47.println((float) (byte) -1);
        java.io.PrintWriter printWriter52 = new java.io.PrintWriter((java.io.Writer) printWriter47, true);
        java.lang.String[] strArray54 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter55 = printWriter47.printf("KR", (java.lang.Object[]) strArray54);
        java.io.PrintStream printStream57 = new java.io.PrintStream("ko-KR");
        printStream57.close();
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.OutputStream) printStream57, false);
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.Writer) printWriter60);
        char[] charArray64 = new char[] { ' ', 'x' };
        printWriter61.write(charArray64);
        printWriter47.println(charArray64);
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.lang.String str69 = locale67.getDisplayScript(locale68);
        java.lang.String str70 = locale68.getVariant();
        java.lang.String[] strArray73 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray73);
        java.io.PrintWriter printWriter75 = printWriter47.printf(locale68, "English", (java.lang.Object[]) strArray73);
        java.io.PrintWriter printWriter76 = printWriter41.printf("\u97d3\u6587", (java.lang.Object[]) strArray73);
        java.io.PrintWriter printWriter77 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        java.io.PrintWriter printWriter79 = new java.io.PrintWriter((java.io.Writer) printWriter77, false);
        java.io.PrintWriter printWriter80 = new java.io.PrintWriter((java.io.Writer) printWriter79);
        java.io.PrintWriter printWriter81 = new java.io.PrintWriter((java.io.Writer) printWriter79);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  ,  ]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[ , x]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en" + "'", str31, "en");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printWriter40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[ , x]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(printWriter75);
        org.junit.Assert.assertNotNull(printWriter76);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation16.applyTo(rotation23);
        double double26 = rotation16.getQ0();
        double double27 = rotation16.getQ0();
        double[][] doubleArray28 = rotation16.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter9.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        printWriter9.println((double) 'u');
        java.lang.Object[] objArray33 = null;
        java.io.PrintWriter printWriter34 = printWriter9.printf("XZY", objArray33);
        printWriter9.println(1.0f);
        printWriter9.println((float) (byte) 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printWriter34);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        java.util.Locale locale1 = new java.util.Locale("\uc911\uad6d");
        org.junit.Assert.assertEquals(locale1.toString(), "\uc911\uad6d");
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        printStream1.print('a');
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.lang.String str3 = locale2.getDisplayName();
        boolean boolean4 = locale2.hasExtensions();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = locale10.getDisplayLanguage();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.lang.String str14 = locale12.getDisplayScript(locale13);
        java.lang.String str15 = locale10.getDisplayLanguage(locale12);
        java.lang.String str16 = locale12.getDisplayName();
        java.util.Locale.setDefault(category6, locale12);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.lang.String str19 = locale18.getDisplayName();
        boolean boolean20 = locale18.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        java.lang.String str26 = locale21.getDisplayLanguage(locale23);
        java.util.Locale locale27 = locale21.stripExtensions();
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = locale18.getDisplayCountry(locale27);
        java.util.Locale.setDefault(category6, locale27);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.lang.String str35 = locale33.getDisplayScript(locale34);
        java.lang.String str36 = locale31.getDisplayLanguage(locale33);
        java.util.Locale.setDefault(category6, locale31);
        java.util.Locale.setDefault(category0, locale31);
        java.util.Locale locale39 = java.util.Locale.getDefault(category0);
        java.util.Locale locale40 = java.util.Locale.getDefault(category0);
        java.util.Locale locale44 = new java.util.Locale("\u4e2d\u6587", "\u4e2d\u6587\u53f0\u7063)", "zh_TW");
        java.util.Locale.setDefault(category0, locale44);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4" + "'", str3, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "French" + "'", str16, "French");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "English" + "'", str19, "English");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "\u4e2d\u6587\u4e2d\u6587\u53f0\u7063)_zh_TW");
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        double double12 = rotation5.getAngle();
        double double13 = rotation5.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D24 = vector3D16.subtract((double) 10L, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation5.applyTo(vector3D25);
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation(vector3D25, (-0.0d));
        double double29 = rotation28.getQ1();
        org.apache.commons.math.geometry.Rotation rotation30 = rotation28.revert();
        double double31 = rotation28.getQ1();
        double double32 = rotation28.getQ0();
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-0.0d) + "'", double29 == (-0.0d));
        org.junit.Assert.assertNotNull(rotation30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-0.0d) + "'", double31 == (-0.0d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter5.println((float) (byte) -1);
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        org.apache.commons.math.geometry.Rotation rotation17 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double18 = rotation17.getQ0();
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double25 = rotation24.getQ0();
        org.apache.commons.math.geometry.Rotation rotation26 = rotation17.applyTo(rotation24);
        double double27 = rotation17.getQ0();
        double double28 = rotation17.getQ0();
        double[][] doubleArray29 = rotation17.getMatrix();
        java.io.PrintWriter printWriter30 = printWriter10.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray29);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR");
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4", (java.lang.Object[]) doubleArray29, (java.lang.Throwable) mathException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        java.lang.Object[] objArray35 = mathException34.getArguments();
        java.lang.String[] strArray37 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37);
        java.lang.Throwable[] throwableArray39 = mathException38.getSuppressed();
        java.lang.String str40 = mathException38.getPattern();
        java.lang.Throwable[] throwableArray41 = mathException38.getSuppressed();
        mathException34.addSuppressed((java.lang.Throwable) mathException38);
        java.lang.String str43 = mathException34.toString();
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ZXZ" + "'", str40, "ZXZ");
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR" + "'", str43, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR");
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-12804.0d), (-0.30041137025271114d));
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("fr");
        java.util.Locale.Builder builder10 = builder6.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setUnicodeLocaleKeyword("org.apache.commons.math.MathException: x-lvariant-TWN", "org.apache.commons.math.MathException: zxz_FRAN\347AIS");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: org.apache.commons.math.MathException: x-lvariant-TWN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotation5.getAxis();
        double[][] doubleArray8 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((-0.0d), (double) 100, 10.0d, (double) (-1), false);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.applyTo(rotation14);
        double double16 = rotation14.getAngle();
        org.apache.commons.math.geometry.Rotation rotation17 = rotation14.revert();
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation14.getAxis();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.141592653589793d + "'", double16 == 3.141592653589793d);
        org.junit.Assert.assertNotNull(rotation17);
        org.junit.Assert.assertNotNull(vector3D18);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale7.getDisplayLanguage();
        java.lang.String str11 = locale7.getLanguage();
        java.lang.String str12 = locale7.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.print((double) (byte) 1);
        java.io.PrintStream printStream8 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream8.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation17 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray18 = rotation17.getMatrix();
        java.io.PrintStream printStream19 = printStream8.printf("fra", (java.lang.Object[]) doubleArray18);
        java.io.PrintStream printStream20 = printStream1.format("", (java.lang.Object[]) doubleArray18);
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream22, false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter25);
        printWriter26.println('a');
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder33 = builder29.setLanguage("ZXZ");
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder35 = builder29.setLocale(locale34);
        java.lang.Object[] objArray37 = null;
        java.io.PrintWriter printWriter38 = printWriter26.format(locale34, "TWN", objArray37);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("ko_KR");
        java.lang.String str41 = locale34.getDisplayScript(locale40);
        java.io.PrintStream printStream43 = new java.io.PrintStream("ko-KR");
        printStream43.close();
        java.io.PrintWriter printWriter46 = new java.io.PrintWriter((java.io.OutputStream) printStream43, false);
        java.io.PrintWriter printWriter47 = new java.io.PrintWriter((java.io.Writer) printWriter46);
        printWriter47.close();
        java.util.Locale locale50 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter47.println((java.lang.Object) locale50);
        java.util.Set<java.lang.Character> charSet52 = locale50.getExtensionKeys();
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder58 = builder53.setExtension('u', "");
        java.util.Locale.Builder builder60 = builder58.setVariant("");
        java.util.Locale locale61 = builder60.build();
        java.lang.String str62 = locale50.getDisplayName(locale61);
        java.lang.String str63 = locale34.getDisplayName(locale61);
        java.lang.String str64 = locale61.getISO3Language();
        java.lang.Object[] objArray66 = null;
        java.io.PrintStream printStream67 = printStream1.format(locale61, "catalan", objArray66);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.OutputStream) printStream67);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale50.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str62, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "German (Germany)" + "'", str63, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(printStream67);
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray6 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D13, (double) (byte) 100, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D10, vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D18, vector3D19);
        double double21 = vector3D19.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) 10.0f, (double) 10L);
        org.apache.commons.math.geometry.Rotation rotation26 = new org.apache.commons.math.geometry.Rotation(vector3D24, 84.29633443762866d);
        double double27 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D19, vector3D24);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.lang.String str5 = locale0.getDisplayLanguage(locale2);
        java.lang.String str7 = locale0.getExtension('u');
        java.lang.String str8 = locale0.toLanguageTag();
        java.lang.String str9 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "und" + "'", str8, "und");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print((int) ' ');
        printStream1.print('a');
        printStream1.println((float) (short) 10);
        printStream1.close();
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter20.print((long) (short) 100);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter20, true);
        java.io.PrintWriter printWriter26 = printWriter20.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter28 = printWriter26.append(' ');
        printWriter28.print('u');
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        printStream32.close();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream32, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter35);
        char[] charArray39 = new char[] { ' ', 'x' };
        printWriter36.write(charArray39);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.lang.String str44 = locale41.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray52 = rotation51.getMatrix();
        java.io.PrintWriter printWriter53 = printWriter36.format(locale41, "YZY", (java.lang.Object[]) doubleArray52);
        printWriter53.print((-1L));
        java.util.Locale locale56 = java.util.Locale.PRC;
        java.lang.String str57 = locale56.getScript();
        java.lang.String[] strArray62 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray62, (java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray67 = mathException66.getSuppressed();
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray62, (java.lang.Throwable) mathException66);
        java.lang.Throwable[] throwableArray69 = mathException66.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException70 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray69);
        java.lang.Throwable[] throwableArray71 = notARotationMatrixException70.getSuppressed();
        java.io.PrintWriter printWriter72 = printWriter53.printf(locale56, "CHN", (java.lang.Object[]) throwableArray71);
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("\u97d3\u6587)");
        java.lang.String str75 = locale56.getDisplayVariant(locale74);
        java.lang.String str76 = locale56.getDisplayCountry();
        java.lang.String[] strArray81 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray81, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ZXZ", (java.lang.Throwable) mathException84);
        java.lang.Throwable[] throwableArray87 = mathException84.getSuppressed();
        java.io.PrintWriter printWriter88 = printWriter28.printf(locale56, "US", (java.lang.Object[]) throwableArray87);
        java.io.PrintStream printStream89 = printStream1.format("Royaume-Uni", (java.lang.Object[]) throwableArray87);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printWriter26);
        org.junit.Assert.assertNotNull(printWriter28);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , x]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en" + "'", str44, "en");
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(printWriter72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "China" + "'", str76, "China");
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printWriter88);
        org.junit.Assert.assertNotNull(printStream89);
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        printStream1.close();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream18 = new java.io.PrintStream("ko-KR");
        printStream18.close();
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream18, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        printWriter21.println((float) (byte) -1);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter21, true);
        java.lang.String[] strArray28 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter29 = printWriter21.printf("KR", (java.lang.Object[]) strArray28);
        java.io.PrintStream printStream31 = new java.io.PrintStream("ko-KR");
        printStream31.close();
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.OutputStream) printStream31, false);
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.Writer) printWriter34);
        char[] charArray38 = new char[] { ' ', 'x' };
        printWriter35.write(charArray38);
        printWriter21.println(charArray38);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale41.getDisplayScript(locale42);
        java.lang.String str44 = locale42.getVariant();
        java.lang.String[] strArray47 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray47);
        java.io.PrintWriter printWriter49 = printWriter21.printf(locale42, "English", (java.lang.Object[]) strArray47);
        java.lang.String str50 = locale42.getScript();
        java.util.Locale locale51 = locale42.stripExtensions();
        java.util.Locale.Builder builder52 = builder14.setLocale(locale42);
        java.lang.String[] strArray55 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray55, (java.lang.Throwable) mathException57);
        java.io.PrintStream printStream59 = printStream1.printf(locale42, "allemand", (java.lang.Object[]) strArray55);
        java.lang.String str60 = locale42.getISO3Country();
        boolean boolean61 = locale42.hasExtensions();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[ , x]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(printStream59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "TWN" + "'", str60, "TWN");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        printWriter4.println(charArray21);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale25.getVariant();
        java.lang.String[] strArray30 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter32 = printWriter4.printf(locale25, "English", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Locale locale35 = locale34.stripExtensions();
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        printWriter40.println((float) (byte) -1);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter40, true);
        java.lang.String[] strArray47 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter48 = printWriter40.printf("KR", (java.lang.Object[]) strArray47);
        java.io.PrintStream printStream50 = new java.io.PrintStream("ko-KR");
        printStream50.close();
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream50, false);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.Writer) printWriter53);
        char[] charArray57 = new char[] { ' ', 'x' };
        printWriter54.write(charArray57);
        printWriter40.println(charArray57);
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.lang.String str62 = locale60.getDisplayScript(locale61);
        java.lang.String str63 = locale61.getVariant();
        java.lang.String[] strArray66 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66);
        java.io.PrintWriter printWriter68 = printWriter40.printf(locale61, "English", (java.lang.Object[]) strArray66);
        java.lang.String str69 = locale61.getScript();
        java.lang.String str70 = locale34.getDisplayLanguage(locale61);
        printWriter33.print((java.lang.Object) str70);
        printWriter33.print((float) 1);
        java.io.PrintWriter printWriter74 = new java.io.PrintWriter((java.io.Writer) printWriter33);
        java.io.PrintWriter printWriter76 = printWriter74.append((java.lang.CharSequence) "x-lvariant-TWN");
        printWriter74.print('4');
        printWriter74.println((float) ' ');
        java.util.Locale.LanguageRange languageRange83 = new java.util.Locale.LanguageRange("ZXZ", (double) 0L);
        java.lang.String str84 = languageRange83.getRange();
        java.lang.String str85 = languageRange83.getRange();
        java.lang.String str86 = languageRange83.getRange();
        double double87 = languageRange83.getWeight();
        double double88 = languageRange83.getWeight();
        double double89 = languageRange83.getWeight();
        double double90 = languageRange83.getWeight();
        double double91 = languageRange83.getWeight();
        java.lang.String str92 = languageRange83.getRange();
        printWriter74.print((java.lang.Object) str92);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , x]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u97d3\u6587" + "'", str70, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(printWriter76);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "zxz" + "'", str84, "zxz");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "zxz" + "'", str85, "zxz");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "zxz" + "'", str86, "zxz");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "zxz" + "'", str92, "zxz");
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        java.util.Locale locale3 = new java.util.Locale("zxz", "German", "XYZ");
        java.util.Locale locale4 = locale3.stripExtensions();
        boolean boolean5 = locale4.hasExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "zxz_GERMAN_XYZ");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zxz_GERMAN_XYZ");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str1 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Rotation rotation8 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.0d, 0.567725116225552d, (-2000.0d));
        java.lang.String str9 = rotationOrder0.toString();
        org.apache.commons.math.geometry.Vector3D vector3D10 = rotationOrder0.getA2();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ZXZ" + "'", str1, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZXZ" + "'", str9, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D10);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation5.applyInverseTo(rotation21);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation35 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double36 = rotation35.getQ0();
        org.apache.commons.math.geometry.Rotation rotation37 = rotation29.applyInverseTo(rotation35);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D39, (double) (byte) 100, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D47 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D44, (double) (byte) 100, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D41, vector3D46);
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation37.applyTo(vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D50 = rotation37.getAxis();
        org.apache.commons.math.geometry.Rotation rotation51 = rotation37.revert();
        org.apache.commons.math.geometry.Rotation rotation57 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double58 = rotation57.getQ0();
        org.apache.commons.math.geometry.Rotation rotation64 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double65 = rotation64.getQ0();
        org.apache.commons.math.geometry.Rotation rotation66 = rotation57.applyTo(rotation64);
        org.apache.commons.math.geometry.Rotation rotation67 = rotation57.revert();
        org.apache.commons.math.geometry.Rotation rotation73 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation74 = rotation67.applyTo(rotation73);
        org.apache.commons.math.geometry.Rotation rotation75 = rotation51.applyTo(rotation73);
        org.apache.commons.math.geometry.Rotation rotation76 = rotation21.applyTo(rotation75);
        org.apache.commons.math.geometry.Vector3D vector3D77 = rotation76.getAxis();
        org.apache.commons.math.geometry.Rotation rotation78 = rotation76.revert();
        double double79 = rotation78.getQ0();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(rotation37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 52.0d + "'", double58 == 52.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 52.0d + "'", double65 == 52.0d);
        org.junit.Assert.assertNotNull(rotation66);
        org.junit.Assert.assertNotNull(rotation67);
        org.junit.Assert.assertNotNull(rotation74);
        org.junit.Assert.assertNotNull(rotation75);
        org.junit.Assert.assertNotNull(rotation76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(rotation78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1408440.0d + "'", double79 == 1408440.0d);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        printWriter17.println();
        java.io.PrintWriter printWriter20 = printWriter17.append((java.lang.CharSequence) "ZXZ");
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String[] strArray25 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray25, (java.lang.Throwable) mathException28);
        java.io.PrintWriter printWriter30 = printWriter20.format(locale21, "org.apache.commons.math.MathException: zxz (KO_KR)", (java.lang.Object[]) strArray25);
        printWriter30.println();
        java.io.PrintStream printStream33 = new java.io.PrintStream("ko-KR");
        printStream33.close();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream38 = printStream33.format(locale35, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray37);
        java.io.PrintStream printStream40 = new java.io.PrintStream((java.io.OutputStream) printStream33, false);
        java.io.PrintStream printStream42 = printStream33.append('4');
        printStream33.print(10L);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.OutputStream) printStream33);
        java.io.PrintStream printStream47 = printStream33.append((java.lang.CharSequence) "anglais");
        printStream33.print((double) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = locale58.getDisplayLanguage();
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray63 = new java.util.Locale[] { locale53, locale54, locale55, locale56, locale57, locale58, locale60, locale61, locale62 };
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList64, filteringMode66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, strMap68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, strMap70);
        java.util.Collection<java.util.Locale> localeCollection72 = null;
        java.util.Locale locale73 = java.util.Locale.lookup(languageRangeList71, localeCollection72);
        printStream33.print((java.lang.Object) locale73);
        printStream33.println(100);
        printWriter30.println((java.lang.Object) printStream33);
        printStream33.print((-0.5258935709628686d));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(printStream38);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode66.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertNotNull(languageRangeList71);
        org.junit.Assert.assertNull(locale73);
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter6.println('a');
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder13 = builder9.setLanguage("ZXZ");
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder15 = builder9.setLocale(locale14);
        java.lang.Object[] objArray17 = null;
        java.io.PrintWriter printWriter18 = printWriter6.format(locale14, "TWN", objArray17);
        java.lang.String str19 = locale0.getDisplayName(locale14);
        java.lang.String str20 = locale14.getISO3Country();
        java.util.Locale.setDefault(locale14);
        java.util.Locale locale22 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale22.getDisplayLanguage(locale25);
        java.lang.String str28 = locale25.getLanguage();
        java.lang.String str29 = locale25.getDisplayVariant();
        boolean boolean30 = locale14.equals((java.lang.Object) locale25);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(printWriter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinesisch (China)" + "'", str19, "Chinesisch (China)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DEU" + "'", str20, "DEU");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u97d3\u6587" + "'", str27, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zh" + "'", str28, "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, 0.0d, 52.0d, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotation4.getAxis();
        double double6 = rotation4.getQ1();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double19 = rotation18.getQ0();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation12.applyInverseTo(rotation18);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D24, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotation20.applyTo(vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D33 = rotation20.getAxis();
        org.apache.commons.math.geometry.Rotation rotation34 = rotation20.revert();
        org.apache.commons.math.geometry.Rotation rotation40 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double41 = rotation40.getQ0();
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double48 = rotation47.getQ0();
        org.apache.commons.math.geometry.Rotation rotation49 = rotation40.applyTo(rotation47);
        org.apache.commons.math.geometry.Rotation rotation50 = rotation40.revert();
        org.apache.commons.math.geometry.Rotation rotation56 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation57 = rotation50.applyTo(rotation56);
        org.apache.commons.math.geometry.Rotation rotation58 = rotation34.applyTo(rotation56);
        org.apache.commons.math.geometry.Rotation rotation59 = rotation4.applyTo(rotation58);
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotation4.getAxis();
        org.apache.commons.math.geometry.Rotation rotation61 = rotation4.revert();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36558999583837004d + "'", double6 == 0.36558999583837004d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(rotation34);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 52.0d + "'", double48 == 52.0d);
        org.junit.Assert.assertNotNull(rotation49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation57);
        org.junit.Assert.assertNotNull(rotation58);
        org.junit.Assert.assertNotNull(rotation59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(rotation61);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-0.021228800916801634d), (-0.25886627012188185d), 99.5037190209989d, (-0.2576415448910957d), true);
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale10.getVariant();
        printWriter8.print((java.lang.Object) str12);
        printWriter8.print("German");
        printWriter8.close();
        printWriter8.println("KOR");
        printWriter8.print(true);
        java.util.Locale locale23 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Locale.setDefault(category24, locale25);
        java.lang.String str28 = locale23.getDisplayName(locale25);
        java.lang.String str29 = locale23.getDisplayCountry();
        java.lang.String str30 = locale23.getISO3Language();
        java.lang.String str31 = locale23.getLanguage();
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        java.lang.String[] strArray40 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter41 = printWriter38.printf("ko-KR", (java.lang.Object[]) strArray40);
        printWriter41.println(0.0d);
        printWriter41.write(0);
        java.io.PrintWriter printWriter47 = printWriter41.append('4');
        printWriter47.write("German");
        java.lang.String[] strArray53 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray53, (java.lang.Throwable) mathException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("fra", (java.lang.Throwable) mathException56);
        java.lang.Throwable[] throwableArray58 = mathException57.getSuppressed();
        java.io.PrintWriter printWriter59 = printWriter47.printf("german (kor)", (java.lang.Object[]) throwableArray58);
        java.io.PrintWriter printWriter60 = printWriter8.printf(locale23, "US", (java.lang.Object[]) throwableArray58);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u97d3\u6587)" + "'", str28, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u97d3\u6587" + "'", str29, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(printWriter60);
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("usa-x-lvariant-de", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale5 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale.setDefault(category6, locale7);
        java.lang.String str10 = locale5.getDisplayName(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.lang.String str12 = locale2.getDisplayLanguage(locale7);
        printStream1.println((java.lang.Object) locale7);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "GB");
        boolean boolean16 = printStream15.checkError();
        printStream15.print('a');
        printStream15.write((int) (short) -1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u97d3\u6587)" + "'", str10, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English" + "'", str11, "English");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English" + "'", str12, "English");
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print("XYZ");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter17.print((double) (byte) 100);
        printWriter17.println();
        printWriter17.println('#');
        java.io.PrintWriter printWriter25 = printWriter17.append('#');
        java.io.PrintStream printStream28 = new java.io.PrintStream("ko-KR");
        printStream28.close();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String[] strArray32 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream33 = printStream28.format(locale30, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray32);
        java.io.PrintStream printStream35 = new java.io.PrintStream((java.io.OutputStream) printStream28, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.OutputStream) printStream35);
        printWriter36.print("\u97d3\u6587");
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder44 = builder39.setExtension('u', "");
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale48 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category49 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale.setDefault(category49, locale50);
        java.lang.String str53 = locale48.getDisplayName(locale50);
        java.lang.String str54 = locale50.getDisplayName();
        java.lang.String str55 = locale45.getDisplayLanguage(locale50);
        java.util.Locale.Builder builder56 = builder39.setLocale(locale45);
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.lang.String str58 = locale45.getDisplayVariant(locale57);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray61 = mathException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = mathException60.getSuppressed();
        java.io.PrintWriter printWriter63 = printWriter36.printf(locale45, "\ub3c5\uc77c\uc5b4", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter64 = printWriter17.printf("XZY", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter65 = printWriter11.format("\u5fb7\u6587", (java.lang.Object[]) throwableArray62);
        java.io.PrintWriter printWriter67 = printWriter11.append((java.lang.CharSequence) "\u97d3\u6587");
        printWriter11.print('#');
        printWriter11.println("tw_US");
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(printStream33);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category49 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category49.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u97d3\u6587)" + "'", str53, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English" + "'", str54, "English");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English" + "'", str55, "English");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(printWriter63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printWriter67);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        org.apache.commons.math.geometry.Vector3D vector3D4 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D4, (double) (byte) 100, vector3D6);
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D13 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D6, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D22, (double) (byte) 100, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D24, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D11, (double) (byte) 1, vector3D19, (double) (short) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D33 = vector3D11.negate();
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D36 = vector3D11.scalarMultiply((double) 'u');
        double double37 = vector3D11.getY();
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D51 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D44, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D54, (double) (byte) 100, vector3D56);
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D60, (double) (byte) 100, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D62, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D49, (double) (byte) 1, vector3D57, (double) (short) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D71 = vector3D49.negate();
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D49);
        double double73 = vector3D49.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D75 = vector3D49.scalarMultiply((double) 'x');
        org.apache.commons.math.geometry.RotationOrder rotationOrder77 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation81 = new org.apache.commons.math.geometry.Rotation(rotationOrder77, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D82 = rotationOrder77.getA1();
        double double83 = vector3D82.getY();
        org.apache.commons.math.geometry.Vector3D vector3D84 = new org.apache.commons.math.geometry.Vector3D(9610.932890332206d, vector3D11, 623129.1985591752d, vector3D49, (double) 'a', vector3D82);
        org.apache.commons.math.geometry.Rotation rotation86 = new org.apache.commons.math.geometry.Rotation(vector3D84, 0.9481327383354655d);
        double[][] doubleArray87 = rotation86.getMatrix();
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(rotationOrder77);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray87);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("de-DE");
        printWriter1.close();
        printWriter1.print('#');
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale.setDefault(category9, locale11);
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.lang.String str18 = locale16.getExtension('a');
        java.lang.String str19 = locale11.getDisplayScript(locale16);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder25 = builder20.setExtension('u', "");
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale29 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        boolean boolean32 = locale31.hasExtensions();
        java.util.Locale.setDefault(category30, locale31);
        java.lang.String str34 = locale29.getDisplayName(locale31);
        java.lang.String str35 = locale31.getDisplayName();
        java.lang.String str36 = locale26.getDisplayLanguage(locale31);
        java.util.Locale.Builder builder37 = builder20.setLocale(locale26);
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale26.getDisplayVariant(locale38);
        java.lang.String str40 = locale38.getISO3Country();
        java.lang.String str41 = locale38.getISO3Language();
        java.lang.String str42 = locale38.getDisplayVariant();
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.lang.String str45 = locale43.getDisplayCountry(locale44);
        java.lang.String str46 = locale43.getLanguage();
        java.lang.String str47 = locale38.getDisplayLanguage(locale43);
        java.lang.String str48 = locale16.getDisplayVariant(locale43);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u97d3\u6587)" + "'", str34, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English" + "'", str35, "English");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English" + "'", str36, "English");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "jpn" + "'", str41, "jpn");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "en" + "'", str46, "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Japanese" + "'", str47, "Japanese");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale.setDefault(category1, locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.lang.String str9 = locale3.getDisplayScript(locale8);
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale3.getDisplayCountry(locale10);
        java.lang.String str13 = locale3.getVariant();
        java.util.Locale locale15 = new java.util.Locale("ko-KR");
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = locale3.getDisplayName(locale15);
        java.lang.String str18 = locale15.getVariant();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = locale19.getISO3Language();
        boolean boolean21 = locale19.hasExtensions();
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale.setDefault(category23, locale25);
        java.util.Locale.setDefault(category22, locale25);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale30);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = locale32.getDisplayScript(locale33);
        java.lang.String str35 = locale30.getDisplayLanguage(locale33);
        java.lang.String str37 = locale30.getExtension('a');
        java.util.Set<java.lang.String> strSet38 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category22, locale30);
        java.util.Set<java.lang.String> strSet40 = locale30.getUnicodeLocaleKeys();
        java.lang.String str41 = locale30.getISO3Country();
        java.lang.String str42 = locale19.getDisplayName(locale30);
        java.lang.String str43 = locale15.getDisplayCountry(locale19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = locale15.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale15.toString(), "ko-kr");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ita" + "'", str20, "ita");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u97d3\u6587" + "'", str35, "\u97d3\u6587");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "KOR" + "'", str41, "KOR");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)" + "'", str42, "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        java.lang.String[] strArray4 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray4, (java.lang.Throwable) mathException6);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException8 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray4);
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream16 = printStream11.format(locale13, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray15);
        java.io.PrintStream printStream18 = new java.io.PrintStream((java.io.OutputStream) printStream11, false);
        printStream11.println(10.0f);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.OutputStream) printStream23, false);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter26);
        printWriter27.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation36 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray37 = rotation36.getMatrix();
        java.io.PrintWriter printWriter38 = printWriter27.format("en", (java.lang.Object[]) doubleArray37);
        java.io.PrintStream printStream39 = printStream11.printf("YZY", (java.lang.Object[]) doubleArray37);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("KOR", (java.lang.Object[]) doubleArray37);
        notARotationMatrixException8.addSuppressed((java.lang.Throwable) mathException40);
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("Canada", (java.lang.Throwable) notARotationMatrixException8);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        java.lang.Object[] objArray46 = mathException44.getArguments();
        java.lang.String[] strArray49 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray49, (java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray54 = mathException53.getSuppressed();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray49, (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("de-DE", objArray46, (java.lang.Throwable) mathException56);
        mathException42.addSuppressed((java.lang.Throwable) mathException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("Germania", (java.lang.Throwable) mathException42);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.util.Locale locale16 = java.util.Locale.UK;
        java.lang.String[] strArray18 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream19 = printStream14.format(locale16, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray18);
        java.io.PrintStream printStream21 = new java.io.PrintStream((java.io.OutputStream) printStream14, false);
        printStream14.println(10.0f);
        java.io.PrintStream printStream26 = new java.io.PrintStream("ko-KR");
        printStream26.close();
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.OutputStream) printStream26, false);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter29);
        printWriter30.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray40 = rotation39.getMatrix();
        java.io.PrintWriter printWriter41 = printWriter30.format("en", (java.lang.Object[]) doubleArray40);
        java.io.PrintStream printStream42 = printStream14.printf("YZY", (java.lang.Object[]) doubleArray40);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray40);
        java.lang.String[] strArray46 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray46, (java.lang.Throwable) mathException48);
        java.lang.String[] strArray53 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray53, (java.lang.Throwable) mathException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray58 = mathException57.getSuppressed();
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray53, (java.lang.Throwable) mathException57);
        java.lang.Throwable[] throwableArray60 = mathException57.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException61 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray60);
        mathException49.addSuppressed((java.lang.Throwable) notARotationMatrixException61);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("TWN", (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ja", (java.lang.Object[]) doubleArray40, (java.lang.Throwable) mathException49);
        java.io.PrintWriter printWriter65 = printWriter5.printf("ZXZ", (java.lang.Object[]) doubleArray40);
        java.io.PrintWriter printWriter67 = printWriter5.append((java.lang.CharSequence) "kor_DE");
        java.io.PrintWriter printWriter69 = new java.io.PrintWriter((java.io.Writer) printWriter67, true);
        printWriter67.println(' ');
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(printWriter41);
        org.junit.Assert.assertNotNull(printStream42);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(printWriter65);
        org.junit.Assert.assertNotNull(printWriter67);
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        double double12 = rotation5.getAngle();
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D17, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D35, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D22, (double) (byte) 1, vector3D30, (double) (short) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation5.applyTo(vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.plusI;
        org.apache.commons.math.geometry.Rotation rotation52 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double53 = rotation52.getQ0();
        org.apache.commons.math.geometry.Rotation rotation59 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double60 = rotation59.getQ0();
        org.apache.commons.math.geometry.Rotation rotation61 = rotation52.applyTo(rotation59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotation52.applyInverseTo(vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D64 = vector3D45.add(52.0d, vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D65 = vector3D44.subtract(vector3D45);
        double double66 = vector3D65.getX();
        org.apache.commons.math.geometry.Vector3D vector3D67 = vector3D65.orthogonal();
        org.apache.commons.math.geometry.RotationOrder rotationOrder68 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str69 = rotationOrder68.toString();
        org.apache.commons.math.geometry.Vector3D vector3D70 = rotationOrder68.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D71 = rotationOrder68.getA2();
        org.apache.commons.math.geometry.Rotation rotation75 = new org.apache.commons.math.geometry.Rotation(rotationOrder68, 0.691922190697517d, 0.0d, Double.NaN);
        org.apache.commons.math.geometry.Vector3D vector3D76 = rotationOrder68.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D77 = vector3D76.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D65, vector3D76);
        double double79 = vector3D78.getX();
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 52.0d + "'", double53 == 52.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 52.0d + "'", double60 == 52.0d);
        org.junit.Assert.assertNotNull(rotation61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(rotationOrder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "YZY" + "'", str69, "YZY");
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.lang.String[] strArray6 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream7 = printStream2.format(locale4, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray6);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream2, false);
        printStream2.println(10.0f);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter18.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray28 = rotation27.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter18.format("en", (java.lang.Object[]) doubleArray28);
        java.io.PrintStream printStream30 = printStream2.printf("YZY", (java.lang.Object[]) doubleArray28);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("\u4e2d\u56fd\u8a9e", (java.lang.Object[]) doubleArray28, throwable31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException32);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printStream30);
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-5.440211108893697d), (double) ' ');
        org.apache.commons.math.geometry.Vector3D vector3D7 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D12, (double) (byte) 100, vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D14, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D24, (double) (byte) 100, vector3D26);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D35, (double) (byte) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D32, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D19, (double) (byte) 1, vector3D27, (double) (short) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D41 = vector3D19.negate();
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D19);
        double double43 = vector3D19.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D44 = vector3D7.subtract((double) (short) -1, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D44);
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation(vector3D2, vector3D45);
        double double47 = rotation46.getAngle();
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2.7118128643682784d + "'", double47 == 2.7118128643682784d);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D3, (double) (byte) 100, vector3D5);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D5, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D5, (double) 0.0f, vector3D17);
        double double20 = vector3D19.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D27, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D37, (double) (byte) 100, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D45, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D32, (double) (byte) 1, vector3D40, (double) (short) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D54 = vector3D32.negate();
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D(52.0d, vector3D19, (double) 100L, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D();
        org.apache.commons.math.geometry.Vector3D vector3D58 = vector3D55.subtract(vector3D57);
        double double59 = vector3D57.getX();
        org.apache.commons.math.geometry.Vector3D vector3D60 = vector3D57.negate();
        org.apache.commons.math.geometry.Vector3D vector3D61 = vector3D57.negate();
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D21, (double) (byte) 100, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D18, vector3D23);
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotation5.applyInverseTo(vector3D18);
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double33 = rotation32.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double40 = rotation39.getQ0();
        org.apache.commons.math.geometry.Rotation rotation41 = rotation32.applyTo(rotation39);
        org.apache.commons.math.geometry.Rotation rotation42 = rotation32.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder43 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation(rotationOrder43, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation48 = rotation42.applyTo(rotation47);
        double double49 = rotation42.getAngle();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation5.applyInverseTo(rotation42);
        double double51 = rotation50.getQ3();
        org.apache.commons.math.geometry.Rotation rotation57 = new org.apache.commons.math.geometry.Rotation((double) 0L, 3.141592653589793d, (-3.141592653589793d), (double) (-1L), false);
        org.apache.commons.math.geometry.Rotation rotation63 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotation63.applyTo(vector3D65);
        double double70 = rotation63.getAngle();
        double double71 = rotation63.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D82 = vector3D74.subtract((double) 10L, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D83 = new org.apache.commons.math.geometry.Vector3D((double) 1L, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D84 = rotation63.applyTo(vector3D83);
        org.apache.commons.math.geometry.Rotation rotation85 = rotation57.applyInverseTo(rotation63);
        org.apache.commons.math.geometry.Rotation rotation86 = rotation50.applyTo(rotation57);
        double double87 = rotation86.getQ2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertNotNull(rotation41);
        org.junit.Assert.assertNotNull(rotation42);
        org.junit.Assert.assertNotNull(rotationOrder43);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1040.0d) + "'", double51 == (-1040.0d));
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(rotation85);
        org.junit.Assert.assertNotNull(rotation86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 36902.475625683495d + "'", double87 == 36902.475625683495d);
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        org.apache.commons.math.geometry.Rotation rotation7 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double8 = rotation7.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double15 = rotation14.getQ0();
        org.apache.commons.math.geometry.Rotation rotation16 = rotation7.applyTo(rotation14);
        org.apache.commons.math.geometry.Rotation rotation17 = rotation7.revert();
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double24 = rotation23.getQ0();
        org.apache.commons.math.geometry.Rotation rotation25 = rotation7.applyInverseTo(rotation23);
        org.apache.commons.math.geometry.RotationOrder rotationOrder26 = org.apache.commons.math.geometry.RotationOrder.YXZ;
        double[] doubleArray27 = rotation25.getAngles(rotationOrder26);
        org.apache.commons.math.geometry.Rotation rotation28 = rotation25.revert();
        double[][] doubleArray29 = rotation28.getMatrix();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("CAN", (java.lang.Object[]) doubleArray29);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException31 = new org.apache.commons.math.geometry.NotARotationMatrixException("cor\351en (Cor\351e du Sud)", (java.lang.Object[]) doubleArray29);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertNotNull(rotation17);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertNotNull(rotation25);
        org.junit.Assert.assertNotNull(rotationOrder26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(doubleArray29);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("XZY");
        java.util.Locale locale2 = java.util.Locale.ENGLISH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.lang.String str4 = locale2.getDisplayCountry(locale3);
        java.util.Locale.setDefault(locale3);
        java.util.Set<java.lang.Character> charSet6 = locale3.getExtensionKeys();
        java.lang.String str7 = locale3.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet8 = locale3.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("ja", strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList31, filteringMode35);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder41 = builder37.setLanguage("ZXZ");
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder43 = builder37.setLocale(locale42);
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder45 = builder37.setLocale(locale44);
        java.lang.String str46 = locale44.getDisplayCountry();
        java.util.Set<java.lang.String> strSet47 = locale44.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags(languageRangeList12, (java.util.Collection<java.lang.String>) strSet47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList50, strMap51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap53 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList52, strMap53);
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder55.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder59 = builder55.setLanguage("ZXZ");
        java.util.Locale.Builder builder60 = builder55.clearExtensions();
        java.util.Locale.Builder builder61 = builder55.clear();
        java.util.Locale.Builder builder63 = builder61.setScript("");
        java.util.Locale.Builder builder65 = builder61.setVariant("");
        java.util.Locale locale66 = builder61.build();
        java.util.Locale locale67 = locale66.stripExtensions();
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("fran\347ais");
        java.lang.String str70 = locale69.getDisplayCountry();
        java.util.Locale.setDefault(locale69);
        java.lang.String str72 = locale67.getDisplayScript(locale69);
        java.util.Set<java.lang.String> strSet73 = locale69.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList52, (java.util.Collection<java.lang.String>) strSet73);
        java.lang.String str75 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList74);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fran\347ais" + "'", str7, "fran\347ais");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode35.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Canada" + "'", str46, "Canada");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        org.apache.commons.math.geometry.Vector3D vector3D5 = new org.apache.commons.math.geometry.Vector3D(0.0d, (double) 'x', 9610.932890332206d);
        org.apache.commons.math.geometry.Vector3D vector3D7 = vector3D5.scalarMultiply(1040.0d);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D(1.7607846147136124d, (double) (byte) -1);
        org.apache.commons.math.geometry.Rotation rotation19 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double20 = rotation19.getQ1();
        double double21 = rotation19.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D23 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D23, (double) (byte) 100, vector3D25);
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D31 = vector3D23.subtract((double) 10L, vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotation19.applyInverseTo(vector3D30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = vector3D12.subtract(1.7607846147136124d, vector3D30);
        org.apache.commons.math.geometry.RotationOrder rotationOrder36 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str37 = rotationOrder36.toString();
        org.apache.commons.math.geometry.Vector3D vector3D38 = rotationOrder36.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D(0.4705227400680958d, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) 'a', vector3D12, (-52.0d), vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) 100, vector3D5, 1.7607846147136124d, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D42 = vector3D40.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D(0.7720755017504471d, vector3D42);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(rotationOrder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ZXZ" + "'", str37, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D42);
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double7 = rotation6.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double14 = rotation13.getQ0();
        org.apache.commons.math.geometry.Rotation rotation15 = rotation6.applyTo(rotation13);
        org.apache.commons.math.geometry.Rotation rotation16 = rotation6.revert();
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation24 = rotation6.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.Rotation rotation30 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double31 = rotation30.getQ0();
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double38 = rotation37.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = rotation30.applyTo(rotation37);
        org.apache.commons.math.geometry.Rotation rotation40 = rotation30.revert();
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double47 = rotation46.getQ0();
        org.apache.commons.math.geometry.Rotation rotation48 = rotation30.applyInverseTo(rotation46);
        double double49 = rotation48.getAngle();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation24.applyInverseTo(rotation48);
        org.apache.commons.math.geometry.Rotation rotation56 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double57 = rotation56.getQ1();
        double double58 = rotation56.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D60, (double) (byte) 100, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D67 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D68 = vector3D60.subtract((double) 10L, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotation56.applyInverseTo(vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = vector3D69.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D71 = rotation50.applyInverseTo(vector3D70);
        double[][] doubleArray72 = rotation50.getMatrix();
        java.lang.String[] strArray77 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException80);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException82 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray77);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException83 = new org.apache.commons.math.geometry.NotARotationMatrixException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray72, (java.lang.Throwable) notARotationMatrixException83);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("United Kingdom");
        java.lang.Throwable throwable87 = null;
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException(throwable87);
        java.lang.String[] strArray90 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray90);
        mathException88.addSuppressed((java.lang.Throwable) mathException91);
        java.lang.Throwable[] throwableArray93 = mathException91.getSuppressed();
        mathException86.addSuppressed((java.lang.Throwable) mathException91);
        mathException84.addSuppressed((java.lang.Throwable) mathException91);
        java.lang.Throwable[] throwableArray96 = mathException84.getSuppressed();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 52.0d + "'", double58 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = rotation5.applyInverseTo(rotation11);
        org.apache.commons.math.geometry.Rotation rotation19 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double26 = rotation25.getQ0();
        org.apache.commons.math.geometry.Rotation rotation27 = rotation19.applyInverseTo(rotation25);
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D34, (double) (byte) 100, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D31, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D39 = rotation27.applyTo(vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = rotation13.applyTo(vector3D38);
        double double41 = rotation13.getQ3();
        org.apache.commons.math.geometry.RotationOrder rotationOrder42 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D43 = rotationOrder42.getA1();
        double[] doubleArray44 = rotation13.getAngles(rotationOrder42);
        org.apache.commons.math.geometry.Vector3D vector3D45 = rotationOrder42.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotationOrder42.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D47 = rotationOrder42.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotationOrder42.getA2();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(rotation13);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("germany");
        java.util.Locale.setDefault(locale1);
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleAttributes();
        java.util.Locale locale9 = new java.util.Locale("eng", "org.apache.commons.math.MathException");
        java.lang.String str10 = locale4.getDisplayScript(locale9);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale9.getDisplayLanguage(locale11);
        java.lang.String str14 = locale11.getScript();
        java.lang.String str15 = locale1.getDisplayCountry(locale11);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale locale19 = builder18.build();
        java.lang.String str20 = locale19.getScript();
        java.lang.String str21 = locale1.getDisplayScript(locale19);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "germany");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "germany");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals(locale9.toString(), "eng_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh-CN" + "'", str12, "zh-CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u82f1\u6587" + "'", str13, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        java.io.PrintStream printStream1 = new java.io.PrintStream("org.apache.commons.math.geometry.NotARotationMatrixException: YZX");
        printStream1.println(100.0f);
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String[] strArray9 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream10 = printStream5.format(locale7, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray9);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream5, false);
        java.io.PrintStream printStream14 = printStream5.append('4');
        printStream5.print(10L);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream5);
        java.io.PrintStream printStream19 = printStream5.append((java.lang.CharSequence) "anglais");
        printStream5.print((float) 100L);
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream28 = printStream23.format(locale25, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream23, false);
        printStream23.println(10.0f);
        java.io.PrintStream printStream35 = new java.io.PrintStream("ko-KR");
        printStream35.close();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream35, false);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.Writer) printWriter38);
        printWriter39.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray49 = rotation48.getMatrix();
        java.io.PrintWriter printWriter50 = printWriter39.format("en", (java.lang.Object[]) doubleArray49);
        java.io.PrintStream printStream51 = printStream23.printf("YZY", (java.lang.Object[]) doubleArray49);
        java.io.PrintStream printStream52 = new java.io.PrintStream((java.io.OutputStream) printStream51);
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) -1 };
        printStream51.write(byteArray55);
        printStream5.write(byteArray55, (int) (short) 10, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray55, (int) 'x', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream14);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, -1]");
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.util.Locale locale4 = java.util.Locale.UK;
        java.lang.String[] strArray6 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream7 = printStream2.format(locale4, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray6);
        java.io.PrintStream printStream9 = new java.io.PrintStream((java.io.OutputStream) printStream2, false);
        printStream2.println(10.0f);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter18.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray28 = rotation27.getMatrix();
        java.io.PrintWriter printWriter29 = printWriter18.format("en", (java.lang.Object[]) doubleArray28);
        java.io.PrintStream printStream30 = printStream2.printf("YZY", (java.lang.Object[]) doubleArray28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray28);
        java.lang.String[] strArray33 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray33, (java.lang.Throwable) mathException35);
        java.lang.String[] strArray40 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray40, (java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray40, (java.lang.Throwable) mathException44);
        java.lang.Throwable[] throwableArray47 = mathException44.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException48 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray47);
        mathException36.addSuppressed((java.lang.Throwable) notARotationMatrixException48);
        mathException31.addSuppressed((java.lang.Throwable) notARotationMatrixException48);
        java.lang.Object[] objArray51 = notARotationMatrixException48.getArguments();
        java.lang.Object[] objArray52 = notARotationMatrixException48.getArguments();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(printWriter29);
        org.junit.Assert.assertNotNull(printStream30);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D6 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D3, (double) (byte) 100, vector3D5);
        org.apache.commons.math.geometry.Vector3D vector3D8 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D8, (double) (byte) 100, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D5, vector3D10);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D5, (double) 0.0f, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D21 = vector3D19.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D23 = vector3D19.scalarMultiply((double) 'x');
        org.apache.commons.math.geometry.RotationOrder rotationOrder26 = org.apache.commons.math.geometry.RotationOrder.YXY;
        org.apache.commons.math.geometry.Vector3D vector3D27 = rotationOrder26.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D36, (double) (byte) 100, vector3D38);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D33, vector3D38);
        org.apache.commons.math.geometry.Rotation rotation47 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray48 = rotation47.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D53 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D50, (double) (byte) 100, vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D55, (double) (byte) 100, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D52, vector3D57);
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotation47.applyInverseTo(vector3D52);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D60, vector3D61);
        org.apache.commons.math.geometry.Rotation rotation69 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D71, (double) (byte) 100, vector3D73);
        org.apache.commons.math.geometry.Vector3D vector3D75 = rotation69.applyTo(vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D76 = vector3D71.negate();
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        double double79 = vector3D78.getY();
        org.apache.commons.math.geometry.Vector3D vector3D80 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D33, (double) ' ', vector3D60, (double) (-1.0f), vector3D76, (double) 10.0f, vector3D78);
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (short) 1, vector3D27, (-0.6655420184408231d), vector3D76);
        double double82 = vector3D81.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D83 = new org.apache.commons.math.geometry.Vector3D((-0.4486833917904329d), vector3D23, 34.58376452852547d, vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D85 = vector3D83.scalarMultiply(120.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(rotationOrder26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D85);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder8.setRegion("");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getVariant();
        java.util.Locale.Builder builder15 = builder10.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.lang.String str17 = locale16.getDisplayLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayLanguage();
        java.util.Locale locale21 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale25 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Locale.setDefault(category26, locale27);
        java.lang.String str30 = locale25.getDisplayName(locale27);
        java.lang.String str31 = locale27.getDisplayName();
        java.lang.String str32 = locale27.getISO3Language();
        java.lang.String str33 = locale21.getDisplayVariant(locale27);
        java.lang.String str34 = locale16.getDisplayVariant(locale27);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese" + "'", str19, "Chinese");
        org.junit.Assert.assertEquals(locale21.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet22);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u97d3\u6587)" + "'", str30, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "eng" + "'", str32, "eng");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: USA");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: org.apache.commons.math.MathException: org.apache.commons.math.MathException: USA");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder8.setRegion("");
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayScript(locale12);
        java.lang.String str14 = locale12.getVariant();
        java.util.Locale.Builder builder15 = builder10.setLocale(locale12);
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.lang.String str22 = locale17.getDisplayLanguage(locale19);
        java.lang.String str24 = locale17.getExtension('u');
        java.util.Locale.Builder builder25 = builder15.setLocale(locale17);
        java.util.Locale.Builder builder27 = builder25.setRegion("GB");
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale.Builder builder29 = builder28.clearExtensions();
        java.util.Locale.Builder builder30 = builder28.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(52.0d, Double.NaN, (double) 'x');
        org.apache.commons.math.geometry.RotationOrder rotationOrder5 = org.apache.commons.math.geometry.RotationOrder.XZY;
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder5.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder5.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D8 = vector3D7.negate();
        org.apache.commons.math.geometry.Vector3D vector3D10 = vector3D8.scalarMultiply(0.3355849664247075d);
        org.apache.commons.math.geometry.Rotation rotation17 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D19, (double) (byte) 100, vector3D21);
        org.apache.commons.math.geometry.Vector3D vector3D23 = rotation17.applyTo(vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D24 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D8, vector3D24);
        org.apache.commons.math.geometry.Vector3D vector3D26 = vector3D3.add((-0.03306189853298793d), vector3D8);
        org.junit.Assert.assertNotNull(rotationOrder5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        java.util.Locale locale2 = new java.util.Locale("\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)", "korean (EN-CA (TWN,KO-KR))");
        org.junit.Assert.assertEquals(locale2.toString(), "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)_KOREAN (EN-CA (TWN,KO-KR))");
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        java.util.Locale locale3 = new java.util.Locale("anglais (Canada)", "org.apache.commons.math.MathException: ZXY", "en-ca (TWN,ko-KR)");
        org.junit.Assert.assertEquals(locale3.toString(), "anglais (canada)_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXY_en-ca (TWN,ko-KR)");
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print(false);
        printWriter5.print((double) (-1));
        printWriter5.println(0.36558999583837004d);
        java.io.PrintWriter printWriter15 = printWriter5.append('#');
        org.junit.Assert.assertNotNull(printWriter15);
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        double double12 = rotation5.getAngle();
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D15, (double) (byte) 100, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D22 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D20, (double) (byte) 100, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D24 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D17, vector3D22);
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D35, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D22, (double) (byte) 1, vector3D30, (double) (short) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D44 = rotation5.applyTo(vector3D40);
        double double45 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double52 = rotation51.getQ0();
        org.apache.commons.math.geometry.Rotation rotation58 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double59 = rotation58.getQ0();
        org.apache.commons.math.geometry.Rotation rotation60 = rotation51.applyTo(rotation58);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotation51.applyInverseTo(vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotation5.applyTo(vector3D62);
        org.apache.commons.math.geometry.Rotation rotation65 = new org.apache.commons.math.geometry.Rotation(vector3D63, 2.9778714378213818d);
        double double66 = vector3D63.getDelta();
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 52.0d + "'", double59 == 52.0d);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.2282243046711085d) + "'", double66 == (-1.2282243046711085d));
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Canada");
        java.util.Locale.Builder builder18 = builder0.setLanguage("it");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        printWriter24.println('a');
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter24.format(locale32, "TWN", objArray35);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.lang.String str38 = locale32.getDisplayCountry();
        java.util.Locale.Builder builder39 = builder18.setLocale(locale32);
        java.util.Locale.Builder builder40 = builder18.clearExtensions();
        java.util.Locale.Builder builder43 = builder40.setExtension('a', "ko-KR");
        java.util.Locale.Builder builder46 = builder43.setExtension('x', "ZXY");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Germany" + "'", str38, "Germany");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        java.lang.String str10 = locale5.getDisplayLanguage(locale7);
        java.lang.String str11 = locale7.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.lang.String str13 = locale7.getDisplayVariant(locale12);
        java.lang.String str14 = locale7.getDisplayName();
        java.util.Locale.Builder builder15 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder16 = builder4.clearExtensions();
        java.util.Locale locale17 = builder16.build();
        java.util.Locale.Builder builder18 = builder16.clear();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder23 = builder21.removeUnicodeLocaleAttribute("YZY");
        java.io.PrintStream printStream25 = new java.io.PrintStream("ko-KR");
        printStream25.close();
        java.io.PrintWriter printWriter28 = new java.io.PrintWriter((java.io.OutputStream) printStream25, false);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter28);
        printWriter28.println((float) (byte) -1);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter28, true);
        java.lang.String[] strArray35 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter36 = printWriter28.printf("KR", (java.lang.Object[]) strArray35);
        java.io.PrintStream printStream38 = new java.io.PrintStream("ko-KR");
        printStream38.close();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream38, false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        char[] charArray45 = new char[] { ' ', 'x' };
        printWriter42.write(charArray45);
        printWriter28.println(charArray45);
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.lang.String str50 = locale48.getDisplayScript(locale49);
        java.lang.String str51 = locale49.getVariant();
        java.lang.String[] strArray54 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray54);
        java.io.PrintWriter printWriter56 = printWriter28.printf(locale49, "English", (java.lang.Object[]) strArray54);
        java.lang.String str57 = locale49.getScript();
        java.util.Locale locale58 = locale49.stripExtensions();
        java.util.Locale.Builder builder59 = builder21.setLocale(locale49);
        java.util.Locale.Builder builder60 = builder21.clearExtensions();
        java.util.Locale.Builder builder62 = builder60.addUnicodeLocaleAttribute("Taiwan");
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category65 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.lang.String str67 = locale66.getDisplayLanguage();
        java.util.Locale.setDefault(category65, locale66);
        java.util.Locale.setDefault(category64, locale66);
        java.lang.String str70 = locale63.getDisplayVariant(locale66);
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.lang.String str73 = locale66.getDisplayCountry(locale71);
        boolean boolean74 = locale66.hasExtensions();
        java.lang.String str75 = locale66.getISO3Language();
        java.util.Locale.setDefault(locale66);
        java.util.Locale.Builder builder77 = builder62.setLocale(locale66);
        java.util.Locale locale78 = locale66.stripExtensions();
        java.util.Locale.Builder builder79 = builder18.setLocale(locale78);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "French" + "'", str11, "French");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "French" + "'", str14, "French");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ , x]");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(printWriter56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.FORMAT + "'", category64.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category65 + "' != '" + java.util.Locale.Category.FORMAT + "'", category65.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder9 = builder7.setVariant("French");
        java.util.Locale.Builder builder10 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder7.setExtension('u', "italien (Italie)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: italien (Italie) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D(0.9314590104177871d, (-0.9545181219542895d), (double) 0);
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("ko-kr");
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("germany");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder12.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder13.setUnicodeLocaleKeyword("South Korea", "x-lvariant-ZXZ");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: South Korea [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("ko-KR");
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "ko_KR");
        java.util.Locale.Builder builder9 = builder4.setVariant("");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder11.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        printStream1.print(true);
        java.io.PrintStream printStream9 = printStream1.append('#');
        java.io.PrintWriter printWriter10 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printWriter10.println(0.0f);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.lang.String str26 = locale23.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray34 = rotation33.getMatrix();
        java.io.PrintWriter printWriter35 = printWriter18.format(locale23, "YZY", (java.lang.Object[]) doubleArray34);
        printWriter35.print((-1L));
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.lang.String str39 = locale38.getScript();
        java.lang.String[] strArray44 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray44, (java.lang.Throwable) mathException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray49 = mathException48.getSuppressed();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray44, (java.lang.Throwable) mathException48);
        java.lang.Throwable[] throwableArray51 = mathException48.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException52 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray51);
        java.lang.Throwable[] throwableArray53 = notARotationMatrixException52.getSuppressed();
        java.io.PrintWriter printWriter54 = printWriter35.printf(locale38, "CHN", (java.lang.Object[]) throwableArray53);
        printWriter54.println();
        java.io.PrintWriter printWriter57 = printWriter54.append('x');
        printWriter10.print((java.lang.Object) printWriter54);
        printWriter10.println("CHINESE (CHINA)");
        org.junit.Assert.assertNotNull(printStream9);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "en" + "'", str26, "en");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(printWriter35);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printWriter54);
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale10.getVariant();
        printWriter8.print((java.lang.Object) str12);
        boolean boolean14 = printWriter8.checkError();
        printWriter8.println((long) '4');
        printWriter8.print("XYX");
        printWriter8.print((-553.9714827914696d));
        boolean boolean21 = printWriter8.checkError();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        printWriter8.println(0.0d);
        java.io.PrintWriter printWriter12 = new java.io.PrintWriter((java.io.Writer) printWriter8, true);
        printWriter8.print((int) (short) 100);
        printWriter8.close();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream10.print((long) (byte) 0);
        printStream10.println((double) (-1L));
        boolean boolean15 = printStream10.checkError();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream19 = printStream10.append((java.lang.CharSequence) "org.apache.commons.math.MathException: ITA", (int) ' ', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -33");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.write((int) (byte) 1);
        printWriter5.print((int) (short) 0);
        printWriter5.println("org.apache.commons.math.MathException: ZXZ");
        printWriter5.println('4');
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        java.lang.Object[] objArray21 = mathException19.getArguments();
        java.io.PrintWriter printWriter22 = printWriter5.printf("\u97d3\u6587)", objArray21);
        printWriter22.write("org.apache.commons.math.MathException: ja");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(printWriter22);
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray7 = rotation6.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D14, (double) (byte) 100, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D11, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotation6.applyInverseTo(vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D19, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D22 = vector3D19.negate();
        double double23 = vector3D19.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D28, (double) 0L, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D39 = new org.apache.commons.math.geometry.Vector3D(52.0d, Double.NaN, (double) 'x');
        org.apache.commons.math.geometry.Vector3D vector3D40 = vector3D34.subtract(0.9999500037496876d, vector3D39);
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D(152.9866275920405d, vector3D19, (double) 1, vector3D39);
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation(vector3D41, 52.0d);
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        double double51 = vector3D50.getY();
        org.apache.commons.math.geometry.Vector3D vector3D52 = rotation49.applyTo(vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D57 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D(10.0d, (double) (-1.0f), (double) (-1L));
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) 10, vector3D57, (double) 0L, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((-0.0d), (-1.0d), (double) (-1L));
        double double69 = vector3D68.getY();
        org.apache.commons.math.geometry.Vector3D vector3D70 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D62, 0.0d, vector3D68);
        org.apache.commons.math.geometry.Vector3D vector3D71 = rotation49.applyInverseTo(vector3D70);
        org.apache.commons.math.geometry.Rotation rotation72 = rotation43.applyTo(rotation49);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(rotation72);
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        java.io.PrintStream printStream87 = printStream85.append('4');
        printStream85.close();
        printStream85.print((int) (short) 1);
        java.io.PrintStream printStream92 = printStream85.append('a');
        printStream85.print(0.7060543458962302d);
        printStream85.println((int) (short) 1);
        java.io.PrintStream printStream97 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(printStream92);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print("");
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayLanguage();
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale.setDefault(category10, locale12);
        java.util.Locale.setDefault(category9, locale12);
        org.apache.commons.math.geometry.Rotation rotation23 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray24 = rotation23.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D26 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) (byte) 100, vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) (byte) 100, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D28, vector3D33);
        org.apache.commons.math.geometry.Vector3D vector3D36 = rotation23.applyInverseTo(vector3D28);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation23.getAxis();
        org.apache.commons.math.geometry.Rotation rotation38 = rotation23.revert();
        double[][] doubleArray39 = rotation38.getMatrix();
        java.io.PrintStream printStream40 = printStream1.format(locale12, "KR", (java.lang.Object[]) doubleArray39);
        java.util.Locale locale41 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale41);
        java.lang.String str43 = locale41.getDisplayScript();
        java.lang.String str44 = locale41.getISO3Country();
        java.lang.String str45 = locale12.getDisplayLanguage(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = locale12.getUnicodeLocaleType("\u5fb7\u570b");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(rotation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(printStream40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "KOR" + "'", str44, "KOR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        printWriter5.print((int) (short) -1);
        printWriter5.close();
        printWriter5.println(' ');
        printWriter5.close();
        printWriter5.flush();
        printWriter5.flush();
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter23.println('a');
        printWriter23.print(true);
        printWriter23.flush();
        java.lang.String[] strArray32 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray32);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray32, (java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        java.io.PrintWriter printWriter38 = printWriter23.format("zho", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException39 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4\ub300\ub9cc)", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter40 = printWriter5.printf("\uc911\uad6d\uc5b4", (java.lang.Object[]) throwableArray37);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(printWriter38);
        org.junit.Assert.assertNotNull(printWriter40);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream6 = printStream1.append((java.lang.CharSequence) "en");
        printStream1.print((int) ' ');
        printStream1.println((double) 100.0f);
        printStream1.print(true);
        printStream1.print("\uc911\uad6d\uc5b4\ub300\ub9cc)");
        printStream1.print(' ');
        java.lang.String[] strArray22 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray22);
        java.lang.Object[] objArray24 = mathException23.getArguments();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("ja", objArray24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("\u97d3\u6587");
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("und", objArray24, (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ko_KR", objArray24);
        java.lang.Object[] objArray30 = mathException29.getArguments();
        java.io.PrintStream printStream31 = printStream1.format("\u82f1\u570b", objArray30);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(printStream31);
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale2);
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale4.getDisplayScript(locale5);
        java.lang.String str7 = locale2.getDisplayLanguage(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u97d3\u6587" + "'", str7, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print((float) ' ');
        printStream1.println(true);
        printStream1.print((float) ' ');
        printStream1.println(true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) (byte) 100, 0.0d, (-0.13715201283077028d), (double) 0L, false);
        org.apache.commons.math.geometry.Rotation rotation11 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double12 = rotation11.getQ0();
        org.apache.commons.math.geometry.Rotation rotation18 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double19 = rotation18.getQ0();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation11.applyTo(rotation18);
        org.apache.commons.math.geometry.Rotation rotation21 = rotation11.revert();
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation28 = rotation21.applyTo(rotation27);
        org.apache.commons.math.geometry.RotationOrder rotationOrder30 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotationOrder30.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D35, (double) (byte) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D43 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D40, (double) (byte) 100, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D37, vector3D42);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D37, (double) 0.0f, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D53 = vector3D51.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D54 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D31, (double) '#', vector3D53);
        org.apache.commons.math.geometry.Vector3D vector3D55 = rotation21.applyTo(vector3D53);
        double double56 = rotation21.getAngle();
        org.apache.commons.math.geometry.RotationOrder rotationOrder57 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation61 = new org.apache.commons.math.geometry.Rotation(rotationOrder57, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotationOrder57.getA2();
        double double63 = vector3D62.getNorm();
        org.apache.commons.math.geometry.Vector3D vector3D64 = rotation21.applyTo(vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D65 = rotation5.applyTo(vector3D64);
        double double66 = rotation5.getAngle();
        double[][] doubleArray67 = rotation5.getMatrix();
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertNotNull(rotation28);
        org.junit.Assert.assertNotNull(rotationOrder30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(rotationOrder57);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.27517136170020406d + "'", double66 == 0.27517136170020406d);
        org.junit.Assert.assertNotNull(doubleArray67);
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotation5.applyInverseTo(vector3D15);
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D21 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D18, (double) (byte) 100, vector3D20);
        org.apache.commons.math.geometry.Vector3D vector3D25 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D26 = vector3D18.subtract((double) 10L, vector3D25);
        double double27 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D16, vector3D25);
        double double28 = vector3D16.getX();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-6782.273252612676d) + "'", double27 == (-6782.273252612676d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-2000.0d) + "'", double28 == (-2000.0d));
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("\u30d5\u30e9\u30f3\u30b9\u8a9e", "en-GB");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: en-GB");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder9 = builder0.setExtension('a', "und");
        java.util.Locale locale11 = new java.util.Locale("French");
        java.util.Locale.Builder builder12 = builder0.setLocale(locale11);
        java.util.Locale.Builder builder13 = builder0.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "french");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ0();
        org.apache.commons.math.geometry.Rotation rotation23 = rotation5.applyInverseTo(rotation21);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double30 = rotation29.getQ1();
        double double31 = rotation29.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D33 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D33, (double) (byte) 100, vector3D35);
        org.apache.commons.math.geometry.Vector3D vector3D40 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D41 = vector3D33.subtract((double) 10L, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D42 = rotation29.applyInverseTo(vector3D40);
        org.apache.commons.math.geometry.Rotation rotation43 = rotation5.applyInverseTo(rotation29);
        org.apache.commons.math.geometry.Rotation rotation49 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray50 = rotation49.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D52, (double) (byte) 100, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D54, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotation49.applyInverseTo(vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotation49.getAxis();
        org.apache.commons.math.geometry.Rotation rotation64 = rotation49.revert();
        org.apache.commons.math.geometry.Rotation rotation70 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double71 = rotation70.getQ0();
        org.apache.commons.math.geometry.Rotation rotation77 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double78 = rotation77.getQ0();
        org.apache.commons.math.geometry.Rotation rotation79 = rotation70.applyTo(rotation77);
        double double80 = rotation70.getQ0();
        double double81 = rotation70.getQ0();
        double[][] doubleArray82 = rotation70.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation83 = rotation64.applyInverseTo(rotation70);
        org.apache.commons.math.geometry.Rotation rotation84 = rotation5.applyInverseTo(rotation64);
        double double85 = rotation84.getQ2();
        double double86 = rotation84.getQ3();
        double double87 = rotation84.getAngle();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(rotation64);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 52.0d + "'", double71 == 52.0d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 52.0d + "'", double78 == 52.0d);
        org.junit.Assert.assertNotNull(rotation79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 52.0d + "'", double80 == 52.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 52.0d + "'", double81 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(rotation83);
        org.junit.Assert.assertNotNull(rotation84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-1040.0d) + "'", double86 == (-1040.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        printWriter5.println('#');
        printWriter5.println();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        printStream85.println((int) (byte) -1);
        printStream85.println((long) (byte) 1);
        java.io.PrintStream printStream90 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        printStream85.print("YZY");
        printStream85.println(false);
        java.io.PrintStream printStream95 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        printWriter5.println('#');
        org.apache.commons.math.geometry.RotationOrder rotationOrder18 = org.apache.commons.math.geometry.RotationOrder.YZX;
        printWriter5.println((java.lang.Object) rotationOrder18);
        java.util.Locale locale20 = null;
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException25);
        java.lang.Object[] objArray27 = mathException25.getArguments();
        java.io.PrintWriter printWriter28 = printWriter5.printf(locale20, "zxz_KO_KR", objArray27);
        printWriter28.println('4');
        printWriter28.print((float) ' ');
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(rotationOrder18);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printWriter28);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(1.4711276743037345d, 0.008332851123444342d);
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        org.apache.commons.math.geometry.Vector3D vector3D3 = new org.apache.commons.math.geometry.Vector3D((-6782.273252612676d), 0.7060543458962302d, 0.6080637532317004d);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        printStream1.println((float) 10L);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1, true);
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter5, true);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter13 = printWriter11.append(' ');
        printWriter13.print('u');
        printWriter13.println(true);
        printWriter13.println((long) (short) 10);
        printWriter13.println((int) '#');
        printWriter13.print(true);
        org.junit.Assert.assertNotNull(printWriter11);
        org.junit.Assert.assertNotNull(printWriter13);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray11 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray11, (java.lang.Throwable) mathException14);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException16 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray11);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException17 = new org.apache.commons.math.geometry.NotARotationMatrixException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray11);
        java.io.PrintWriter printWriter18 = printWriter5.printf("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray11);
        printWriter18.print((float) 'u');
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        double double15 = rotation5.getQ0();
        double double16 = rotation5.getQ0();
        double[][] doubleArray17 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.getAxis();
        double double19 = rotation5.getAngle();
        org.apache.commons.math.geometry.Rotation rotation20 = rotation5.revert();
        double double21 = rotation20.getAngle();
        org.apache.commons.math.geometry.RotationOrder rotationOrder22 = org.apache.commons.math.geometry.RotationOrder.YXZ;
        org.apache.commons.math.geometry.Vector3D vector3D23 = rotationOrder22.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D24 = rotationOrder22.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D25 = rotationOrder22.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotationOrder22.getA3();
        org.apache.commons.math.geometry.Rotation rotation30 = new org.apache.commons.math.geometry.Rotation(rotationOrder22, (double) (short) 100, 18.416257194840895d, 0.4705227400680958d);
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotationOrder22.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D32 = rotationOrder22.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D36.negate();
        org.apache.commons.math.geometry.Vector3D vector3D42 = new org.apache.commons.math.geometry.Vector3D((double) 100.0f, (double) '#', (double) 100);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D52, (double) (byte) 100, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D49, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D59, (double) (byte) 100, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D70, (double) (byte) 100, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D67, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D75 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D54, (double) (byte) 1, vector3D62, (double) (short) 100, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D76 = vector3D54.negate();
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (-1), vector3D54);
        double double78 = vector3D54.getAlpha();
        org.apache.commons.math.geometry.Vector3D vector3D79 = vector3D42.subtract((double) (short) -1, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D80 = vector3D36.add((double) (byte) 0, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D81 = org.apache.commons.math.geometry.Vector3D.minusJ;
        org.apache.commons.math.geometry.Vector3D vector3D84 = new org.apache.commons.math.geometry.Vector3D((double) (short) 0, (double) (byte) 1);
        org.apache.commons.math.geometry.Vector3D vector3D85 = vector3D81.add(vector3D84);
        double double86 = org.apache.commons.math.geometry.Vector3D.dotProduct(vector3D36, vector3D84);
        double double87 = vector3D36.getX();
        org.apache.commons.math.geometry.RotationOrder rotationOrder89 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation93 = new org.apache.commons.math.geometry.Rotation(rotationOrder89, (double) (-1L), (double) (short) 10, (double) 'a');
        java.lang.String str94 = rotationOrder89.toString();
        org.apache.commons.math.geometry.Vector3D vector3D95 = rotationOrder89.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D96 = new org.apache.commons.math.geometry.Vector3D((-5.203623393651532E-5d), vector3D36, 1.7607845497297911d, vector3D95);
        org.apache.commons.math.geometry.Vector3D vector3D97 = vector3D32.add(vector3D36);
        double double98 = vector3D32.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D99 = rotation20.applyInverseTo(vector3D32);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(rotation20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(rotationOrder22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.7826371500223388d + "'", double86 == 0.7826371500223388d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-0.08806429469916818d) + "'", double87 == (-0.08806429469916818d));
        org.junit.Assert.assertNotNull(rotationOrder89);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "XYZ" + "'", str94, "XYZ");
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(vector3D97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.5707963267948966d + "'", double98 == 1.5707963267948966d);
        org.junit.Assert.assertNotNull(vector3D99);
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        java.lang.String str11 = locale7.getCountry();
        java.util.Set<java.lang.String> strSet12 = locale7.getUnicodeLocaleKeys();
        java.lang.String str13 = locale7.getCountry();
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale14.getCountry();
        java.util.Set<java.lang.Character> charSet16 = locale14.getExtensionKeys();
        java.lang.String str17 = locale14.getScript();
        java.lang.String str18 = locale7.getDisplayVariant(locale14);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uce90\ub098\ub2e4" + "'", str9, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CA" + "'", str11, "CA");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CA" + "'", str13, "CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CA" + "'", str15, "CA");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-0.7035975447302918d), 2.9778714378213818d);
        double double3 = vector3D2.getY();
        double double4 = vector3D2.getNorm();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.6383135856448651d + "'", double3 == 0.6383135856448651d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "anglais");
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter22.println((float) (byte) -1);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter30 = printWriter22.printf("KR", (java.lang.Object[]) strArray29);
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        printStream32.close();
        java.io.PrintWriter printWriter35 = new java.io.PrintWriter((java.io.OutputStream) printStream32, false);
        java.io.PrintWriter printWriter36 = new java.io.PrintWriter((java.io.Writer) printWriter35);
        char[] charArray39 = new char[] { ' ', 'x' };
        printWriter36.write(charArray39);
        printWriter22.println(charArray39);
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = locale42.getDisplayScript(locale43);
        java.lang.String str45 = locale43.getVariant();
        java.lang.String[] strArray48 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray48);
        java.io.PrintWriter printWriter50 = printWriter22.printf(locale43, "English", (java.lang.Object[]) strArray48);
        java.lang.String str51 = locale43.getScript();
        java.lang.String str52 = locale16.getDisplayLanguage(locale43);
        java.util.Locale.setDefault(locale43);
        boolean boolean54 = locale43.hasExtensions();
        java.util.Set<java.lang.String> strSet55 = locale43.getUnicodeLocaleAttributes();
        java.io.PrintStream printStream58 = new java.io.PrintStream("ko-KR");
        printStream58.close();
        java.io.PrintWriter printWriter61 = new java.io.PrintWriter((java.io.OutputStream) printStream58, false);
        java.io.PrintStream printStream63 = printStream58.append((java.lang.CharSequence) "en");
        char[] charArray70 = new char[] { 'a', ' ', '#', 'a', '#', 'x' };
        printStream63.println(charArray70);
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream63);
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) 0 };
        printStream63.write(byteArray76, 1, (int) (short) 0);
        java.lang.String[] strArray84 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray84, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray89 = mathException88.getSuppressed();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray84, (java.lang.Throwable) mathException88);
        java.lang.Throwable[] throwableArray91 = mathException88.getSuppressed();
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("ko_KR", (java.lang.Object[]) throwableArray91);
        java.io.PrintStream printStream93 = printStream63.printf("cinese (Cina)", (java.lang.Object[]) throwableArray91);
        java.io.PrintStream printStream94 = printStream15.format(locale43, "ja", (java.lang.Object[]) throwableArray91);
        printStream15.println(1);
        printStream15.println("ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: KO_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , x]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u97d3\u6587" + "'", str52, "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(printStream63);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "a #a#x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "a #a#x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[a,  , #, a, #, x]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, 0]");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(printStream93);
        org.junit.Assert.assertNotNull(printStream94);
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        printStream1.println((float) 100L);
        org.apache.commons.math.geometry.Rotation rotation10 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray11 = rotation10.getMatrix();
        java.io.PrintStream printStream12 = printStream1.printf("fra", (java.lang.Object[]) doubleArray11);
        printStream12.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream12);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream12, false);
        java.io.PrintStream printStream18 = printStream12.append('u');
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream18, true);
        printStream18.print(false);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(printStream18);
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        java.lang.Object[] objArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException2 = new org.apache.commons.math.geometry.NotARotationMatrixException("ko_KR", objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("org.apache.commons.math.mathexception: ko_kr");
        java.lang.Object[] objArray4 = mathException3.getArguments();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException5 = new org.apache.commons.math.geometry.NotARotationMatrixException("italy", objArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("\uc911\uad6d\uc5b4\ub300\ub9cc)", objArray4);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("ko-kr");
        java.util.Locale.Builder builder7 = builder3.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getISO3Language();
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale.setDefault(category5, locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale6.getExtension('x');
        java.util.Locale.Builder builder12 = builder2.setLocale(locale6);
        java.util.Locale.Builder builder14 = builder12.setLanguageTag("en");
        java.util.Locale.Builder builder15 = builder12.clearExtensions();
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.util.Locale.Builder builder20 = builder12.setLocale(locale18);
        java.util.Locale.Builder builder22 = builder12.setLanguageTag("German");
        java.util.Locale locale23 = builder12.build();
        java.lang.String str24 = locale0.getDisplayVariant(locale23);
        java.util.Locale locale25 = locale23.stripExtensions();
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale23.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet28 = locale23.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ita" + "'", str1, "ita");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "german");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "german");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "german");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(charSet28);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("TW");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale1.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale1.getUnicodeLocaleType("china (CHINESISCH (CHINA))");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: china (CHINESISCH (CHINA))");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "tw");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tw" + "'", str3, "tw");
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation4 = new org.apache.commons.math.geometry.Rotation(rotationOrder0, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotationOrder0.getA2();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        org.apache.commons.math.geometry.Vector3D vector3D0 = null;
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double7 = rotation6.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double14 = rotation13.getQ0();
        org.apache.commons.math.geometry.Rotation rotation15 = rotation6.applyTo(rotation13);
        org.apache.commons.math.geometry.Rotation rotation16 = rotation6.revert();
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation23 = rotation16.applyTo(rotation22);
        org.apache.commons.math.geometry.RotationOrder rotationOrder25 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D26 = rotationOrder25.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D35, (double) (byte) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D32, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D(0.0d, vector3D32, (double) 0.0f, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D48 = vector3D46.scalarMultiply((double) 0.0f);
        org.apache.commons.math.geometry.Vector3D vector3D49 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D26, (double) '#', vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D50 = rotation16.applyTo(vector3D48);
        org.apache.commons.math.geometry.Vector3D vector3D51 = vector3D50.negate();
        double double52 = vector3D51.getZ();
        // The following exception was thrown during execution in test generation
        try {
            double double53 = org.apache.commons.math.geometry.Vector3D.angle(vector3D0, vector3D51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertNotNull(rotationOrder25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-0.0d) + "'", double52 == (-0.0d));
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        printStream85.println((int) (byte) -1);
        java.lang.Object[] objArray89 = null;
        java.io.PrintStream printStream90 = printStream85.format("", objArray89);
        printStream90.print(100);
        java.io.PrintStream printStream94 = printStream90.append('u');
        printStream90.println("GB");
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertNotNull(printStream90);
        org.junit.Assert.assertNotNull(printStream94);
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        printStream85.println((int) (byte) -1);
        printStream85.println((long) (byte) 1);
        java.io.PrintStream printStream90 = new java.io.PrintStream((java.io.OutputStream) printStream85);
        java.io.PrintStream printStream92 = new java.io.PrintStream((java.io.OutputStream) printStream85, true);
        printStream85.println(false);
        printStream85.println(1);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        java.io.PrintStream printStream2 = new java.io.PrintStream("ko-KR");
        printStream2.close();
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.OutputStream) printStream2, false);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.Writer) printWriter5);
        printWriter6.println('a');
        printWriter6.print((float) (byte) 100);
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        printStream12.close();
        java.util.Locale locale14 = java.util.Locale.UK;
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream17 = printStream12.format(locale14, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray16);
        java.io.PrintStream printStream19 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        printStream12.println(10.0f);
        printStream12.println((float) 100);
        java.io.PrintStream printStream25 = new java.io.PrintStream((java.io.OutputStream) printStream12, false);
        printWriter6.println((java.lang.Object) printStream25);
        org.apache.commons.math.geometry.RotationOrder rotationOrder27 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D28 = rotationOrder27.getA3();
        printStream25.print((java.lang.Object) rotationOrder27);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        char[] charArray41 = new char[] { ' ', 'x' };
        printWriter38.write(charArray41);
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.lang.String str45 = locale43.getDisplayCountry(locale44);
        java.lang.String str46 = locale43.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation53 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray54 = rotation53.getMatrix();
        java.io.PrintWriter printWriter55 = printWriter38.format(locale43, "YZY", (java.lang.Object[]) doubleArray54);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException56 = new org.apache.commons.math.geometry.NotARotationMatrixException("ko-KR", (java.lang.Object[]) doubleArray54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) notARotationMatrixException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) notARotationMatrixException56);
        java.lang.Object[] objArray59 = notARotationMatrixException56.getArguments();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException60 = new org.apache.commons.math.geometry.NotARotationMatrixException("Chinese (Taiwan)", objArray59);
        java.io.PrintStream printStream61 = printStream25.format("\u5fb7\u6587", objArray59);
        java.io.PrintStream printStream64 = new java.io.PrintStream("ko-KR");
        printStream64.close();
        java.io.PrintWriter printWriter67 = new java.io.PrintWriter((java.io.OutputStream) printStream64, false);
        java.io.PrintWriter printWriter68 = new java.io.PrintWriter((java.io.Writer) printWriter67);
        printWriter67.print((double) (byte) 100);
        printWriter67.println();
        printWriter67.println('#');
        printWriter67.println(true);
        org.apache.commons.math.geometry.Rotation rotation83 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray84 = rotation83.getMatrix();
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) doubleArray84);
        java.io.PrintWriter printWriter86 = printWriter67.printf("org.apache.commons.math.geometry.NotARotationMatrixException: ja", (java.lang.Object[]) doubleArray84);
        java.io.PrintStream printStream87 = printStream61.printf("german", (java.lang.Object[]) doubleArray84);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("german (kor)", (java.lang.Object[]) doubleArray84);
        java.lang.Object[] objArray89 = mathException88.getArguments();
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(printStream17);
        org.junit.Assert.assertNotNull(rotationOrder27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , x]");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "en" + "'", str46, "en");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[[25407.0, 1040.0, 2000.0], [-1040.0, 5407.0, 10400.0], [2000.0, -10400.0, 5607.0]]");
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(printWriter86);
        org.junit.Assert.assertNotNull(printStream87);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[[25407.0, 1040.0, 2000.0], [-1040.0, 5407.0, 10400.0], [2000.0, -10400.0, 5607.0]]");
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-0.7035975447302918d), (-0.7035975447302918d), 0.20112376381681635d, 0.8623188722876843d, true);
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotation5.getAxis();
        org.junit.Assert.assertNotNull(vector3D6);
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D((-52.0d), (double) ' ');
        double double3 = vector3D2.getY();
        org.apache.commons.math.geometry.Rotation rotation9 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double10 = rotation9.getQ0();
        org.apache.commons.math.geometry.Rotation rotation16 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double17 = rotation16.getQ0();
        org.apache.commons.math.geometry.Rotation rotation18 = rotation9.applyTo(rotation16);
        double double19 = rotation9.getQ0();
        double double20 = rotation9.getQ0();
        double[][] doubleArray21 = rotation9.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D22 = rotation9.getAxis();
        org.apache.commons.math.geometry.Vector3D vector3D26 = new org.apache.commons.math.geometry.Vector3D((-1.0d), (double) (byte) 100);
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D35, (double) (byte) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D32, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D44 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D42, (double) (byte) 100, vector3D44);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D53, (double) (byte) 100, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D50, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D58 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D37, (double) (byte) 1, vector3D45, (double) (short) 100, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D59 = vector3D37.negate();
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D61, (double) (byte) 100, vector3D63);
        org.apache.commons.math.geometry.Vector3D vector3D65 = vector3D59.subtract(vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D66 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D26, (double) (byte) 10, vector3D65);
        org.apache.commons.math.geometry.Vector3D vector3D67 = vector3D22.subtract(vector3D66);
        org.apache.commons.math.geometry.Vector3D vector3D71 = new org.apache.commons.math.geometry.Vector3D((double) ' ', (double) 10.0f);
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) 10L, vector3D71);
        org.apache.commons.math.geometry.Rotation rotation73 = new org.apache.commons.math.geometry.Rotation(vector3D67, vector3D72);
        org.apache.commons.math.geometry.Rotation rotation74 = new org.apache.commons.math.geometry.Rotation(vector3D2, vector3D67);
        org.apache.commons.math.geometry.RotationOrder rotationOrder75 = org.apache.commons.math.geometry.RotationOrder.XZX;
        org.apache.commons.math.geometry.Rotation rotation79 = new org.apache.commons.math.geometry.Rotation(rotationOrder75, (double) (short) -1, (double) (short) -1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D80 = rotationOrder75.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D81 = rotationOrder75.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D82 = rotationOrder75.getA2();
        java.lang.String str83 = rotationOrder75.toString();
        org.apache.commons.math.geometry.Vector3D vector3D84 = rotationOrder75.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D85 = vector3D84.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D86 = rotation74.applyInverseTo(vector3D85);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-0.8230677854004599d) + "'", double3 == (-0.8230677854004599d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertNotNull(rotation18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(rotationOrder75);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "XZX" + "'", str83, "XZX");
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        java.util.Locale locale2 = new java.util.Locale("\uc911\uad6d", "org.apache.commons.math.MathException: USA");
        org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: USA");
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        org.apache.commons.math.geometry.Vector3D vector3D5 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D5, (double) (byte) 100, vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D13 = vector3D5.subtract((double) 10L, vector3D12);
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale14.getDisplayScript(locale15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.lang.String str26 = locale25.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList31, filteringMode33);
        java.lang.String[] strArray38 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.lang.String str51 = locale50.getDisplayLanguage();
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49, locale50, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList56, filteringMode60);
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D71 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D69, (double) (byte) 100, vector3D71);
        org.apache.commons.math.geometry.Vector3D vector3D73 = rotation67.applyTo(vector3D69);
        java.lang.Object[] objArray74 = new java.lang.Object[] { vector3D13, str16, languageRangeList18, rotation67 };
        java.lang.String[] strArray77 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray82 = mathException81.getSuppressed();
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray74, (java.lang.Throwable) mathException83);
        java.io.PrintStream printStream85 = printStream1.format("", objArray74);
        boolean boolean86 = printStream1.checkError();
        boolean boolean87 = printStream1.checkError();
        java.io.PrintStream printStream89 = printStream1.append((java.lang.CharSequence) "YZY");
        org.apache.commons.math.geometry.RotationOrder rotationOrder90 = org.apache.commons.math.geometry.RotationOrder.ZXZ;
        java.lang.String str91 = rotationOrder90.toString();
        org.apache.commons.math.geometry.Vector3D vector3D92 = rotationOrder90.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D93 = rotationOrder90.getA3();
        printStream89.println((java.lang.Object) vector3D93);
        printStream89.println();
        printStream89.print('x');
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(printStream85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(printStream89);
        org.junit.Assert.assertNotNull(rotationOrder90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ZXZ" + "'", str91, "ZXZ");
        org.junit.Assert.assertNotNull(vector3D92);
        org.junit.Assert.assertNotNull(vector3D93);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-1040.0d), (-1.0d), (-30.57346292255037d), (double) (short) -1, false);
        double double6 = rotation5.getQ1();
        org.apache.commons.math.geometry.Vector3D vector3D7 = rotation5.getAxis();
        double double8 = vector3D7.getDelta();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-0.03267898419746573d) + "'", double8 == (-0.03267898419746573d));
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        boolean boolean7 = locale4.hasExtensions();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder13 = builder8.setExtension('u', "");
        java.util.Locale.Builder builder15 = builder13.setVariant("");
        java.util.Locale locale16 = builder15.build();
        java.lang.String str17 = locale4.getDisplayName(locale16);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale19 = java.util.Locale.getDefault(category0);
        java.util.Locale locale20 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "English" + "'", str17, "English");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        java.io.PrintWriter printWriter11 = printWriter5.append((java.lang.CharSequence) "Canada");
        printWriter5.print('#');
        printWriter5.flush();
        printWriter5.print("zh_TW");
        printWriter5.close();
        printWriter5.println('a');
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter11);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale3.getDisplayScript(locale4);
        java.lang.String str6 = locale2.getDisplayLanguage(locale3);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.lang.String str21 = locale19.getDisplayScript(locale20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29, locale30, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.lang.String str56 = locale55.getDisplayLanguage();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54, locale55, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList61, filteringMode65);
        org.apache.commons.math.geometry.Rotation rotation72 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D76 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D77 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D74, (double) (byte) 100, vector3D76);
        org.apache.commons.math.geometry.Vector3D vector3D78 = rotation72.applyTo(vector3D74);
        java.lang.Object[] objArray79 = new java.lang.Object[] { vector3D18, str21, languageRangeList23, rotation72 };
        java.lang.String[] strArray82 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray87 = mathException86.getSuppressed();
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray82, (java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray79, (java.lang.Throwable) mathException88);
        java.io.PrintStream printStream90 = printStream1.printf(locale2, "YZY", objArray79);
        printStream1.print(0L);
        java.io.PrintStream printStream94 = new java.io.PrintStream((java.io.OutputStream) printStream1, true);
        printStream1.print(true);
        java.io.PrintStream printStream97 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fran\347ais" + "'", str6, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(printStream90);
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        java.util.Locale locale2 = new java.util.Locale("Japanisch", "Chinesisch (China)");
        org.junit.Assert.assertEquals(locale2.toString(), "japanisch_CHINESISCH (CHINA)");
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Vector3D vector3D15 = org.apache.commons.math.geometry.Vector3D.minusK;
        org.apache.commons.math.geometry.Vector3D vector3D16 = rotation5.applyInverseTo(vector3D15);
        double double17 = vector3D16.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D16.negate();
        double double19 = vector3D16.getX();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.4869163399816042d) + "'", double17 == (-0.4869163399816042d));
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-2000.0d) + "'", double19 == (-2000.0d));
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale locale9 = new java.util.Locale("zxz_FRAN\347AIS", "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        java.lang.String str10 = locale9.getDisplayVariant();
        java.util.Locale locale13 = new java.util.Locale("Italy", "US");
        java.lang.String str14 = locale9.getDisplayScript(locale13);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale13);
        java.util.Locale.Builder builder17 = builder15.setVariant("");
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder17.setLanguage("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Chinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale13.toString(), "italy_US");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        printStream1.println(true);
        java.io.PrintWriter printWriter21 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.Writer) printWriter21);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter26 = printWriter21.append((java.lang.CharSequence) "org.apache.commons.math.MathException: zxz (KO_KR)", (int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -53");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        java.util.Locale locale3 = new java.util.Locale("Italian", "org.apache.commons.math.MathException: ZXZ", "CHN");
        java.lang.String str4 = locale3.toLanguageTag();
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        java.util.Locale.setDefault(locale3);
        java.util.Locale locale10 = new java.util.Locale("french", "German (Germany)", "\uc601\uc5b4\uc601\uad6d)");
        java.lang.String str11 = locale3.getDisplayCountry(locale10);
        java.lang.String str12 = locale3.getDisplayCountry();
        java.util.Locale locale15 = new java.util.Locale("germany", "german");
        java.lang.String str16 = locale3.getDisplayLanguage(locale15);
        org.junit.Assert.assertEquals(locale3.toString(), "italian_ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ_CHN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "italian-x-lvariant-CHN" + "'", str4, "italian-x-lvariant-CHN");
        org.junit.Assert.assertNotNull(charSet5);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "\uc601\uc5b4\uc601\uad6d)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ" + "'", str11, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ" + "'", str12, "ORG.APACHE.COMMONS.MATH.MATHEXCEPTION: ZXZ");
        org.junit.Assert.assertEquals(locale15.toString(), "germany_GERMAN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "italian" + "'", str16, "italian");
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("\u52a0\u62ff\u5927", "GB");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: GB");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double7 = rotation6.getQ0();
        org.apache.commons.math.geometry.Rotation rotation13 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double14 = rotation13.getQ0();
        org.apache.commons.math.geometry.Rotation rotation15 = rotation6.applyTo(rotation13);
        org.apache.commons.math.geometry.Rotation rotation16 = rotation6.revert();
        org.apache.commons.math.geometry.Rotation rotation22 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double23 = rotation22.getQ0();
        org.apache.commons.math.geometry.Rotation rotation24 = rotation6.applyInverseTo(rotation22);
        org.apache.commons.math.geometry.Rotation rotation30 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double31 = rotation30.getQ0();
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double38 = rotation37.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = rotation30.applyTo(rotation37);
        org.apache.commons.math.geometry.Rotation rotation40 = rotation30.revert();
        org.apache.commons.math.geometry.Rotation rotation46 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double47 = rotation46.getQ0();
        org.apache.commons.math.geometry.Rotation rotation48 = rotation30.applyInverseTo(rotation46);
        double double49 = rotation48.getAngle();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation24.applyInverseTo(rotation48);
        org.apache.commons.math.geometry.Rotation rotation56 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double57 = rotation56.getQ1();
        double double58 = rotation56.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D60 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D63 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D60, (double) (byte) 100, vector3D62);
        org.apache.commons.math.geometry.Vector3D vector3D67 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D68 = vector3D60.subtract((double) 10L, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotation56.applyInverseTo(vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = vector3D69.orthogonal();
        org.apache.commons.math.geometry.Vector3D vector3D71 = rotation50.applyInverseTo(vector3D70);
        double[][] doubleArray72 = rotation50.getMatrix();
        java.lang.String[] strArray77 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray77);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray77, (java.lang.Throwable) mathException80);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException82 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray77);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException83 = new org.apache.commons.math.geometry.NotARotationMatrixException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray77);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) doubleArray72, (java.lang.Throwable) notARotationMatrixException83);
        java.lang.String str85 = notARotationMatrixException83.getPattern();
        java.lang.Throwable[] throwableArray86 = notARotationMatrixException83.getSuppressed();
        java.lang.String[] strArray91 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray91, (java.lang.Throwable) mathException93);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException95 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray91);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ko_KR", (java.lang.Throwable) notARotationMatrixException95);
        org.apache.commons.math.MathException mathException97 = new org.apache.commons.math.MathException("English", (java.lang.Throwable) notARotationMatrixException95);
        notARotationMatrixException83.addSuppressed((java.lang.Throwable) notARotationMatrixException95);
        java.lang.String str99 = notARotationMatrixException83.toString();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation16);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(rotation24);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertNotNull(rotation40);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertNotNull(rotation48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 52.0d + "'", double58 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str85, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(strArray91);
// flaky:         org.junit.Assert.assertEquals("'" + str99 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str99, "\ub3c5\uc77c\uc5b4");
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("org.apache.commons.math.MathException: francese", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=org.apache.commons.math.mathexception:francese");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (byte) 1, (double) (byte) -1, (double) 1.0f, false);
        org.apache.commons.math.geometry.Rotation rotation22 = rotation15.applyTo(rotation21);
        org.apache.commons.math.geometry.Rotation rotation23 = rotation22.revert();
        double double24 = rotation22.getQ0();
        double double25 = rotation22.getQ0();
        org.apache.commons.math.geometry.RotationOrder rotationOrder26 = org.apache.commons.math.geometry.RotationOrder.YZY;
        java.lang.String str27 = rotationOrder26.toString();
        org.apache.commons.math.geometry.Vector3D vector3D28 = rotationOrder26.getA2();
        java.lang.String str29 = rotationOrder26.toString();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation(rotationOrder26, (-0.8230677854004599d), (-0.6655420184408231d), (-6782.273252612676d));
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotationOrder26.getA3();
        java.lang.String str35 = rotationOrder26.toString();
        org.apache.commons.math.geometry.Rotation rotation39 = new org.apache.commons.math.geometry.Rotation(rotationOrder26, (double) (byte) 10, (-52.0d), (-9990.0d));
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray40 = rotation22.getAngles(rotationOrder26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.CardanEulerSingularityException; message: Euler angles singularity");
        } catch (org.apache.commons.math.geometry.CardanEulerSingularityException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotation22);
        org.junit.Assert.assertNotNull(rotation23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-110.0d) + "'", double24 == (-110.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-110.0d) + "'", double25 == (-110.0d));
        org.junit.Assert.assertNotNull(rotationOrder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "YZY" + "'", str27, "YZY");
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "YZY" + "'", str29, "YZY");
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "YZY" + "'", str35, "YZY");
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        printStream1.println((float) 1L);
        printStream1.println((long) (short) -1);
        boolean boolean18 = printStream1.checkError();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.io.PrintStream printStream10 = printStream1.append('4');
        printStream1.print(10L);
        java.io.PrintWriter printWriter13 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream15 = printStream1.append((java.lang.CharSequence) "anglais");
        boolean boolean16 = printStream15.checkError();
        printStream15.println((float) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream22 = printStream15.append((java.lang.CharSequence) "Deutsch", (int) (byte) 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        printWriter17.println();
        java.io.PrintWriter printWriter20 = printWriter17.append((java.lang.CharSequence) "ZXZ");
        java.io.PrintStream printStream23 = new java.io.PrintStream("ko-KR");
        printStream23.close();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String[] strArray27 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream28 = printStream23.format(locale25, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray27);
        java.io.PrintStream printStream30 = new java.io.PrintStream((java.io.OutputStream) printStream23, false);
        printStream23.println(10.0f);
        java.io.PrintStream printStream35 = new java.io.PrintStream("ko-KR");
        printStream35.close();
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.OutputStream) printStream35, false);
        java.io.PrintWriter printWriter39 = new java.io.PrintWriter((java.io.Writer) printWriter38);
        printWriter39.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation48 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray49 = rotation48.getMatrix();
        java.io.PrintWriter printWriter50 = printWriter39.format("en", (java.lang.Object[]) doubleArray49);
        java.io.PrintStream printStream51 = printStream23.printf("YZY", (java.lang.Object[]) doubleArray49);
        java.io.PrintWriter printWriter52 = printWriter17.format("zxz_fran\347\uc911\uad6d\uc5b4\ub300\ub9cc))", (java.lang.Object[]) doubleArray49);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(printWriter20);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(printStream28);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertNotNull(printStream51);
        org.junit.Assert.assertNotNull(printWriter52);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D1.subtract((double) 10L, vector3D8);
        double double10 = vector3D8.getAlpha();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation(vector3D8, (double) 'x');
        org.apache.commons.math.geometry.Rotation rotation13 = rotation12.revert();
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-2.141592653589793d) + "'", double10 == (-2.141592653589793d));
        org.junit.Assert.assertNotNull(rotation13);
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("en");
        java.util.Locale.Builder builder14 = builder10.setLanguageTag("und");
        java.util.Locale.Builder builder16 = builder10.setLanguage("");
        java.util.Locale.Builder builder18 = builder16.addUnicodeLocaleAttribute("YZY");
        java.util.Locale.Builder builder21 = builder18.setExtension('a', "CHN");
        java.util.Locale.Builder builder22 = builder18.clearExtensions();
        java.util.Locale.Builder builder23 = builder22.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder23.removeUnicodeLocaleAttribute("tedesco-TW-x-lvariant-YZY");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: tedesco-TW-x-lvariant-YZY [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        printStream1.println((float) (short) 0);
        printStream1.print("it");
        java.io.PrintStream printStream23 = printStream1.append(' ');
        printStream1.println((float) 'u');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream15.close();
        printStream15.println("XYZ");
        printStream15.println();
        printStream15.print(0.0f);
        java.io.PrintStream printStream23 = printStream15.append('u');
        printStream15.print((int) (short) 0);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.OutputStream) printStream15, true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream23);
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        char[] charArray8 = new char[] { ' ', 'x' };
        printWriter5.write(charArray8);
        printWriter5.write((int) (byte) 1);
        printWriter5.print((int) (short) 0);
        printWriter5.println((float) 1);
        printWriter5.print((float) (short) 100);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , x]");
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(1.3660691819214432d, 48.0d);
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.ZYX;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D4 = vector3D2.scalarMultiply((-12804.0d));
        double double5 = vector3D4.getX();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-12804.0d) + "'", double5 == (-12804.0d));
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        java.io.PrintWriter printWriter9 = printWriter5.append((java.lang.CharSequence) "ko-KR");
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter16);
        char[] charArray20 = new char[] { ' ', 'x' };
        printWriter17.write(charArray20);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.lang.String str25 = locale22.getLanguage();
        org.apache.commons.math.geometry.Rotation rotation32 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray33 = rotation32.getMatrix();
        java.io.PrintWriter printWriter34 = printWriter17.format(locale22, "YZY", (java.lang.Object[]) doubleArray33);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException35 = new org.apache.commons.math.geometry.NotARotationMatrixException("en", (java.lang.Object[]) doubleArray33);
        java.io.PrintWriter printWriter36 = printWriter9.printf("TWN", (java.lang.Object[]) doubleArray33);
        java.io.PrintWriter printWriter38 = printWriter9.append('u');
        printWriter38.println("coreano (Corea del Sud)");
        printWriter38.print(true);
        org.junit.Assert.assertNotNull(printWriter9);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ , x]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en" + "'", str25, "en");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(printWriter34);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(printWriter38);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        org.apache.commons.math.geometry.Rotation rotation6 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double7 = rotation6.getQ1();
        double double8 = rotation6.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        org.apache.commons.math.geometry.Vector3D vector3D17 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D18 = vector3D10.subtract((double) 10L, vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D19 = rotation6.applyInverseTo(vector3D17);
        org.apache.commons.math.geometry.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math.geometry.Rotation rotation27 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray28 = rotation27.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D30 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D33 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D30, (double) (byte) 100, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D35 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D37 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D38 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D35, (double) (byte) 100, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D39 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D32, vector3D37);
        org.apache.commons.math.geometry.Vector3D vector3D40 = rotation27.applyInverseTo(vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D41 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D42 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D40, vector3D41);
        org.apache.commons.math.geometry.Vector3D vector3D43 = vector3D40.negate();
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D49 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D47, (double) (byte) 100, vector3D49);
        org.apache.commons.math.geometry.Vector3D vector3D52 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D54 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D52, (double) (byte) 100, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D56 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D49, vector3D54);
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D61 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D62 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D59, (double) (byte) 100, vector3D61);
        org.apache.commons.math.geometry.Vector3D vector3D65 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D67 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D68 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D65, (double) (byte) 100, vector3D67);
        org.apache.commons.math.geometry.Vector3D vector3D70 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D72 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D73 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D70, (double) (byte) 100, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D74 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D67, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D75 = new org.apache.commons.math.geometry.Vector3D((double) ' ', vector3D54, (double) (byte) 1, vector3D62, (double) (short) 100, vector3D72);
        org.apache.commons.math.geometry.Vector3D vector3D76 = vector3D54.negate();
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D78, (double) (byte) 100, vector3D80);
        org.apache.commons.math.geometry.Vector3D vector3D82 = vector3D76.subtract(vector3D81);
        org.apache.commons.math.geometry.Vector3D vector3D83 = new org.apache.commons.math.geometry.Vector3D((double) (byte) -1, vector3D19, 52.0d, vector3D40, (double) (byte) -1, vector3D82);
        double double84 = vector3D83.getZ();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 52.0d + "'", double8 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-3929.5113857326546d) + "'", double84 == (-3929.5113857326546d));
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale.setDefault(category3, locale4);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getExtension('x');
        java.util.Locale.Builder builder10 = builder0.setLocale(locale4);
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.lang.String str13 = locale11.getDisplayVariant();
        java.util.Locale.setDefault(locale11);
        java.lang.String str15 = locale11.toLanguageTag();
        java.util.Locale.Builder builder16 = builder10.setLocale(locale11);
        java.util.Locale locale19 = new java.util.Locale("\u97d3\u6587", "\ub3c5\uc77c\uc5b4");
        java.lang.String str20 = locale19.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder16.setLocale(locale19);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "de-DE" + "'", str15, "de-DE");
        org.junit.Assert.assertNotNull(builder16);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "\u97d3\u6587\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str20, "\ub3c5\uc77c\uc5b4");
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D7 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D10 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D7, (double) (byte) 100, vector3D9);
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotation5.applyTo(vector3D7);
        org.apache.commons.math.geometry.Vector3D vector3D12 = vector3D7.negate();
        org.apache.commons.math.geometry.Vector3D vector3D14 = vector3D7.scalarMultiply((double) 0);
        org.apache.commons.math.geometry.Rotation rotation21 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double22 = rotation21.getQ1();
        double double23 = rotation21.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D25 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D28 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D25, (double) (byte) 100, vector3D27);
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D33 = vector3D25.subtract((double) 10L, vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotation21.applyInverseTo(vector3D32);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D40, vector3D45);
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray55 = rotation54.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D66 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D59, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D67 = rotation54.applyInverseTo(vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D68 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D69 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D67, vector3D68);
        org.apache.commons.math.geometry.Rotation rotation76 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D78 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D81 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D78, (double) (byte) 100, vector3D80);
        org.apache.commons.math.geometry.Vector3D vector3D82 = rotation76.applyTo(vector3D78);
        org.apache.commons.math.geometry.Vector3D vector3D83 = vector3D78.negate();
        org.apache.commons.math.geometry.Vector3D vector3D85 = org.apache.commons.math.geometry.Vector3D.zero;
        double double86 = vector3D85.getY();
        org.apache.commons.math.geometry.Vector3D vector3D87 = new org.apache.commons.math.geometry.Vector3D((double) (-1L), vector3D40, (double) ' ', vector3D67, (double) (-1.0f), vector3D83, (double) 10.0f, vector3D85);
        double double88 = vector3D67.getZ();
        org.apache.commons.math.geometry.Vector3D vector3D92 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D93 = vector3D92.negate();
        org.apache.commons.math.geometry.Vector3D vector3D94 = new org.apache.commons.math.geometry.Vector3D((double) (short) -1, vector3D32, 10.0d, vector3D67, 100.0d, vector3D92);
        org.apache.commons.math.geometry.Vector3D vector3D95 = vector3D32.normalize();
        org.apache.commons.math.geometry.Vector3D vector3D96 = vector3D14.subtract(vector3D95);
        double double97 = vector3D96.getZ();
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D93);
        org.junit.Assert.assertNotNull(vector3D95);
        org.junit.Assert.assertNotNull(vector3D96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + (-0.9866275920404853d) + "'", double97 == (-0.9866275920404853d));
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.lang.String[] strArray10 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray10, (java.lang.Throwable) mathException12);
        java.io.PrintWriter printWriter14 = printWriter4.printf("it", (java.lang.Object[]) strArray10);
        printWriter4.println("ZXZ");
        printWriter4.println("German");
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double26 = rotation25.getQ1();
        double double27 = rotation25.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D31 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D32 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D29, (double) (byte) 100, vector3D31);
        org.apache.commons.math.geometry.Vector3D vector3D36 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D37 = vector3D29.subtract((double) 10L, vector3D36);
        org.apache.commons.math.geometry.Vector3D vector3D38 = rotation25.applyInverseTo(vector3D36);
        double double39 = rotation25.getQ0();
        org.apache.commons.math.geometry.Rotation rotation45 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray46 = rotation45.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D50 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D51 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D48, (double) (byte) 100, vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D53 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D55 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D56 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D53, (double) (byte) 100, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D50, vector3D55);
        org.apache.commons.math.geometry.Vector3D vector3D58 = rotation45.applyInverseTo(vector3D50);
        org.apache.commons.math.geometry.Vector3D vector3D59 = rotation45.getAxis();
        org.apache.commons.math.geometry.Rotation rotation60 = rotation45.revert();
        double double61 = rotation60.getQ0();
        org.apache.commons.math.geometry.Rotation rotation62 = rotation25.applyInverseTo(rotation60);
        double[][] doubleArray63 = rotation60.getMatrix();
        java.io.PrintWriter printWriter64 = printWriter4.printf("chinois (Chine)", (java.lang.Object[]) doubleArray63);
        java.io.PrintWriter printWriter66 = printWriter4.append((java.lang.CharSequence) "ko-kr");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(printWriter14);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(rotation60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-52.0d) + "'", double61 == (-52.0d));
        org.junit.Assert.assertNotNull(rotation62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(printWriter64);
        org.junit.Assert.assertNotNull(printWriter66);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        org.apache.commons.math.geometry.Vector3D vector3D10 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D13 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D10, (double) (byte) 100, vector3D12);
        double double14 = vector3D12.getNorm();
        printWriter5.println((java.lang.Object) vector3D12);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale17.getDisplayScript(locale18);
        java.lang.String str20 = locale16.getDisplayLanguage(locale17);
        java.lang.String str21 = locale17.getISO3Language();
        java.io.PrintStream printStream26 = new java.io.PrintStream("ko-KR");
        printStream26.close();
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String[] strArray30 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream31 = printStream26.format(locale28, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray30);
        java.io.PrintStream printStream33 = new java.io.PrintStream((java.io.OutputStream) printStream26, false);
        printStream26.println(10.0f);
        java.io.PrintStream printStream38 = new java.io.PrintStream("ko-KR");
        printStream38.close();
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.OutputStream) printStream38, false);
        java.io.PrintWriter printWriter42 = new java.io.PrintWriter((java.io.Writer) printWriter41);
        printWriter42.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation51 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray52 = rotation51.getMatrix();
        java.io.PrintWriter printWriter53 = printWriter42.format("en", (java.lang.Object[]) doubleArray52);
        java.io.PrintStream printStream54 = printStream26.printf("YZY", (java.lang.Object[]) doubleArray52);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray52);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("zxz (KO_KR)", (java.lang.Object[]) doubleArray52);
        java.io.PrintWriter printWriter57 = printWriter5.printf(locale17, "DEU", (java.lang.Object[]) doubleArray52);
        org.apache.commons.math.geometry.Rotation rotation63 = new org.apache.commons.math.geometry.Rotation((double) 0L, (double) (short) 1, 1.7607846147136124d, 1.0d, false);
        printWriter57.println((java.lang.Object) (short) 1);
        printWriter57.close();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais" + "'", str20, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printStream31);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertNotNull(printStream54);
        org.junit.Assert.assertNotNull(printWriter57);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("\uc911\uad6d\uc5b4\ub300\ub9cc))");
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("ZYX");
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale.Builder builder12 = builder10.setLanguage("ZXY");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setScript("\ud55c\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: org.apache.commons.math.MathException: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.close();
        printWriter4.write("XZX");
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale18 = null;
        org.apache.commons.math.geometry.Rotation rotation25 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation31 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double32 = rotation31.getQ0();
        org.apache.commons.math.geometry.Rotation rotation33 = rotation25.applyInverseTo(rotation31);
        org.apache.commons.math.geometry.Vector3D vector3D34 = rotation31.getAxis();
        double double35 = rotation31.getQ1();
        double[][] doubleArray36 = rotation31.getMatrix();
        java.io.PrintStream printStream37 = printStream17.printf(locale18, "United States", (java.lang.Object[]) doubleArray36);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) printStream17);
        printStream38.close();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertNotNull(rotation33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(printStream37);
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.print((long) (short) 100);
        printWriter5.print((int) 'u');
        java.io.PrintStream printStream11 = new java.io.PrintStream("ko-KR");
        printStream11.close();
        java.io.PrintWriter printWriter14 = new java.io.PrintWriter((java.io.OutputStream) printStream11, false);
        java.io.PrintWriter printWriter15 = new java.io.PrintWriter((java.io.Writer) printWriter14);
        printWriter15.print((long) (short) 100);
        printWriter15.print((int) 'u');
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        printWriter24.println((float) (byte) -1);
        java.io.PrintWriter printWriter29 = new java.io.PrintWriter((java.io.Writer) printWriter24, true);
        java.lang.String[] strArray31 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter32 = printWriter24.printf("KR", (java.lang.Object[]) strArray31);
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter37);
        char[] charArray41 = new char[] { ' ', 'x' };
        printWriter38.write(charArray41);
        printWriter24.println(charArray41);
        printWriter15.print(charArray41);
        printWriter5.write(charArray41);
        printWriter5.print((float) (byte) 100);
        java.io.PrintWriter printWriter49 = printWriter5.append((java.lang.CharSequence) "\u82f1\u56fd");
        printWriter49.print((long) '4');
        java.io.PrintWriter printWriter53 = printWriter49.append('a');
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter49);
        org.junit.Assert.assertNotNull(printWriter53);
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.Object[] objArray11 = null;
        java.io.PrintStream printStream12 = printStream8.format(locale9, "\uc911\uad6d\uc5b4", objArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        char[] charArray19 = new char[] { ' ', 'a', '#', 'a' };
        printStream14.println(charArray19);
        printStream12.println(charArray19);
        printStream12.println('4');
        java.lang.Class<?> wildcardClass24 = printStream12.getClass();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertNotNull(printStream12);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , a, #, a]");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "\ubbf8\uad6d");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ?????");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        java.util.Locale locale2 = new java.util.Locale("USA", "CA");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale2.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "usa_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "usa_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Kanada" + "'", str4, "Kanada");
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        java.io.PrintStream printStream1 = new java.io.PrintStream("\uc911\uad6d\uc5b4");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder6 = builder2.setLanguage("ZXZ");
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder8 = builder2.setLocale(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder10 = builder2.setLocale(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleKeys();
        java.io.PrintStream printStream16 = new java.io.PrintStream("ko-KR");
        printStream16.close();
        java.io.PrintWriter printWriter19 = new java.io.PrintWriter((java.io.OutputStream) printStream16, false);
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter((java.io.Writer) printWriter19);
        printWriter20.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation29 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray30 = rotation29.getMatrix();
        java.io.PrintWriter printWriter31 = printWriter20.format("en", (java.lang.Object[]) doubleArray30);
        java.io.PrintStream printStream32 = printStream1.format(locale9, "French", (java.lang.Object[]) doubleArray30);
        java.lang.String[] strArray37 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray37, (java.lang.Throwable) mathException39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray37, (java.lang.Throwable) mathException41);
        java.lang.Throwable[] throwableArray44 = mathException41.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException45 = new org.apache.commons.math.geometry.NotARotationMatrixException("", (java.lang.Object[]) throwableArray44);
        java.lang.Throwable[] throwableArray46 = notARotationMatrixException45.getSuppressed();
        java.io.PrintStream printStream47 = printStream32.format("YZY", (java.lang.Object[]) throwableArray46);
        printStream32.print(10);
        java.io.PrintStream printStream51 = printStream32.append((java.lang.CharSequence) "\u97d3\u6587)");
        printStream32.close();
        printStream32.close();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Kanada" + "'", str11, "Kanada");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertNotNull(printStream32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(printStream47);
        org.junit.Assert.assertNotNull(printStream51);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((-0.4869163399816042d), (double) (-1.0f), (-0.29022442084922856d), 0.0d, false);
        org.apache.commons.math.geometry.Vector3D vector3D6 = rotation5.getAxis();
        org.apache.commons.math.geometry.RotationOrder rotationOrder7 = org.apache.commons.math.geometry.RotationOrder.YXY;
        org.apache.commons.math.geometry.Vector3D vector3D8 = rotationOrder7.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D9 = rotationOrder7.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D10 = rotationOrder7.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D11 = rotationOrder7.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D6, vector3D11);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(rotationOrder7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("ORG.APACHE.COMMONS.MATH.GEOMETRY.NOTAROTATIONMATRIXEXCEPTION: ZXZ (KO_KR)", "coreano (Corea del Sud)");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: coreano (Corea del Sud)");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("Korean");
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = mathException4.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException7 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException8 = new org.apache.commons.math.geometry.NotARotationMatrixException("ja", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException9 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347\u6cd5\u6587)", (java.lang.Object[]) throwableArray6);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        org.apache.commons.math.geometry.Vector3D vector3D2 = new org.apache.commons.math.geometry.Vector3D(0.6311497403463439d, (-0.25886627012188185d));
        org.apache.commons.math.geometry.Vector3D vector3D3 = vector3D2.normalize();
        org.junit.Assert.assertNotNull(vector3D3);
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        printStream1.print("ita");
        java.io.PrintStream printStream7 = new java.io.PrintStream("ko-KR");
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale8.getDisplayLanguage(locale9);
        org.apache.commons.math.geometry.Vector3D vector3D16 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D18 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D16, (double) (byte) 100, vector3D18);
        org.apache.commons.math.geometry.Vector3D vector3D23 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D24 = vector3D16.subtract((double) 10L, vector3D23);
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.lang.String str27 = locale25.getDisplayScript(locale26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray41 = new java.util.Locale[] { locale31, locale32, locale33, locale34, locale35, locale36, locale38, locale39, locale40 };
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList42, filteringMode44);
        java.lang.String[] strArray49 = new java.lang.String[] { "ZXZ", "YZY", "YZY" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList50);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.lang.String str62 = locale61.getDisplayLanguage();
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale56, locale57, locale58, locale59, locale60, locale61, locale63, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList67, filteringMode69);
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList67, filteringMode71);
        org.apache.commons.math.geometry.Rotation rotation78 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Vector3D vector3D80 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D82 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D83 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D80, (double) (byte) 100, vector3D82);
        org.apache.commons.math.geometry.Vector3D vector3D84 = rotation78.applyTo(vector3D80);
        java.lang.Object[] objArray85 = new java.lang.Object[] { vector3D24, str27, languageRangeList29, rotation78 };
        java.lang.String[] strArray88 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray88, (java.lang.Throwable) mathException90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray93 = mathException92.getSuppressed();
        org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray88, (java.lang.Throwable) mathException92);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", objArray85, (java.lang.Throwable) mathException94);
        java.io.PrintStream printStream96 = printStream7.printf(locale8, "YZY", objArray85);
        java.io.PrintStream printStream97 = printStream1.printf("Chinesisch (China)", objArray85);
        printStream97.println((long) (byte) 100);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fran\347ais" + "'", str12, "fran\347ais");
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode69.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode71.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(printStream96);
        org.junit.Assert.assertNotNull(printStream97);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        org.apache.commons.math.geometry.Vector3D vector3D1 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D3 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D4 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D1, (double) (byte) 100, vector3D3);
        org.apache.commons.math.geometry.Vector3D vector3D8 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D9 = vector3D1.subtract((double) 10L, vector3D8);
        org.apache.commons.math.geometry.Vector3D vector3D12 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D14 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D15 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D12, (double) (byte) 100, vector3D14);
        org.apache.commons.math.geometry.Vector3D vector3D17 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D19 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D20 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D17, (double) (byte) 100, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D21 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D14, vector3D19);
        org.apache.commons.math.geometry.Vector3D vector3D22 = vector3D8.subtract((double) 0, vector3D21);
        double double23 = vector3D22.getDelta();
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.4070751110264852d + "'", double23 == 1.4070751110264852d);
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ0();
        org.apache.commons.math.geometry.Rotation rotation12 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double13 = rotation12.getQ0();
        org.apache.commons.math.geometry.Rotation rotation14 = rotation5.applyTo(rotation12);
        org.apache.commons.math.geometry.Rotation rotation15 = rotation5.revert();
        org.apache.commons.math.geometry.RotationOrder rotationOrder16 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation20 = new org.apache.commons.math.geometry.Rotation(rotationOrder16, (double) (-1L), (double) (short) 10, (double) 'a');
        org.apache.commons.math.geometry.Rotation rotation21 = rotation15.applyTo(rotation20);
        double double22 = rotation21.getAngle();
        org.apache.commons.math.geometry.Rotation rotation28 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation36 = rotation28.applyInverseTo(rotation34);
        org.apache.commons.math.geometry.Vector3D vector3D38 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D40 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D41 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D38, (double) (byte) 100, vector3D40);
        org.apache.commons.math.geometry.Vector3D vector3D43 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D45 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D46 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D43, (double) (byte) 100, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D47 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D40, vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = rotation36.applyTo(vector3D47);
        org.apache.commons.math.geometry.Vector3D vector3D49 = rotation36.getAxis();
        org.apache.commons.math.geometry.Rotation rotation50 = rotation36.revert();
        org.apache.commons.math.geometry.Rotation rotation51 = rotation21.applyInverseTo(rotation50);
        double[][] doubleArray52 = rotation50.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D53 = rotation50.getAxis();
        org.apache.commons.math.geometry.RotationOrder rotationOrder54 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Rotation rotation58 = new org.apache.commons.math.geometry.Rotation(rotationOrder54, (double) (-1L), (double) (short) 10, (double) 'a');
        java.lang.String str59 = rotationOrder54.toString();
        org.apache.commons.math.geometry.Vector3D vector3D60 = rotationOrder54.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D61 = rotationOrder54.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D62 = rotationOrder54.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D63 = rotationOrder54.getA1();
        org.apache.commons.math.geometry.Rotation rotation67 = new org.apache.commons.math.geometry.Rotation(rotationOrder54, (-2.141592653589793d), 0.4663020147736518d, 18.416257194840895d);
        double[] doubleArray68 = rotation50.getAngles(rotationOrder54);
        org.apache.commons.math.geometry.Vector3D vector3D69 = rotationOrder54.getA2();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertNotNull(rotation14);
        org.junit.Assert.assertNotNull(rotation15);
        org.junit.Assert.assertNotNull(rotationOrder16);
        org.junit.Assert.assertNotNull(rotation21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(rotation36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(rotation50);
        org.junit.Assert.assertNotNull(rotation51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(rotationOrder54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "XYZ" + "'", str59, "XYZ");
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-0.0, 0.0, -0.0]");
        org.junit.Assert.assertNotNull(vector3D69);
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray7 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter8 = printWriter5.printf("ko-KR", (java.lang.Object[]) strArray7);
        java.io.PrintWriter printWriter10 = printWriter5.append('x');
        printWriter10.flush();
        boolean boolean12 = printWriter10.checkError();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(printWriter8);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.lang.String[] strArray11 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ja");
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("French", (java.lang.Object[]) strArray11, (java.lang.Throwable) mathException14);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException16 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) strArray11);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException17 = new org.apache.commons.math.geometry.NotARotationMatrixException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray11);
        java.io.PrintWriter printWriter18 = printWriter5.printf("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray11);
        printWriter18.println();
        printWriter18.print((int) (short) 10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter18);
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.lang.String str9 = locale4.getDisplayLanguage(locale6);
        java.lang.String str10 = locale6.getDisplayName();
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter18.close();
        java.util.Locale locale21 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter18.println((java.lang.Object) locale21);
        java.util.Set<java.lang.Character> charSet23 = locale21.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale locale25 = java.util.Locale.getDefault(category0);
        java.util.Locale locale26 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u6cd5\u6587" + "'", str10, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals(locale21.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder5 = builder0.setExtension('u', "");
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale9 = new java.util.Locale("hi!", "\u97d3\u6587");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.setDefault(category10, locale11);
        java.lang.String str14 = locale9.getDisplayName(locale11);
        java.lang.String str15 = locale11.getDisplayName();
        java.lang.String str16 = locale6.getDisplayLanguage(locale11);
        java.util.Locale.Builder builder17 = builder0.setLocale(locale6);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale.setDefault(category18, locale19);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale6.getDisplayScript(locale19);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = locale24.getScript();
        java.util.Locale locale26 = java.util.Locale.KOREA;
        java.lang.String str27 = locale24.getDisplayLanguage(locale26);
        java.lang.String str28 = locale24.getISO3Country();
        java.lang.String str29 = locale6.getDisplayCountry(locale24);
        java.lang.String str30 = locale24.getDisplayCountry();
        java.lang.String str31 = locale24.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet32 = locale24.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "\u97d3\u6587");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u97d3\u6587)" + "'", str14, "\u97d3\u6587)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str27, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "TWN" + "'", str28, "TWN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u52a0\u62ff\u5927" + "'", str29, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Taiwan" + "'", str30, "Taiwan");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese" + "'", str31, "Chinese");
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("en-ca (TWN,ko-KR)", "jpn_ZH_CN");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jpn_ZH_CN");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Canada");
        java.util.Locale.Builder builder18 = builder0.setLanguage("it");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        printWriter24.println('a');
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter24.format(locale32, "TWN", objArray35);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.lang.String str38 = locale32.getDisplayCountry();
        java.util.Locale.Builder builder39 = builder18.setLocale(locale32);
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale locale41 = builder40.build();
        java.util.Locale.Builder builder42 = builder40.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder42.setVariant("zh_CN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: zh_CN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Germany" + "'", str38, "Germany");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        java.util.Locale.Builder builder8 = builder6.setLanguageTag("fr");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale locale10 = builder9.build();
        java.io.PrintStream printStream12 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray16 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray16, (java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray21 = mathException20.getSuppressed();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray16, (java.lang.Throwable) mathException20);
        java.lang.Throwable[] throwableArray23 = mathException20.getSuppressed();
        java.io.PrintStream printStream24 = printStream12.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray23);
        java.util.Locale locale26 = new java.util.Locale("ko-KR");
        java.io.PrintStream printStream29 = new java.io.PrintStream("ko-KR");
        printStream29.close();
        java.io.PrintWriter printWriter32 = new java.io.PrintWriter((java.io.OutputStream) printStream29, false);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter32);
        printWriter33.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation42 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray43 = rotation42.getMatrix();
        java.io.PrintWriter printWriter44 = printWriter33.format("en", (java.lang.Object[]) doubleArray43);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale45.getDisplayCountry(locale46);
        java.lang.String str48 = locale45.getLanguage();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray52 = mathException51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = mathException51.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException54 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray53);
        java.io.PrintWriter printWriter55 = printWriter33.format(locale45, "ZXZ", (java.lang.Object[]) throwableArray53);
        java.io.PrintStream printStream56 = printStream24.printf(locale26, "org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) throwableArray53);
        java.util.Locale locale58 = new java.util.Locale("XYZ");
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale26.getDisplayVariant(locale58);
        java.util.Set<java.lang.String> strSet61 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str62 = locale58.getCountry();
        java.lang.String str63 = locale10.getDisplayVariant(locale58);
        java.util.Locale.setDefault(locale58);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(printStream24);
        org.junit.Assert.assertEquals(locale26.toString(), "ko-kr");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(printWriter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "en" + "'", str48, "en");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(printWriter55);
        org.junit.Assert.assertNotNull(printStream56);
        org.junit.Assert.assertEquals(locale58.toString(), "xyz");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA3();
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter((java.io.OutputStream) printStream5, false);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter8);
        printWriter9.println('a');
        printWriter9.print((float) (byte) 100);
        java.io.PrintStream printStream15 = new java.io.PrintStream("ko-KR");
        printStream15.close();
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String[] strArray19 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream20 = printStream15.format(locale17, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray19);
        java.io.PrintStream printStream22 = new java.io.PrintStream((java.io.OutputStream) printStream15, false);
        printStream15.println(10.0f);
        printStream15.println((float) 100);
        java.io.PrintStream printStream28 = new java.io.PrintStream((java.io.OutputStream) printStream15, false);
        printWriter9.println((java.lang.Object) printStream28);
        org.apache.commons.math.geometry.RotationOrder rotationOrder30 = org.apache.commons.math.geometry.RotationOrder.YZY;
        org.apache.commons.math.geometry.Vector3D vector3D31 = rotationOrder30.getA3();
        printStream28.print((java.lang.Object) rotationOrder30);
        org.apache.commons.math.geometry.Vector3D vector3D33 = rotationOrder30.getA3();
        org.apache.commons.math.geometry.Rotation rotation37 = new org.apache.commons.math.geometry.Rotation(rotationOrder30, (-1.9130824422046033d), 0.7720755017504471d, 9.950371902099892d);
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation(rotationOrder30, 0.0d, 141.40954556245234d, 0.6080637532317004d);
        org.apache.commons.math.geometry.Vector3D vector3D42 = rotationOrder30.getA1();
        org.apache.commons.math.geometry.RotationOrder rotationOrder44 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D45 = rotationOrder44.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotationOrder44.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D47 = rotationOrder44.getA3();
        double double48 = vector3D47.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D49 = new org.apache.commons.math.geometry.Vector3D((-0.02786191713456967d), vector3D42, 2.3461561155281263d, vector3D47);
        double double50 = org.apache.commons.math.geometry.Vector3D.angle(vector3D2, vector3D47);
        double double51 = vector3D2.getNorm();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(printStream20);
        org.junit.Assert.assertNotNull(rotationOrder30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(rotationOrder44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.5707963267948966d + "'", double48 == 1.5707963267948966d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.5707963267948966d + "'", double50 == 1.5707963267948966d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println(0.0d);
        org.apache.commons.math.geometry.Rotation rotation14 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray15 = rotation14.getMatrix();
        java.io.PrintWriter printWriter16 = printWriter5.format("en", (java.lang.Object[]) doubleArray15);
        java.util.Locale locale17 = java.util.Locale.ENGLISH;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale17.getLanguage();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray24 = mathException23.getSuppressed();
        java.lang.Throwable[] throwableArray25 = mathException23.getSuppressed();
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException26 = new org.apache.commons.math.geometry.NotARotationMatrixException("fran\347ais", (java.lang.Object[]) throwableArray25);
        java.io.PrintWriter printWriter27 = printWriter5.format(locale17, "ZXZ", (java.lang.Object[]) throwableArray25);
        java.lang.String[] strArray29 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter30 = printWriter5.format("\u97d3\u6587", (java.lang.Object[]) strArray29);
        printWriter5.println("it");
        printWriter5.println(0L);
        printWriter5.print('#');
        java.io.PrintWriter printWriter38 = new java.io.PrintWriter((java.io.Writer) printWriter5, false);
        java.io.PrintWriter printWriter40 = printWriter38.append('4');
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(printWriter16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en" + "'", str20, "en");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(printWriter27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(printWriter30);
        org.junit.Assert.assertNotNull(printWriter40);
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder8 = builder0.setLocale(locale7);
        java.util.Locale.Builder builder10 = builder0.setLanguage("fra");
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder13 = builder10.clearExtensions();
        java.util.Locale.Builder builder14 = builder10.clear();
        java.util.Locale.Builder builder15 = builder10.clear();
        java.util.Locale.Builder builder16 = builder10.clearExtensions();
        java.util.Locale.Builder builder18 = builder10.setLanguageTag("twn");
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder18.addUnicodeLocaleAttribute("en-gb");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en-gb [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale7);
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        java.lang.String str12 = locale7.getDisplayLanguage(locale10);
        java.util.Locale.setDefault(category5, locale10);
        java.lang.String[] strArray15 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream16 = printStream1.format(locale10, "fran\347ais", (java.lang.Object[]) strArray15);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        boolean boolean22 = locale21.hasExtensions();
        java.util.Locale.setDefault(category20, locale21);
        java.util.Set<java.lang.String> strSet24 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale21.getExtension('x');
        java.util.Locale.Builder builder27 = builder17.setLocale(locale21);
        java.util.Locale.Builder builder28 = builder17.clearExtensions();
        java.util.Locale locale29 = builder28.build();
        java.io.PrintStream printStream32 = new java.io.PrintStream("ko-KR");
        java.lang.String[] strArray36 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray41 = mathException40.getSuppressed();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray36, (java.lang.Throwable) mathException40);
        java.lang.Throwable[] throwableArray43 = mathException40.getSuppressed();
        java.io.PrintStream printStream44 = printStream32.printf("\ud504\ub791\uc2a4\uc5b4", (java.lang.Object[]) throwableArray43);
        java.io.PrintStream printStream45 = printStream16.printf(locale29, "\u5fb7\u56fd", (java.lang.Object[]) throwableArray43);
        java.lang.String[] strArray49 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray49, (java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray54 = mathException53.getSuppressed();
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray49, (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        mathException55.addSuppressed((java.lang.Throwable) mathException56);
        java.lang.Object[] objArray59 = mathException55.getArguments();
        java.lang.Throwable[] throwableArray60 = mathException55.getSuppressed();
        java.io.PrintStream printStream61 = printStream16.printf("\uc601\uad6d", (java.lang.Object[]) throwableArray60);
        java.io.PrintStream printStream63 = printStream16.append(' ');
        printStream16.println((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u97d3\u6587" + "'", str12, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(printStream16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(printStream44);
        org.junit.Assert.assertNotNull(printStream45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[AD, AE, AF, AG, AI, AL, AM, AN, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CU, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KP, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SY, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW]");
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(printStream61);
        org.junit.Assert.assertNotNull(printStream63);
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print("XYZ");
        java.io.PrintWriter printWriter11 = new java.io.PrintWriter((java.io.Writer) printWriter4, false);
        printWriter4.print((int) (byte) 1);
        printWriter4.println((java.lang.Object) (byte) 10);
        java.io.PrintWriter printWriter16 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.print('a');
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.println((float) (-1));
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        printStream1.println("tw");
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream9 = printStream1.append((java.lang.CharSequence) "fran\347\u6cd5\u6587)");
        org.junit.Assert.assertNotNull(printStream9);
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        org.apache.commons.math.geometry.Rotation rotation5 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double6 = rotation5.getQ1();
        double double7 = rotation5.getQ0();
        org.apache.commons.math.geometry.Vector3D vector3D9 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D11 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D12 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D9, (double) (byte) 100, vector3D11);
        org.apache.commons.math.geometry.Vector3D vector3D16 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, (double) '4');
        org.apache.commons.math.geometry.Vector3D vector3D17 = vector3D9.subtract((double) 10L, vector3D16);
        org.apache.commons.math.geometry.Vector3D vector3D18 = rotation5.applyInverseTo(vector3D16);
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray25 = rotation24.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D27 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D29 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D30 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D27, (double) (byte) 100, vector3D29);
        org.apache.commons.math.geometry.Vector3D vector3D32 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D34 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D35 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D32, (double) (byte) 100, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D36 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D29, vector3D34);
        org.apache.commons.math.geometry.Vector3D vector3D37 = rotation24.applyInverseTo(vector3D29);
        double double38 = rotation24.getQ0();
        org.apache.commons.math.geometry.Rotation rotation39 = rotation5.applyInverseTo(rotation24);
        double double40 = rotation5.getQ3();
        double[][] doubleArray41 = rotation5.getMatrix();
        org.apache.commons.math.geometry.Rotation rotation42 = rotation5.revert();
        org.apache.commons.math.geometry.Vector3D vector3D45 = new org.apache.commons.math.geometry.Vector3D((double) (short) 100, (double) 0);
        org.apache.commons.math.geometry.Vector3D vector3D46 = rotation5.applyTo(vector3D45);
        org.apache.commons.math.geometry.Vector3D vector3D48 = org.apache.commons.math.geometry.Vector3D.plusJ;
        org.apache.commons.math.geometry.Rotation rotation54 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double[][] doubleArray55 = rotation54.getMatrix();
        org.apache.commons.math.geometry.Vector3D vector3D57 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D59 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D60 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D57, (double) (byte) 100, vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D62 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D64 = org.apache.commons.math.geometry.Vector3D.zero;
        org.apache.commons.math.geometry.Vector3D vector3D65 = new org.apache.commons.math.geometry.Vector3D((double) (byte) 1, vector3D62, (double) (byte) 100, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D66 = org.apache.commons.math.geometry.Vector3D.crossProduct(vector3D59, vector3D64);
        org.apache.commons.math.geometry.Vector3D vector3D67 = rotation54.applyInverseTo(vector3D59);
        double double68 = vector3D59.getX();
        org.apache.commons.math.geometry.Vector3D vector3D69 = vector3D48.subtract(vector3D59);
        org.apache.commons.math.geometry.Vector3D vector3D74 = new org.apache.commons.math.geometry.Vector3D((-5.539714827914696d), 0.4705227400680958d, (-1.0d));
        org.apache.commons.math.geometry.Vector3D vector3D75 = vector3D59.subtract((-2.141592653589793d), vector3D74);
        double double76 = vector3D74.getDelta();
        double double77 = vector3D74.getDelta();
        org.apache.commons.math.geometry.Vector3D vector3D80 = new org.apache.commons.math.geometry.Vector3D((double) 0, (double) (short) 1);
        org.apache.commons.math.geometry.Vector3D vector3D81 = vector3D74.subtract(vector3D80);
        org.apache.commons.math.geometry.Vector3D vector3D82 = vector3D46.add(0.9251475365964139d, vector3D80);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 52.0d + "'", double7 == 52.0d);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertNotNull(rotation39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(rotation42);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-0.17796418399046268d) + "'", double76 == (-0.17796418399046268d));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-0.17796418399046268d) + "'", double77 == (-0.17796418399046268d));
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        printStream1.println((float) 100);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        printWriter18.close();
        java.util.Locale locale21 = new java.util.Locale("\uc911\uad6d\uc5b4");
        printWriter18.println((java.lang.Object) locale21);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray26 = mathException25.getSuppressed();
        java.lang.Object[] objArray27 = mathException25.getArguments();
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("eng", objArray27);
        java.io.PrintStream printStream29 = printStream1.printf(locale21, "germany", objArray27);
        printStream29.print("GB");
        printStream29.close();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale36, locale37, locale38, locale39, locale40, locale41, locale43, locale44, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList47, filteringMode49);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayLanguage();
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale54, locale55, locale56, locale57, locale58, locale59, locale61, locale62, locale63 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.Locale.FilteringMode filteringMode67 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList65, filteringMode67);
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList68);
        printStream29.print((java.lang.Object) languageRangeList34);
        java.io.PrintStream printStream72 = new java.io.PrintStream((java.io.OutputStream) printStream29, true);
        boolean boolean73 = printStream72.checkError();
        printStream72.print((long) (byte) 10);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertEquals(locale21.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(printStream29);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode49.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + filteringMode67 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode67.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        java.io.PrintStream printStream19 = printStream1.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        char[] charArray28 = new char[] { ' ', 'x' };
        printWriter25.write(charArray28);
        java.io.PrintWriter printWriter31 = printWriter25.append((java.lang.CharSequence) "Canada");
        boolean boolean32 = printWriter31.checkError();
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintStream printStream39 = printStream34.append((java.lang.CharSequence) "en");
        printStream34.print((int) ' ');
        printStream34.println((double) 100.0f);
        java.io.PrintStream printStream45 = new java.io.PrintStream("ko-KR");
        printStream45.close();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream45, false);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter48);
        char[] charArray52 = new char[] { ' ', 'x' };
        printWriter49.write(charArray52);
        printStream34.print(charArray52);
        printWriter31.write(charArray52);
        printStream1.print(charArray52);
        boolean boolean57 = printStream1.checkError();
        printStream1.close();
        printStream1.println(true);
        printStream1.println();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , x]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        org.apache.commons.math.geometry.RotationOrder rotationOrder0 = org.apache.commons.math.geometry.RotationOrder.XYZ;
        org.apache.commons.math.geometry.Vector3D vector3D1 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D2 = rotationOrder0.getA2();
        org.apache.commons.math.geometry.Vector3D vector3D3 = rotationOrder0.getA3();
        org.apache.commons.math.geometry.Vector3D vector3D4 = rotationOrder0.getA1();
        org.apache.commons.math.geometry.Vector3D vector3D5 = rotationOrder0.getA1();
        org.junit.Assert.assertNotNull(rotationOrder0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter5.println('a');
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder12 = builder8.setLanguage("ZXZ");
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder14 = builder8.setLocale(locale13);
        java.lang.Object[] objArray16 = null;
        java.io.PrintWriter printWriter17 = printWriter5.format(locale13, "TWN", objArray16);
        printWriter17.print("anglais");
        printWriter17.close();
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(printWriter17);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        java.util.Locale locale2 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale3);
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        java.lang.String str8 = locale3.getDisplayLanguage(locale6);
        java.lang.String str9 = locale2.getDisplayVariant(locale6);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder14 = builder10.setLanguage("ZXZ");
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder16 = builder10.setLocale(locale15);
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale.Builder builder18 = builder10.setLocale(locale17);
        java.lang.String str19 = locale17.getDisplayCountry();
        java.lang.String str20 = locale2.getDisplayScript(locale17);
        java.io.PrintStream printStream22 = new java.io.PrintStream("ko-KR");
        printStream22.close();
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.OutputStream) printStream22, false);
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter((java.io.Writer) printWriter25);
        printWriter26.print((long) (short) 100);
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.Writer) printWriter26, true);
        java.io.PrintWriter printWriter32 = printWriter26.append((java.lang.CharSequence) "English");
        java.io.PrintWriter printWriter34 = new java.io.PrintWriter((java.io.Writer) printWriter26, false);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder35.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder39 = builder35.setLanguage("ZXZ");
        java.util.Locale.Builder builder40 = builder35.clear();
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category42 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayLanguage();
        java.util.Locale.setDefault(category42, locale43);
        java.util.Locale.setDefault(category41, locale43);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale43.getDisplayLanguage(locale47);
        java.util.Locale.Builder builder49 = builder35.setLocale(locale47);
        java.lang.String str50 = locale47.getDisplayCountry();
        java.lang.Object[] objArray52 = null;
        java.io.PrintWriter printWriter53 = printWriter34.format(locale47, "en", objArray52);
        java.lang.String str54 = locale17.getDisplayVariant(locale47);
        java.io.PrintStream printStream56 = new java.io.PrintStream("ko-KR");
        printStream56.close();
        java.io.PrintWriter printWriter59 = new java.io.PrintWriter((java.io.OutputStream) printStream56, false);
        java.io.PrintWriter printWriter60 = new java.io.PrintWriter((java.io.Writer) printWriter59);
        printWriter59.println((float) (byte) -1);
        java.io.PrintWriter printWriter64 = new java.io.PrintWriter((java.io.Writer) printWriter59, true);
        java.lang.String[] strArray66 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter67 = printWriter59.printf("KR", (java.lang.Object[]) strArray66);
        java.io.PrintStream printStream69 = new java.io.PrintStream("ko-KR");
        printStream69.close();
        java.io.PrintWriter printWriter72 = new java.io.PrintWriter((java.io.OutputStream) printStream69, false);
        java.io.PrintWriter printWriter73 = new java.io.PrintWriter((java.io.Writer) printWriter72);
        char[] charArray76 = new char[] { ' ', 'x' };
        printWriter73.write(charArray76);
        printWriter59.println(charArray76);
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.util.Locale locale80 = java.util.Locale.TAIWAN;
        java.lang.String str81 = locale79.getDisplayScript(locale80);
        java.lang.String str82 = locale80.getVariant();
        java.lang.String[] strArray85 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray85);
        java.io.PrintWriter printWriter87 = printWriter59.printf(locale80, "English", (java.lang.Object[]) strArray85);
        java.lang.String str88 = locale80.getScript();
        java.util.Locale locale89 = locale80.stripExtensions();
        java.lang.String str90 = locale47.getDisplayLanguage(locale89);
        java.util.Locale locale91 = java.util.Locale.ROOT;
        java.lang.String str92 = locale91.getDisplayLanguage();
        java.lang.String str93 = locale47.getDisplayVariant(locale91);
        java.lang.String str94 = locale91.getDisplayScript();
        java.lang.String str95 = locale91.getVariant();
        java.lang.String str96 = locale91.getDisplayLanguage();
        boolean boolean97 = locale91.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u97d3\u6587" + "'", str8, "\u97d3\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uce90\ub098\ub2e4" + "'", str19, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.FORMAT + "'", category42.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(printWriter53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(printWriter67);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[ , x]");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(printWriter87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u5fb7\u6587" + "'", str90, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter((java.io.Writer) printWriter4, true);
        java.lang.String[] strArray11 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter12 = printWriter4.printf("KR", (java.lang.Object[]) strArray11);
        java.io.PrintStream printStream14 = new java.io.PrintStream("ko-KR");
        printStream14.close();
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream14, false);
        java.io.PrintWriter printWriter18 = new java.io.PrintWriter((java.io.Writer) printWriter17);
        char[] charArray21 = new char[] { ' ', 'x' };
        printWriter18.write(charArray21);
        printWriter4.println(charArray21);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        java.lang.String str27 = locale25.getVariant();
        java.lang.String[] strArray30 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter32 = printWriter4.printf(locale25, "English", (java.lang.Object[]) strArray30);
        java.io.PrintWriter printWriter33 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.util.Locale locale35 = locale34.stripExtensions();
        java.io.PrintStream printStream37 = new java.io.PrintStream("ko-KR");
        printStream37.close();
        java.io.PrintWriter printWriter40 = new java.io.PrintWriter((java.io.OutputStream) printStream37, false);
        java.io.PrintWriter printWriter41 = new java.io.PrintWriter((java.io.Writer) printWriter40);
        printWriter40.println((float) (byte) -1);
        java.io.PrintWriter printWriter45 = new java.io.PrintWriter((java.io.Writer) printWriter40, true);
        java.lang.String[] strArray47 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter48 = printWriter40.printf("KR", (java.lang.Object[]) strArray47);
        java.io.PrintStream printStream50 = new java.io.PrintStream("ko-KR");
        printStream50.close();
        java.io.PrintWriter printWriter53 = new java.io.PrintWriter((java.io.OutputStream) printStream50, false);
        java.io.PrintWriter printWriter54 = new java.io.PrintWriter((java.io.Writer) printWriter53);
        char[] charArray57 = new char[] { ' ', 'x' };
        printWriter54.write(charArray57);
        printWriter40.println(charArray57);
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.lang.String str62 = locale60.getDisplayScript(locale61);
        java.lang.String str63 = locale61.getVariant();
        java.lang.String[] strArray66 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray66);
        java.io.PrintWriter printWriter68 = printWriter40.printf(locale61, "English", (java.lang.Object[]) strArray66);
        java.lang.String str69 = locale61.getScript();
        java.lang.String str70 = locale34.getDisplayLanguage(locale61);
        printWriter33.print((java.lang.Object) str70);
        java.io.PrintWriter printWriter73 = printWriter33.append((java.lang.CharSequence) "it");
        printWriter73.write((int) (byte) 0);
        java.io.PrintWriter printWriter77 = printWriter73.append('#');
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(printWriter12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , x]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(printWriter32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(printWriter48);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ , x]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u97d3\u6587" + "'", str70, "\u97d3\u6587");
        org.junit.Assert.assertNotNull(printWriter73);
        org.junit.Assert.assertNotNull(printWriter77);
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String[] strArray5 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream6 = printStream1.format(locale3, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray5);
        java.io.PrintStream printStream8 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
        printStream1.println(10.0f);
        java.lang.String[] strArray13 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray13);
        java.io.PrintStream printStream15 = printStream1.format("\u97d3\u6587", (java.lang.Object[]) strArray13);
        printStream1.println((long) (short) 1);
        java.io.PrintStream printStream19 = printStream1.append((java.lang.CharSequence) "\uc601\uc5b4");
        java.io.PrintStream printStream21 = new java.io.PrintStream("ko-KR");
        printStream21.close();
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.OutputStream) printStream21, false);
        java.io.PrintWriter printWriter25 = new java.io.PrintWriter((java.io.Writer) printWriter24);
        char[] charArray28 = new char[] { ' ', 'x' };
        printWriter25.write(charArray28);
        java.io.PrintWriter printWriter31 = printWriter25.append((java.lang.CharSequence) "Canada");
        boolean boolean32 = printWriter31.checkError();
        java.io.PrintStream printStream34 = new java.io.PrintStream("ko-KR");
        printStream34.close();
        java.io.PrintWriter printWriter37 = new java.io.PrintWriter((java.io.OutputStream) printStream34, false);
        java.io.PrintStream printStream39 = printStream34.append((java.lang.CharSequence) "en");
        printStream34.print((int) ' ');
        printStream34.println((double) 100.0f);
        java.io.PrintStream printStream45 = new java.io.PrintStream("ko-KR");
        printStream45.close();
        java.io.PrintWriter printWriter48 = new java.io.PrintWriter((java.io.OutputStream) printStream45, false);
        java.io.PrintWriter printWriter49 = new java.io.PrintWriter((java.io.Writer) printWriter48);
        char[] charArray52 = new char[] { ' ', 'x' };
        printWriter49.write(charArray52);
        printStream34.print(charArray52);
        printWriter31.write(charArray52);
        printStream1.print(charArray52);
        printStream1.print((long) 'a');
        printStream1.print(1.0f);
        printStream1.close();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(printStream6);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(printStream15);
        org.junit.Assert.assertNotNull(printStream19);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , x]");
        org.junit.Assert.assertNotNull(printWriter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(printStream39);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), " x");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), " x");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[ , x]");
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        java.io.PrintStream printStream5 = new java.io.PrintStream("ko-KR");
        printStream5.close();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String[] strArray9 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream10 = printStream5.format(locale7, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray9);
        java.io.PrintStream printStream12 = new java.io.PrintStream((java.io.OutputStream) printStream5, false);
        printStream5.println();
        java.util.Locale locale16 = new java.util.Locale("org.apache.commons.math.geometry.NotARotationMatrixException: ", "zxz_FRAN\347AIS");
        java.io.PrintStream printStream19 = new java.io.PrintStream("ko-KR");
        printStream19.close();
        java.io.PrintWriter printWriter22 = new java.io.PrintWriter((java.io.OutputStream) printStream19, false);
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.Writer) printWriter22);
        printWriter22.println((float) (byte) -1);
        java.io.PrintWriter printWriter27 = new java.io.PrintWriter((java.io.Writer) printWriter22, true);
        org.apache.commons.math.geometry.Rotation rotation34 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double35 = rotation34.getQ0();
        org.apache.commons.math.geometry.Rotation rotation41 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double42 = rotation41.getQ0();
        org.apache.commons.math.geometry.Rotation rotation43 = rotation34.applyTo(rotation41);
        double double44 = rotation34.getQ0();
        double double45 = rotation34.getQ0();
        double[][] doubleArray46 = rotation34.getMatrix();
        java.io.PrintWriter printWriter47 = printWriter27.format("org.apache.commons.math.geometry.NotARotationMatrixException: ", (java.lang.Object[]) doubleArray46);
        java.lang.String[] strArray51 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray51, (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray56 = mathException55.getSuppressed();
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("\ub3c5\uc77c\uc5b4", (java.lang.Object[]) strArray51, (java.lang.Throwable) mathException55);
        java.lang.Throwable[] throwableArray58 = mathException55.getSuppressed();
        java.io.PrintWriter printWriter59 = printWriter47.format("org.apache.commons.math.MathException: ZXZ", (java.lang.Object[]) throwableArray58);
        java.lang.String[] strArray62 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray62, (java.lang.Throwable) mathException64);
        java.lang.String str66 = mathException64.getPattern();
        java.lang.Throwable[] throwableArray67 = mathException64.getSuppressed();
        java.io.PrintWriter printWriter68 = printWriter59.printf("\u97d3\u6587", (java.lang.Object[]) throwableArray67);
        java.lang.String[] strArray72 = java.util.Locale.getISOCountries();
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray72, (java.lang.Throwable) mathException74);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException76 = new org.apache.commons.math.geometry.NotARotationMatrixException("\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray72);
        java.io.PrintWriter printWriter77 = printWriter68.format("org.apache.commons.math.MathException", (java.lang.Object[]) strArray72);
        java.io.PrintStream printStream78 = printStream5.printf(locale16, "United Kingdom", (java.lang.Object[]) strArray72);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("XZY", (java.lang.Object[]) strArray72);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException80 = new org.apache.commons.math.geometry.NotARotationMatrixException("org.apache.commons.math.geometry.NotARotationMatrixException: zxz (KO_KR)", (java.lang.Object[]) strArray72);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("ko_KR");
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("zxz_KO_KR", (java.lang.Object[]) strArray72, (java.lang.Throwable) mathException84);
        org.apache.commons.math.geometry.NotARotationMatrixException notARotationMatrixException86 = new org.apache.commons.math.geometry.NotARotationMatrixException("italiano", (java.lang.Object[]) strArray72);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(printStream10);
        org.junit.Assert.assertEquals(locale16.toString(), "org.apache.commons.math.geometry.notarotationmatrixexception: _ZXZ_FRAN\347AIS");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(rotation43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 52.0d + "'", double45 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(printWriter47);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(printWriter59);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ko_KR" + "'", str66, "ko_KR");
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(printWriter68);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(printWriter77);
        org.junit.Assert.assertNotNull(printStream78);
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder4 = builder0.setLanguage("ZXZ");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale.setDefault(category6, locale8);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale12);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Canada");
        java.util.Locale.Builder builder18 = builder0.setLanguage("it");
        java.io.PrintStream printStream20 = new java.io.PrintStream("ko-KR");
        printStream20.close();
        java.io.PrintWriter printWriter23 = new java.io.PrintWriter((java.io.OutputStream) printStream20, false);
        java.io.PrintWriter printWriter24 = new java.io.PrintWriter((java.io.Writer) printWriter23);
        printWriter24.println('a');
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("ZXZ");
        java.util.Locale.Builder builder31 = builder27.setLanguage("ZXZ");
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder33 = builder27.setLocale(locale32);
        java.lang.Object[] objArray35 = null;
        java.io.PrintWriter printWriter36 = printWriter24.format(locale32, "TWN", objArray35);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.lang.String str38 = locale32.getDisplayCountry();
        java.util.Locale.Builder builder39 = builder18.setLocale(locale32);
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale locale41 = builder40.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder43 = builder40.setRegion("\uce90\ub098\ub2e4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ub3c5\uc77c" + "'", str38, "\ub3c5\uc77c");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        java.util.Locale locale1 = new java.util.Locale("TWN");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.lang.String str3 = locale1.getScript();
        org.junit.Assert.assertEquals(locale1.toString(), "twn");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        java.io.PrintStream printStream1 = new java.io.PrintStream("ko-KR");
        printStream1.close();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter((java.io.OutputStream) printStream1, false);
        java.io.PrintWriter printWriter5 = new java.io.PrintWriter((java.io.Writer) printWriter4);
        printWriter4.println((float) (byte) -1);
        printWriter4.print("XYZ");
        printWriter4.println((long) (byte) 100);
        org.apache.commons.math.geometry.Rotation rotation17 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double18 = rotation17.getQ0();
        org.apache.commons.math.geometry.Rotation rotation24 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double25 = rotation24.getQ0();
        org.apache.commons.math.geometry.Rotation rotation26 = rotation17.applyTo(rotation24);
        org.apache.commons.math.geometry.Rotation rotation27 = rotation17.revert();
        org.apache.commons.math.geometry.Rotation rotation33 = new org.apache.commons.math.geometry.Rotation((double) '4', (double) 100.0f, (double) (short) 0, (double) (short) 10, false);
        double double34 = rotation33.getQ0();
        org.apache.commons.math.geometry.Rotation rotation35 = rotation17.applyInverseTo(rotation33);
        org.apache.commons.math.geometry.RotationOrder rotationOrder36 = org.apache.commons.math.geometry.RotationOrder.YXZ;
        double[] doubleArray37 = rotation35.getAngles(rotationOrder36);
        printWriter4.print((java.lang.Object) rotationOrder36);
        java.lang.String str39 = rotationOrder36.toString();
        org.apache.commons.math.geometry.Rotation rotation43 = new org.apache.commons.math.geometry.Rotation(rotationOrder36, (-0.5440211108893698d), (-9.897364177896005d), 0.09854256232107494d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertNotNull(rotation26);
        org.junit.Assert.assertNotNull(rotation27);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
        org.junit.Assert.assertNotNull(rotation35);
        org.junit.Assert.assertNotNull(rotationOrder36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, -0.0, 0.0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "YXZ" + "'", str39, "YXZ");
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(category4, locale5);
        java.lang.String str8 = locale5.getISO3Language();
        java.lang.String str9 = locale5.getDisplayScript();
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str11 = locale5.getScript();
        java.io.PrintStream printStream13 = new java.io.PrintStream("ko-KR");
        printStream13.close();
        java.util.Locale locale15 = java.util.Locale.UK;
        java.lang.String[] strArray17 = java.util.Locale.getISOCountries();
        java.io.PrintStream printStream18 = printStream13.format(locale15, "\uc911\uad6d\uc5b4", (java.lang.Object[]) strArray17);
        java.io.PrintStream printStream20 = new java.io.PrintStream((java.io.OutputStream) printStream13, false);
        printStream13.println(10.0f);
        java.lang.String[] strArray25 = java.util.Locale.getISOLanguages();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("ZXZ", (java.lang.Object[]) strArray25);
        java.io.PrintStream printStream27 = printStream13.format("\u97d3\u6587", (java.lang.Object[]) strArray25);
        printStream13.flush();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter((java.io.OutputStream) printStream13, false);
        java.io.PrintWriter printWriter31 = new java.io.PrintWriter((java.io.OutputStream) printStream13);
        printWriter31.flush();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("English");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        printWriter31.println((java.lang.Object) locale34);
        java.lang.String str37 = locale5.getDisplayCountry(locale34);
        java.util.Locale.Category category38 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = new java.util.Locale("ZXZ", "ko_KR");
        java.util.Locale.setDefault(category38, locale41);
        java.util.Locale locale43 = java.util.Locale.getDefault(category38);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.lang.String str45 = locale44.getDisplayName();
        boolean boolean46 = locale44.hasExtensions();
        java.lang.String str47 = locale43.getDisplayLanguage(locale44);
        java.util.Locale locale51 = new java.util.Locale("ita", "\ud504\ub791\uc2a4\uc5b4", "KR");
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        java.lang.String str53 = locale44.getDisplayVariant(locale51);
        java.lang.String str54 = locale5.getDisplayVariant(locale44);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(printStream18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(printStream27);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "english");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.FORMAT + "'", category38.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale41.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zxz_KO_KR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English" + "'", str45, "English");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zxz" + "'", str47, "zxz");
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "\ud504\ub791\uc2a4\uc5b4_KR");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }
}

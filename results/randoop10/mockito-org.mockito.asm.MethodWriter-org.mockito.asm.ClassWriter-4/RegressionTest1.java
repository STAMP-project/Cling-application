import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1432403946", true);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField((int) (short) 100, "L71767159", "hi!", "L71767159", (java.lang.Object) (-91551935198370816L));
        org.mockito.asm.Attribute attribute18 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(fieldVisitor17);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("java.io.IOException: ", true);
        annotationVisitor15.visitEnum("L1432403946", "L1432403946", "");
        annotationVisitor15.visitEnd();
        annotationVisitor15.visitEnum("L852881485", "L781877917", "L616447458");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor15.visitArray("L71767159");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter29.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter29.visitAnnotation("hi!", false);
        classWriter29.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!" };
        classWriter46.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray54);
        org.mockito.asm.MethodVisitor methodVisitor56 = classWriter29.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray54);
        methodVisitor56.visitMethodInsn(10, "hi!", "hi!", "java.io.IOException");
        methodVisitor56.visitIincInsn((-1107296256), 202);
        methodVisitor56.visitMaxs(21, (int) '4');
        methodVisitor56.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor26.visit("L1452494871", (java.lang.Object) methodVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@1bcdb1d3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor56);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        classWriter13.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray21);
        byte[] byteArray23 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int26 = classReader24.readByte((int) (byte) 1);
        int int28 = classReader24.readByte(11);
        byte[] byteArray29 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int35 = classWriter31.newField("hi!", "hi!", "hi!");
        int int37 = classWriter31.newClass("java.io.IOException");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter31, 92);
        int int40 = classWriter1.newConst((java.lang.Object) 92);
        byte[] byteArray41 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        byte[] byteArray58 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        java.lang.String[] strArray60 = classReader59.getInterfaces();
        classWriter1.visit((int) (short) 1024, (int) ' ', "L616447458", "L71767159", "L1502377119", strArray60);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!" };
        classWriter68.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray76);
        byte[] byteArray78 = classWriter68.toByteArray();
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray78);
        int int81 = classReader79.readByte((int) (byte) 1);
        int int83 = classReader79.readByte(11);
        byte[] byteArray84 = classReader79.b;
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int90 = classWriter86.newField("hi!", "hi!", "hi!");
        int int92 = classWriter86.newClass("java.io.IOException");
        classReader79.accept((org.mockito.asm.ClassVisitor) classWriter86, 92);
        int int96 = classReader79.readInt(8);
        java.lang.String[] strArray97 = classReader79.getInterfaces();
        classWriter1.visit(1, 8296, "java/io/IOException", "L1131836979", "L1231535858", strArray97);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 254 + "'", int26 == 254);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 3, 0, 0, 0, 92, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 254 + "'", int81 == 254);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 655616 + "'", int96 == 655616);
        org.junit.Assert.assertNotNull(strArray97);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        int int19 = classReader14.readByte(2);
        java.lang.String[] strArray20 = classReader14.getInterfaces();
        byte[] byteArray21 = classReader14.b;
        byte[] byteArray22 = classReader14.b;
        // The following exception was thrown during execution in test generation
        try {
            int int24 = classReader14.getItem(17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label35.info = "java.io.IOException: hi!";
        java.lang.String str52 = label35.toString();
        java.lang.String str53 = label35.toString();
        org.mockito.asm.Label label54 = new org.mockito.asm.Label();
        label54.info = (-1);
        label35.info = label54;
        // The following exception was thrown during execution in test generation
        try {
            int int58 = label35.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "L1254992757" + "'", str52, "L1254992757");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "L1254992757" + "'", str53, "L1254992757");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitFieldInsn(3, "L781877917", "L1432403946", "");
        methodVisitor28.visitInsn((-1));
        org.mockito.asm.Label label44 = new org.mockito.asm.Label();
        label44.info = (-1);
        methodVisitor28.visitLabel(label44);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter50.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter50.visitAnnotation("hi!", false);
        classWriter50.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!" };
        classWriter67.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray75);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter50.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray75);
        methodVisitor77.visitInsn(100);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        label83.info = (-1);
        org.mockito.asm.Label label86 = new org.mockito.asm.Label();
        methodVisitor77.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label83, label86, 8);
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int93 = classWriter90.newNameType("", "java.io.IOException");
        label86.info = classWriter90;
        java.lang.Object obj95 = label86.info;
        methodVisitor28.visitJumpInsn((int) (short) 4970, label86);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = label86.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertNotNull(obj95);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        int int15 = classWriter1.newMethod("L1502377119", "java.io.IOException", "L852881485", false);
        classWriter1.visitSource("L984287299", "L1947403627");
        org.mockito.asm.ByteVector byteVector23 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector25 = byteVector23.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector27 = byteVector23.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector29 = byteVector27.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector31 = byteVector27.putByte(0);
        org.mockito.asm.ByteVector byteVector33 = byteVector31.putUTF8("L1335427656");
        org.mockito.asm.ByteVector byteVector35 = byteVector31.putLong((long) (short) -326);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField((int) (short) 0, "L478252604", "java.io.IOException: java.io.IOException: hi!", "java/io/IOException", (java.lang.Object) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("java.io.IOException: java.io.IOException: ", true);
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor36.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 13 + "'", int15 == 13);
        org.junit.Assert.assertNotNull(byteVector25);
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
        org.junit.Assert.assertNotNull(byteVector31);
        org.junit.Assert.assertNotNull(byteVector33);
        org.junit.Assert.assertNotNull(byteVector35);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1432403946", true);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField((int) (short) 100, "L71767159", "hi!", "L71767159", (java.lang.Object) (-91551935198370816L));
        classWriter1.visitOuterClass("L630721910", "L1335427656", "L71767159");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter27.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter27.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor33.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = annotationVisitor33.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = annotationVisitor39.visitArray("java.io.IOException: ");
        org.mockito.asm.FieldVisitor fieldVisitor42 = classWriter1.visitField((int) (short) -17730, "L1335427656", "L1502517182", "L853084801", (java.lang.Object) "java.io.IOException: ");
        org.mockito.asm.Attribute attribute43 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor42.visitAttribute(attribute43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor42);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("java.io.IOException: ", true);
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor12.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.ByteVector byteVector24 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector26 = byteVector24.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector28 = byteVector24.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector30 = byteVector28.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector32 = byteVector30.putInt((int) (short) 0);
        annotationVisitor22.visit("L3070851", (java.lang.Object) (short) 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int40 = classWriter36.newField("hi!", "hi!", "hi!");
        int int42 = classWriter36.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter36.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = fieldVisitor48.visitAnnotation("L478252604", true);
        fieldVisitor48.visitEnd();
        fieldVisitor48.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor22.visit("L598330668", (java.lang.Object) fieldVisitor48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.FieldWriter@5244c99c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteVector26);
        org.junit.Assert.assertNotNull(byteVector28);
        org.junit.Assert.assertNotNull(byteVector30);
        org.junit.Assert.assertNotNull(byteVector32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        int int63 = classReader12.getAccess();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int7 = classWriter1.newNameType("L1335427656", "java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L367481933", true);
        org.mockito.asm.Attribute attribute12 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor11);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = methodVisitor28.visitAnnotation("java.io.IOException: hi!", false);
        annotationVisitor34.visitEnum("L1635572015", "L1635572015", "L630721910");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = annotationVisitor34.visitAnnotation("L1131836979", "L643431443");
        annotationVisitor34.visitEnum("L1231535858", "L2054713387", "L181135275");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        java.lang.String str17 = classReader12.getClassName();
        java.lang.String[] strArray18 = classReader12.getInterfaces();
        int int19 = classReader12.getAccess();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        classWriter22.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray30);
        byte[] byteArray32 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray32, 0, 0);
        java.lang.String str36 = classReader35.getSuperName();
        int int38 = classReader35.readInt(0);
        char[] charArray43 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj44 = classReader35.readConst(7, charArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = classReader12.readUTF8((int) '4', charArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28788");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.io.IOException: hi!" + "'", str36, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-889275714) + "'", int38 == (-889275714));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + "java.io.IOException: hi!" + "'", obj44, "java.io.IOException: hi!");
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L1035695636", "L1335427656", "java.io.IOException: hi!", (int) (byte) -1);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        int int23 = classWriter1.newNameType("L853084801", "L269304557");
        classWriter1.visitInnerClass("L478252604", "L691331867", "L886841972", 6);
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        java.lang.String str14 = classReader12.getSuperName();
        char[] charArray18 = new char[] { '#', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = classReader12.readUTF8(58, charArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8296");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException: hi!" + "'", str14, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, a]");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int18 = classReader12.readUnsignedShort(58);
        byte[] byteArray19 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray19, 51966, (int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51974");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8296 + "'", int18 == 8296);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter21.newField("hi!", "hi!", "hi!");
        classWriter21.visitEnd();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter32.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter32.visitAnnotation("hi!", false);
        classWriter32.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!" };
        classWriter49.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter32.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter21.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter1.visitMethod(6, "L1635572015", "L1035695636", "L1145278557", strArray57);
        classWriter1.visitSource("L1635572015", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter1.visitAnnotation("java.io.IOException: java.io.IOException", true);
        classWriter1.visitSource("L1267349573", "L1274768994");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor67);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector4.putByte(0);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        byte[] byteArray20 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray20);
        java.lang.String[] strArray22 = classReader21.getInterfaces();
        int int24 = classReader21.readByte(8);
        int int26 = classReader21.getItem((int) (byte) 1);
        byte[] byteArray27 = classReader21.b;
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        org.mockito.asm.ByteVector byteVector31 = byteVector8.putByteArray(byteArray27, 11, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray27, 554106887, 26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 554106895");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector31);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String str17 = classReader12.getSuperName();
        int int19 = classReader12.readInt(12);
        int int20 = classReader12.getAccess();
        char[] charArray23 = new char[] { '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = classReader12.readUTF8(196864, charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 196864");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException: hi!" + "'", str17, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 325738870 + "'", int19 == 325738870);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4]");
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        int int10 = classWriter1.newField("L1603039582", "L781877917", "L1526910237");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        byte[] byteArray26 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray26, 0, 0);
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray26);
        byte[] byteArray31 = classReader30.b;
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(554106887, "L1704178553", "L71767159", "L1231535858", (java.lang.Object) classReader32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@28a70f8b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        char[] charArray21 = new char[] { 'a', 'a', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = classReader12.readUTF8(256, charArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, a, 4]");
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor13.visitAnnotation("L478252604", true);
        fieldVisitor13.visitEnd();
        fieldVisitor13.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = fieldVisitor13.visitAnnotation("L1335427656", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = fieldVisitor13.visitAnnotation("java.io.IOException: java.io.IOException: ", false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            short short65 = classReader12.readShort(48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48640");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector4.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector10 = byteVector4.putByte(8);
        org.mockito.asm.ByteVector byteVector12 = byteVector10.putShort(16);
        org.mockito.asm.ByteVector byteVector14 = byteVector12.putLong((long) 100);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter16.newField("hi!", "hi!", "hi!");
        classWriter16.visitEnd();
        classWriter16.visitSource("java.io.IOException", "");
        classWriter16.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray28 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector32 = byteVector14.putByteArray(byteArray28, (int) 'a', 655616);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertNotNull(byteVector12);
        org.junit.Assert.assertNotNull(byteVector14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int7 = classWriter1.newNameType("L1335427656", "java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L367481933", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = annotationVisitor11.visitAnnotation("L1335427656", "L2054713387");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor14.visitAnnotation("L991437862", "L1035695636");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor17);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        classWriter21.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter1.visitMethod(13, "L1432403946", "java.io.IOException: ", "L478252604", strArray29);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!" };
        classWriter38.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray46);
        byte[] byteArray48 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        java.lang.String[] strArray50 = classReader49.getInterfaces();
        short short52 = classReader49.readShort(12);
        java.lang.String[] strArray53 = classReader49.getInterfaces();
        int int55 = classReader49.readUnsignedShort(10);
        java.lang.Class<?> wildcardClass56 = classReader49.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor57 = classWriter1.visitField(1024, "L801380897", "L643431443", "L1526910237", (java.lang.Object) classReader49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@419040aa");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + short52 + "' != '" + (short) 4970 + "'", short52 == (short) 4970);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 256 + "'", int55 == 256);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newConst((java.lang.Object) 10L);
        classWriter19.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter19.visitMethod((int) (short) 4970, "L1335427656", "java.io.IOException: ", "L1335427656", strArray65);
        classWriter1.visit((int) (short) 10, 9, "hi!", "java.io.IOException", "L71767159", strArray65);
        java.lang.Object obj74 = null;
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField(17, "L478252604", "L1335427656", "L71767159", obj74);
        fieldVisitor75.visitEnd();
        org.mockito.asm.Attribute attribute77 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor75.visitAttribute(attribute77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertNotNull(fieldVisitor75);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.getAccess();
        int int16 = classReader12.getAccess();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter18.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter18.visitAnnotation("hi!", false);
        int int27 = classWriter18.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        byte[] byteArray39 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        java.lang.String[] strArray41 = classReader40.getInterfaces();
        int int43 = classReader40.readByte(8);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        classWriter45.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray53);
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter45.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute61 = null;
        org.mockito.asm.Attribute[] attributeArray62 = new org.mockito.asm.Attribute[] { attribute61 };
        classReader40.accept((org.mockito.asm.ClassVisitor) classWriter45, attributeArray62, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter18, attributeArray62, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = classReader12.readInt(1024);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1024");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(attributeArray62);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitIntInsn((int) (short) 0, 12);
        methodVisitor28.visitVarInsn((int) (short) 3, 19);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter42.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter42.visitAnnotation("hi!", false);
        classWriter42.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        classWriter59.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter42.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray67);
        methodVisitor69.visitInsn(100);
        methodVisitor69.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        java.lang.Object obj77 = label76.info;
        methodVisitor69.visitJumpInsn(3, label76);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter80.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter80.visitAnnotation("hi!", false);
        classWriter80.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label76.info = "java.io.IOException: hi!";
        java.lang.String str93 = label76.toString();
        org.mockito.asm.Label[] labelArray94 = new org.mockito.asm.Label[] {};
        methodVisitor28.visitTableSwitchInsn(325738870, (int) (short) 256, label76, labelArray94);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = label76.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "L1528942597" + "'", str93, "L1528942597");
        org.junit.Assert.assertNotNull(labelArray94);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        int int18 = classWriter1.newClass("");
        int int21 = classWriter1.newNameType("java.io.IOException: ", "java.io.IOException: java.io.IOException: ");
        int int24 = classWriter1.newNameType("L1035695636", "L1704178553");
        classWriter1.visitSource("L269304557", "L1131836979");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        methodVisitor60.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        java.lang.Object obj68 = label67.info;
        methodVisitor60.visitJumpInsn(3, label67);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter71.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter71.visitAnnotation("hi!", false);
        classWriter71.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label67.info = "java.io.IOException: hi!";
        java.lang.String str84 = label67.toString();
        java.lang.String str85 = label67.toString();
        methodVisitor28.visitJumpInsn(0, label67);
        methodVisitor28.visitTypeInsn((int) (short) 100, "L853084801");
        methodVisitor28.visitEnd();
        methodVisitor28.visitMultiANewArrayInsn("L869511749", (-1107296256));
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L80982279" + "'", str84, "L80982279");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L80982279" + "'", str85, "L80982279");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        java.lang.Object obj65 = label64.info;
        java.lang.Object obj66 = label64.info;
        methodVisitor59.visitJumpInsn((int) '4', label64);
        methodVisitor59.visitTypeInsn(17, "L852881485");
        methodVisitor59.visitFieldInsn((int) (short) -1, "L691331867", "L2054713387", "L598330668");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor59.visitParameterAnnotation(8296, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        java.lang.String str15 = classReader12.getClassName();
        long long17 = classReader12.readLong(16);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(classReader12, 117);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        classWriter25.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray33);
        byte[] byteArray35 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        java.lang.String[] strArray37 = classReader36.getInterfaces();
        short short39 = classReader36.readShort(12);
        java.lang.String[] strArray40 = classReader36.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor41 = classWriter19.visitMethod((int) (byte) 0, "", "java.io.IOException", "L886841972", strArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 19");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException" + "'", str15, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7002650396846542661L + "'", long17 == 7002650396846542661L);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) 4970 + "'", short39 == (short) 4970);
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "L1635572015", "L1635572015", 16);
        org.mockito.asm.Attribute attribute21 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter19.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter19.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int41 = classWriter37.newField("hi!", "hi!", "hi!");
        classWriter37.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter48.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter48.visitAnnotation("hi!", false);
        classWriter48.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        classWriter65.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter48.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter37.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter19.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray73);
        classWriter1.visit(0, (int) (byte) 10, "", "java.io.IOException: hi!", "java.io.IOException", strArray73);
        classWriter1.visitEnd();
        int int83 = classWriter1.newField("L1808373495", "L1808373495", "L616447458");
        int int85 = classWriter1.newClass("L1603039582");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 16 + "'", int83 == 16);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 18 + "'", int85 == 18);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor13.visitAnnotation("L478252604", true);
        fieldVisitor13.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor13.visitAnnotation("", false);
        org.mockito.asm.Attribute attribute21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor13.visitAttribute(attribute21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        byte[] byteArray16 = classWriter1.toByteArray();
        classWriter1.visitSource("", "L478252604");
        byte[] byteArray20 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = classReader21.getItem(27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitCode();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter29.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        classWriter29.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        java.lang.Object[] objArray49 = null;
        methodVisitor20.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray45, 9, objArray49);
        methodVisitor20.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor55 = methodVisitor20.visitParameterAnnotation((int) (short) -326, "L1808373495", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L1035695636", "L1335427656", "java.io.IOException: hi!", (int) (byte) -1);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        int int23 = classWriter1.newNameType("L853084801", "L269304557");
        org.mockito.asm.ByteVector byteVector28 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector30 = byteVector28.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector32 = byteVector28.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector34 = byteVector32.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector36 = byteVector32.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector38 = byteVector32.putByte(8);
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter1.visitField((int) (short) 4970, "L589783872", "L1603039582", "L717126513", (java.lang.Object) 8);
        fieldVisitor39.visitEnd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertNotNull(byteVector30);
        org.junit.Assert.assertNotNull(byteVector32);
        org.junit.Assert.assertNotNull(byteVector34);
        org.junit.Assert.assertNotNull(byteVector36);
        org.junit.Assert.assertNotNull(byteVector38);
        org.junit.Assert.assertNotNull(fieldVisitor39);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        int int13 = classWriter1.newClass("L181135275");
        int int15 = classWriter1.newClass("L1502377119");
        org.mockito.asm.Attribute attribute16 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod(2, "java.io.IOException: hi!", "L1432403946", "java.io.IOException", strArray16);
        classWriter1.visitSource("hi!", "L71767159");
        int int23 = classWriter1.newNameType("", "L613898026");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        int int16 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("", true);
        annotationVisitor19.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor19.visitAnnotation("hi!", "L1518273899");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor23);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitCode();
        methodVisitor28.visitIincInsn((int) (short) 100, (int) (short) 0);
        methodVisitor28.visitInsn((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor28.visitParameterAnnotation(0, "L886841972", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitCode();
        methodVisitor28.visitIntInsn((int) (short) 10, 0);
        methodVisitor28.visitMethodInsn(655616, "L630721910", "", "L1635572015");
        methodVisitor28.visitVarInsn(1986080361, 92);
        methodVisitor28.visitLdcInsn((java.lang.Object) "L1274768994");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        byte[] byteArray28 = classWriter15.toByteArray();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter34.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter34.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter34.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter15.visitField(4, "L852881485", "L852881485", "java.io.IOException: ", (java.lang.Object) false);
        classWriter15.visitInnerClass("L1526910237", "L1131836979", "L71767159", 10);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, 10);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int61 = classWriter58.newNameType("", "java.io.IOException");
        int int66 = classWriter58.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int68 = classWriter58.newConst((java.lang.Object) 10L);
        classWriter58.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter58.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray91 = new java.lang.String[] { "", "hi!" };
        classWriter83.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray91);
        byte[] byteArray93 = classWriter83.toByteArray();
        org.mockito.asm.ClassReader classReader94 = new org.mockito.asm.ClassReader(byteArray93);
        int int96 = classReader94.readByte((int) (byte) 1);
        java.lang.String[] strArray97 = classReader94.getInterfaces();
        classWriter58.visit(1, 2, "", "L598330668", "java.io.IOException", strArray97);
        classWriter15.visit((int) '#', 92, "L991437862", "java.io.IOException: java.io.IOException: ", "L616447458", strArray97);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 10, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(fieldVisitor44);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 254 + "'", int96 == 254);
        org.junit.Assert.assertNotNull(strArray97);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitSource("L717126513", "L2057645265");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        int int29 = classWriter21.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int31 = classWriter21.newUTF8("hi!");
        classWriter21.visitEnd();
        classWriter21.visitEnd();
        java.lang.String[] strArray39 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter21.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(0, "L630721910", "", "L71767159", strArray39);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter44.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter44.visitAnnotation("hi!", false);
        classWriter44.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!" };
        classWriter61.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray69);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter44.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray69);
        methodVisitor71.visitInsn(100);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        label77.info = (-1);
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        methodVisitor71.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label77, label80, 8);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int87 = classWriter84.newNameType("", "java.io.IOException");
        label80.info = classWriter84;
        methodVisitor41.visitLineNumber((int) (short) -326, label80);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor41.visitAnnotationDefault();
        annotationVisitor90.visitEnum("L1432403946", "L71767159", "L853084801");
        annotationVisitor90.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitFieldInsn((int) ' ', "java.io.IOException: hi!", "java.io.IOException: ", "L1335427656");
        methodVisitor28.visitVarInsn((int) (short) 4970, 186);
        methodVisitor28.visitIntInsn((int) (short) 10, 0);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        classWriter43.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray51);
        byte[] byteArray53 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        java.lang.String[] strArray55 = classReader54.getInterfaces();
        int int57 = classReader54.readByte(8);
        int int59 = classReader54.getItem((int) (byte) 1);
        int int61 = classReader54.readByte(0);
        int int63 = classReader54.readUnsignedShort((int) 'a');
        java.lang.String str64 = classReader54.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLdcInsn((java.lang.Object) classReader54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@59a45827");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 11 + "'", int59 == 11);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 202 + "'", int61 == 202);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1024 + "'", int63 == 1024);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.io.IOException" + "'", str64, "java.io.IOException");
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter1.visitEnd();
        int int18 = classWriter1.newUTF8("L801380897");
        int int20 = classWriter1.newClass("L1452494871");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        java.lang.String str14 = classReader12.getClassName();
        long long16 = classReader12.readLong(12);
        char[] charArray18 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = classReader12.readUTF8((int) '4', charArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28788");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException" + "'", str14, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1399037795316427119L + "'", long16 == 1399037795316427119L);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[]");
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        classWriter1.visitOuterClass("java.io.IOException", "java.io.IOException", "java.io.IOException: ");
        classWriter1.visitOuterClass("L852881485", "L1432403946", "hi!");
        classWriter1.visitInnerClass("L886841972", "L1035695636", "L1603039582", 12);
        java.lang.Class<?> wildcardClass34 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitTypeInsn(11, "");
        methodVisitor28.visitFieldInsn((-1), "java.io.IOException: ", "L1131836979", "L2066229866");
        methodVisitor28.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        java.lang.Object obj22 = null;
        org.mockito.asm.FieldVisitor fieldVisitor23 = classWriter1.visitField((int) (byte) 10, "", "hi!", "L1335427656", obj22);
        classWriter1.visitOuterClass("", "L71767159", "L1635572015");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int36 = classWriter33.newNameType("", "java.io.IOException");
        int int41 = classWriter33.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int43 = classWriter33.newConst((java.lang.Object) 10L);
        classWriter33.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter33.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter1.visitField(6, "L852881485", "L1635572015", "L781877917", (java.lang.Object) "L1635572015");
        classWriter1.visitSource("L478252604", "L1274768994");
        org.mockito.asm.Attribute attribute56 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor23);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor52);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "java.io.IOException: ", "java.io.IOException", "hi!" };
        classWriter1.visit(1, 254, "", "java.io.IOException: hi!", "hi!", strArray20);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int30 = classWriter27.newNameType("", "java.io.IOException");
        int int32 = classWriter27.newClass("java.io.IOException");
        classWriter27.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        int int39 = classWriter27.newClass("L181135275");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter27.visitAnnotation("L181135275", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor43 = classWriter1.visitField(163, "L616447458", "L939499658", "L1145278557", (java.lang.Object) annotationVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@64639766");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Class<?> wildcardClass11 = annotationVisitor10.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        int int12 = classWriter1.newUTF8("java.io.IOException: hi!");
        int int14 = classWriter1.newUTF8("");
        classWriter1.visitSource("L2066229866", "java.io.IOException: java.io.IOException: ");
        classWriter1.visitEnd();
        int int21 = classWriter1.newNameType("L643431443", "");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitInsn((int) (byte) 0);
        methodVisitor28.visitTypeInsn((int) (short) 1, "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int41 = classWriter38.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter38.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray55);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" };
        classWriter63.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray71);
        byte[] byteArray73 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        int int76 = classReader74.readByte((int) (byte) 1);
        int int77 = classReader74.header;
        java.lang.String str78 = classReader74.getSuperName();
        java.lang.String[] strArray79 = classReader74.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter38.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray79);
        org.mockito.asm.Label label81 = new org.mockito.asm.Label();
        java.lang.Object obj82 = label81.info;
        java.lang.Object obj83 = label81.info;
        methodVisitor80.visitLabel(label81);
        java.lang.Object obj85 = label81.info;
        methodVisitor28.visitLineNumber(14, label81);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor28.visitAnnotation("java.io.IOException: java.io.IOException: hi!", false);
        methodVisitor28.visitInsn((int) ' ');
        methodVisitor28.visitIntInsn((int) (short) 0, 14);
        methodVisitor28.visitFieldInsn((int) (byte) 10, "L1432403946", "L1145278557", "L583575715");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 254 + "'", int76 == 254);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 92 + "'", int77 == 92);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.io.IOException: hi!" + "'", str78, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        byte[] byteArray16 = classWriter1.toByteArray();
        classWriter1.visitSource("", "L478252604");
        int int22 = classWriter1.newNameType("L1603039582", "java.io.IOException: hi!");
        classWriter1.visitSource("L181135275", "L1502377119");
        java.lang.Object obj26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = classWriter1.newConst(obj26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int65 = classReader12.readByte(3);
        java.lang.String str66 = classReader12.getSuperName();
        int int67 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader12, 20);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter69.visitAnnotation("L598330668", true);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter79.visitEnd();
        org.mockito.asm.ClassWriter classWriter87 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray95 = new java.lang.String[] { "", "hi!" };
        classWriter87.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray95);
        classWriter79.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray95);
        classWriter69.visit(16782186, (int) (short) 4970, "L613898026", "L1518273899", "L1518273899", strArray95);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 190 + "'", int65 == 190);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.io.IOException: hi!" + "'", str66, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 92 + "'", int67 == 92);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(strArray95);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("java.io.IOException");
        java.lang.String str2 = classReader1.getClassName();
        org.mockito.asm.ClassWriter classWriter5 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" };
        classWriter5.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray13);
        byte[] byteArray15 = classWriter5.toByteArray();
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray15, 0, 0);
        java.lang.String str19 = classReader18.getSuperName();
        int int21 = classReader18.readInt(0);
        char[] charArray26 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj27 = classReader18.readConst(7, charArray26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = classReader1.readConst(0, charArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java/io/IOException" + "'", str2, "java/io/IOException");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-889275714) + "'", int21 == (-889275714));
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "java.io.IOException: hi!" + "'", obj27, "java.io.IOException: hi!");
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter1.visitMethod(1, "L1432403946", "L1635572015", "L1432403946", strArray39);
        methodVisitor42.visitVarInsn(254, 11);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor42.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(methodVisitor42);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitInsn((int) (byte) 0);
        org.mockito.asm.Label label36 = new org.mockito.asm.Label();
        java.lang.Object obj37 = label36.info;
        java.lang.Object obj38 = label36.info;
        methodVisitor28.visitJumpInsn((int) (byte) -1, label36);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        classWriter41.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray49);
        byte[] byteArray51 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray51, 0, 0);
        java.lang.String str55 = classReader54.getSuperName();
        label36.info = classReader54;
        int int57 = classReader54.getAccess();
        byte[] byteArray58 = classReader54.b;
        java.lang.String str59 = classReader54.getSuperName();
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "hi!" };
        classWriter62.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray70);
        byte[] byteArray72 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader75 = new org.mockito.asm.ClassReader(byteArray72, 0, 0);
        java.lang.String str76 = classReader75.getSuperName();
        int int78 = classReader75.readInt(0);
        char[] charArray83 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj84 = classReader75.readConst(7, charArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = classReader54.readConst(2, charArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.io.IOException: hi!" + "'", str55, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.io.IOException: hi!" + "'", str59, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java.io.IOException: hi!" + "'", str76, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-889275714) + "'", int78 == (-889275714));
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "jav");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "jav");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[j, a, v]");
        org.junit.Assert.assertEquals("'" + obj84 + "' != '" + "java.io.IOException: hi!" + "'", obj84, "java.io.IOException: hi!");
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putInt((int) (short) 0);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter10.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter10.visitAnnotation("hi!", false);
        classWriter10.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "hi!" };
        classWriter27.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray35);
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter10.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray35);
        methodVisitor37.visitInsn((int) (byte) 10);
        methodVisitor37.visitLdcInsn((java.lang.Object) 12);
        methodVisitor37.visitInsn((int) (byte) 0);
        org.mockito.asm.Label label45 = new org.mockito.asm.Label();
        java.lang.Object obj46 = label45.info;
        java.lang.Object obj47 = label45.info;
        methodVisitor37.visitJumpInsn((int) (byte) -1, label45);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        byte[] byteArray60 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray60, 0, 0);
        java.lang.String str64 = classReader63.getSuperName();
        label45.info = classReader63;
        int int66 = classReader63.getAccess();
        byte[] byteArray67 = classReader63.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector70 = byteVector6.putByteArray(byteArray67, (int) (short) 100, 1165517669);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.io.IOException: hi!" + "'", str64, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        int int19 = classReader14.readByte(2);
        java.lang.String[] strArray20 = classReader14.getInterfaces();
        byte[] byteArray21 = classReader14.b;
        byte[] byteArray22 = classReader14.b;
        // The following exception was thrown during execution in test generation
        try {
            long long24 = classReader14.readLong(554106887);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 554106887");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        byte[] byteArray18 = classReader12.b;
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray18, 23, 186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        byte[] byteArray15 = classReader12.b;
        char[] charArray23 = new char[] { '4', '4', '#', 'a', '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = classReader12.readClass((int) (short) 1024, charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1024");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "44#a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "44#a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4, 4, #, a, 4, #]");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitInsn((int) (byte) 0);
        org.mockito.asm.Label label36 = new org.mockito.asm.Label();
        java.lang.Object obj37 = label36.info;
        java.lang.Object obj38 = label36.info;
        methodVisitor28.visitJumpInsn((int) (byte) -1, label36);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        classWriter41.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray49);
        byte[] byteArray51 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray51, 0, 0);
        java.lang.String str55 = classReader54.getSuperName();
        label36.info = classReader54;
        short short58 = classReader54.readShort((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int60 = classReader54.readUnsignedShort(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.io.IOException: hi!" + "'", str55, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + short58 + "' != '" + (short) 1792 + "'", short58 == (short) 1792);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int64 = classReader12.getAccess();
        byte[] byteArray65 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            long long67 = classReader12.readLong(554106887);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 554106887");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        byte[] byteArray18 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray18, 12, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 293");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        byte[] byteArray15 = classReader12.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        byte[] byteArray28 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter31.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter31.visitAnnotation("hi!", false);
        classWriter31.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter31.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray56);
        methodVisitor58.visitInsn(100);
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        label64.info = (-1);
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        methodVisitor58.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label64, label67, 8);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int74 = classWriter71.newNameType("", "java.io.IOException");
        label67.info = classWriter71;
        org.mockito.asm.Attribute[] attributeArray76 = new org.mockito.asm.Attribute[] {};
        classReader29.accept((org.mockito.asm.ClassVisitor) classWriter71, attributeArray76, 0);
        int int80 = classWriter71.newClass("");
        classReader16.accept((org.mockito.asm.ClassVisitor) classWriter71, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            short short84 = classReader16.readShort(16782186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16782186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(attributeArray76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 7 + "'", int80 == 7);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label35.info = "java.io.IOException: hi!";
        java.lang.String str52 = label35.toString();
        java.lang.String str53 = label35.toString();
        org.mockito.asm.Label label54 = new org.mockito.asm.Label();
        label54.info = (-1);
        label35.info = label54;
        // The following exception was thrown during execution in test generation
        try {
            int int58 = label54.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "L35266492" + "'", str52, "L35266492");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "L35266492" + "'", str53, "L35266492");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.getAccess();
        int int16 = classReader12.getAccess();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter18.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter18.visitAnnotation("hi!", false);
        int int27 = classWriter18.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        byte[] byteArray39 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        java.lang.String[] strArray41 = classReader40.getInterfaces();
        int int43 = classReader40.readByte(8);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        classWriter45.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray53);
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter45.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute61 = null;
        org.mockito.asm.Attribute[] attributeArray62 = new org.mockito.asm.Attribute[] { attribute61 };
        classReader40.accept((org.mockito.asm.ClassVisitor) classWriter45, attributeArray62, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter18, attributeArray62, 3);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(classReader12, (-1107296256));
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "hi!" };
        classWriter71.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray79);
        byte[] byteArray81 = classWriter71.toByteArray();
        org.mockito.asm.ClassReader classReader84 = new org.mockito.asm.ClassReader(byteArray81, 0, 0);
        java.lang.String str85 = classReader84.getSuperName();
        int int87 = classReader84.readInt(0);
        char[] charArray92 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj93 = classReader84.readConst(7, charArray92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj94 = classReader12.readConst(1677724161, charArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1677724161");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(attributeArray62);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "java.io.IOException: hi!" + "'", str85, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-889275714) + "'", int87 == (-889275714));
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj93 + "' != '" + "java.io.IOException: hi!" + "'", obj93, "java.io.IOException: hi!");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor28.visitAnnotation("java.io.IOException: ", true);
        methodVisitor28.visitMaxs((int) (short) -13570, 254);
        methodVisitor28.visitFieldInsn(51966, "L1335427656", "L2066229866", "L176482898");
        methodVisitor28.visitMaxs((int) (short) 25600, 48640);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitIincInsn((int) (byte) 1, 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor28.visitAnnotation("", false);
        methodVisitor28.visitIincInsn((int) '4', 393224);
        methodVisitor28.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor47 = methodVisitor28.visitParameterAnnotation(186, "L656401292", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        java.lang.String str19 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        classWriter22.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray30);
        byte[] byteArray32 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray32, 0, 0);
        java.lang.String str36 = classReader35.getSuperName();
        int int38 = classReader35.readInt(0);
        char[] charArray43 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj44 = classReader35.readConst(7, charArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = classReader12.readUTF8(117, charArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 118");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.io.IOException: hi!" + "'", str36, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-889275714) + "'", int38 == (-889275714));
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + "java.io.IOException: hi!" + "'", obj44, "java.io.IOException: hi!");
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String str17 = classReader12.getClassName();
        byte[] byteArray18 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray18, 1986080361, 554106887);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1986080369");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter23.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray48);
        methodVisitor50.visitInsn(100);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        label56.info = (-1);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        methodVisitor50.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label56, label59, 8);
        label59.info = 11;
        org.mockito.asm.ByteVector byteVector64 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector66 = byteVector64.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector68 = byteVector64.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector70 = byteVector68.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector72 = byteVector70.putInt((int) (short) 0);
        org.mockito.asm.ByteVector byteVector74 = byteVector70.putInt(92);
        label59.info = 92;
        methodVisitor20.visitJumpInsn(81, label59);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor20.visitAnnotation("L176482898", true);
        methodVisitor20.visitEnd();
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int86 = classWriter82.newField("hi!", "hi!", "hi!");
        classWriter82.visitEnd();
        classWriter82.visitSource("", "java.io.IOException");
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor20.visitLdcInsn((java.lang.Object) classWriter82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@3b179b99");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(byteVector66);
        org.junit.Assert.assertNotNull(byteVector68);
        org.junit.Assert.assertNotNull(byteVector70);
        org.junit.Assert.assertNotNull(byteVector72);
        org.junit.Assert.assertNotNull(byteVector74);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        classWriter1.visitSource("L1603039582", "L3070851");
        org.mockito.asm.Attribute attribute19 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter35.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter35.visitAnnotation("hi!", false);
        classWriter35.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!" };
        classWriter52.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter35.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray60);
        methodVisitor62.visitInsn(100);
        methodVisitor62.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        java.lang.Object obj70 = label69.info;
        methodVisitor62.visitJumpInsn(3, label69);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter73.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter73.visitAnnotation("hi!", false);
        classWriter73.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label69.info = "java.io.IOException: hi!";
        java.lang.String str86 = label69.toString();
        methodVisitor28.visitLineNumber(4, label69);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = label69.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "L1473075971" + "'", str86, "L1473075971");
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector(4);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" };
        classWriter3.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray11);
        byte[] byteArray13 = classWriter3.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter16.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter16.visitAnnotation("hi!", false);
        classWriter16.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" };
        classWriter33.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray41);
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter16.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray41);
        methodVisitor43.visitInsn(100);
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        label49.info = (-1);
        org.mockito.asm.Label label52 = new org.mockito.asm.Label();
        methodVisitor43.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label49, label52, 8);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int59 = classWriter56.newNameType("", "java.io.IOException");
        label52.info = classWriter56;
        org.mockito.asm.Attribute[] attributeArray61 = new org.mockito.asm.Attribute[] {};
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter56, attributeArray61, 0);
        byte[] byteArray64 = classReader14.b;
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector68 = byteVector1.putByteArray(byteArray64, 655616, 19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(attributeArray61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        methodVisitor28.visitIincInsn(5, 10);
        methodVisitor28.visitMethodInsn(12, "L1145278557", "", "L630721910");
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter50.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter50.visitAnnotation("hi!", false);
        classWriter50.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!" };
        classWriter67.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray75);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter50.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray75);
        methodVisitor77.visitInsn(100);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        label83.info = (-1);
        org.mockito.asm.Label label86 = new org.mockito.asm.Label();
        methodVisitor77.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label83, label86, 8);
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int93 = classWriter90.newNameType("", "java.io.IOException");
        label86.info = classWriter90;
        java.lang.Object obj95 = label86.info;
        methodVisitor28.visitJumpInsn(163, label86);
        java.lang.Object obj97 = label86.info;
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertNotNull(obj97);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitTypeInsn(11, "");
        methodVisitor28.visitFieldInsn((-1), "java.io.IOException: ", "L1131836979", "L2066229866");
        methodVisitor28.visitInsn((int) (short) 1);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L1035695636", "L1335427656", "java.io.IOException: hi!", (int) (byte) -1);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        int int23 = classWriter1.newNameType("L853084801", "L269304557");
        org.mockito.asm.Attribute attribute24 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        byte[] byteArray16 = classWriter1.toByteArray();
        classWriter1.visitSource("", "L478252604");
        byte[] byteArray20 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter1.visitAnnotation("L1947403627", true);
        org.mockito.asm.Attribute attribute24 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
        org.junit.Assert.assertNotNull(annotationVisitor23);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(3, (int) (byte) 0);
        methodVisitor28.visitIincInsn(12, 4);
        methodVisitor28.visitEnd();
        methodVisitor28.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor28.visitParameterAnnotation(1667592308, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int17 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            short short19 = classReader12.readShort((-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -889275714");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 92 + "'", int17 == 92);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter16.newField("hi!", "hi!", "hi!");
        int int22 = classWriter16.newClass("java.io.IOException");
        // The following exception was thrown during execution in test generation
        try {
            classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, (int) (short) 256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter19.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter19.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int41 = classWriter37.newField("hi!", "hi!", "hi!");
        classWriter37.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter48.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter48.visitAnnotation("hi!", false);
        classWriter48.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        classWriter65.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter48.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter37.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter19.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray73);
        classWriter1.visit(0, (int) (byte) 10, "", "java.io.IOException: hi!", "java.io.IOException", strArray73);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute80 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(methodVisitor77);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        java.lang.String str15 = classReader12.getClassName();
        long long17 = classReader12.readLong(16);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(classReader12, 117);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader12.getItem((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException" + "'", str15, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7002650396846542661L + "'", long17 == 7002650396846542661L);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        java.lang.String str18 = classReader12.getSuperName();
        int int19 = classReader12.getAccess();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        classWriter22.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray30);
        byte[] byteArray32 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray32, 0, 0);
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray32);
        int int37 = classReader36.header;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        byte[] byteArray50 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray50, 0, 0);
        java.lang.String str54 = classReader53.getSuperName();
        int int56 = classReader53.readInt(0);
        char[] charArray61 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj62 = classReader53.readConst(7, charArray61);
        java.lang.String str63 = classReader36.readClass(100, charArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = classReader12.readClass(24, charArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30819");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 92 + "'", int37 == 92);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.io.IOException: hi!" + "'", str54, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-889275714) + "'", int56 == (-889275714));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + "java.io.IOException: hi!" + "'", obj62, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor28.visitAnnotation("java.io.IOException: ", true);
        annotationVisitor42.visitEnum("L1526910237", "java.io.IOException: ", "L583575715");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = methodVisitor59.visitAnnotation("L478252604", true);
        methodVisitor59.visitIincInsn((int) ' ', (int) (short) 100);
        methodVisitor59.visitIincInsn(9, 65210);
        methodVisitor59.visitIntInsn(48640, (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        java.lang.Class<?> wildcardClass18 = classReader17.getClass();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        classWriter13.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray21);
        byte[] byteArray23 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int26 = classReader24.readByte((int) (byte) 1);
        int int28 = classReader24.readByte(11);
        byte[] byteArray29 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int35 = classWriter31.newField("hi!", "hi!", "hi!");
        int int37 = classWriter31.newClass("java.io.IOException");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter31, 92);
        int int40 = classWriter1.newConst((java.lang.Object) 92);
        byte[] byteArray41 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray41, 5, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 124");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 254 + "'", int26 == 254);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 3, 0, 0, 0, 92, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        classWriter21.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter1.visitMethod(13, "L1432403946", "java.io.IOException: ", "L478252604", strArray29);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor31);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMultiANewArrayInsn("hi!", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter35.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray43);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter35.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        methodVisitor28.visitLdcInsn((java.lang.Object) (byte) 1);
        methodVisitor28.visitCode();
        methodVisitor28.visitInsn(23);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(fieldVisitor50);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(3, (int) (byte) 0);
        methodVisitor28.visitInsn((int) (byte) 0);
        org.mockito.asm.Attribute attribute37 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int16 = classWriter13.newNameType("", "java.io.IOException");
        int int21 = classWriter13.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int23 = classWriter13.newConst((java.lang.Object) 10L);
        int int25 = classWriter13.newUTF8("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor26 = classWriter1.visitField(3, "", "L478252604", "java.io.IOException: ", (java.lang.Object) "hi!");
        java.lang.Object obj31 = null;
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField((int) ' ', "hi!", "L71767159", "L1335427656", obj31);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute34 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor26);
        org.junit.Assert.assertNotNull(fieldVisitor32);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.getAccess();
        int int16 = classReader12.getAccess();
        java.lang.String str17 = classReader12.getClassName();
        char[] charArray19 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = classReader12.readClass(20, charArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11849");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor59.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        methodVisitor59.visitEnd();
        methodVisitor59.visitCode();
        org.mockito.asm.Label label71 = new org.mockito.asm.Label();
        java.lang.Object obj72 = label71.info;
        java.lang.Object obj73 = label71.info;
        methodVisitor59.visitJumpInsn((int) (short) 1, label71);
        methodVisitor59.visitTypeInsn(254, "L643431443");
        methodVisitor59.visitFieldInsn((int) ' ', "java.io.IOException: ", "L1603039582", "L1145278557");
        methodVisitor59.visitInsn((int) 'a');
        methodVisitor59.visitIntInsn(0, 1165517669);
        methodVisitor59.visitMaxs(0, 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        byte[] byteArray18 = classReader12.b;
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readInt(20);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 776556357 + "'", int21 == 776556357);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        classWriter1.visitOuterClass("L1526910237", "L1635572015", "L616447458");
        classWriter1.visitSource("L852881485", "java.io.IOException: java.io.IOException: hi!");
        org.mockito.asm.Attribute attribute17 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int27 = classWriter24.newNameType("", "java.io.IOException");
        int int32 = classWriter24.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(92, "java.io.IOException", "L717126513", "L598330668", (java.lang.Object) "java.io.IOException: hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = fieldVisitor33.visitAnnotation("L2066229866", true);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitMethodInsn(10, "hi!", "hi!", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter36.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter36.visitAnnotation("hi!", false);
        classWriter36.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        classWriter53.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter36.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray61);
        methodVisitor63.visitInsn(100);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        label69.info = (-1);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        methodVisitor63.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label69, label72, 8);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int79 = classWriter76.newNameType("", "java.io.IOException");
        label72.info = classWriter76;
        java.lang.String str81 = label72.toString();
        methodVisitor28.visitJumpInsn((-1), label72);
        java.lang.String str83 = label72.toString();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L1367834389" + "'", str81, "L1367834389");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "L1367834389" + "'", str83, "L1367834389");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitIntInsn((int) (byte) -1, 4);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        int int29 = classReader12.readInt(8);
        int int31 = classReader12.readByte((int) (short) 1);
        int int32 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classReader12.getItem((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 655616 + "'", int29 == 655616);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 254 + "'", int31 == 254);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 92 + "'", int32 == 92);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        int int8 = classWriter1.newClass("java.io.IOException: ");
        int int10 = classWriter1.newClass("");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int26 = classWriter23.newNameType("", "java.io.IOException");
        int int28 = classWriter23.newClass("java.io.IOException");
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter35.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray43);
        classWriter23.visit((int) (short) 0, (int) (byte) 1, "java.io.IOException: hi!", "java.io.IOException: hi!", "java.io.IOException", strArray43);
        classWriter16.visit(7, 10, "L1635572015", "L71767159", "L1335427656", strArray43);
        org.mockito.asm.MethodVisitor methodVisitor47 = classWriter1.visitMethod(6, "L269304557", "L613898026", "L1603039582", strArray43);
        org.mockito.asm.Attribute attribute48 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor47.visitAttribute(attribute48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodVisitor47);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter15.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter15.visitAnnotation("hi!", false);
        int int24 = classWriter15.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        classWriter15.visitInnerClass("java.io.IOException", "java.io.IOException: ", "java.io.IOException: hi!", (int) (byte) 10);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, 10);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int36 = classWriter33.newNameType("", "java.io.IOException");
        int int41 = classWriter33.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        byte[] byteArray42 = classWriter33.toByteArray();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        byte[] byteArray58 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        int int61 = classReader59.readByte((int) (byte) 1);
        int int63 = classReader59.readByte(11);
        byte[] byteArray64 = classReader59.b;
        int int65 = classReader59.header;
        byte[] byteArray66 = classReader59.b;
        int int68 = classReader59.readByte(8);
        org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter33.visitField(1024, "L1274768994", "L1274768994", "L71767159", (java.lang.Object) int68);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter33, 6);
        int int73 = classWriter33.newClass("java.io.IOException: ");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 254 + "'", int61 == 254);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 92 + "'", int65 == 92);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 16 + "'", int73 == 16);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(3, (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.ByteVector byteVector37 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector39 = byteVector37.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector41 = byteVector39.putByte(0);
        org.mockito.asm.ByteVector byteVector43 = byteVector39.putLong(5464991387954793L);
        org.mockito.asm.ByteVector byteVector45 = byteVector43.putByte((int) (byte) 10);
        org.mockito.asm.ByteVector byteVector47 = byteVector45.putByte((int) (short) 256);
        annotationVisitor35.visit("L478252604", (java.lang.Object) (short) 256);
        annotationVisitor35.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(byteVector39);
        org.junit.Assert.assertNotNull(byteVector41);
        org.junit.Assert.assertNotNull(byteVector43);
        org.junit.Assert.assertNotNull(byteVector45);
        org.junit.Assert.assertNotNull(byteVector47);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray13, 100, (int) (byte) 100);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader17.readByte((int) (short) -326);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -326");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        long long17 = classReader12.readLong((int) (byte) 0);
        int int19 = classReader12.readUnsignedShort(0);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter21.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter21.visitAnnotation("hi!", false);
        classWriter21.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter21.visitAnnotation("", true);
        int int37 = classWriter21.newClass("java.io.IOException: ");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter21, (-21316096));
        java.lang.String str40 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        classWriter43.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray51);
        byte[] byteArray53 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray53, 0, 0);
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray53);
        int int58 = classReader57.header;
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!" };
        classWriter61.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray69);
        byte[] byteArray71 = classWriter61.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray71, 0, 0);
        java.lang.String str75 = classReader74.getSuperName();
        int int77 = classReader74.readInt(0);
        char[] charArray82 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj83 = classReader74.readConst(7, charArray82);
        java.lang.String str84 = classReader57.readClass(100, charArray82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = classReader12.readClass(8296, charArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8296");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3819410108757049244L) + "'", long17 == (-3819410108757049244L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51966 + "'", int19 == 51966);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.io.IOException: hi!" + "'", str40, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 92 + "'", int58 == 92);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "java.io.IOException: hi!" + "'", str75, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-889275714) + "'", int77 == (-889275714));
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray82), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray82), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray82), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + "java.io.IOException: hi!" + "'", obj83, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        classWriter1.visitSource("java.io.IOException: ", "L1432403946");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "L1704178553", "java.io.IOException: java.io.IOException: ", "L869511749", (java.lang.Object) "L801380897");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor16);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("java.io.IOException: ", false);
        annotationVisitor16.visitEnum("java.io.IOException: ", "L1335427656", "java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor16.visitAnnotation("L852881485", "L2066229866");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter26.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter26.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter26.visitAnnotation("hi!", false);
        int int37 = classWriter26.newUTF8("hi!");
        classWriter26.visitEnd();
        byte[] byteArray39 = classWriter26.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor16.visit("L886841972", (java.lang.Object) classWriter26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@6411848d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 2, 0, 1, 0, 4, 0, 0, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 0, 5, 0, 0, 0, 10, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0]");
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter22.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter22.visitAnnotation("hi!", false);
        classWriter22.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!" };
        classWriter39.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter22.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (short) 4970, "L1335427656", "java.io.IOException: ", "L1335427656", strArray47);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter53.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter53.visitAnnotation("hi!", false);
        classWriter53.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "hi!" };
        classWriter70.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter53.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray78);
        methodVisitor80.visitInsn((int) (byte) 10);
        methodVisitor80.visitLdcInsn((java.lang.Object) 12);
        methodVisitor80.visitInsn((int) (byte) 0);
        org.mockito.asm.Label label88 = new org.mockito.asm.Label();
        java.lang.Object obj89 = label88.info;
        java.lang.Object obj90 = label88.info;
        methodVisitor80.visitJumpInsn((int) (byte) -1, label88);
        methodVisitor50.visitJumpInsn(15, label88);
        java.lang.Object obj93 = label88.info;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass94 = obj93.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        classWriter19.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray27);
        byte[] byteArray29 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter32.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter32.visitAnnotation("hi!", false);
        classWriter32.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!" };
        classWriter49.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter32.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray57);
        methodVisitor59.visitInsn(100);
        org.mockito.asm.Label label65 = new org.mockito.asm.Label();
        label65.info = (-1);
        org.mockito.asm.Label label68 = new org.mockito.asm.Label();
        methodVisitor59.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label65, label68, 8);
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int75 = classWriter72.newNameType("", "java.io.IOException");
        label68.info = classWriter72;
        org.mockito.asm.Attribute[] attributeArray77 = new org.mockito.asm.Attribute[] {};
        classReader30.accept((org.mockito.asm.ClassVisitor) classWriter72, attributeArray77, 0);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader30, (int) (short) 10);
        int int86 = classWriter81.newMethod("java.io.IOException: hi!", "hi!", "", true);
        int int91 = classWriter81.newMethod("java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", false);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter81, 92);
        org.mockito.asm.Attribute attribute94 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter81.visitAttribute(attribute94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertNotNull(attributeArray77);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 11 + "'", int86 == 11);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 13 + "'", int91 == 13);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        classWriter9.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray17);
        classWriter1.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray17);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        int int26 = classWriter21.newClass("java.io.IOException");
        classWriter21.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "java.io.IOException: ", "java.io.IOException", "hi!" };
        classWriter21.visit(1, 254, "", "java.io.IOException: hi!", "hi!", strArray40);
        int int46 = classWriter21.newMethod("L1335427656", "L1635572015", "L1335427656", true);
        classWriter21.visitInnerClass("L781877917", "L2066229866", "L1502377119", 186);
        byte[] byteArray52 = classWriter21.toByteArray();
        classWriter21.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter21.visitAnnotation("L269304557", true);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = classWriter1.newConst((java.lang.Object) annotationVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@70732e7a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 16 + "'", int46 == 16);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertNotNull(annotationVisitor56);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor13.visitAnnotation("L478252604", true);
        org.mockito.asm.Attribute attribute17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor13.visitAttribute(attribute17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        annotationVisitor15.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor15.visitAnnotation("java.io.IOException: java.io.IOException: ", "L367481933");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor19);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        methodVisitor28.visitCode();
        methodVisitor28.visitTypeInsn(48640, "L781877917");
        org.mockito.asm.Label label42 = new org.mockito.asm.Label();
        java.lang.Object obj43 = label42.info;
        methodVisitor28.visitLabel(label42);
        int int45 = label42.getOffset();
        java.lang.String str46 = label42.toString();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "L1085647388" + "'", str46, "L1085647388");
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int32 = classWriter29.newNameType("", "java.io.IOException");
        int int34 = classWriter29.newClass("java.io.IOException");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        classWriter41.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray49);
        classWriter29.visit((int) (short) 0, (int) (byte) 1, "java.io.IOException: hi!", "java.io.IOException: hi!", "java.io.IOException", strArray49);
        classWriter22.visit(7, 10, "L1635572015", "L71767159", "L1335427656", strArray49);
        classWriter1.visit((int) (byte) 10, (int) '#', "", "L176482898", "L852881485", strArray49);
        classWriter1.visitEnd();
        classWriter1.visitSource("L1432403946", "");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(strArray49);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(classReader12, 11);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader12.readByte((int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        classWriter21.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter1.visitMethod(13, "L1432403946", "java.io.IOException: ", "L478252604", strArray29);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter38.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter38.visitAnnotation("hi!", false);
        classWriter38.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" };
        classWriter55.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter38.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray63);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter1.visitMethod(167837715, "L1131836979", "L1432403946", "L583575715", strArray63);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L1502377119", "java.io.IOException: L1518273899", "L1085647388", 76);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertNotNull(methodVisitor66);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int10 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        int int13 = classWriter1.newNameType("L1335427656", "java.io.IOException");
        int int17 = classWriter1.newField("L781877917", "L616447458", "L598330668");
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int27 = classWriter24.newNameType("", "java.io.IOException");
        int int32 = classWriter24.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter24.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter24.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int46 = classWriter42.newField("hi!", "hi!", "hi!");
        classWriter42.visitEnd();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter53.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter53.visitAnnotation("hi!", false);
        classWriter53.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "hi!" };
        classWriter70.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter53.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter42.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter24.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray78);
        classWriter1.visit(18, 776556357, "hi!", "java.io.IOException: L598330668", "java.io.IOException: java.io.IOException: hi!", strArray78);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 13 + "'", int17 == 13);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        byte[] byteArray9 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("L583575715", "", "L886841972");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1432403946", true);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField((int) (short) 100, "L71767159", "hi!", "L71767159", (java.lang.Object) (-91551935198370816L));
        org.mockito.asm.Attribute attribute18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor17.visitAttribute(attribute18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(fieldVisitor17);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.getAccess();
        int int16 = classReader12.readUnsignedShort((int) (byte) 100);
        int int17 = classReader12.header;
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 92 + "'", int17 == 92);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        java.lang.String str63 = classReader12.getSuperName();
        byte[] byteArray64 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            long long66 = classReader12.readLong(554106887);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.io.IOException: hi!" + "'", str63, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter23.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray48);
        methodVisitor50.visitInsn(100);
        methodVisitor50.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label57 = new org.mockito.asm.Label();
        java.lang.Object obj58 = label57.info;
        methodVisitor50.visitJumpInsn(3, label57);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter61.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter61.visitAnnotation("hi!", false);
        classWriter61.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label57.info = "java.io.IOException: hi!";
        java.lang.String str74 = label57.toString();
        java.lang.String str75 = label57.toString();
        methodVisitor20.visitLabel(label57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor20.visitParameterAnnotation(14, "L616447458", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L597099918" + "'", str74, "L597099918");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L597099918" + "'", str75, "L597099918");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(117);
        org.mockito.asm.Attribute attribute2 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        java.lang.String str19 = classReader12.getClassName();
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(classReader12, 9);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = classReader12.readUnsignedShort((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException" + "'", str19, "java.io.IOException");
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        classWriter13.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray21);
        classWriter1.visit((int) (short) 0, (int) (byte) 1, "java.io.IOException: hi!", "java.io.IOException: hi!", "java.io.IOException", strArray21);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L781877917", false);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        byte[] byteArray39 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        int int42 = classReader40.readByte((int) (byte) 1);
        int int43 = classReader40.header;
        java.lang.String str44 = classReader40.getSuperName();
        java.lang.String str45 = classReader40.getSuperName();
        int int47 = classReader40.readInt(12);
        byte[] byteArray48 = classReader40.b;
        // The following exception was thrown during execution in test generation
        try {
            int int49 = classWriter1.newConst((java.lang.Object) byteArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@2aa3c695");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 254 + "'", int42 == 254);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 92 + "'", int43 == 92);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.io.IOException: hi!" + "'", str44, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.io.IOException: hi!" + "'", str45, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 325738870 + "'", int47 == 325738870);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newUTF8("hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int39 = classWriter36.newNameType("", "java.io.IOException");
        int int44 = classWriter36.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int46 = classWriter36.newUTF8("hi!");
        classWriter36.visitEnd();
        classWriter36.visitEnd();
        java.lang.String[] strArray54 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter36.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray54);
        methodVisitor55.visitEnd();
        methodVisitor55.visitIntInsn((int) '4', 13);
        methodVisitor55.visitCode();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter64.visitEnd();
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!" };
        classWriter72.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray80);
        classWriter64.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray80);
        java.lang.Object[] objArray84 = null;
        methodVisitor55.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray80, 9, objArray84);
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter19.visitMethod(186, "L1035695636", "L1145278557", "L1131836979", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter1.visitMethod(167837715, "java.io.IOException: hi!", "java.io.IOException", "L1635572015", strArray80);
        int int89 = classWriter1.newUTF8("L2066229866");
        int int93 = classWriter1.newField("L717126513", "L367481933", "L1704178553");
        int int95 = classWriter1.newClass("L80982279");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertNotNull(methodVisitor87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 12 + "'", int89 == 12);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 18 + "'", int93 == 18);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 20 + "'", int95 == 20);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int21 = classWriter17.newField("hi!", "hi!", "hi!");
        classWriter17.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter17.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter17.visitAnnotation("java.io.IOException", true);
        byte[] byteArray32 = classWriter17.toByteArray();
        classWriter17.visitInnerClass("java.io.IOException", "L852881485", "L598330668", (int) (short) -13570);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter17, 12);
        int int40 = classReader14.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader14.readUnsignedShort(8296);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector4.putByte(0);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        byte[] byteArray20 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray20);
        java.lang.String[] strArray22 = classReader21.getInterfaces();
        int int24 = classReader21.readByte(8);
        int int26 = classReader21.getItem((int) (byte) 1);
        byte[] byteArray27 = classReader21.b;
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        org.mockito.asm.ByteVector byteVector31 = byteVector8.putByteArray(byteArray27, 11, (int) '#');
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int36 = classWriter33.newNameType("", "java.io.IOException");
        int int41 = classWriter33.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int43 = classWriter33.newConst((java.lang.Object) 10L);
        classWriter33.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        byte[] byteArray49 = classWriter33.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector52 = byteVector8.putByteArray(byteArray49, (int) (byte) 100, (int) (short) -17730);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 5, 0, 0, 0, 0, 0, 0, 0, 10, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 7, 0, 11, 7, 0, 2, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 14, 0, 0, 0, 10, 0, 1, 0, 12, 0, 13, 0, 2, 0, 12]");
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitCode();
        methodVisitor28.visitIincInsn((int) (short) 100, (int) (short) 0);
        methodVisitor28.visitMaxs(655616, 24);
        methodVisitor28.visitIincInsn(1165517669, 776556357);
        methodVisitor28.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int68 = classWriter63.newMethod("java.io.IOException: hi!", "hi!", "", true);
        int int73 = classWriter63.newMethod("java.io.IOException: ", "java.io.IOException: java.io.IOException: ", "L1131836979", true);
        classWriter63.visitEnd();
        classWriter63.visitSource("java.io.IOException: L1635572015", "L853084801");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 17 + "'", int73 == 17);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        int int21 = classReader17.readByte((int) '#');
        byte[] byteArray22 = classReader17.b;
        int int24 = classReader17.readUnsignedShort(11);
        byte[] byteArray25 = classReader17.b;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = classReader17.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 121");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter41.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter41.visitAnnotation("hi!", false);
        classWriter41.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        classWriter58.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter41.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray66);
        methodVisitor68.visitInsn(100);
        methodVisitor68.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        java.lang.Object obj76 = label75.info;
        methodVisitor68.visitJumpInsn(3, label75);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter79.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter79.visitAnnotation("hi!", false);
        classWriter79.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label75.info = "java.io.IOException: hi!";
        int[] intArray92 = new int[] {};
        org.mockito.asm.Label[] labelArray93 = new org.mockito.asm.Label[] {};
        methodVisitor28.visitLookupSwitchInsn(label75, intArray92, labelArray93);
        methodVisitor28.visitIincInsn(48640, (int) (short) 0);
        org.mockito.asm.Attribute attribute98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(labelArray93);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("", "L1335427656");
        classWriter1.visitSource("L2066229866", "L1274768994");
        org.mockito.asm.Attribute attribute8 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        int int21 = classReader17.readByte((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader17, (int) (short) 25600);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2048");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putShort((int) '#');
        org.mockito.asm.ByteVector byteVector6 = byteVector2.putByte(554106887);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int12 = classWriter8.newField("hi!", "hi!", "hi!");
        classWriter8.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor19 = classWriter8.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter8.visitAnnotation("java.io.IOException", true);
        byte[] byteArray23 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector27 = byteVector2.putByteArray(byteArray23, 26, 51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        int int12 = classWriter1.newUTF8("java.io.IOException: hi!");
        int int14 = classWriter1.newUTF8("");
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter20.newField("hi!", "hi!", "hi!");
        classWriter20.visitEnd();
        classWriter20.visitSource("java.io.IOException", "");
        classWriter20.visitOuterClass("java.io.IOException: hi!", "L1635572015", "L1035695636");
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(51966, "L1933677661", "java.io.IOException: java.io.IOException: ", "L2066229866", (java.lang.Object) "L1635572015");
        fieldVisitor33.visitEnd();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor33);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int64 = classReader12.header;
        byte[] byteArray65 = classReader12.b;
        java.lang.String str66 = classReader12.getSuperName();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 92 + "'", int64 == 92);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.io.IOException: hi!" + "'", str66, "java.io.IOException: hi!");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitIincInsn(16, (int) (byte) 10);
        methodVisitor20.visitFieldInsn(92, "L886841972", "L1145278557", "L1432403946");
        methodVisitor20.visitCode();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int9 = classWriter1.newField("", "L478252604", "java.io.IOException");
        classWriter1.visitSource("", "L781877917");
        classWriter1.visitInnerClass("L1035695636", "", "L1131836979", 0);
        classWriter1.visitOuterClass("L616447458", "L1603039582", "L1432403946");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("L2066229866", false);
        annotationVisitor24.visitEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        int int8 = classWriter1.newClass("java.io.IOException: ");
        int int10 = classWriter1.newClass("");
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter24.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter24.visitAnnotation("hi!", false);
        classWriter24.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter24.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        classWriter45.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray53);
        byte[] byteArray55 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        java.lang.String[] strArray57 = classReader56.getInterfaces();
        classWriter24.visit((int) (short) 4970, 5, "", "hi!", "", strArray57);
        classWriter17.visit(0, 5, "L616447458", "L616447458", "", strArray57);
        classWriter1.visit((-1), (int) (byte) 10, "L478252604", "", "L1502517182", strArray57);
        int int62 = classWriter1.newUTF8("L1231535858");
        org.mockito.asm.Attribute attribute63 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 13 + "'", int62 == 13);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter41.newNameType("", "java.io.IOException");
        int int49 = classWriter41.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter41.visitEnd();
        label34.info = classWriter41;
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int61 = classWriter57.newField("hi!", "hi!", "hi!");
        int int63 = classWriter57.newClass("java.io.IOException");
        classWriter57.visitInnerClass("L630721910", "L1145278557", "java.io.IOException", 0);
        org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter41.visitField(21, "L1502377119", "L630721910", "L1808373495", (java.lang.Object) 0);
        classWriter41.visitOuterClass("L176482898", "L1635572015", "L691331867");
        java.io.IOException iOException76 = new java.io.IOException();
        java.io.IOException iOException77 = new java.io.IOException("hi!", (java.lang.Throwable) iOException76);
        java.io.IOException iOException78 = new java.io.IOException("", (java.lang.Throwable) iOException76);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = classWriter41.newConst((java.lang.Object) iOException76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor69);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 100, 1);
        byte[] byteArray21 = classReader20.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray21, 31, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        int int19 = classReader14.readByte(2);
        java.lang.String[] strArray20 = classReader14.getInterfaces();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(classReader14, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = classReader14.readByte((-1107296256));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1107296256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitInsn((int) (byte) 0);
        methodVisitor28.visitMethodInsn((int) (byte) 10, "java.io.IOException", "java.io.IOException", "hi!");
        methodVisitor28.visitTypeInsn((-889275714), "L1432403946");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter44.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter44.visitAnnotation("hi!", false);
        int int52 = classWriter44.newUTF8("java.io.IOException");
        int int55 = classWriter44.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter44.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        java.lang.Object obj65 = null;
        org.mockito.asm.FieldVisitor fieldVisitor66 = classWriter44.visitField((int) (byte) 10, "", "hi!", "L1335427656", obj65);
        classWriter44.visitOuterClass("", "L71767159", "L1635572015");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int79 = classWriter76.newNameType("", "java.io.IOException");
        int int84 = classWriter76.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int86 = classWriter76.newConst((java.lang.Object) 10L);
        classWriter76.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter76.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        org.mockito.asm.FieldVisitor fieldVisitor95 = classWriter44.visitField(6, "L852881485", "L1635572015", "L781877917", (java.lang.Object) "L1635572015");
        classWriter44.visitSource("L478252604", "L1274768994");
        methodVisitor28.visitLdcInsn((java.lang.Object) "L1274768994");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor66);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor95);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        long long17 = classReader12.readLong((int) (byte) 0);
        byte[] byteArray18 = classReader12.b;
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray18, 0, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int23 = classReader21.readUnsignedShort(776556357);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3819410108757049244L) + "'", long17 == (-3819410108757049244L));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        org.mockito.asm.Label label38 = new org.mockito.asm.Label();
        label38.info = (-1);
        methodVisitor28.visitLabel(label38);
        methodVisitor28.visitEnd();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!" };
        classWriter44.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray52);
        byte[] byteArray54 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        int int57 = classReader55.readByte((int) (byte) 1);
        int int58 = classReader55.header;
        java.lang.String str59 = classReader55.getSuperName();
        java.lang.String str60 = classReader55.getSuperName();
        int int62 = classReader55.readInt(12);
        byte[] byteArray63 = classReader55.b;
        short short65 = classReader55.readShort((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLdcInsn((java.lang.Object) classReader55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@57f619de");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 254 + "'", int57 == 254);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 92 + "'", int58 == 92);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.io.IOException: hi!" + "'", str59, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.io.IOException: hi!" + "'", str60, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 325738870 + "'", int62 == 325738870);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 1024 + "'", short65 == (short) 1024);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter20.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter20.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter20.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor30 = classWriter1.visitField(4, "L852881485", "L852881485", "java.io.IOException: ", (java.lang.Object) false);
        int int35 = classWriter1.newMethod("L1452494871", "L869511749", "L367481933", true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 10, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(fieldVisitor30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitIincInsn(16, (int) (byte) 10);
        methodVisitor20.visitMethodInsn((int) (short) 4970, "L630721910", "L1335427656", "L1432403946");
        methodVisitor20.visitTypeInsn(0, "L1526910237");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor20.visitAnnotationDefault();
        annotationVisitor36.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = annotationVisitor36.visitArray("L643431443");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector(1024);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" };
        classWriter3.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray11);
        byte[] byteArray13 = classWriter3.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        java.lang.String[] strArray15 = classReader14.getInterfaces();
        int int16 = classReader14.header;
        byte[] byteArray17 = classReader14.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector20 = byteVector1.putByteArray(byteArray17, (int) (short) -17730, 16782186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitMultiANewArrayInsn("java.io.IOException", (int) 'a');
        methodVisitor28.visitIincInsn((int) 'a', (int) (short) 1);
        methodVisitor28.visitEnd();
        java.io.IOException iOException47 = new java.io.IOException();
        java.io.IOException iOException48 = new java.io.IOException("hi!", (java.lang.Throwable) iOException47);
        java.lang.Throwable[] throwableArray49 = iOException48.getSuppressed();
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int56 = classWriter52.newField("hi!", "hi!", "hi!");
        classWriter52.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor63 = classWriter52.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "hi!" };
        classWriter70.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray78);
        byte[] byteArray80 = classWriter70.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        java.lang.String[] strArray82 = classReader81.getInterfaces();
        int int83 = classReader81.header;
        int int84 = classReader81.header;
        int int85 = classReader81.header;
        java.lang.String str86 = classReader81.getClassName();
        java.lang.String[] strArray87 = classReader81.getInterfaces();
        classWriter52.visit(1024, 5, "L1432403946", "L1635572015", "L630721910", strArray87);
        methodVisitor28.visitFrame(8, 23, (java.lang.Object[]) throwableArray49, 167837715, (java.lang.Object[]) strArray87);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor63);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 92 + "'", int83 == 92);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 92 + "'", int84 == 92);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 92 + "'", int85 == 92);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.io.IOException" + "'", str86, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        java.lang.String str18 = classReader12.getSuperName();
        int int19 = classReader12.getAccess();
        int int20 = classReader12.header;
        short short22 = classReader12.readShort(1);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        classWriter25.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray33);
        byte[] byteArray35 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray35, 0, 0);
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray35);
        int int40 = classReader39.header;
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        classWriter43.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray51);
        byte[] byteArray53 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray53, 0, 0);
        java.lang.String str57 = classReader56.getSuperName();
        int int59 = classReader56.readInt(0);
        char[] charArray64 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj65 = classReader56.readConst(7, charArray64);
        java.lang.String str66 = classReader39.readClass(100, charArray64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj67 = classReader12.readConst(8296, charArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8296");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 92 + "'", int20 == 92);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) -326 + "'", short22 == (short) -326);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 92 + "'", int40 == 92);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.io.IOException: hi!" + "'", str57, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-889275714) + "'", int59 == (-889275714));
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + "java.io.IOException: hi!" + "'", obj65, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        int int16 = classReader14.readByte(10);
        int int17 = classReader14.header;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 111 + "'", int17 == 111);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getSuperName();
        int int18 = classReader12.getItem((int) (byte) 1);
        int int19 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter21.newField("hi!", "hi!", "hi!");
        int int27 = classWriter21.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter21, 100);
        char[] charArray36 = new char[] { '#', 'a', '#', '4', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = classReader12.readClass(1677724161, charArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1677724161");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 92 + "'", int19 == 92);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#a#4 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#a#4 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, a, #, 4,  ]");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        java.lang.String str64 = classReader12.getClassName();
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader12, 16);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = classReader12.readUnsignedShort(190);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.io.IOException" + "'", str64, "java.io.IOException");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod(2, "java.io.IOException: hi!", "L1432403946", "java.io.IOException", strArray16);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = methodVisitor17.visitAnnotation("L176482898", true);
        methodVisitor17.visitEnd();
        methodVisitor17.visitMaxs(325738870, (int) '4');
        org.mockito.asm.Attribute attribute25 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor17.visitAttribute(attribute25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1432403946", true);
        org.mockito.asm.Attribute attribute12 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor11);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitMultiANewArrayInsn("java.io.IOException", (int) 'a');
        methodVisitor28.visitIincInsn((int) 'a', (int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = annotationVisitor44.visitAnnotation("L1502517182", "");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader12, 190);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int35 = classWriter31.newField("hi!", "hi!", "hi!");
        classWriter31.visitEnd();
        classWriter31.visitSource("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter45.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter45.visitAnnotation("hi!", false);
        classWriter45.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "hi!" };
        classWriter62.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray70);
        org.mockito.asm.MethodVisitor methodVisitor72 = classWriter45.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray70);
        methodVisitor72.visitInsn((int) (byte) 10);
        methodVisitor72.visitTypeInsn(11, "");
        methodVisitor72.visitInsn(81);
        org.mockito.asm.FieldVisitor fieldVisitor80 = classWriter31.visitField(16782186, "L1502377119", "java.io.IOException", "L643431443", (java.lang.Object) 81);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter31, 3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(methodVisitor72);
        org.junit.Assert.assertNotNull(fieldVisitor80);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter19.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter19.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int41 = classWriter37.newField("hi!", "hi!", "hi!");
        classWriter37.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter48.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter48.visitAnnotation("hi!", false);
        classWriter48.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        classWriter65.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter48.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter37.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter19.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray73);
        classWriter1.visit(3, 254, "java.io.IOException: ", "", "", strArray73);
        classWriter1.visitOuterClass("L1145278557", "L1131836979", "hi!");
        classWriter1.visitOuterClass("L630721910", "L1635572015", "L1131836979");
        org.mockito.asm.ClassWriter classWriter88 = new org.mockito.asm.ClassWriter(254);
        int int89 = classWriter1.newConst((java.lang.Object) 254);
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 18 + "'", int89 == 18);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitTypeInsn(11, "");
        methodVisitor28.visitFieldInsn(76, "L717126513", "L71767159", "L176482898");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        methodVisitor67.visitInsn(100);
        methodVisitor67.visitVarInsn((int) '#', (int) '4');
        methodVisitor67.visitVarInsn(12, (int) (byte) 0);
        methodVisitor67.visitFieldInsn(3, "L781877917", "L1432403946", "");
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLdcInsn((java.lang.Object) methodVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@21d77d45");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitCode();
        methodVisitor20.visitIntInsn(1, 1024);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter31.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter31.visitAnnotation("hi!", false);
        classWriter31.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter31.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray56);
        methodVisitor58.visitInsn(100);
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        label64.info = (-1);
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        methodVisitor58.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label64, label67, 8);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int74 = classWriter71.newNameType("", "java.io.IOException");
        int int79 = classWriter71.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter71.visitEnd();
        label64.info = classWriter71;
        methodVisitor20.visitJumpInsn(0, label64);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8 + "'", int79 == 8);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 0);
        java.lang.Class<?> wildcardClass2 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int65 = classReader12.readByte(3);
        java.lang.String str66 = classReader12.getSuperName();
        int int67 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader12, 20);
        classWriter69.visitInnerClass("L589783872", "L1145278557", "L853084801", 20);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 190 + "'", int65 == 190);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.io.IOException: hi!" + "'", str66, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 92 + "'", int67 == 92);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitInsn((int) (byte) 0);
        org.mockito.asm.Label label36 = new org.mockito.asm.Label();
        java.lang.Object obj37 = label36.info;
        java.lang.Object obj38 = label36.info;
        methodVisitor28.visitJumpInsn((int) (byte) -1, label36);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        classWriter41.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray49);
        byte[] byteArray51 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray51, 0, 0);
        java.lang.String str55 = classReader54.getSuperName();
        label36.info = classReader54;
        // The following exception was thrown during execution in test generation
        try {
            int int57 = label36.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.io.IOException: hi!" + "'", str55, "java.io.IOException: hi!");
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte((int) (byte) 1);
        int int30 = classReader26.readByte(11);
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        int int39 = classWriter33.newClass("java.io.IOException");
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter33, 92);
        org.mockito.asm.Attribute[] attributeArray42 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter33, attributeArray42, 2);
        char[] charArray46 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = classReader12.readClass(51966, charArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 254 + "'", int28 == 254);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[]");
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte((int) (byte) 1);
        int int30 = classReader26.readByte(11);
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        int int39 = classWriter33.newClass("java.io.IOException");
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter33, 92);
        org.mockito.asm.Attribute[] attributeArray42 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter33, attributeArray42, 2);
        classWriter33.visitEnd();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 254 + "'", int28 == 254);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int65 = classReader12.readByte(3);
        java.lang.String str66 = classReader12.getSuperName();
        int int67 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader12, 20);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter69.visitAnnotation("L598330668", true);
        annotationVisitor72.visitEnum("", "L613898026", "L583575715");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 190 + "'", int65 == 190);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.io.IOException: hi!" + "'", str66, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 92 + "'", int67 == 92);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitSource("L598330668", "");
        classWriter1.visitOuterClass("L1808373495", "L717126513", "java.io.IOException: ");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        int int29 = classWriter21.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int31 = classWriter21.newUTF8("hi!");
        int int33 = classWriter21.newConst((java.lang.Object) 0L);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int42 = classWriter39.newNameType("", "java.io.IOException");
        int int47 = classWriter39.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int49 = classWriter39.newUTF8("hi!");
        classWriter39.visitEnd();
        classWriter39.visitEnd();
        java.lang.String[] strArray57 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter39.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray57);
        methodVisitor58.visitEnd();
        methodVisitor58.visitIntInsn((int) '4', 13);
        methodVisitor58.visitCode();
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter67.visitEnd();
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray83 = new java.lang.String[] { "", "hi!" };
        classWriter75.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray83);
        classWriter67.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray83);
        java.lang.Object[] objArray87 = null;
        methodVisitor58.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray83, 9, objArray87);
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter21.visitMethod(4, "L71767159", "L1335427656", "java.io.IOException: hi!", strArray83);
        classWriter1.visit(1, (int) ' ', "L643431443", "L1035695636", "L1526910237", strArray83);
        int int95 = classWriter1.newMethod("L583575715", "L811708376", "L181135275", true);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(methodVisitor89);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 25 + "'", int95 == 25);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int64 = classReader12.getAccess();
        byte[] byteArray65 = classReader12.b;
        int int66 = classReader12.header;
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 92 + "'", int66 == 92);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        byte[] byteArray16 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray16, 0, (int) (short) 1792);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray16);
        int int22 = classReader21.header;
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        classWriter25.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray33);
        byte[] byteArray35 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray35, 0, 0);
        java.lang.String str39 = classReader38.getSuperName();
        int int41 = classReader38.readInt(0);
        char[] charArray46 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj47 = classReader38.readConst(7, charArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = classReader21.readConst(202, charArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 163 + "'", int22 == 163);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.io.IOException: hi!" + "'", str39, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-889275714) + "'", int41 == (-889275714));
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj47 + "' != '" + "java.io.IOException: hi!" + "'", obj47, "java.io.IOException: hi!");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitEnd();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" };
        classWriter56.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter39.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray64);
        methodVisitor66.visitInsn(100);
        methodVisitor66.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        java.lang.Object obj74 = label73.info;
        methodVisitor66.visitJumpInsn(3, label73);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter77.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = classWriter77.visitAnnotation("hi!", false);
        classWriter77.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label73.info = "java.io.IOException: hi!";
        java.lang.String str90 = label73.toString();
        java.lang.String str91 = label73.toString();
        org.mockito.asm.Label label92 = new org.mockito.asm.Label();
        org.mockito.asm.Label label93 = new org.mockito.asm.Label();
        methodVisitor28.visitTryCatchBlock(label73, label92, label93, "L1274768994");
        java.lang.Object obj96 = label92.info;
        // The following exception was thrown during execution in test generation
        try {
            int int97 = label92.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "L1081737137" + "'", str90, "L1081737137");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "L1081737137" + "'", str91, "L1081737137");
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitInsn((int) (byte) 0);
        methodVisitor28.visitTypeInsn((int) (short) 1, "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int41 = classWriter38.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter38.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray55);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" };
        classWriter63.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray71);
        byte[] byteArray73 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        int int76 = classReader74.readByte((int) (byte) 1);
        int int77 = classReader74.header;
        java.lang.String str78 = classReader74.getSuperName();
        java.lang.String[] strArray79 = classReader74.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter38.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray79);
        org.mockito.asm.Label label81 = new org.mockito.asm.Label();
        java.lang.Object obj82 = label81.info;
        java.lang.Object obj83 = label81.info;
        methodVisitor80.visitLabel(label81);
        java.lang.Object obj85 = label81.info;
        methodVisitor28.visitLineNumber(14, label81);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor28.visitAnnotation("java.io.IOException: java.io.IOException: hi!", false);
        methodVisitor28.visitInsn((int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor28.visitAnnotation("L1135755945", false);
        methodVisitor28.visitIntInsn(8, 65210);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 254 + "'", int76 == 254);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 92 + "'", int77 == 92);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.io.IOException: hi!" + "'", str78, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitCode();
        methodVisitor28.visitMethodInsn(63, "L1026804000", "L1335427656", "L1432403946");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor40 = methodVisitor28.visitParameterAnnotation((int) (short) 10, "L80982279", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter1.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        java.lang.String[] strArray40 = classReader37.getInterfaces();
        classWriter1.visit(1, 2, "", "L598330668", "java.io.IOException", strArray40);
        classWriter1.visitOuterClass("L1526910237", "java.io.IOException: java.io.IOException: ", "L598330668");
        classWriter1.visitOuterClass("L801380897", "L811708376", "");
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int59 = classWriter55.newField("hi!", "hi!", "hi!");
        classWriter55.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor66 = classWriter55.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter55.visitAnnotation("java.io.IOException", true);
        byte[] byteArray70 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray70, 0, (int) (short) 1792);
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField(554106887, "L691331867", "L886841972", "L1947403627", (java.lang.Object) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor75);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        int int21 = classReader17.readByte((int) '#');
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        classWriter23.visitOuterClass("java.io.IOException: hi!", "java.io.IOException: ", "hi!");
        classWriter23.visitSource("java.io.IOException: hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter23.visitAnnotation("L71767159", false);
        // The following exception was thrown during execution in test generation
        try {
            classReader17.accept((org.mockito.asm.ClassVisitor) classWriter23, 76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String str17 = classReader12.getClassName();
        byte[] byteArray18 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = classReader12.readUnsignedShort((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putInt((int) (short) 0);
        org.mockito.asm.ByteVector byteVector10 = byteVector6.putInt(92);
        org.mockito.asm.ByteVector byteVector12 = byteVector10.putShort(10);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!" };
        classWriter14.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray22);
        byte[] byteArray24 = classWriter14.toByteArray();
        org.mockito.asm.ClassReader classReader25 = new org.mockito.asm.ClassReader(byteArray24);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter27.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter27.visitAnnotation("hi!", false);
        classWriter27.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!" };
        classWriter44.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray52);
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter27.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray52);
        methodVisitor54.visitInsn(100);
        org.mockito.asm.Label label60 = new org.mockito.asm.Label();
        label60.info = (-1);
        org.mockito.asm.Label label63 = new org.mockito.asm.Label();
        methodVisitor54.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label60, label63, 8);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int70 = classWriter67.newNameType("", "java.io.IOException");
        label63.info = classWriter67;
        org.mockito.asm.Attribute[] attributeArray72 = new org.mockito.asm.Attribute[] {};
        classReader25.accept((org.mockito.asm.ClassVisitor) classWriter67, attributeArray72, 0);
        byte[] byteArray75 = classWriter67.toByteArray();
        org.mockito.asm.ByteVector byteVector78 = byteVector10.putByteArray(byteArray75, 16, 19);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray75, (int) (short) -1, 393224);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 124");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertNotNull(byteVector12);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(attributeArray72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 7, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 5, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 4, 0, 6, 0, 2, 0, 7, 0, 9, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 2, 0, 2]");
        org.junit.Assert.assertNotNull(byteVector78);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        classWriter21.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray29);
        byte[] byteArray31 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray31, 0, 0);
        java.lang.String str35 = classReader34.getSuperName();
        int int37 = classReader34.readInt(0);
        char[] charArray42 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj43 = classReader34.readConst(7, charArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = classReader12.readUTF8(22, charArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20293");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.io.IOException: hi!" + "'", str35, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-889275714) + "'", int37 == (-889275714));
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + "java.io.IOException: hi!" + "'", obj43, "java.io.IOException: hi!");
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        byte[] byteArray16 = classWriter1.toByteArray();
        classWriter1.visitSource("", "L478252604");
        byte[] byteArray20 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter1.visitAnnotation("L1947403627", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor23.visitAnnotation("L1231535858", "java.io.IOException: java.io.IOException: hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = annotationVisitor26.visitAnnotation("L1085647388", "L781877917");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader12.getItem(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("hi!", "");
        annotationVisitor10.visitEnum("L616447458", "L1432403946", "L781877917");
        annotationVisitor10.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int11 = classWriter8.newNameType("", "java.io.IOException");
        int int16 = classWriter8.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter8.visitEnd();
        classWriter8.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter8.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        classWriter8.visitOuterClass("java.io.IOException", "java.io.IOException", "java.io.IOException: ");
        classWriter8.visitOuterClass("L852881485", "L1432403946", "hi!");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int51 = classWriter48.newNameType("", "java.io.IOException");
        int int53 = classWriter48.newClass("java.io.IOException");
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!" };
        classWriter60.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray68);
        classWriter48.visit((int) (short) 0, (int) (byte) 1, "java.io.IOException: hi!", "java.io.IOException: hi!", "java.io.IOException", strArray68);
        classWriter41.visit(7, 10, "L1635572015", "L71767159", "L1335427656", strArray68);
        org.mockito.asm.MethodVisitor methodVisitor72 = classWriter8.visitMethod(3, "L811708376", "L643431443", "L991437862", strArray68);
        classWriter1.visit(776556357, 1667592308, "java.io.IOException: java.io.IOException: ", "L984287299", "L1283926335", strArray68);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor72);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        methodVisitor28.visitCode();
        methodVisitor28.visitMaxs(1024, 76);
        methodVisitor28.visitCode();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        int int16 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("java.io.IOException: hi!", false);
        classWriter1.visitSource("java.io.IOException", "");
        int int24 = classWriter1.newClass("java.io.IOException: java.io.IOException: ");
        org.mockito.asm.Attribute attribute25 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 13 + "'", int24 == 13);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putUTF8("");
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putUTF8("java.io.IOException");
        org.mockito.asm.ByteVector byteVector6 = byteVector2.putInt(1);
        org.mockito.asm.ByteVector byteVector7 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector9 = byteVector7.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector11 = byteVector7.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector13 = byteVector11.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector15 = byteVector13.putInt((int) (short) 0);
        org.mockito.asm.ByteVector byteVector17 = byteVector13.putInt(92);
        org.mockito.asm.ByteVector byteVector19 = byteVector17.putShort(10);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        classWriter21.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray29);
        byte[] byteArray31 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter34.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter34.visitAnnotation("hi!", false);
        classWriter34.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!" };
        classWriter51.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter34.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray59);
        methodVisitor61.visitInsn(100);
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        label67.info = (-1);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor61.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label67, label70, 8);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int77 = classWriter74.newNameType("", "java.io.IOException");
        label70.info = classWriter74;
        org.mockito.asm.Attribute[] attributeArray79 = new org.mockito.asm.Attribute[] {};
        classReader32.accept((org.mockito.asm.ClassVisitor) classWriter74, attributeArray79, 0);
        byte[] byteArray82 = classWriter74.toByteArray();
        org.mockito.asm.ByteVector byteVector85 = byteVector17.putByteArray(byteArray82, 16, 19);
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray82);
        org.mockito.asm.ByteVector byteVector89 = byteVector2.putByteArray(byteArray82, 9, 31);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader92 = new org.mockito.asm.ClassReader(byteArray82, (int) (byte) -1, 111);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 124");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector9);
        org.junit.Assert.assertNotNull(byteVector11);
        org.junit.Assert.assertNotNull(byteVector13);
        org.junit.Assert.assertNotNull(byteVector15);
        org.junit.Assert.assertNotNull(byteVector17);
        org.junit.Assert.assertNotNull(byteVector19);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(attributeArray79);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 7, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 5, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 4, 0, 6, 0, 2, 0, 7, 0, 9, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 2, 0, 2]");
        org.junit.Assert.assertNotNull(byteVector85);
        org.junit.Assert.assertNotNull(byteVector89);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitCode();
        methodVisitor28.visitIincInsn((int) (short) 100, (int) (short) 0);
        methodVisitor28.visitInsn((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor28.visitParameterAnnotation((int) (short) 256, "java.io.IOException: L1635572015", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("L852881485", "L478252604", "L598330668", 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("L2066229866", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor19.visitAnnotation("L1135755945", "L1770206027");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        byte[] byteArray16 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray16, 0, (int) (short) 1792);
        long long22 = classReader20.readLong(10);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = classReader20.getItem(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 72061341013182208L + "'", long22 == 72061341013182208L);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            short short65 = classReader12.readShort((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter23.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray48);
        methodVisitor50.visitInsn(100);
        methodVisitor50.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label57 = new org.mockito.asm.Label();
        java.lang.Object obj58 = label57.info;
        methodVisitor50.visitJumpInsn(3, label57);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter61.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter61.visitAnnotation("hi!", false);
        classWriter61.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label57.info = "java.io.IOException: hi!";
        java.lang.String str74 = label57.toString();
        java.lang.String str75 = label57.toString();
        methodVisitor20.visitLabel(label57);
        methodVisitor20.visitMultiANewArrayInsn("L781877917", 13);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor20.visitParameterAnnotation(0, "L1135755945", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L79919422" + "'", str74, "L79919422");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L79919422" + "'", str75, "L79919422");
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = classReader12.readLong((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!" };
        classWriter7.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray15);
        byte[] byteArray17 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 0, 0);
        java.lang.String str21 = classReader20.getSuperName();
        int int23 = classReader20.readInt(0);
        int int25 = classReader20.readByte(2);
        java.lang.String[] strArray26 = classReader20.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter1.visitMethod((int) (byte) 10, "L1526910237", "java.io.IOException: java.io.IOException: hi!", "L1603039582", strArray26);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = methodVisitor27.visitAnnotationDefault();
        methodVisitor27.visitIincInsn(106, 0);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.io.IOException: hi!" + "'", str21, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-889275714) + "'", int23 == (-889275714));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 186 + "'", int25 == 186);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label35.info = "java.io.IOException: hi!";
        java.lang.String str52 = label35.toString();
        java.lang.Object obj53 = label35.info;
        java.lang.String str54 = label35.toString();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "L217748539" + "'", str52, "L217748539");
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + "java.io.IOException: hi!" + "'", obj53, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "L217748539" + "'", str54, "L217748539");
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        int int16 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "", true);
        classWriter1.visitInnerClass("L2066229866", "L1808373495", "L598330668", (int) ' ');
        org.mockito.asm.Attribute attribute22 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("L630721910", "L1145278557", "java.io.IOException", 0);
        int int16 = classWriter1.newField("java.io.IOException: L1518273899", "java.io.IOException: hi!", "L220707133");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int65 = classReader12.readByte(3);
        int int66 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            int int68 = classReader12.getItem((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 190 + "'", int65 == 190);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 92 + "'", int66 == 92);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putInt((int) (short) 0);
        org.mockito.asm.ByteVector byteVector10 = byteVector6.putInt(92);
        org.mockito.asm.ByteVector byteVector12 = byteVector10.putShort(10);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!" };
        classWriter14.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray22);
        byte[] byteArray24 = classWriter14.toByteArray();
        org.mockito.asm.ClassReader classReader25 = new org.mockito.asm.ClassReader(byteArray24);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter27.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter27.visitAnnotation("hi!", false);
        classWriter27.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!" };
        classWriter44.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray52);
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter27.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray52);
        methodVisitor54.visitInsn(100);
        org.mockito.asm.Label label60 = new org.mockito.asm.Label();
        label60.info = (-1);
        org.mockito.asm.Label label63 = new org.mockito.asm.Label();
        methodVisitor54.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label60, label63, 8);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int70 = classWriter67.newNameType("", "java.io.IOException");
        label63.info = classWriter67;
        org.mockito.asm.Attribute[] attributeArray72 = new org.mockito.asm.Attribute[] {};
        classReader25.accept((org.mockito.asm.ClassVisitor) classWriter67, attributeArray72, 0);
        byte[] byteArray75 = classWriter67.toByteArray();
        org.mockito.asm.ByteVector byteVector78 = byteVector10.putByteArray(byteArray75, 16, 19);
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray75);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader79, 51966);
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertNotNull(byteVector12);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor54);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(attributeArray72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 7, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 5, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 4, 0, 6, 0, 2, 0, 7, 0, 9, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 2, 0, 2]");
        org.junit.Assert.assertNotNull(byteVector78);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitInsn((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor28.visitParameterAnnotation(111, "L583575715", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        int int19 = classReader14.readByte(2);
        java.lang.String[] strArray20 = classReader14.getInterfaces();
        byte[] byteArray21 = classReader14.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray21, 16782186, (int) (short) 1024);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16782194");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        java.lang.String str63 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int65 = classReader12.readByte(163);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 163");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.io.IOException: hi!" + "'", str63, "java.io.IOException: hi!");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter1.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        classWriter1.visitInnerClass("L1145278557", "L781877917", "L717126513", (int) (short) 6);
        int int29 = classWriter1.newMethod("L1770206027", "L269304557", "java.io.IOException: L616447458", true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 29 + "'", int29 == 29);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter17.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray25);
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter17.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute33 = null;
        org.mockito.asm.Attribute[] attributeArray34 = new org.mockito.asm.Attribute[] { attribute33 };
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter17, attributeArray34, 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 1792);
        org.mockito.asm.Attribute attribute39 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter38.visitAttribute(attribute39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(fieldVisitor32);
        org.junit.Assert.assertNotNull(attributeArray34);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("java.io.IOException: ", false);
        annotationVisitor16.visitEnum("java.io.IOException: ", "L1335427656", "java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor16.visitAnnotation("L852881485", "L2066229866");
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = annotationVisitor23.visitArray("L1635572015");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor25.visitAnnotation("L3070851", "L1710339694");
        annotationVisitor28.visitEnum("L217748539", "java.io.IOException: L1635572015", "L939499658");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitTypeInsn(0, "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter36.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter36.visitAnnotation("hi!", false);
        classWriter36.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        classWriter53.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter36.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray61);
        methodVisitor63.visitInsn(100);
        methodVisitor63.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        java.lang.Object obj71 = label70.info;
        methodVisitor63.visitJumpInsn(3, label70);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter74.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = classWriter74.visitAnnotation("hi!", false);
        classWriter74.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label70.info = "java.io.IOException: hi!";
        java.lang.String str87 = label70.toString();
        java.lang.String str88 = label70.toString();
        org.mockito.asm.Label label89 = new org.mockito.asm.Label();
        label89.info = (-1);
        label70.info = label89;
        java.lang.String str93 = label70.toString();
        methodVisitor28.visitJumpInsn(92, label70);
        methodVisitor28.visitTypeInsn(10, "L1502377119");
        methodVisitor28.visitCode();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L639282209" + "'", str87, "L639282209");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L639282209" + "'", str88, "L639282209");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "L639282209" + "'", str93, "L639282209");
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter23.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray48);
        methodVisitor50.visitInsn(100);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        label56.info = (-1);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        methodVisitor50.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label56, label59, 8);
        label59.info = 11;
        org.mockito.asm.ByteVector byteVector64 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector66 = byteVector64.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector68 = byteVector64.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector70 = byteVector68.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector72 = byteVector70.putInt((int) (short) 0);
        org.mockito.asm.ByteVector byteVector74 = byteVector70.putInt(92);
        label59.info = 92;
        methodVisitor20.visitJumpInsn(81, label59);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor20.visitAnnotationDefault();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(byteVector66);
        org.junit.Assert.assertNotNull(byteVector68);
        org.junit.Assert.assertNotNull(byteVector70);
        org.junit.Assert.assertNotNull(byteVector72);
        org.junit.Assert.assertNotNull(byteVector74);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        java.lang.String[] strArray12 = null;
        org.mockito.asm.MethodVisitor methodVisitor13 = classWriter1.visitMethod((int) (short) 10, "L2066229866", "L1145278557", "L616447458", strArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor17 = methodVisitor13.visitParameterAnnotation(1635148078, "L1770206027", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(methodVisitor13);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitEnd();
        methodVisitor28.visitVarInsn(17, 119);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor28.visitAnnotation("L2066229866", false);
        methodVisitor28.visitInsn(325738870);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newConst((java.lang.Object) 10L);
        classWriter19.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter19.visitMethod((int) (short) 4970, "L1335427656", "java.io.IOException: ", "L1335427656", strArray65);
        classWriter1.visit((int) (short) 10, 9, "hi!", "java.io.IOException", "L71767159", strArray65);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L176482898", "java.io.IOException: java.io.IOException: hi!", "L2054713387");
        classWriter1.visitSource("L1231535858", "L598330668");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(methodVisitor68);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putUTF8("");
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putByte((int) (short) 100);
        org.mockito.asm.ByteVector byteVector6 = byteVector2.putUTF8("java.io.IOException");
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putUTF8("L1335427656");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int14 = classWriter10.newField("hi!", "hi!", "hi!");
        int int16 = classWriter10.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter10.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        byte[] byteArray23 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray23, (int) (short) 256, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 10, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-21316096));
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute3 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(3, (int) (byte) 0);
        methodVisitor28.visitMaxs((int) (short) 256, (int) ' ');
        methodVisitor28.visitIntInsn(12, 119);
        methodVisitor28.visitTypeInsn(16, "L1761251411");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("java.io.IOException: ", false);
        annotationVisitor16.visitEnum("java.io.IOException: ", "L1335427656", "java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor16.visitAnnotation("L852881485", "L2066229866");
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = annotationVisitor23.visitArray("L1635572015");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        classWriter28.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray36);
        byte[] byteArray38 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        int int41 = classReader39.readByte((int) (byte) 1);
        int int43 = classReader39.readByte(11);
        byte[] byteArray44 = classReader39.b;
        int int45 = classReader39.header;
        java.lang.String str46 = classReader39.getClassName();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(classReader39, 9);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor23.visit("L717126513", (java.lang.Object) classReader39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@207efc81");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 254 + "'", int41 == 254);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 92 + "'", int45 == 92);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.io.IOException" + "'", str46, "java.io.IOException");
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMultiANewArrayInsn("hi!", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter35.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray43);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter35.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        methodVisitor28.visitLdcInsn((java.lang.Object) (byte) 1);
        methodVisitor28.visitFieldInsn(13, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = methodVisitor28.visitAnnotation("L1808373495", true);
        methodVisitor28.visitEnd();
        methodVisitor28.visitTypeInsn((int) (byte) 0, "L2066229866");
        methodVisitor28.visitEnd();
        methodVisitor28.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor59);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        int int29 = classWriter21.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int31 = classWriter21.newUTF8("hi!");
        classWriter21.visitEnd();
        classWriter21.visitEnd();
        java.lang.String[] strArray39 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter21.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(0, "L630721910", "", "L71767159", strArray39);
        methodVisitor41.visitCode();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        int int40 = classReader37.header;
        java.lang.String str41 = classReader37.getSuperName();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter1.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray42);
        methodVisitor43.visitCode();
        methodVisitor43.visitFieldInsn((int) (short) -1, "L2066229866", "L2066229866", "L1432403946");
        methodVisitor43.visitIincInsn((int) (short) 3, (int) (short) 6);
        methodVisitor43.visitMethodInsn(16782186, "java/io/IOException", "L691331867", "L613898026");
        org.mockito.asm.Attribute attribute58 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor43.visitAttribute(attribute58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 92 + "'", int40 == 92);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.io.IOException: hi!" + "'", str41, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        java.lang.String str63 = classReader12.getSuperName();
        java.lang.String str64 = classReader12.getSuperName();
        int int66 = classReader12.readInt((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(classReader12, 18);
        // The following exception was thrown during execution in test generation
        try {
            long long70 = classReader12.readLong(196864);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.io.IOException: hi!" + "'", str63, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.io.IOException: hi!" + "'", str64, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 393224 + "'", int66 == 393224);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitCode();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter29.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        classWriter29.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        java.lang.Object[] objArray49 = null;
        methodVisitor20.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray45, 9, objArray49);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = methodVisitor20.visitAnnotationDefault();
        methodVisitor20.visitTypeInsn(12, "L71767159");
        methodVisitor20.visitFieldInsn(1165517669, "L1603039582", "L1808373495", "L1026804000");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        java.lang.String str19 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader12.readUnsignedShort(167837715);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String str17 = classReader12.getSuperName();
        int int19 = classReader12.readInt(12);
        byte[] byteArray20 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = classReader12.getItem(163);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 163");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException: hi!" + "'", str17, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 325738870 + "'", int19 == 325738870);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor13.visitAnnotation("L478252604", true);
        fieldVisitor13.visitEnd();
        fieldVisitor13.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = fieldVisitor13.visitAnnotation("L1335427656", false);
        annotationVisitor21.visitEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L1035695636", "L1335427656", "java.io.IOException: hi!", (int) (byte) -1);
        int int23 = classWriter1.newMethod("java.io.IOException: hi!", "L2066229866", "L478252604", true);
        classWriter1.visitEnd();
        int int29 = classWriter1.newMethod("java.io.IOException: L616447458", "L801380897", "L397518913", false);
        int int34 = classWriter1.newMethod("L478252604", "L1367834389", "L43475377", true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 27 + "'", int34 == 27);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte(0);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        int int16 = classReader12.header;
        int int18 = classReader12.readInt(3);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = classReader12.readInt((int) (short) 25600);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 202 + "'", int14 == 202);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1107296256) + "'", int18 == (-1107296256));
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int65 = classReader12.readByte(3);
        java.lang.String str66 = classReader12.getSuperName();
        int int67 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader12, 20);
        int int71 = classReader12.readInt(25);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!" };
        classWriter74.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray82);
        byte[] byteArray84 = classWriter74.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray84, 0, 0);
        java.lang.String str88 = classReader87.getSuperName();
        int int90 = classReader87.readInt(0);
        char[] charArray95 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj96 = classReader87.readConst(7, charArray95);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj97 = classReader12.readConst(1229931896, charArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1229931896");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 190 + "'", int65 == 190);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.io.IOException: hi!" + "'", str66, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 92 + "'", int67 == 92);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1667592308 + "'", int71 == 1667592308);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "java.io.IOException: hi!" + "'", str88, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-889275714) + "'", int90 == (-889275714));
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray95), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj96 + "' != '" + "java.io.IOException: hi!" + "'", obj96, "java.io.IOException: hi!");
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1432403946", true);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField((int) (short) 100, "L71767159", "hi!", "L71767159", (java.lang.Object) (-91551935198370816L));
        classWriter1.visitOuterClass("L630721910", "L1335427656", "L71767159");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter27.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter27.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor33.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = annotationVisitor33.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = annotationVisitor39.visitArray("java.io.IOException: ");
        org.mockito.asm.FieldVisitor fieldVisitor42 = classWriter1.visitField((int) (short) -17730, "L1335427656", "L1502517182", "L853084801", (java.lang.Object) "java.io.IOException: ");
        fieldVisitor42.visitEnd();
        org.mockito.asm.Attribute attribute44 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor42.visitAttribute(attribute44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor42);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        long long21 = classReader17.readLong((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        classWriter24.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray32);
        byte[] byteArray34 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray34, 0, 0);
        java.lang.String str38 = classReader37.getSuperName();
        int int40 = classReader37.readInt(0);
        char[] charArray45 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj46 = classReader37.readConst(7, charArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj47 = classReader17.readConst(100, charArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3819410108757049244L) + "'", long21 == (-3819410108757049244L));
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.io.IOException: hi!" + "'", str38, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-889275714) + "'", int40 == (-889275714));
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + "java.io.IOException: hi!" + "'", obj46, "java.io.IOException: hi!");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor13.visitAnnotation("L478252604", true);
        fieldVisitor13.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor13.visitAnnotation("L630721910", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor20.visitArray("L1145278557");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitIntInsn((int) '4', 4);
        methodVisitor28.visitTypeInsn(19, "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter44.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter44.visitAnnotation("hi!", false);
        classWriter44.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!" };
        classWriter61.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray69);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter44.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray69);
        methodVisitor71.visitInsn(100);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        label77.info = (-1);
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        methodVisitor71.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label77, label80, 8);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int87 = classWriter84.newNameType("", "java.io.IOException");
        int int92 = classWriter84.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter84.visitEnd();
        label77.info = classWriter84;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLdcInsn((java.lang.Object) label77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value L1578160500");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String str17 = classReader12.getSuperName();
        int int19 = classReader12.readInt(12);
        byte[] byteArray20 = classReader12.b;
        short short22 = classReader12.readShort((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int24 = classReader12.getItem(16782186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16782186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException: hi!" + "'", str17, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 325738870 + "'", int19 == 325738870);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) 1024 + "'", short22 == (short) 1024);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '#');
        classWriter1.visitOuterClass("L181135275", "L1635572015", "L886841972");
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        classWriter11.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray19);
        byte[] byteArray21 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray21);
        java.lang.String[] strArray23 = classReader22.getInterfaces();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        classWriter25.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray33);
        byte[] byteArray35 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        int int38 = classReader36.readByte((int) (byte) 1);
        int int40 = classReader36.readByte(11);
        byte[] byteArray41 = classReader36.b;
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int47 = classWriter43.newField("hi!", "hi!", "hi!");
        int int49 = classWriter43.newClass("java.io.IOException");
        classReader36.accept((org.mockito.asm.ClassVisitor) classWriter43, 92);
        org.mockito.asm.Attribute[] attributeArray52 = null;
        classReader22.accept((org.mockito.asm.ClassVisitor) classWriter43, attributeArray52, 2);
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(3, "L853084801", "L1057702698", "L1057702698", (java.lang.Object) attributeArray52);
        java.lang.Class<?> wildcardClass56 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 254 + "'", int38 == 254);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        int int29 = classWriter21.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int31 = classWriter21.newUTF8("hi!");
        classWriter21.visitEnd();
        classWriter21.visitEnd();
        java.lang.String[] strArray39 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter21.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(0, "L630721910", "", "L71767159", strArray39);
        classWriter1.visitInnerClass("L598330668", "hi!", "L2054713387", 18);
        int int51 = classWriter1.newMethod("L2057645265", "L1502517182", "L1603039582", false);
        int int55 = classWriter1.newField("L1283926335", "java.io.IOException: L630721910", "L1933677661");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 19 + "'", int51 == 19);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 25 + "'", int55 == 25);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMultiANewArrayInsn("hi!", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter35.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray43);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter35.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        methodVisitor28.visitLdcInsn((java.lang.Object) (byte) 1);
        methodVisitor28.visitEnd();
        methodVisitor28.visitTypeInsn(11, "L630721910");
        java.io.IOException iOException59 = new java.io.IOException("L176482898");
        java.io.IOException iOException60 = new java.io.IOException("L853084801", (java.lang.Throwable) iOException59);
        java.io.IOException iOException61 = new java.io.IOException("L3070851", (java.lang.Throwable) iOException60);
        java.io.IOException iOException65 = new java.io.IOException();
        java.io.IOException iOException66 = new java.io.IOException("hi!", (java.lang.Throwable) iOException65);
        java.io.IOException iOException67 = new java.io.IOException("", (java.lang.Throwable) iOException65);
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) iOException67);
        java.io.IOException iOException70 = new java.io.IOException();
        java.io.IOException iOException71 = new java.io.IOException("hi!", (java.lang.Throwable) iOException70);
        iOException68.addSuppressed((java.lang.Throwable) iOException71);
        java.io.IOException iOException75 = new java.io.IOException();
        java.io.IOException iOException76 = new java.io.IOException("hi!", (java.lang.Throwable) iOException75);
        java.io.IOException iOException77 = new java.io.IOException("", (java.lang.Throwable) iOException75);
        java.io.IOException iOException78 = new java.io.IOException((java.lang.Throwable) iOException75);
        iOException68.addSuppressed((java.lang.Throwable) iOException78);
        java.io.IOException iOException80 = new java.io.IOException("L1145278557", (java.lang.Throwable) iOException78);
        iOException60.addSuppressed((java.lang.Throwable) iOException80);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLdcInsn((java.lang.Object) iOException60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: L853084801");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(fieldVisitor50);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        int int21 = classReader12.readByte(8);
        short short23 = classReader12.readShort(0);
        int int25 = classReader12.readInt(9);
        int int27 = classReader12.readInt((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!" };
        classWriter30.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray38);
        byte[] byteArray40 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray40, 0, 0);
        java.lang.String str44 = classReader43.getSuperName();
        int int46 = classReader43.readInt(0);
        char[] charArray51 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj52 = classReader43.readConst(7, charArray51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = classReader12.readClass(31, charArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28167");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) -13570 + "'", short23 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 167837715 + "'", int25 == 167837715);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-889275714) + "'", int27 == (-889275714));
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.io.IOException: hi!" + "'", str44, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-889275714) + "'", int46 == (-889275714));
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + "java.io.IOException: hi!" + "'", obj52, "java.io.IOException: hi!");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        int int13 = classWriter1.newConst((java.lang.Object) 0L);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newUTF8("hi!");
        classWriter19.visitEnd();
        classWriter19.visitEnd();
        java.lang.String[] strArray37 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter19.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray37);
        methodVisitor38.visitEnd();
        methodVisitor38.visitIntInsn((int) '4', 13);
        methodVisitor38.visitCode();
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter47.visitEnd();
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" };
        classWriter55.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        classWriter47.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        java.lang.Object[] objArray67 = null;
        methodVisitor38.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray63, 9, objArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(4, "L71767159", "L1335427656", "java.io.IOException: hi!", strArray63);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        classWriter76.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray84);
        byte[] byteArray86 = classWriter76.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        int int89 = classReader87.readByte((int) (byte) 1);
        int int90 = classReader87.header;
        java.lang.String str91 = classReader87.getSuperName();
        java.lang.String str92 = classReader87.getClassName();
        int int93 = classReader87.getAccess();
        java.lang.String[] strArray94 = classReader87.getInterfaces();
        classWriter1.visit((int) (short) -1, 117, "java.io.IOException: L1518273899", "L1763941555", "L2054713387", strArray94);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 254 + "'", int89 == 254);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 92 + "'", int90 == 92);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.io.IOException: hi!" + "'", str91, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.io.IOException" + "'", str92, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter1.visitInnerClass("L397518913", "L290171246", "L939499658", (int) (short) 1);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        int int14 = classWriter1.newNameType("L1603039582", "L781877917");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        short short15 = classReader12.readShort(12);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader12.getItem((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 4970 + "'", short15 == (short) 4970);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray16 = classReader15.b;
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        java.lang.String[] strArray18 = classReader17.getInterfaces();
        int int20 = classReader17.readUnsignedShort((int) (short) 0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 51966 + "'", int20 == 51966);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1432403946", true);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField((int) (short) 100, "L71767159", "hi!", "L71767159", (java.lang.Object) (-91551935198370816L));
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor17.visitAnnotation("L781877917", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = fieldVisitor17.visitAnnotation("L1131836979", true);
        fieldVisitor17.visitEnd();
        org.mockito.asm.Attribute attribute25 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor17.visitAttribute(attribute25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor23);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1432403946", true);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField((int) (short) 100, "L71767159", "hi!", "L71767159", (java.lang.Object) (-91551935198370816L));
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor17.visitAnnotation("L781877917", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = fieldVisitor17.visitAnnotation("java.io.IOException: L1635572015", false);
        annotationVisitor23.visitEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor23);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        int int15 = classWriter1.newMethod("L1502377119", "java.io.IOException", "L852881485", false);
        classWriter1.visitSource("L984287299", "L1947403627");
        org.mockito.asm.ByteVector byteVector23 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector25 = byteVector23.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector27 = byteVector23.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector29 = byteVector27.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector31 = byteVector27.putByte(0);
        org.mockito.asm.ByteVector byteVector33 = byteVector31.putUTF8("L1335427656");
        org.mockito.asm.ByteVector byteVector35 = byteVector31.putLong((long) (short) -326);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField((int) (short) 0, "L478252604", "java.io.IOException: java.io.IOException: hi!", "java/io/IOException", (java.lang.Object) (short) -326);
        classWriter1.visitInnerClass("L853084801", "L811708376", "", 254);
        classWriter1.visitOuterClass("L1524619426", "L984287299", "L180099709");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 13 + "'", int15 == 13);
        org.junit.Assert.assertNotNull(byteVector25);
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
        org.junit.Assert.assertNotNull(byteVector31);
        org.junit.Assert.assertNotNull(byteVector33);
        org.junit.Assert.assertNotNull(byteVector35);
        org.junit.Assert.assertNotNull(fieldVisitor36);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        int int13 = classWriter1.newConst((java.lang.Object) 0L);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newUTF8("hi!");
        classWriter19.visitEnd();
        classWriter19.visitEnd();
        java.lang.String[] strArray37 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter19.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray37);
        methodVisitor38.visitEnd();
        methodVisitor38.visitIntInsn((int) '4', 13);
        methodVisitor38.visitCode();
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter47.visitEnd();
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" };
        classWriter55.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        classWriter47.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        java.lang.Object[] objArray67 = null;
        methodVisitor38.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray63, 9, objArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(4, "L71767159", "L1335427656", "java.io.IOException: hi!", strArray63);
        methodVisitor69.visitTypeInsn((int) (byte) 10, "L691331867");
        org.mockito.asm.Attribute attribute73 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("L691331867", "L690922560", "L1518273899");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitTypeInsn(0, "");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter36.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter36.visitAnnotation("hi!", false);
        classWriter36.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        classWriter53.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter36.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray61);
        methodVisitor63.visitInsn(100);
        methodVisitor63.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        java.lang.Object obj71 = label70.info;
        methodVisitor63.visitJumpInsn(3, label70);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter74.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = classWriter74.visitAnnotation("hi!", false);
        classWriter74.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label70.info = "java.io.IOException: hi!";
        java.lang.String str87 = label70.toString();
        java.lang.String str88 = label70.toString();
        org.mockito.asm.Label label89 = new org.mockito.asm.Label();
        label89.info = (-1);
        label70.info = label89;
        java.lang.String str93 = label70.toString();
        methodVisitor28.visitJumpInsn(92, label70);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = label70.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L1884793471" + "'", str87, "L1884793471");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L1884793471" + "'", str88, "L1884793471");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "L1884793471" + "'", str93, "L1884793471");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor59.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        methodVisitor59.visitEnd();
        methodVisitor59.visitCode();
        methodVisitor59.visitMaxs((int) (byte) 10, 17);
        methodVisitor59.visitMaxs(325738870, 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor59.visitAnnotation("L598330668", true);
        methodVisitor59.visitIntInsn((int) (short) -13570, 14);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute15 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        long long21 = classReader17.readLong((int) (byte) 0);
        int int22 = classReader17.header;
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3819410108757049244L) + "'", long21 == (-3819410108757049244L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 119 + "'", int22 == 119);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitTypeInsn(11, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor28.visitAnnotation("L886841972", true);
        org.mockito.asm.Attribute attribute37 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        int int18 = classWriter1.newClass("");
        int int23 = classWriter1.newMethod("L1057702698", "L1145278557", "", true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        long long17 = classReader12.readLong((int) (byte) 0);
        int int19 = classReader12.readUnsignedShort(0);
        int int21 = classReader12.readByte((int) (byte) 100);
        int int22 = classReader12.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = classReader12.getItem(167837715);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 167837715");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3819410108757049244L) + "'", long17 == (-3819410108757049244L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51966 + "'", int19 == 51966);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter21.newField("hi!", "hi!", "hi!");
        classWriter21.visitEnd();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter32.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter32.visitAnnotation("hi!", false);
        classWriter32.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!" };
        classWriter49.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter32.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter21.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter1.visitMethod(6, "L1635572015", "L1035695636", "L1145278557", strArray57);
        org.mockito.asm.Attribute attribute62 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNotNull(methodVisitor61);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        fieldVisitor13.visitEnd();
        fieldVisitor13.visitEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        int int21 = classReader12.readByte(8);
        long long23 = classReader12.readLong(58);
        byte[] byteArray24 = classReader12.b;
        byte[] byteArray25 = classReader12.b;
        int int27 = classReader12.readByte((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int29 = classReader12.readInt((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2335231997363880705L + "'", long23 == 2335231997363880705L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitMethodInsn(10, "hi!", "hi!", "java.io.IOException");
        methodVisitor28.visitIincInsn(196864, 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter38.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter38.visitAnnotation("hi!", false);
        classWriter38.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" };
        classWriter55.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter38.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray63);
        methodVisitor65.visitInsn(100);
        methodVisitor65.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        java.lang.Object obj73 = label72.info;
        methodVisitor65.visitJumpInsn(3, label72);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter76.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter76.visitAnnotation("hi!", false);
        classWriter76.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label72.info = "java.io.IOException: hi!";
        java.lang.String str89 = label72.toString();
        java.lang.String str90 = label72.toString();
        org.mockito.asm.Label label91 = new org.mockito.asm.Label();
        label91.info = (-1);
        label72.info = label91;
        java.lang.String str95 = label72.toString();
        methodVisitor28.visitLabel(label72);
        org.mockito.asm.AnnotationVisitor annotationVisitor99 = methodVisitor28.visitAnnotation("L2066229866", false);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "L1124808138" + "'", str89, "L1124808138");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "L1124808138" + "'", str90, "L1124808138");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "L1124808138" + "'", str95, "L1124808138");
        org.junit.Assert.assertNotNull(annotationVisitor99);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader12, 9);
        classWriter65.visitSource("java.io.IOException: L1518273899", "L290171246");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.getItem(5);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        int int29 = classWriter21.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int31 = classWriter21.newConst((java.lang.Object) 10L);
        classWriter21.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        byte[] byteArray37 = classWriter21.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            classReader17.accept((org.mockito.asm.ClassVisitor) classWriter21, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 5, 0, 0, 0, 0, 0, 0, 0, 10, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 7, 0, 11, 7, 0, 2, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 14, 0, 0, 0, 10, 0, 1, 0, 12, 0, 13, 0, 2, 0, 12]");
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int16 = classWriter13.newNameType("", "java.io.IOException");
        int int21 = classWriter13.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int23 = classWriter13.newConst((java.lang.Object) 10L);
        int int25 = classWriter13.newUTF8("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor26 = classWriter1.visitField(3, "", "L478252604", "java.io.IOException: ", (java.lang.Object) "hi!");
        java.lang.Object obj31 = null;
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField((int) ' ', "hi!", "L71767159", "L1335427656", obj31);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = fieldVisitor32.visitAnnotation("L2066229866", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = fieldVisitor32.visitAnnotation("", true);
        org.mockito.asm.Attribute attribute39 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor32.visitAttribute(attribute39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor26);
        org.junit.Assert.assertNotNull(fieldVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitSource("hi!", "java.io.IOException: hi!");
        int int14 = classWriter1.newField("L478252604", "L1131836979", "");
        classWriter1.visitOuterClass("L656401292", "L2054713387", "L71767159");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(3, (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(6, 13);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter41.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter41.visitAnnotation("hi!", false);
        classWriter41.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        classWriter58.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter41.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray66);
        methodVisitor68.visitInsn(100);
        org.mockito.asm.Label label74 = new org.mockito.asm.Label();
        label74.info = (-1);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        methodVisitor68.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label74, label77, 8);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int84 = classWriter81.newNameType("", "java.io.IOException");
        int int89 = classWriter81.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter81.visitEnd();
        label74.info = classWriter81;
        methodVisitor28.visitLineNumber(21, label74);
        java.lang.Object obj93 = label74.info;
        java.lang.Object obj94 = label74.info;
        // The following exception was thrown during execution in test generation
        try {
            int int95 = label74.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertNotNull(obj94);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        int int34 = classWriter15.newField("L2054713387", "L1933677661", "hi!");
        classWriter15.visitOuterClass("L1526910237", "L613898026", "L616447458");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter41.newNameType("", "java.io.IOException");
        label37.info = classWriter41;
        java.lang.Object obj50 = null;
        org.mockito.asm.FieldVisitor fieldVisitor51 = classWriter41.visitField((int) (byte) 1, "L1145278557", "L1502377119", "L616447458", obj50);
        org.mockito.asm.FieldVisitor fieldVisitor57 = classWriter41.visitField(58, "L478252604", "L181135275", "L1145278557", (java.lang.Object) "L1145278557");
        classWriter41.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(fieldVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor57);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor7.visitAnnotation("hi!", "");
        annotationVisitor7.visitEnum("java.io.IOException", "java.io.IOException", "hi!");
        java.io.IOException iOException22 = new java.io.IOException();
        java.io.IOException iOException23 = new java.io.IOException("hi!", (java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray24 = iOException23.getSuppressed();
        java.io.IOException iOException25 = new java.io.IOException("L1635572015", (java.lang.Throwable) iOException23);
        java.lang.Throwable[] throwableArray26 = iOException25.getSuppressed();
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException25);
        java.lang.Throwable[] throwableArray28 = iOException27.getSuppressed();
        java.io.IOException iOException29 = new java.io.IOException("L1274768994", (java.lang.Throwable) iOException27);
        annotationVisitor7.visit("L1502517182", (java.lang.Object) "L1274768994");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        int int40 = classReader37.header;
        java.lang.String str41 = classReader37.getSuperName();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter1.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray42);
        org.mockito.asm.Label label44 = new org.mockito.asm.Label();
        java.lang.Object obj45 = label44.info;
        java.lang.Object obj46 = label44.info;
        methodVisitor43.visitLabel(label44);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int52 = classWriter49.newNameType("", "java.io.IOException");
        int int57 = classWriter49.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int59 = classWriter49.newConst((java.lang.Object) 10L);
        classWriter49.visitOuterClass("hi!", "", "java.io.IOException: ");
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "hi!" };
        classWriter70.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray78);
        byte[] byteArray80 = classWriter70.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        java.lang.String[] strArray82 = classReader81.getInterfaces();
        int int83 = classReader81.header;
        byte[] byteArray84 = classReader81.b;
        java.lang.String[] strArray85 = classReader81.getInterfaces();
        java.lang.String[] strArray86 = classReader81.getInterfaces();
        classWriter49.visit(4, 106, "java/io/IOException", "L1145278557", "L180099709", strArray86);
        label44.info = strArray86;
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 92 + "'", int40 == 92);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.io.IOException: hi!" + "'", str41, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 92 + "'", int83 == 92);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(strArray86);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        int int18 = classWriter1.newUTF8("");
        org.mockito.asm.Attribute attribute19 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitMethodInsn(10, "hi!", "hi!", "java.io.IOException");
        methodVisitor28.visitIincInsn((-1107296256), 202);
        org.mockito.asm.Attribute attribute37 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = label35.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader12, 190);
        char[] charArray37 = new char[] { 'a', '4', ' ', ' ', 'a', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader12.readClass((int) (byte) 1, charArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a4  a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a4  a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, 4,  ,  , a, 4]");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor13.visitAnnotation("L478252604", true);
        annotationVisitor16.visitEnd();
        annotationVisitor16.visitEnum("L1131836979", "L1770206027", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor16.visitAnnotation("L1231535858", "L1808373495");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor16.visitArray("L43475377");
        annotationVisitor26.visitEnum("L616447458", "L1335427656", "L656401292");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        byte[] byteArray16 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = classReader17.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int10 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        int int14 = classWriter1.newField("L1335427656", "java.io.IOException: ", "");
        byte[] byteArray15 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray15, (int) (short) 4970, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4978");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 3, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 12, 0, 1, 0, 3, 1, 0, 11, 76, 49, 51, 51, 53, 52, 50, 55, 54, 53, 54, 7, 0, 5, 1, 0, 0, 12, 0, 3, 0, 7, 9, 0, 6, 0, 8, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 2, 0, 1, 0, 11, 0, 0, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 0, 12, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(classReader12, 11);
        java.lang.String str20 = classReader12.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = classReader12.getItem(186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.io.IOException" + "'", str20, "java.io.IOException");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor15.visitArray("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector20 = new org.mockito.asm.ByteVector(202);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int26 = classWriter22.newField("hi!", "hi!", "hi!");
        classWriter22.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter22.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter22.visitAnnotation("java.io.IOException", true);
        byte[] byteArray37 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray37, 0, (int) (short) 1792);
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ByteVector byteVector45 = byteVector20.putByteArray(byteArray37, 119, 0);
        annotationVisitor15.visit("L1085647388", (java.lang.Object) byteArray37);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
        org.junit.Assert.assertNotNull(byteVector45);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        byte[] byteArray16 = classWriter1.toByteArray();
        classWriter1.visitSource("", "L478252604");
        byte[] byteArray20 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter1.visitAnnotation("L1947403627", true);
        int int25 = classWriter1.newUTF8("L80982279");
        java.lang.Class<?> wildcardClass26 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter1.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        int int21 = classWriter1.newUTF8("L269304557");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        classWriter9.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray17);
        classWriter1.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray17);
        int int22 = classWriter1.newNameType("L1892470476", "L1335427656");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        java.lang.Class<?> wildcardClass13 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor59.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = methodVisitor59.visitAnnotationDefault();
        methodVisitor59.visitMethodInsn(0, "L853084801", "L1085647388", "L2066229866");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor68);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray13 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray13, 393224, (-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 393232");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int68 = classWriter63.newMethod("java.io.IOException: hi!", "hi!", "", true);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray82 = new java.lang.String[] { "", "hi!" };
        classWriter74.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray82);
        byte[] byteArray84 = classWriter74.toByteArray();
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84);
        int int87 = classReader85.readByte((int) (byte) 1);
        int int89 = classReader85.readByte(11);
        int int90 = classReader85.getAccess();
        java.lang.String str91 = classReader85.getSuperName();
        java.lang.String str92 = classReader85.getSuperName();
        byte[] byteArray93 = classReader85.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor94 = classWriter63.visitField(1229931896, "", "L939499658", "", (java.lang.Object) byteArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@9baeeda");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 254 + "'", int87 == 254);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.io.IOException: hi!" + "'", str91, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.io.IOException: hi!" + "'", str92, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        classWriter21.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter1.visitMethod(13, "L1432403946", "java.io.IOException: ", "L478252604", strArray29);
        classWriter1.visitEnd();
        int int37 = classWriter1.newMethod("L583575715", "L1432403946", "L1131836979", false);
        classWriter1.visitSource("L1335427656", "L1145278557");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter1.visitAnnotation("L3070851", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = annotationVisitor43.visitArray("");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 15 + "'", int37 == 15);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int64 = classReader12.header;
        int int65 = classReader12.header;
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 92 + "'", int64 == 92);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 92 + "'", int65 == 92);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        int int18 = classReader14.header;
        int int19 = classReader14.getAccess();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        java.lang.String str64 = classReader12.getClassName();
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader12, 16);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = classReader12.readUnsignedShort(1635148078);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.io.IOException" + "'", str64, "java.io.IOException");
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        classWriter1.visitOuterClass("java.io.IOException", "java.io.IOException", "java.io.IOException: ");
        classWriter1.visitOuterClass("L852881485", "L1432403946", "hi!");
        classWriter1.visitInnerClass("L886841972", "L1035695636", "L1603039582", 12);
        org.mockito.asm.Attribute attribute34 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        byte[] byteArray15 = classReader12.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        byte[] byteArray28 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter31.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter31.visitAnnotation("hi!", false);
        classWriter31.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter31.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray56);
        methodVisitor58.visitInsn(100);
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        label64.info = (-1);
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        methodVisitor58.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label64, label67, 8);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int74 = classWriter71.newNameType("", "java.io.IOException");
        label67.info = classWriter71;
        org.mockito.asm.Attribute[] attributeArray76 = new org.mockito.asm.Attribute[] {};
        classReader29.accept((org.mockito.asm.ClassVisitor) classWriter71, attributeArray76, 0);
        int int80 = classWriter71.newClass("");
        classReader16.accept((org.mockito.asm.ClassVisitor) classWriter71, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(classReader16, 167837715);
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int90 = classWriter86.newField("hi!", "hi!", "hi!");
        int int92 = classWriter86.newClass("java.io.IOException");
        classWriter86.visitSource("L598330668", "");
        int int97 = classWriter86.newUTF8("java.io.IOException");
        // The following exception was thrown during execution in test generation
        try {
            int int98 = classWriter84.newConst((java.lang.Object) classWriter86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@8cc6788");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(attributeArray76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 7 + "'", int80 == 7);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 5 + "'", int97 == 5);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        classWriter16.visitEnd();
        classWriter16.visitSource("hi!", "L1635572015");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        byte[] byteArray47 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray47, 0, 0);
        java.lang.String str51 = classReader50.getSuperName();
        int int53 = classReader50.readInt(0);
        int int55 = classReader50.readByte(2);
        java.lang.String[] strArray56 = classReader50.getInterfaces();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(classReader50, 1);
        short short60 = classReader50.readShort((int) (byte) 100);
        org.mockito.asm.FieldVisitor fieldVisitor61 = classWriter16.visitField(9, "L1145278557", "L367481933", "L852881485", (java.lang.Object) (byte) 100);
        org.mockito.asm.Attribute attribute62 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter16.visitAttribute(attribute62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.io.IOException: hi!" + "'", str51, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-889275714) + "'", int53 == (-889275714));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 186 + "'", int55 == 186);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 6 + "'", short60 == (short) 6);
        org.junit.Assert.assertNotNull(fieldVisitor61);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 2, 100);
        org.mockito.asm.ByteVector byteVector29 = byteVector27.putLong((long) 776556357);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 0);
        byte[] byteArray32 = classWriter31.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector35 = byteVector27.putByteArray(byteArray32, (int) (short) 256, 196864);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!" };
        classWriter7.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray15);
        byte[] byteArray17 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 0, 0);
        java.lang.String str21 = classReader20.getSuperName();
        int int23 = classReader20.readInt(0);
        int int25 = classReader20.readByte(2);
        java.lang.String[] strArray26 = classReader20.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter1.visitMethod((int) (byte) 10, "L1526910237", "java.io.IOException: java.io.IOException: hi!", "L1603039582", strArray26);
        byte[] byteArray28 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray28, 24, 1635148078);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 169");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.io.IOException: hi!" + "'", str21, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-889275714) + "'", int23 == (-889275714));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 186 + "'", int25 == 186);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 11, 76, 49, 53, 50, 54, 57, 49, 48, 50, 51, 55, 1, 0, 45, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 3, 104, 105, 33, 7, 0, 5, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 49, 54, 48, 51, 48, 51, 57, 53, 56, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 1, 0, 2, 0, 2, 0, 7, 0, 0, 0, 6, 0, 2, 0, 4, 0, 6, 0, 8, 0, 0, 0, 2, 0, 9, 0, 0]");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int18 = classReader17.header;
        byte[] byteArray19 = classReader17.b;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader17.getItem((int) (short) 11881);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11881");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 119 + "'", int18 == 119);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter15.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        methodVisitor28.visitIincInsn(5, 10);
        methodVisitor28.visitMaxs(1986080361, 167837715);
        methodVisitor28.visitEnd();
        org.mockito.asm.Attribute attribute47 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        classWriter13.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray21);
        classWriter1.visit((int) (short) 0, (int) (byte) 1, "java.io.IOException: hi!", "java.io.IOException: hi!", "java.io.IOException", strArray21);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L781877917", false);
        annotationVisitor27.visitEnum("L1274768994", "L613898026", "L1085647388");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(annotationVisitor27);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        byte[] byteArray28 = classWriter19.toByteArray();
        classWriter19.visitEnd();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 7, 1, 0, 0, 7, 0, 9, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 6, 0, 8, 0, 2, 0, 10, 0, 2, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0, 2, 0, 5]");
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        classWriter1.visitOuterClass("java.io.IOException", "java.io.IOException", "java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("L583575715", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = annotationVisitor27.visitArray("L1085647388");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor59.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        methodVisitor59.visitEnd();
        methodVisitor59.visitEnd();
        methodVisitor59.visitCode();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        byte[] byteArray16 = classWriter1.toByteArray();
        classWriter1.visitSource("", "L478252604");
        byte[] byteArray20 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("L180099709", "L1335427656", "L1947403627", (-1107296256));
        org.mockito.asm.Attribute attribute26 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor28.visitAnnotationDefault();
        annotationVisitor85.visit("L1131836979", (java.lang.Object) 254);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = annotationVisitor85.visitArray("java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = annotationVisitor90.visitAnnotation("L630721910", "L1603039582");
        annotationVisitor93.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int68 = classWriter63.newMethod("java.io.IOException: hi!", "hi!", "", true);
        int int73 = classWriter63.newMethod("java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", false);
        int int75 = classWriter63.newUTF8("java.io.IOException: hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter63.visitAnnotation("L181135275", false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 13 + "'", int73 == 13);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitFieldInsn(3, "L781877917", "L1432403946", "");
        methodVisitor28.visitInsn((-1));
        org.mockito.asm.Label label44 = new org.mockito.asm.Label();
        label44.info = (-1);
        methodVisitor28.visitLabel(label44);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!" };
        classWriter49.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray57);
        byte[] byteArray59 = classWriter49.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        int int62 = classReader60.readByte((int) (byte) 1);
        int int64 = classReader60.readByte(11);
        byte[] byteArray65 = classReader60.b;
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int71 = classWriter67.newField("hi!", "hi!", "hi!");
        int int73 = classWriter67.newClass("java.io.IOException");
        classReader60.accept((org.mockito.asm.ClassVisitor) classWriter67, 92);
        int int77 = classReader60.readInt(8);
        label44.info = int77;
        java.lang.Object obj79 = label44.info;
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 254 + "'", int62 == 254);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 655616 + "'", int77 == 655616);
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + 655616 + "'", obj79, 655616);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int64 = classReader12.getAccess();
        int int65 = classReader12.header;
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 92 + "'", int65 == 92);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector0.putUTF8("L1145278557");
        org.mockito.asm.ByteVector byteVector8 = byteVector0.putInt((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        byte[] byteArray20 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray20, 0, 0);
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray20, 92, (int) '4');
        org.mockito.asm.ByteVector byteVector29 = byteVector8.putByteArray(byteArray20, 23, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray20, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector29);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int64 = classReader12.getAccess();
        byte[] byteArray65 = classReader12.b;
        org.mockito.asm.ClassVisitor classVisitor66 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader12.accept(classVisitor66, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        classWriter19.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray27);
        byte[] byteArray29 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray29, 0, 0);
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray29);
        int int34 = classReader33.header;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        byte[] byteArray47 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray47, 0, 0);
        java.lang.String str51 = classReader50.getSuperName();
        int int53 = classReader50.readInt(0);
        char[] charArray58 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj59 = classReader50.readConst(7, charArray58);
        java.lang.String str60 = classReader33.readClass(100, charArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = classReader12.readUTF8(8296, charArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 92 + "'", int34 == 92);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.io.IOException: hi!" + "'", str51, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-889275714) + "'", int53 == (-889275714));
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + "java.io.IOException: hi!" + "'", obj59, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte((int) (byte) 1);
        int int30 = classReader26.readByte(11);
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        int int39 = classWriter33.newClass("java.io.IOException");
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter33, 92);
        int int45 = classWriter33.newField("java.io.IOException: ", "hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        byte[] byteArray57 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        java.lang.String[] strArray59 = classReader58.getInterfaces();
        int int61 = classReader58.readByte(8);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" };
        classWriter63.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray71);
        org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter63.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute79 = null;
        org.mockito.asm.Attribute[] attributeArray80 = new org.mockito.asm.Attribute[] { attribute79 };
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter63, attributeArray80, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter33, attributeArray80, (int) (short) 0);
        int int85 = classReader12.getAccess();
        java.lang.String str86 = classReader12.getSuperName();
        java.lang.String str87 = classReader12.getClassName();
        char[] charArray95 = new char[] { ' ', 'a', 'a', ' ', '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj96 = classReader12.readConst(12, charArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 254 + "'", int28 == 254);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 14 + "'", int45 == 14);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(fieldVisitor78);
        org.junit.Assert.assertNotNull(attributeArray80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.io.IOException: hi!" + "'", str86, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "java.io.IOException" + "'", str87, "java.io.IOException");
        org.junit.Assert.assertNotNull(charArray95);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray95), " aa 4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray95), " aa 4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray95), "[ , a, a,  , 4, #]");
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        int int21 = classReader12.readByte(8);
        short short23 = classReader12.readShort(0);
        java.lang.String str24 = classReader12.getClassName();
        int int25 = classReader12.getAccess();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader12, 8);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = classReader12.readLong(119);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) -13570 + "'", short23 == (short) -13570);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.io.IOException" + "'", str24, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int21 = classWriter18.newNameType("", "java.io.IOException");
        int int26 = classWriter18.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int28 = classWriter18.newUTF8("hi!");
        int int32 = classWriter18.newField("", "L1335427656", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray42);
        byte[] byteArray44 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        java.lang.String[] strArray46 = classReader45.getInterfaces();
        int int48 = classReader45.readByte(8);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter50.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute66 = null;
        org.mockito.asm.Attribute[] attributeArray67 = new org.mockito.asm.Attribute[] { attribute66 };
        classReader45.accept((org.mockito.asm.ClassVisitor) classWriter50, attributeArray67, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter18, attributeArray67, 63);
        byte[] byteArray72 = classReader12.b;
        java.lang.String str73 = classReader12.getClassName();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertNotNull(attributeArray67);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.io.IOException" + "'", str73, "java.io.IOException");
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        java.lang.String str15 = classReader12.getClassName();
        long long17 = classReader12.readLong(16);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(classReader12, 16782186);
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException28 = new java.io.IOException("hi!", (java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException("", (java.lang.Throwable) iOException27);
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException29);
        java.io.IOException iOException32 = new java.io.IOException();
        java.io.IOException iOException33 = new java.io.IOException("hi!", (java.lang.Throwable) iOException32);
        iOException30.addSuppressed((java.lang.Throwable) iOException33);
        java.io.IOException iOException37 = new java.io.IOException();
        java.io.IOException iOException38 = new java.io.IOException("hi!", (java.lang.Throwable) iOException37);
        java.io.IOException iOException39 = new java.io.IOException("", (java.lang.Throwable) iOException37);
        java.io.IOException iOException40 = new java.io.IOException((java.lang.Throwable) iOException39);
        java.io.IOException iOException42 = new java.io.IOException();
        java.io.IOException iOException43 = new java.io.IOException("hi!", (java.lang.Throwable) iOException42);
        iOException40.addSuppressed((java.lang.Throwable) iOException43);
        iOException33.addSuppressed((java.lang.Throwable) iOException43);
        java.io.IOException iOException48 = new java.io.IOException();
        java.io.IOException iOException49 = new java.io.IOException("hi!", (java.lang.Throwable) iOException48);
        java.io.IOException iOException50 = new java.io.IOException("", (java.lang.Throwable) iOException48);
        java.io.IOException iOException51 = new java.io.IOException((java.lang.Throwable) iOException50);
        java.io.IOException iOException53 = new java.io.IOException();
        java.io.IOException iOException54 = new java.io.IOException("hi!", (java.lang.Throwable) iOException53);
        iOException51.addSuppressed((java.lang.Throwable) iOException54);
        java.io.IOException iOException58 = new java.io.IOException();
        java.io.IOException iOException59 = new java.io.IOException("hi!", (java.lang.Throwable) iOException58);
        java.io.IOException iOException60 = new java.io.IOException("", (java.lang.Throwable) iOException58);
        java.io.IOException iOException61 = new java.io.IOException((java.lang.Throwable) iOException60);
        java.io.IOException iOException63 = new java.io.IOException();
        java.io.IOException iOException64 = new java.io.IOException("hi!", (java.lang.Throwable) iOException63);
        iOException61.addSuppressed((java.lang.Throwable) iOException64);
        iOException54.addSuppressed((java.lang.Throwable) iOException64);
        iOException33.addSuppressed((java.lang.Throwable) iOException64);
        java.io.IOException iOException68 = new java.io.IOException("L598330668", (java.lang.Throwable) iOException64);
        java.io.IOException iOException69 = new java.io.IOException();
        java.io.IOException iOException72 = new java.io.IOException();
        java.io.IOException iOException73 = new java.io.IOException("hi!", (java.lang.Throwable) iOException72);
        java.io.IOException iOException74 = new java.io.IOException("", (java.lang.Throwable) iOException72);
        iOException69.addSuppressed((java.lang.Throwable) iOException74);
        java.io.IOException iOException76 = new java.io.IOException((java.lang.Throwable) iOException69);
        java.io.IOException iOException80 = new java.io.IOException();
        java.io.IOException iOException81 = new java.io.IOException("hi!", (java.lang.Throwable) iOException80);
        java.io.IOException iOException82 = new java.io.IOException("", (java.lang.Throwable) iOException80);
        java.io.IOException iOException83 = new java.io.IOException("L1335427656", (java.lang.Throwable) iOException80);
        iOException76.addSuppressed((java.lang.Throwable) iOException80);
        iOException68.addSuppressed((java.lang.Throwable) iOException76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor86 = classWriter19.visitField((int) '4', "", "L1612257353", "L1283926335", (java.lang.Object) iOException68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: L598330668");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException" + "'", str15, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7002650396846542661L + "'", long17 == 7002650396846542661L);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter41.newNameType("", "java.io.IOException");
        label37.info = classWriter41;
        java.lang.Object obj50 = null;
        org.mockito.asm.FieldVisitor fieldVisitor51 = classWriter41.visitField((int) (byte) 1, "L1145278557", "L1502377119", "L616447458", obj50);
        int int53 = classWriter41.newUTF8("java.io.IOException: ");
        classWriter41.visitSource("L2054713387", "L717126513");
        org.mockito.asm.Attribute attribute57 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter41.visitAttribute(attribute57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(fieldVisitor51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        int int29 = classWriter21.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int31 = classWriter21.newUTF8("hi!");
        classWriter21.visitEnd();
        classWriter21.visitEnd();
        java.lang.String[] strArray39 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter21.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(0, "L630721910", "", "L71767159", strArray39);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter1.visitAnnotation("L1502517182", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = annotationVisitor44.visitAnnotation("", "");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("java.io.IOException: ", true);
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor12.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor12.visitAnnotation("java.io.IOException", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = fieldVisitor12.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = annotationVisitor25.visitArray("L773229801");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor27);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        classWriter15.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter15.visitAnnotation("L1432403946", true);
        byte[] byteArray35 = classWriter15.toByteArray();
        int int37 = classWriter15.newClass("java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        classWriter43.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray51);
        int int57 = classWriter43.newMethod("L1502377119", "java.io.IOException", "L852881485", false);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!" };
        classWriter64.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray72);
        byte[] byteArray74 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader75 = new org.mockito.asm.ClassReader(byteArray74);
        java.lang.String[] strArray76 = classReader75.getInterfaces();
        classWriter43.visit(58, 51966, "L3070851", "L869511749", "L176482898", strArray76);
        org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter15.visitField(119, "L2054713387", "L1131836979", "L478252604", (java.lang.Object) 58);
        org.mockito.asm.ByteVector byteVector83 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector85 = byteVector83.putUTF8("java.io.IOException: ");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor86 = classWriter15.visitField(325738870, "java.io.IOException: L1635572015", "L71767159", "L1135755945", (java.lang.Object) byteVector83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@6d86bb9a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 16, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 7, 0, 7, 7, 0, 8, 1, 0, 11, 76, 49, 52, 51, 50, 52, 48, 51, 57, 52, 54, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 10, 0, 6, 0, 10, 0, 2, 0, 11, 0, 2, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 13, 0, 0, 0, 2, 0, 9, 0, 14, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 14, 0, 0, 0, 2, 0, 5, 0, 15, 0, 0, 0, 6, 0, 1, 0, 12, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(fieldVisitor78);
        org.junit.Assert.assertNotNull(byteVector85);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector(63);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "hi!" };
        classWriter3.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray11);
        byte[] byteArray13 = classWriter3.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter16.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter16.visitAnnotation("hi!", false);
        classWriter16.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" };
        classWriter33.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray41);
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter16.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray41);
        methodVisitor43.visitInsn(100);
        org.mockito.asm.Label label49 = new org.mockito.asm.Label();
        label49.info = (-1);
        org.mockito.asm.Label label52 = new org.mockito.asm.Label();
        methodVisitor43.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label49, label52, 8);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int59 = classWriter56.newNameType("", "java.io.IOException");
        label52.info = classWriter56;
        org.mockito.asm.Attribute[] attributeArray61 = new org.mockito.asm.Attribute[] {};
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter56, attributeArray61, 0);
        byte[] byteArray64 = classWriter56.toByteArray();
        org.mockito.asm.ByteVector byteVector67 = byteVector1.putByteArray(byteArray64, 5, 0);
        byte[] byteArray68 = null;
        org.mockito.asm.ByteVector byteVector71 = byteVector67.putByteArray(byteArray68, 0, 26);
        org.mockito.asm.ByteVector byteVector73 = byteVector67.putUTF8("");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(attributeArray61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 7, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 5, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 4, 0, 6, 0, 2, 0, 7, 0, 9, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 2, 0, 2]");
        org.junit.Assert.assertNotNull(byteVector67);
        org.junit.Assert.assertNotNull(byteVector71);
        org.junit.Assert.assertNotNull(byteVector73);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        java.lang.String[] strArray12 = null;
        org.mockito.asm.MethodVisitor methodVisitor13 = classWriter1.visitMethod((int) (short) 10, "L2066229866", "L1145278557", "L616447458", strArray12);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter19.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = classWriter19.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter19.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor29 = classWriter1.visitField(196864, "L71767159", "", "L181135275", (java.lang.Object) false);
        classWriter1.visitInnerClass("L478252604", "L691331867", "L1135755945", 1635148078);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(methodVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor29);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("java.io.IOException: ", true);
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor12.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor12.visitAnnotation("", false);
        org.mockito.asm.Attribute attribute23 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        java.lang.String str19 = classReader12.getClassName();
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(classReader12, 9);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(48640);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter23, 6553610);
        int int27 = classWriter23.newClass("");
        classWriter23.visitInnerClass("L927534614", "L927534614", "L613898026", 163);
        classWriter23.visitEnd();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException" + "'", str19, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 2, 100);
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray24, (int) (byte) 100, (-1));
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray24, (int) (byte) 0, (int) (byte) -1);
        char[] charArray35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = classReader33.readUTF8(19, charArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector27);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter22.newNameType("", "java.io.IOException");
        int int30 = classWriter22.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter22.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter22.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter40.newField("hi!", "hi!", "hi!");
        classWriter40.visitEnd();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter51.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter51.visitAnnotation("hi!", false);
        classWriter51.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!" };
        classWriter68.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray76);
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter51.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray76);
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter40.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray76);
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter22.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray76);
        classWriter1.visit(8, 167837715, "java.io.IOException", "L853084801", "L1145278557", strArray76);
        int int84 = classWriter1.newNameType("L1502517182", "L478252604");
        int int89 = classWriter1.newMethod("L616447458", "L1145278557", "L643431443", false);
        java.io.IOException iOException95 = new java.io.IOException("");
        java.lang.Throwable[] throwableArray96 = iOException95.getSuppressed();
        java.io.IOException iOException97 = new java.io.IOException((java.lang.Throwable) iOException95);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor98 = classWriter1.visitField(22, "L2120157225", "java.io.IOException: java.io.IOException: ", "L290171246", (java.lang.Object) iOException95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 14 + "'", int84 == 14);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 19 + "'", int89 == 19);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitFieldInsn((int) ' ', "java.io.IOException: hi!", "java.io.IOException: ", "L1335427656");
        methodVisitor28.visitTypeInsn(21, "L367481933");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int21 = classWriter18.newNameType("", "java.io.IOException");
        int int26 = classWriter18.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int28 = classWriter18.newUTF8("hi!");
        int int32 = classWriter18.newField("", "L1335427656", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray42);
        byte[] byteArray44 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        java.lang.String[] strArray46 = classReader45.getInterfaces();
        int int48 = classReader45.readByte(8);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter50.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute66 = null;
        org.mockito.asm.Attribute[] attributeArray67 = new org.mockito.asm.Attribute[] { attribute66 };
        classReader45.accept((org.mockito.asm.ClassVisitor) classWriter50, attributeArray67, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter18, attributeArray67, 63);
        classWriter18.visitSource("L598330668", "L1035695636");
        classWriter18.visitInnerClass("L1502377119", "L1274768994", "L71767159", (int) 'a');
        classWriter18.visitEnd();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertNotNull(attributeArray67);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 2, 100);
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray24, (int) (byte) 100, (-1));
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray24);
        int int33 = classReader31.readUnsignedShort(7);
        int int34 = classReader31.getAccess();
        int int35 = classReader31.getAccess();
        char[] charArray37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = classReader31.readConst((-889275714), charArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -889275714");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 25600 + "'", int33 == 25600);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector0.putUTF8("L1145278557");
        org.mockito.asm.ByteVector byteVector8 = byteVector0.putInt((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int13 = classWriter10.newNameType("", "java.io.IOException");
        int int18 = classWriter10.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int20 = classWriter10.newUTF8("hi!");
        classWriter10.visitEnd();
        classWriter10.visitSource("", "hi!");
        byte[] byteArray25 = classWriter10.toByteArray();
        classWriter10.visitSource("", "L478252604");
        byte[] byteArray29 = classWriter10.toByteArray();
        org.mockito.asm.ByteVector byteVector32 = byteVector8.putByteArray(byteArray29, 13, 15);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray42);
        byte[] byteArray44 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        int int47 = classReader45.readByte((int) (byte) 1);
        int int48 = classReader45.header;
        byte[] byteArray49 = classReader45.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector52 = byteVector32.putByteArray(byteArray49, 1165517669, (int) (short) 256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
        org.junit.Assert.assertNotNull(byteVector32);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 254 + "'", int47 == 254);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 92 + "'", int48 == 92);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int17 = classReader12.getAccess();
        java.lang.String str18 = classReader12.getSuperName();
        java.lang.String str19 = classReader12.getSuperName();
        long long21 = classReader12.readLong((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int23 = classReader12.readByte(1986080361);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1986080361");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 504404262073690721L + "'", long21 == 504404262073690721L);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitEnd();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" };
        classWriter56.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter39.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray64);
        methodVisitor66.visitInsn(100);
        methodVisitor66.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        java.lang.Object obj74 = label73.info;
        methodVisitor66.visitJumpInsn(3, label73);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter77.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = classWriter77.visitAnnotation("hi!", false);
        classWriter77.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label73.info = "java.io.IOException: hi!";
        java.lang.String str90 = label73.toString();
        java.lang.String str91 = label73.toString();
        org.mockito.asm.Label label92 = new org.mockito.asm.Label();
        org.mockito.asm.Label label93 = new org.mockito.asm.Label();
        methodVisitor28.visitTryCatchBlock(label73, label92, label93, "L1274768994");
        // The following exception was thrown during execution in test generation
        try {
            int int96 = label73.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "L1988856213" + "'", str90, "L1988856213");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "L1988856213" + "'", str91, "L1988856213");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int65 = classReader12.readByte(3);
        int int67 = classReader12.readByte(11);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "hi!" };
        classWriter70.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray78);
        byte[] byteArray80 = classWriter70.toByteArray();
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray80, 0, 0);
        java.lang.String str84 = classReader83.getSuperName();
        int int86 = classReader83.readInt(0);
        char[] charArray91 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj92 = classReader83.readConst(7, charArray91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj93 = classReader12.readConst(554106887, charArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 554106887");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 190 + "'", int65 == 190);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.io.IOException: hi!" + "'", str84, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-889275714) + "'", int86 == (-889275714));
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray91), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray91), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray91), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj92 + "' != '" + "java.io.IOException: hi!" + "'", obj92, "java.io.IOException: hi!");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        byte[] byteArray16 = classReader14.b;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = classReader14.readByte((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = annotationVisitor31.visitArray("java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor31.visitAnnotation("L1635572015", "java.io.IOException");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        java.lang.Object obj38 = label37.info;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        methodVisitor67.visitInsn(100);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        label73.info = (-1);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        methodVisitor67.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label73, label76, 8);
        label76.info = 11;
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "java.io.IOException: ", label37, label76, 0);
        methodVisitor28.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor28.visitAnnotation("L1502377119", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor28.visitAnnotation("L1892470476", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = annotationVisitor89.visitAnnotation("L1124808138", "L630721910");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        java.lang.String str63 = classReader12.getSuperName();
        java.lang.String str64 = classReader12.getSuperName();
        java.lang.String str65 = classReader12.getClassName();
        int int67 = classReader12.readInt(0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.io.IOException: hi!" + "'", str63, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.io.IOException: hi!" + "'", str64, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java.io.IOException" + "'", str65, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-889275714) + "'", int67 == (-889275714));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        int int15 = classReader12.readInt(92);
        short short17 = classReader12.readShort(7);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader12.getItem(15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 15");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 655362 + "'", int15 == 655362);
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 25600 + "'", short17 == (short) 25600);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        annotationVisitor31.visitEnum("L478252604", "L2108752154", "java.io.IOException: L1518273899");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int83 = label69.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor15.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = annotationVisitor17.visitAnnotation("L779321862", "L1524619426");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        java.lang.Object obj38 = label37.info;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        methodVisitor67.visitInsn(100);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        label73.info = (-1);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        methodVisitor67.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label73, label76, 8);
        label76.info = 11;
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "java.io.IOException: ", label37, label76, 0);
        methodVisitor28.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor28.visitAnnotation("L1502377119", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor28.visitAnnotation("L1892470476", false);
        annotationVisitor89.visitEnum("L1892470476", "java.io.IOException: L1518273899", "L2057645265");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        int int12 = classWriter1.newUTF8("java.io.IOException: hi!");
        int int14 = classWriter1.newUTF8("");
        classWriter1.visitSource("L2066229866", "java.io.IOException: java.io.IOException: ");
        classWriter1.visitEnd();
        java.io.IOException iOException24 = new java.io.IOException("java.io.IOException: ");
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.io.IOException iOException29 = new java.io.IOException();
        java.io.IOException iOException30 = new java.io.IOException("hi!", (java.lang.Throwable) iOException29);
        java.io.IOException iOException31 = new java.io.IOException("", (java.lang.Throwable) iOException29);
        java.io.IOException iOException32 = new java.io.IOException((java.lang.Throwable) iOException31);
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException31);
        java.io.IOException iOException35 = new java.io.IOException();
        java.io.IOException iOException36 = new java.io.IOException("hi!", (java.lang.Throwable) iOException35);
        iOException31.addSuppressed((java.lang.Throwable) iOException35);
        java.io.IOException iOException38 = new java.io.IOException("L1335427656", (java.lang.Throwable) iOException31);
        iOException25.addSuppressed((java.lang.Throwable) iOException38);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter1.visitField((int) (short) 3, "", "L1143363687", "java.io.IOException: java.io.IOException: hi!", (java.lang.Object) iOException38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: L1335427656");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String str17 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader12.readUnsignedShort(256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException: hi!" + "'", str17, "java.io.IOException: hi!");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getSuperName();
        int int18 = classReader12.getItem((int) (byte) 1);
        int int19 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter21.newField("hi!", "hi!", "hi!");
        int int27 = classWriter21.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter21, 100);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int38 = classWriter35.newNameType("", "java.io.IOException");
        int int43 = classWriter35.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int45 = classWriter35.newUTF8("hi!");
        classWriter35.visitEnd();
        classWriter35.visitEnd();
        java.lang.String[] strArray53 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor54 = classWriter35.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray53);
        methodVisitor54.visitInsn(8);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor57 = classWriter21.visitField(611177, "L1502517182", "L843063467", "L1221820656", (java.lang.Object) methodVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@562f0e05");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 92 + "'", int19 == 92);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor54);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter36.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter36.visitAnnotation("hi!", false);
        classWriter36.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        classWriter53.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter36.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray61);
        methodVisitor63.visitInsn((int) (byte) 10);
        methodVisitor63.visitLdcInsn((java.lang.Object) 12);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor68 = classWriter15.visitField(22, "L781877917", "L1958580017", "hi!", (java.lang.Object) methodVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@495c77f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor63);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(3, (int) (byte) 0);
        methodVisitor28.visitMaxs((int) (short) 256, (int) ' ');
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int17 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) -13570);
        int int23 = classWriter19.newField("L2054713387", "L853084801", "L811708376");
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int28 = classWriter25.newNameType("", "java.io.IOException");
        int int33 = classWriter25.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int35 = classWriter25.newUTF8("hi!");
        classWriter25.visitEnd();
        classWriter25.visitEnd();
        java.lang.String[] strArray43 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter25.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray43);
        methodVisitor44.visitEnd();
        methodVisitor44.visitIntInsn((int) '4', 13);
        methodVisitor44.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = classWriter19.newConst((java.lang.Object) methodVisitor44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@5f1b2e85");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 92 + "'", int17 == 92);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodVisitor44);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        methodVisitor28.visitVarInsn(11, (int) (byte) 1);
        methodVisitor28.visitCode();
        methodVisitor28.visitMultiANewArrayInsn("L1057702698", 29);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        int int3 = classWriter1.newUTF8("L1635572015");
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter9.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter9.visitAnnotation("hi!", false);
        classWriter9.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter9.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray34);
        methodVisitor36.visitInsn(100);
        methodVisitor36.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label43 = new org.mockito.asm.Label();
        java.lang.Object obj44 = label43.info;
        methodVisitor36.visitJumpInsn(3, label43);
        methodVisitor36.visitCode();
        methodVisitor36.visitTypeInsn(48640, "L781877917");
        methodVisitor36.visitEnd();
        methodVisitor36.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter1.visitField(0, "L781877917", "L3070851", "L773229801", (java.lang.Object) methodVisitor36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@4bf8fd53");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodVisitor36);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putInt((int) (short) 0);
        org.mockito.asm.ByteVector byteVector10 = byteVector6.putByte(167837715);
        org.mockito.asm.ByteVector byteVector12 = byteVector6.putByte(256);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int17 = classWriter14.newNameType("", "java.io.IOException");
        int int22 = classWriter14.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int24 = classWriter14.newUTF8("hi!");
        classWriter14.visitEnd();
        classWriter14.visitSource("", "hi!");
        byte[] byteArray29 = classWriter14.toByteArray();
        classWriter14.visitSource("", "L478252604");
        byte[] byteArray33 = classWriter14.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector36 = byteVector12.putByteArray(byteArray33, 196864, 48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertNotNull(byteVector12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int17 = classReader12.getAccess();
        java.lang.String str18 = classReader12.getSuperName();
        java.lang.String str19 = classReader12.getSuperName();
        long long21 = classReader12.readLong(11);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5464991387954793L + "'", long21 == 5464991387954793L);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMultiANewArrayInsn("hi!", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter35.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray43);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter35.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        methodVisitor28.visitLdcInsn((java.lang.Object) (byte) 1);
        methodVisitor28.visitFieldInsn(13, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = methodVisitor28.visitAnnotation("L1808373495", true);
        methodVisitor28.visitIincInsn((int) (short) -1, 16782186);
        methodVisitor28.visitMethodInsn((int) (byte) 0, "L991437862", "L1026804000", "L811708376");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor71 = methodVisitor28.visitParameterAnnotation(2, "L843063467", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor59);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(classReader12, (int) '#');
        int int22 = classWriter18.newField("L630721910", "java.io.IOException: ", "L1145278557");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter29.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter29.visitAnnotation("hi!", false);
        classWriter29.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter29.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        byte[] byteArray60 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        java.lang.String[] strArray62 = classReader61.getInterfaces();
        classWriter29.visit((int) (short) 4970, 5, "", "hi!", "", strArray62);
        classWriter18.visit(51966, 1229931896, "L1524619426", "L269304557", "L43475377", strArray62);
        int int66 = classWriter18.newUTF8("L2066229866");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 21 + "'", int66 == 21);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        byte[] byteArray28 = classWriter15.toByteArray();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter34.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter34.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter34.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter15.visitField(4, "L852881485", "L852881485", "java.io.IOException: ", (java.lang.Object) false);
        classWriter15.visitInnerClass("L1526910237", "L1131836979", "L71767159", 10);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, 10);
        classWriter15.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter15.visitAnnotation("L1131836979", false);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int62 = classWriter58.newField("hi!", "hi!", "hi!");
        classWriter58.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter58.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter58.visitAnnotation("java.io.IOException", true);
        annotationVisitor72.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor55.visit("L1143363687", (java.lang.Object) annotationVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@8c4079f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 10, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(fieldVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int9 = classWriter1.newField("", "L478252604", "java.io.IOException");
        classWriter1.visitInnerClass("L2066229866", "L643431443", "java.io.IOException: ", (int) 'a');
        classWriter1.visitInnerClass("L598330668", "L1704178553", "L478252604", 0);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter26.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter26.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter26.visitAnnotation("hi!", false);
        int int37 = classWriter26.newUTF8("hi!");
        classWriter26.visitEnd();
        byte[] byteArray39 = classWriter26.toByteArray();
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter45.visitEnd();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        classWriter53.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray61);
        classWriter45.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor64 = classWriter26.visitMethod(554106887, "L1502377119", "L991437862", "L1808373495", strArray61);
        classWriter1.visit(18, 7, "", "java.io.IOException: ", "L217748539", strArray61);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 2, 0, 1, 0, 4, 0, 0, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 0, 5, 0, 0, 0, 10, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor64);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        java.lang.String str18 = classReader12.getSuperName();
        int int19 = classReader12.getAccess();
        int int20 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            short short22 = classReader12.readShort((-1161953280));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1161953280");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 92 + "'", int20 == 92);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitCode();
        methodVisitor28.visitIntInsn((int) (short) 10, 0);
        methodVisitor28.visitMethodInsn(0, "L1502377119", "L478252604", "L717126513");
        methodVisitor28.visitEnd();
        methodVisitor28.visitEnd();
        methodVisitor28.visitIincInsn(119, 16782186);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitInsn((int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = methodVisitor28.visitAnnotation("L630721910", true);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        classWriter16.visitEnd();
        classWriter16.visitSource("L43475377", "L984287299");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 2, 100);
        org.mockito.asm.ByteVector byteVector29 = byteVector6.putUTF8("L478252604");
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int34 = classWriter31.newNameType("", "java.io.IOException");
        int int39 = classWriter31.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int41 = classWriter31.newUTF8("hi!");
        classWriter31.visitEnd();
        classWriter31.visitSource("", "hi!");
        byte[] byteArray46 = classWriter31.toByteArray();
        classWriter31.visitSource("", "L478252604");
        byte[] byteArray50 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ByteVector byteVector54 = byteVector29.putByteArray(byteArray50, (int) (short) 100, (int) (byte) 0);
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray50, 0, 256);
        int int58 = classReader57.header;
        java.lang.Class<?> wildcardClass59 = classReader57.getClass();
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
        org.junit.Assert.assertNotNull(byteVector54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 122 + "'", int58 == 122);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader12, 81);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = classReader18.readLong((int) (short) -326);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putUTF8("");
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putShort(81);
        org.mockito.asm.ByteVector byteVector6 = byteVector0.putByte((int) '#');
        org.mockito.asm.ByteVector byteVector8 = byteVector0.putShort((int) (short) 1);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter10.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter10.visitAnnotation("hi!", false);
        int int19 = classWriter10.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        int int23 = classWriter10.newField("L1335427656", "java.io.IOException: ", "");
        byte[] byteArray24 = classWriter10.toByteArray();
        org.mockito.asm.ByteVector byteVector27 = byteVector0.putByteArray(byteArray24, 25, 2);
        org.mockito.asm.ByteVector byteVector29 = byteVector0.putInt(6);
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 3, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 12, 0, 1, 0, 3, 1, 0, 11, 76, 49, 51, 51, 53, 52, 50, 55, 54, 53, 54, 7, 0, 5, 1, 0, 0, 12, 0, 3, 0, 7, 9, 0, 6, 0, 8, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 2, 0, 1, 0, 11, 0, 0, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 0, 12, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        byte[] byteArray16 = classWriter1.toByteArray();
        classWriter1.visitSource("", "L478252604");
        byte[] byteArray20 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray20, 106, 117);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 162");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotation("java.io.IOException: java.io.IOException: ", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = annotationVisitor31.visitAnnotation("L616447458", "L71767159");
        org.mockito.asm.ByteVector byteVector36 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector38 = byteVector36.putUTF8("");
        org.mockito.asm.ByteVector byteVector40 = byteVector38.putByte((int) (short) 100);
        org.mockito.asm.ByteVector byteVector42 = byteVector38.putUTF8("java.io.IOException");
        org.mockito.asm.ByteVector byteVector44 = byteVector42.putUTF8("L1335427656");
        org.mockito.asm.ByteVector byteVector46 = byteVector44.putByte((int) (short) 1);
        org.mockito.asm.ByteVector byteVector48 = byteVector46.putShort(0);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor31.visit("L691331867", (java.lang.Object) byteVector46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@551c8a47");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(byteVector38);
        org.junit.Assert.assertNotNull(byteVector40);
        org.junit.Assert.assertNotNull(byteVector42);
        org.junit.Assert.assertNotNull(byteVector44);
        org.junit.Assert.assertNotNull(byteVector46);
        org.junit.Assert.assertNotNull(byteVector48);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor13.visitAnnotation("L478252604", true);
        annotationVisitor16.visitEnd();
        annotationVisitor16.visitEnum("L1131836979", "L1770206027", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor16.visitAnnotation("L1231535858", "L1808373495");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = annotationVisitor16.visitAnnotation("L1518273899", "L1612257353");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((int) ' ', "L1526910237", "L1526910237", "L1635572015", (java.lang.Object) 5464991387954793L);
        classWriter1.visitOuterClass("java.io.IOException: java.io.IOException: ", "L367481933", "L3070851");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("java.io.IOException: hi!", "java.io.IOException: java.io.IOException", "L1452494871");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(fieldVisitor16);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader12, 0);
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter32.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitFieldInsn(3, "L781877917", "L1432403946", "");
        methodVisitor28.visitInsn((-1));
        org.mockito.asm.Label label44 = new org.mockito.asm.Label();
        label44.info = (-1);
        methodVisitor28.visitLabel(label44);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int53 = classWriter49.newField("hi!", "hi!", "hi!");
        classWriter49.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter49.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = fieldVisitor60.visitAnnotation("java.io.IOException: ", true);
        annotationVisitor63.visitEnum("L1432403946", "L1432403946", "");
        label44.info = "L1432403946";
        java.lang.String str69 = label44.toString();
        java.lang.Object obj70 = label44.info;
        java.lang.String str71 = label44.toString();
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "hi!" };
        classWriter73.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray81);
        byte[] byteArray83 = classWriter73.toByteArray();
        org.mockito.asm.ClassReader classReader84 = new org.mockito.asm.ClassReader(byteArray83);
        int int86 = classReader84.readByte((int) (byte) 1);
        int int88 = classReader84.readByte(11);
        byte[] byteArray89 = classReader84.b;
        org.mockito.asm.ClassReader classReader92 = new org.mockito.asm.ClassReader(byteArray89, 100, 1);
        label44.info = 1;
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "L1979913231" + "'", str69, "L1979913231");
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + "L1432403946" + "'", obj70, "L1432403946");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "L1979913231" + "'", str71, "L1979913231");
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 254 + "'", int86 == 254);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter17.newNameType("", "java.io.IOException");
        int int25 = classWriter17.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int27 = classWriter17.newConst((java.lang.Object) 10L);
        classWriter17.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter17.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter17, 51966);
        long long39 = classReader12.readLong(81);
        short short41 = classReader12.readShort((int) 'a');
        long long43 = classReader12.readLong((int) '#');
        int int45 = classReader12.readUnsignedShort((int) (short) 3);
        char[] charArray48 = new char[] { '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = classReader12.readConst(1635148078, charArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1635148078");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2624986962354548L + "'", long39 == 2624986962354548L);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 1024 + "'", short41 == (short) 1024);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 72084439218676014L + "'", long43 == 72084439218676014L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 48640 + "'", int45 == 48640);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#]");
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putInt(0);
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putLong((long) (byte) -1);
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putLong((long) (short) 100);
        org.mockito.asm.ByteVector byteVector8 = byteVector4.putUTF8("java.io.IOException: java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector10 = byteVector8.putUTF8("");
        org.mockito.asm.ByteVector byteVector12 = byteVector10.putShort((-1107296256));
        org.mockito.asm.ByteVector byteVector14 = byteVector12.putUTF8("L1524619426");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        classWriter22.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray30);
        byte[] byteArray32 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray32, 0, 0);
        java.lang.String str36 = classReader35.getSuperName();
        int int38 = classReader35.readInt(0);
        int int40 = classReader35.readByte(2);
        java.lang.String[] strArray41 = classReader35.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter16.visitMethod((int) (byte) 10, "L1526910237", "java.io.IOException: java.io.IOException: hi!", "L1603039582", strArray41);
        byte[] byteArray43 = classWriter16.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector46 = byteVector12.putByteArray(byteArray43, 24, 65210);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertNotNull(byteVector12);
        org.junit.Assert.assertNotNull(byteVector14);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.io.IOException: hi!" + "'", str36, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-889275714) + "'", int38 == (-889275714));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 186 + "'", int40 == 186);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 11, 76, 49, 53, 50, 54, 57, 49, 48, 50, 51, 55, 1, 0, 45, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 3, 104, 105, 33, 7, 0, 5, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 49, 54, 48, 51, 48, 51, 57, 53, 56, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 1, 0, 2, 0, 2, 0, 7, 0, 0, 0, 6, 0, 2, 0, 4, 0, 6, 0, 8, 0, 0, 0, 2, 0, 9, 0, 0]");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String str17 = classReader12.getClassName();
        byte[] byteArray18 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray18, 1024, 92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1032");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int21 = classWriter18.newNameType("", "java.io.IOException");
        int int26 = classWriter18.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter18.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter18.visitAnnotation("hi!", true);
        classWriter18.visitEnd();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        classWriter33.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter33.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter33.visitAnnotation("java.io.IOException", true);
        int int48 = classWriter18.newConst((java.lang.Object) true);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter55.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter55.visitAnnotation("hi!", false);
        classWriter55.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter55.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        classWriter76.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray84);
        byte[] byteArray86 = classWriter76.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        java.lang.String[] strArray88 = classReader87.getInterfaces();
        classWriter55.visit((int) (short) 4970, 5, "", "hi!", "", strArray88);
        classWriter18.visit((int) '#', (int) (byte) 1, "L852881485", "L1335427656", "L1131836979", strArray88);
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter1.visitMethod((int) (short) 0, "L630721910", "L71767159", "", strArray88);
        methodVisitor91.visitCode();
        methodVisitor91.visitMethodInsn(202, "java.io.IOException: hi!", "L991437862", "L984287299");
        methodVisitor91.visitCode();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor91);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = methodVisitor28.visitAnnotation("L1432403946", true);
        methodVisitor28.visitInsn((int) (short) -326);
        methodVisitor28.visitInsn(119);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        int int15 = classWriter1.newMethod("L1502377119", "java.io.IOException", "L852881485", false);
        classWriter1.visitSource("L984287299", "L1947403627");
        org.mockito.asm.ByteVector byteVector23 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector25 = byteVector23.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector27 = byteVector23.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector29 = byteVector27.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector31 = byteVector27.putByte(0);
        org.mockito.asm.ByteVector byteVector33 = byteVector31.putUTF8("L1335427656");
        org.mockito.asm.ByteVector byteVector35 = byteVector31.putLong((long) (short) -326);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField((int) (short) 0, "L478252604", "java.io.IOException: java.io.IOException: hi!", "java/io/IOException", (java.lang.Object) (short) -326);
        classWriter1.visitInnerClass("L853084801", "L811708376", "", 254);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int50 = classWriter47.newNameType("", "java.io.IOException");
        int int55 = classWriter47.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int57 = classWriter47.newUTF8("hi!");
        classWriter47.visitEnd();
        classWriter47.visitEnd();
        java.lang.String[] strArray65 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter47.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray65);
        methodVisitor66.visitEnd();
        methodVisitor66.visitIntInsn((int) '4', 13);
        methodVisitor66.visitCode();
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter75.visitEnd();
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray91 = new java.lang.String[] { "", "hi!" };
        classWriter83.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray91);
        classWriter75.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray91);
        java.lang.Object[] objArray95 = null;
        methodVisitor66.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray91, 9, objArray95);
        org.mockito.asm.MethodVisitor methodVisitor97 = classWriter1.visitMethod(33, "L1367834389", "L3070851", "L927534614", strArray91);
        methodVisitor97.visitInsn((int) (short) 10);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 13 + "'", int15 == 13);
        org.junit.Assert.assertNotNull(byteVector25);
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
        org.junit.Assert.assertNotNull(byteVector31);
        org.junit.Assert.assertNotNull(byteVector33);
        org.junit.Assert.assertNotNull(byteVector35);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(methodVisitor97);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int9 = classWriter1.newField("", "L478252604", "java.io.IOException");
        classWriter1.visitSource("", "L781877917");
        classWriter1.visitInnerClass("L1035695636", "", "L1131836979", 0);
        classWriter1.visitOuterClass("L616447458", "L1603039582", "L1432403946");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("L2066229866", false);
        annotationVisitor24.visit("L220707133", (java.lang.Object) 13);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter1.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("L853492882", false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        short short15 = classReader12.readShort(12);
        java.lang.String[] strArray16 = classReader12.getInterfaces();
        short short18 = classReader12.readShort(0);
        int int19 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        classWriter22.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray30);
        byte[] byteArray32 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray32, 0, 0);
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray32);
        int int37 = classReader36.header;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        byte[] byteArray50 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray50, 0, 0);
        java.lang.String str54 = classReader53.getSuperName();
        int int56 = classReader53.readInt(0);
        char[] charArray61 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj62 = classReader53.readConst(7, charArray61);
        java.lang.String str63 = classReader36.readClass(100, charArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj64 = classReader12.readConst((int) ' ', charArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 4970 + "'", short15 == (short) 4970);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) -13570 + "'", short18 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 92 + "'", int19 == 92);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 92 + "'", int37 == 92);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.io.IOException: hi!" + "'", str54, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-889275714) + "'", int56 == (-889275714));
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + "java.io.IOException: hi!" + "'", obj62, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitFieldInsn((int) (byte) 1, "", "hi!", "hi!");
        methodVisitor28.visitFieldInsn(1, "L1432403946", "hi!", "java.io.IOException: ");
        methodVisitor28.visitIntInsn(25600, (int) '#');
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter41.newNameType("", "java.io.IOException");
        label37.info = classWriter41;
        java.lang.Object obj50 = null;
        org.mockito.asm.FieldVisitor fieldVisitor51 = classWriter41.visitField((int) (byte) 1, "L1145278557", "L1502377119", "L616447458", obj50);
        int int53 = classWriter41.newUTF8("java.io.IOException: ");
        classWriter41.visitSource("L1704178553", "L781877917");
        classWriter41.visitSource("java.io.IOException: hi!", "L1502517182");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(fieldVisitor51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter41.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter41.visitAnnotation("hi!", false);
        classWriter41.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        classWriter58.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter41.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray66);
        methodVisitor68.visitInsn(100);
        methodVisitor68.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        java.lang.Object obj76 = label75.info;
        methodVisitor68.visitJumpInsn(3, label75);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter79.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter79.visitAnnotation("hi!", false);
        classWriter79.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label75.info = "java.io.IOException: hi!";
        int[] intArray92 = new int[] {};
        org.mockito.asm.Label[] labelArray93 = new org.mockito.asm.Label[] {};
        methodVisitor28.visitLookupSwitchInsn(label75, intArray92, labelArray93);
        java.lang.Object obj95 = label75.info;
        java.lang.String str96 = label75.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int97 = label75.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(labelArray93);
        org.junit.Assert.assertEquals("'" + obj95 + "' != '" + "java.io.IOException: hi!" + "'", obj95, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "L2092756402" + "'", str96, "L2092756402");
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getClassName();
        short short18 = classReader12.readShort((int) 'a');
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        classWriter20.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray28);
        byte[] byteArray30 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        java.lang.String[] strArray32 = classReader31.getInterfaces();
        int int33 = classReader31.header;
        java.lang.String str34 = classReader31.getClassName();
        long long36 = classReader31.readLong(16);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader31, 117);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter38, 26);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader12.getItem(325738870);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 325738870");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException" + "'", str16, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) 1024 + "'", short18 == (short) 1024);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 92 + "'", int33 == 92);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.io.IOException" + "'", str34, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 7002650396846542661L + "'", long36 == 7002650396846542661L);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        int int40 = classReader37.header;
        java.lang.String str41 = classReader37.getSuperName();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter1.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray42);
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField(0, "L643431443", "L616447458", "java.io.IOException: ", (java.lang.Object) (short) 1792);
        int int51 = classWriter1.newUTF8("L598330668");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 92 + "'", int40 == 92);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.io.IOException: hi!" + "'", str41, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNotNull(fieldVisitor49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 11 + "'", int51 == 11);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        long long17 = classReader12.readLong((int) (byte) 0);
        long long19 = classReader12.readLong((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader12.getItem(51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3819410108757049244L) + "'", long17 == (-3819410108757049244L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 504404262073690721L + "'", long19 == 504404262073690721L);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMultiANewArrayInsn("hi!", (int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter35.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray43);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter35.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        methodVisitor28.visitLdcInsn((java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute52 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(fieldVisitor50);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 100, 1);
        byte[] byteArray21 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        classWriter24.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray32);
        byte[] byteArray34 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray34, 0, 0);
        java.lang.String str38 = classReader37.getSuperName();
        int int40 = classReader37.readInt(0);
        char[] charArray45 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj46 = classReader37.readConst(7, charArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = classReader20.readUTF8(14, charArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.io.IOException: hi!" + "'", str38, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-889275714) + "'", int40 == (-889275714));
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + "java.io.IOException: hi!" + "'", obj46, "java.io.IOException: hi!");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String[] strArray17 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        classWriter20.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray28);
        byte[] byteArray30 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray30, 0, 0);
        java.lang.String str34 = classReader33.getSuperName();
        int int36 = classReader33.readInt(0);
        char[] charArray41 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj42 = classReader33.readConst(7, charArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = classReader12.readClass(8, charArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.io.IOException: hi!" + "'", str34, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-889275714) + "'", int36 == (-889275714));
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + "java.io.IOException: hi!" + "'", obj42, "java.io.IOException: hi!");
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int11 = classWriter7.newField("hi!", "hi!", "hi!");
        classWriter7.visitEnd();
        classWriter7.visitSource("java.io.IOException", "");
        classWriter7.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray19 = classWriter7.toByteArray();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int28 = classWriter25.newNameType("", "java.io.IOException");
        int int33 = classWriter25.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int35 = classWriter25.newUTF8("hi!");
        classWriter25.visitEnd();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int45 = classWriter42.newNameType("", "java.io.IOException");
        int int50 = classWriter42.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int52 = classWriter42.newUTF8("hi!");
        classWriter42.visitEnd();
        classWriter42.visitEnd();
        java.lang.String[] strArray60 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter42.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray60);
        methodVisitor61.visitEnd();
        methodVisitor61.visitIntInsn((int) '4', 13);
        methodVisitor61.visitCode();
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter70.visitEnd();
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray86 = new java.lang.String[] { "", "hi!" };
        classWriter78.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray86);
        classWriter70.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray86);
        java.lang.Object[] objArray90 = null;
        methodVisitor61.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray86, 9, objArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter25.visitMethod(186, "L1035695636", "L1145278557", "L1131836979", strArray86);
        org.mockito.asm.MethodVisitor methodVisitor93 = classWriter7.visitMethod(167837715, "java.io.IOException: hi!", "java.io.IOException", "L1635572015", strArray86);
        org.mockito.asm.FieldVisitor fieldVisitor94 = classWriter1.visitField((int) '#', "L1808373495", "L630721910", "L1808373495", (java.lang.Object) "L1635572015");
        org.mockito.asm.Attribute attribute95 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor93);
        org.junit.Assert.assertNotNull(fieldVisitor94);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor15.visitArray("java.io.IOException: hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor15.visitArray("L1808373495");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int26 = classWriter22.newField("hi!", "hi!", "hi!");
        int int28 = classWriter22.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter22.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        fieldVisitor34.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = fieldVisitor34.visitAnnotation("L616447458", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = annotationVisitor38.visitAnnotation("L71767159", "java.io.IOException: java.io.IOException: ");
        annotationVisitor19.visit("L852881485", (java.lang.Object) "java.io.IOException: java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter1.visitMethod(1, "L1432403946", "L1635572015", "L1432403946", strArray39);
        methodVisitor42.visitIincInsn((int) '4', (-21316096));
        java.lang.Class<?> wildcardClass46 = methodVisitor42.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(methodVisitor42);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector(254);
        org.mockito.asm.ByteVector byteVector3 = byteVector1.putByte(202);
        org.mockito.asm.ClassWriter classWriter5 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" };
        classWriter5.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray13);
        byte[] byteArray15 = classWriter5.toByteArray();
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        int int18 = classReader16.readByte((int) (byte) 1);
        int int19 = classReader16.header;
        java.lang.String str20 = classReader16.getSuperName();
        byte[] byteArray21 = classReader16.b;
        org.mockito.asm.ByteVector byteVector24 = byteVector1.putByteArray(byteArray21, 13, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray21, 16782186, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16782194");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector3);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 254 + "'", int18 == 254);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 92 + "'", int19 == 92);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.io.IOException: hi!" + "'", str20, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector24);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter23.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray48);
        methodVisitor50.visitInsn(100);
        methodVisitor50.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label57 = new org.mockito.asm.Label();
        java.lang.Object obj58 = label57.info;
        methodVisitor50.visitJumpInsn(3, label57);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter61.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter61.visitAnnotation("hi!", false);
        classWriter61.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label57.info = "java.io.IOException: hi!";
        java.lang.String str74 = label57.toString();
        java.lang.Object obj75 = label57.info;
        methodVisitor20.visitLineNumber(0, label57);
        methodVisitor20.visitMethodInsn((-1), "java.io.IOException: hi!", "L1432403946", "hi!");
        methodVisitor20.visitInsn(122);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L934461512" + "'", str74, "L934461512");
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "java.io.IOException: hi!" + "'", obj75, "java.io.IOException: hi!");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("java.io.IOException", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("java.io.IOException: ", "L1635572015");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor7.visitAnnotation("java.io.IOException: java.io.IOException", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = annotationVisitor7.visitArray("L1958580017");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        java.lang.String str14 = classReader12.getClassName();
        long long16 = classReader12.readLong(12);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = classReader12.getItem(58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 58");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException" + "'", str14, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1399037795316427119L + "'", long16 == 1399037795316427119L);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter17.newNameType("", "java.io.IOException");
        int int25 = classWriter17.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int27 = classWriter17.newConst((java.lang.Object) 10L);
        classWriter17.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter17.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter17, 51966);
        classWriter17.visitSource("L691331867", "L1335427656");
        classWriter17.visitInnerClass("L886841972", "L1947403627", "L811708376", 117);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter17.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitEnd();
        methodVisitor28.visitIntInsn((-889275714), 111);
        methodVisitor28.visitTypeInsn((int) (byte) -1, "L1057702698");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitMethodInsn(1, "L1335427656", "L1131836979", "L1432403946");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor28.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter42.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter42.visitAnnotation("hi!", false);
        classWriter42.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        classWriter59.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter42.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray67);
        methodVisitor69.visitInsn(100);
        methodVisitor69.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        java.lang.Object obj77 = label76.info;
        methodVisitor69.visitJumpInsn(3, label76);
        methodVisitor28.visitJumpInsn(1, label76);
        java.lang.Object obj80 = label76.info;
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter82.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = classWriter82.visitAnnotation("hi!", false);
        int int91 = classWriter82.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        int int95 = classWriter82.newField("L1335427656", "java.io.IOException: ", "");
        classWriter82.visitEnd();
        label76.info = classWriter82;
        classWriter82.visitEnd();
        classWriter82.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 9 + "'", int95 == 9);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.getAccess();
        byte[] byteArray16 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = classReader12.readInt((int) (short) 11881);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        byte[] byteArray10 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter16.newNameType("", "java.io.IOException");
        int int24 = classWriter16.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int26 = classWriter16.newUTF8("hi!");
        classWriter16.visitEnd();
        classWriter16.visitEnd();
        java.lang.String[] strArray34 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor35 = classWriter16.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray34);
        org.mockito.asm.MethodVisitor methodVisitor36 = classWriter1.visitMethod(31, "L181135275", "L1770206027", "L460788007", strArray34);
        org.mockito.asm.Attribute attribute37 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(methodVisitor35);
        org.junit.Assert.assertNotNull(methodVisitor36);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int65 = classReader12.readByte(3);
        java.lang.String str66 = classReader12.getSuperName();
        int int67 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader12, 20);
        classWriter69.visitSource("L2066229866", "L1124808138");
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray87 = new java.lang.String[] { "", "hi!" };
        classWriter79.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray87);
        byte[] byteArray89 = classWriter79.toByteArray();
        org.mockito.asm.ClassReader classReader90 = new org.mockito.asm.ClassReader(byteArray89);
        java.lang.String[] strArray91 = classReader90.getInterfaces();
        int int93 = classReader90.readByte(8);
        int int95 = classReader90.getItem((int) (byte) 1);
        org.mockito.asm.ClassWriter classWriter97 = new org.mockito.asm.ClassWriter(classReader90, 11);
        java.lang.String[] strArray98 = classReader90.getInterfaces();
        classWriter69.visit(9, 16782186, "L656401292", "L1704178553", "L1035695636", strArray98);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 190 + "'", int65 == 190);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.io.IOException: hi!" + "'", str66, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 92 + "'", int67 == 92);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 11 + "'", int95 == 11);
        org.junit.Assert.assertNotNull(strArray98);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        byte[] byteArray20 = classReader12.b;
        int int21 = classReader12.getAccess();
        char[] charArray27 = new char[] { ' ', 'a', '#', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = classReader12.readUTF8(122, charArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , a, #, 4]");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int19 = classReader12.header;
        byte[] byteArray20 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" };
        classWriter23.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray31);
        byte[] byteArray33 = classWriter23.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray33, 0, 0);
        java.lang.String str37 = classReader36.getSuperName();
        int int39 = classReader36.readInt(0);
        char[] charArray44 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj45 = classReader36.readConst(7, charArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = classReader12.readUTF8(18, charArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 92 + "'", int19 == 92);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.io.IOException: hi!" + "'", str37, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-889275714) + "'", int39 == (-889275714));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + "java.io.IOException: hi!" + "'", obj45, "java.io.IOException: hi!");
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        int int29 = classWriter21.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int31 = classWriter21.newUTF8("hi!");
        classWriter21.visitEnd();
        classWriter21.visitEnd();
        java.lang.String[] strArray39 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter21.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(0, "L630721910", "", "L71767159", strArray39);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor41.visitAnnotationDefault();
        methodVisitor41.visitMethodInsn((int) (short) 1792, "java.io.IOException: ", "L3070851", "L71767159");
        methodVisitor41.visitMultiANewArrayInsn("L1283926335", 1630431599);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        char[] charArray22 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj23 = classReader14.readConst(7, charArray22);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = classReader14.getItem(17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + "java.io.IOException: hi!" + "'", obj23, "java.io.IOException: hi!");
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitMethodInsn(10, "hi!", "hi!", "java.io.IOException");
        methodVisitor28.visitFieldInsn(0, "L781877917", "java.io.IOException: hi!", "L811708376");
        methodVisitor28.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter17.newNameType("", "java.io.IOException");
        int int25 = classWriter17.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int27 = classWriter17.newConst((java.lang.Object) 10L);
        classWriter17.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter17.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter17, 51966);
        long long39 = classReader12.readLong(81);
        short short41 = classReader12.readShort((int) 'a');
        java.lang.Class<?> wildcardClass42 = classReader12.getClass();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2624986962354548L + "'", long39 == 2624986962354548L);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 1024 + "'", short41 == (short) 1024);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("java.io.IOException: ", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor16.visitAnnotation("L1145278557", "");
        annotationVisitor19.visitEnum("L1035695636", "L1145278557", "L886841972");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int30 = classWriter26.newField("hi!", "hi!", "hi!");
        classWriter26.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor37 = classWriter26.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor37.visitAnnotation("java.io.IOException: ", true);
        fieldVisitor37.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = fieldVisitor37.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = fieldVisitor37.visitAnnotation("", false);
        org.mockito.asm.ByteVector byteVector49 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector51 = byteVector49.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector53 = byteVector49.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector55 = byteVector53.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector57 = byteVector55.putInt((int) (short) 0);
        annotationVisitor47.visit("L3070851", (java.lang.Object) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor19.visit("L1704178553", (java.lang.Object) annotationVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@2bfec3a0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(byteVector51);
        org.junit.Assert.assertNotNull(byteVector53);
        org.junit.Assert.assertNotNull(byteVector55);
        org.junit.Assert.assertNotNull(byteVector57);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int16 = classWriter13.newNameType("", "java.io.IOException");
        int int21 = classWriter13.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int23 = classWriter13.newConst((java.lang.Object) 10L);
        int int25 = classWriter13.newUTF8("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor26 = classWriter1.visitField(3, "", "L478252604", "java.io.IOException: ", (java.lang.Object) "hi!");
        int int28 = classWriter1.newClass("hi!");
        int int30 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitInsn((int) (byte) 0);
        methodVisitor28.visitMethodInsn((int) (byte) 10, "java.io.IOException", "java.io.IOException", "hi!");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter43.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter43.visitAnnotation("hi!", false);
        classWriter43.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!" };
        classWriter60.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray68);
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter43.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray68);
        methodVisitor70.visitInsn(100);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        label76.info = (-1);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        methodVisitor70.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label76, label79, 8);
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int86 = classWriter83.newNameType("", "java.io.IOException");
        label79.info = classWriter83;
        java.lang.String str88 = label79.toString();
        org.mockito.asm.Label[] labelArray89 = new org.mockito.asm.Label[] {};
        methodVisitor28.visitTableSwitchInsn((int) (short) 4970, (int) (short) -326, label79, labelArray89);
        methodVisitor28.visitVarInsn((int) (short) 0, 9);
        methodVisitor28.visitInsn((-1107296256));
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L1390356607" + "'", str88, "L1390356607");
        org.junit.Assert.assertNotNull(labelArray89);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        byte[] byteArray16 = classReader14.b;
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(classReader14, 25600);
        // The following exception was thrown during execution in test generation
        try {
            short short20 = classReader14.readShort(65210);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int27 = classWriter24.newNameType("", "java.io.IOException");
        int int32 = classWriter24.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(92, "java.io.IOException", "L717126513", "L598330668", (java.lang.Object) "java.io.IOException: hi!");
        java.lang.Class<?> wildcardClass34 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putShort((int) '#');
        org.mockito.asm.ByteVector byteVector6 = byteVector2.putShort((int) (short) -17730);
        org.mockito.asm.ByteVector byteVector7 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector9 = byteVector7.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector11 = byteVector7.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector13 = byteVector11.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte((int) (byte) 1);
        int int29 = classReader26.header;
        java.lang.String str30 = classReader26.getSuperName();
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ByteVector byteVector34 = byteVector13.putByteArray(byteArray31, 2, 100);
        org.mockito.asm.ByteVector byteVector37 = byteVector6.putByteArray(byteArray31, 2, 13);
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector9);
        org.junit.Assert.assertNotNull(byteVector11);
        org.junit.Assert.assertNotNull(byteVector13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 254 + "'", int28 == 254);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 92 + "'", int29 == 92);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.io.IOException: hi!" + "'", str30, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector34);
        org.junit.Assert.assertNotNull(byteVector37);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter41.newNameType("", "java.io.IOException");
        label37.info = classWriter41;
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter41.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor15.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = annotationVisitor15.visitAnnotation("L1947403627", "java.io.IOException: java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor20.visitAnnotation("L1710339694", "L613898026");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor20.visitAnnotation("L1452494871", "L1704178553");
        annotationVisitor26.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String str14 = classReader12.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader12.readUnsignedShort((-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException" + "'", str14, "java.io.IOException");
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.getAccess();
        int int16 = classReader12.getAccess();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter18.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter18.visitAnnotation("hi!", false);
        int int27 = classWriter18.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        byte[] byteArray39 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        java.lang.String[] strArray41 = classReader40.getInterfaces();
        int int43 = classReader40.readByte(8);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        classWriter45.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray53);
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter45.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute61 = null;
        org.mockito.asm.Attribute[] attributeArray62 = new org.mockito.asm.Attribute[] { attribute61 };
        classReader40.accept((org.mockito.asm.ClassVisitor) classWriter45, attributeArray62, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter18, attributeArray62, 3);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(classReader12, (-1107296256));
        classWriter68.visitSource("", "java.io.IOException: java.io.IOException: ");
        org.mockito.asm.Attribute attribute72 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter68.visitAttribute(attribute72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(attributeArray62);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter14.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter35.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray43);
        byte[] byteArray45 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        java.lang.String[] strArray47 = classReader46.getInterfaces();
        classWriter14.visit((int) (short) 4970, 5, "", "hi!", "", strArray47);
        classWriter7.visit(0, 5, "L616447458", "L616447458", "", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod(48640, "L1704178553", "L1603039582", "L1603039582", strArray47);
        methodVisitor50.visitIntInsn(92, (int) (short) -326);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter56.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter56.visitAnnotation("hi!", false);
        classWriter56.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "hi!" };
        classWriter73.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray81);
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter56.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray81);
        methodVisitor83.visitInsn(100);
        methodVisitor83.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label90 = new org.mockito.asm.Label();
        java.lang.Object obj91 = label90.info;
        methodVisitor83.visitJumpInsn(3, label90);
        org.mockito.asm.Label label93 = new org.mockito.asm.Label();
        label93.info = (-1);
        methodVisitor83.visitLabel(label93);
        methodVisitor50.visitLineNumber((int) '4', label93);
        int int98 = label93.getOffset();
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 6 + "'", int98 == 6);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        short short15 = classReader12.readShort(12);
        java.lang.String[] strArray16 = classReader12.getInterfaces();
        short short18 = classReader12.readShort(0);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        classWriter21.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray29);
        byte[] byteArray31 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray31, 0, 0);
        java.lang.String str35 = classReader34.getSuperName();
        int int37 = classReader34.readInt(0);
        char[] charArray42 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj43 = classReader34.readConst(7, charArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = classReader12.readConst(31, charArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 4970 + "'", short15 == (short) 4970);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + short18 + "' != '" + (short) -13570 + "'", short18 == (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.io.IOException: hi!" + "'", str35, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-889275714) + "'", int37 == (-889275714));
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + "java.io.IOException: hi!" + "'", obj43, "java.io.IOException: hi!");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        java.lang.String str17 = classReader12.getClassName();
        java.lang.String[] strArray18 = classReader12.getInterfaces();
        java.lang.String str19 = classReader12.getSuperName();
        java.lang.String str20 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" };
        classWriter23.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray31);
        byte[] byteArray33 = classWriter23.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray33, 0, 0);
        java.lang.String str37 = classReader36.getSuperName();
        int int39 = classReader36.readInt(0);
        char[] charArray44 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj45 = classReader36.readConst(7, charArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = classReader12.readClass(393224, charArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 393224");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.io.IOException: hi!" + "'", str20, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.io.IOException: hi!" + "'", str37, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-889275714) + "'", int39 == (-889275714));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + "java.io.IOException: hi!" + "'", obj45, "java.io.IOException: hi!");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        classWriter1.visitOuterClass("java.io.IOException: hi!", "java.io.IOException: ", "hi!");
        classWriter1.visitSource("java.io.IOException: hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("L853084801", true);
        annotationVisitor22.visitEnum("java.io.IOException: java.io.IOException: ", "L984287299", "L1958580017");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classWriter54.toByteArray();
        int int66 = classWriter54.newField("L1085647388", "L1635572015", "L1057702698");
        classWriter54.visitSource("L1761251411", "L1524619426");
        classWriter54.visitInnerClass("L2108752154", "L1367834389", "", (int) 'a');
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 7, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 5, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 4, 0, 6, 0, 2, 0, 7, 0, 9, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 2, 0, 2]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 16 + "'", int66 == 16);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.getAccess();
        int int16 = classReader12.readInt((int) (short) 0);
        long long18 = classReader12.readLong(24);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-889275714) + "'", int16 == (-889275714));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 8674888840909516654L + "'", long18 == 8674888840909516654L);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 2, 100);
        org.mockito.asm.ByteVector byteVector29 = byteVector6.putUTF8("L478252604");
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        byte[] byteArray41 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter44.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter44.visitAnnotation("hi!", false);
        classWriter44.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!" };
        classWriter61.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray69);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter44.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray69);
        methodVisitor71.visitInsn(100);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        label77.info = (-1);
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        methodVisitor71.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label77, label80, 8);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int87 = classWriter84.newNameType("", "java.io.IOException");
        label80.info = classWriter84;
        org.mockito.asm.Attribute[] attributeArray89 = new org.mockito.asm.Attribute[] {};
        classReader42.accept((org.mockito.asm.ClassVisitor) classWriter84, attributeArray89, 0);
        byte[] byteArray92 = classWriter84.toByteArray();
        org.mockito.asm.ClassReader classReader93 = new org.mockito.asm.ClassReader(byteArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector96 = byteVector29.putByteArray(byteArray92, 58, 186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNotNull(attributeArray89);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 7, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 5, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 4, 0, 6, 0, 2, 0, 7, 0, 9, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 2, 0, 2]");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter17.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray25);
        byte[] byteArray27 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray27, 0, 0);
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray27);
        int int32 = classReader31.header;
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter35.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray43);
        byte[] byteArray45 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray45, 0, 0);
        java.lang.String str49 = classReader48.getSuperName();
        int int51 = classReader48.readInt(0);
        char[] charArray56 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj57 = classReader48.readConst(7, charArray56);
        java.lang.String str58 = classReader31.readClass(100, charArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = classReader14.readConst(11, charArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 92 + "'", int32 == 92);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.io.IOException: hi!" + "'", str49, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-889275714) + "'", int51 == (-889275714));
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj57 + "' != '" + "java.io.IOException: hi!" + "'", obj57, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        java.lang.String str17 = classReader12.getClassName();
        java.lang.String[] strArray18 = classReader12.getInterfaces();
        java.lang.String str19 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader12.readInt((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.ByteVector byteVector20 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector22 = byteVector20.putUTF8("");
        org.mockito.asm.ByteVector byteVector24 = byteVector22.putByte((int) (short) 100);
        org.mockito.asm.ByteVector byteVector26 = byteVector22.putUTF8("java.io.IOException");
        org.mockito.asm.ByteVector byteVector28 = byteVector26.putUTF8("L1335427656");
        org.mockito.asm.FieldVisitor fieldVisitor29 = classWriter1.visitField(5, "", "L1145278557", "L616447458", (java.lang.Object) "L1335427656");
        fieldVisitor29.visitEnd();
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor29.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteVector22);
        org.junit.Assert.assertNotNull(byteVector24);
        org.junit.Assert.assertNotNull(byteVector26);
        org.junit.Assert.assertNotNull(byteVector28);
        org.junit.Assert.assertNotNull(fieldVisitor29);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        java.lang.String str17 = classReader12.getClassName();
        java.lang.String[] strArray18 = classReader12.getInterfaces();
        java.lang.String str19 = classReader12.getClassName();
        java.lang.String str20 = classReader12.getClassName();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException" + "'", str19, "java.io.IOException");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.io.IOException" + "'", str20, "java.io.IOException");
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 100, 1);
        long long22 = classReader20.readLong(92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = classReader20.getSuperName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2814758357303298L + "'", long22 == 2814758357303298L);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter12.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter12.visitAnnotation("hi!", false);
        classWriter12.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter12.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter1.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray37);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor40.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor40.visitAnnotationDefault();
        org.mockito.asm.Label label44 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor40.visitJumpInsn((int) (short) 100, label44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        byte[] byteArray31 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader12.getItem((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter12.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter12.visitAnnotation("hi!", false);
        classWriter12.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter12.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter1.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray37);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor40.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor40.visitAnnotationDefault();
        methodVisitor40.visitInsn((int) (short) -17730);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getSuperName();
        int int18 = classReader12.getItem((int) (byte) 1);
        int int19 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter21.newField("hi!", "hi!", "hi!");
        int int27 = classWriter21.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter21, 100);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        classWriter32.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray40);
        byte[] byteArray42 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray42, 0, 0);
        java.lang.String str46 = classReader45.getSuperName();
        int int48 = classReader45.readInt(0);
        char[] charArray53 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj54 = classReader45.readConst(7, charArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = classReader12.readUTF8(26, charArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 92 + "'", int19 == 92);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.io.IOException: hi!" + "'", str46, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-889275714) + "'", int48 == (-889275714));
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj54 + "' != '" + "java.io.IOException: hi!" + "'", obj54, "java.io.IOException: hi!");
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        int int20 = classWriter1.newField("L852881485", "L583575715", "L984287299");
        org.mockito.asm.Attribute attribute21 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray16 = classReader15.b;
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        classWriter20.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray28);
        byte[] byteArray30 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray30, 0, 0);
        java.lang.String str34 = classReader33.getSuperName();
        int int36 = classReader33.readInt(0);
        char[] charArray41 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj42 = classReader33.readConst(7, charArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = classReader17.readClass((int) (short) 1, charArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.io.IOException: hi!" + "'", str34, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-889275714) + "'", int36 == (-889275714));
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + "java.io.IOException: hi!" + "'", obj42, "java.io.IOException: hi!");
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        methodVisitor28.visitMethodInsn((-889275714), "hi!", "", "java.io.IOException");
        methodVisitor28.visitMultiANewArrayInsn("java.io.IOException: ", 2);
        methodVisitor28.visitMultiANewArrayInsn("L1603039582", 111);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitSource("L717126513", "L2057645265");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter15.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter15.visitAnnotation("hi!", false);
        classWriter15.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        classWriter32.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray40);
        org.mockito.asm.MethodVisitor methodVisitor42 = classWriter15.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray40);
        methodVisitor42.visitMethodInsn(10, "hi!", "hi!", "java.io.IOException");
        methodVisitor42.visitIincInsn((-1107296256), 202);
        methodVisitor42.visitMaxs(21, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int54 = classWriter1.newConst((java.lang.Object) methodVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@4d37673");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor42);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int65 = classReader12.readByte(3);
        java.lang.String str66 = classReader12.getSuperName();
        int int67 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader12, 20);
        classWriter69.visitSource("L2066229866", "L1124808138");
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int82 = classWriter78.newField("hi!", "hi!", "hi!");
        classWriter78.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor89 = classWriter78.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = fieldVisitor89.visitAnnotation("java.io.IOException: ", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor93 = classWriter69.visitField(117, "L71767159", "L690922560", "L779321862", (java.lang.Object) annotationVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@47699ec4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 190 + "'", int65 == 190);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.io.IOException: hi!" + "'", str66, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 92 + "'", int67 == 92);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitMethodInsn(10, "hi!", "hi!", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter36.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter36.visitAnnotation("hi!", false);
        classWriter36.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        classWriter53.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter36.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray61);
        methodVisitor63.visitInsn(100);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        label69.info = (-1);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        methodVisitor63.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label69, label72, 8);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int79 = classWriter76.newNameType("", "java.io.IOException");
        label72.info = classWriter76;
        java.lang.String str81 = label72.toString();
        methodVisitor28.visitJumpInsn((-1), label72);
        org.mockito.asm.ByteVector byteVector83 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector85 = byteVector83.putUTF8("");
        org.mockito.asm.ByteVector byteVector87 = byteVector85.putUTF8("hi!");
        org.mockito.asm.ByteVector byteVector89 = byteVector87.putInt(117);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLdcInsn((java.lang.Object) byteVector87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@716fbe2b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L1032379513" + "'", str81, "L1032379513");
        org.junit.Assert.assertNotNull(byteVector85);
        org.junit.Assert.assertNotNull(byteVector87);
        org.junit.Assert.assertNotNull(byteVector89);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        char[] charArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = classReader12.readConst(12, charArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitIincInsn(16, (int) (byte) 10);
        methodVisitor20.visitMethodInsn((int) (short) 4970, "L630721910", "L1335427656", "L1432403946");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter34.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter34.visitAnnotation("hi!", false);
        classWriter34.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!" };
        classWriter51.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter34.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray59);
        methodVisitor61.visitInsn(100);
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        label67.info = (-1);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor61.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label67, label70, 8);
        java.lang.Object obj73 = label67.info;
        methodVisitor20.visitLabel(label67);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor20.visitParameterAnnotation((int) (byte) -1, "java.io.IOException: java.io.IOException: hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + (-1) + "'", obj73, (-1));
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter23.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray48);
        methodVisitor50.visitInsn(100);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        label56.info = (-1);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        methodVisitor50.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label56, label59, 8);
        label59.info = 11;
        org.mockito.asm.ByteVector byteVector64 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector66 = byteVector64.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector68 = byteVector64.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector70 = byteVector68.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector72 = byteVector70.putInt((int) (short) 0);
        org.mockito.asm.ByteVector byteVector74 = byteVector70.putInt(92);
        label59.info = 92;
        methodVisitor20.visitJumpInsn(81, label59);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor20.visitAnnotation("L176482898", true);
        methodVisitor20.visitEnd();
        java.io.IOException iOException83 = new java.io.IOException();
        java.io.IOException iOException84 = new java.io.IOException("hi!", (java.lang.Throwable) iOException83);
        java.io.IOException iOException85 = new java.io.IOException("", (java.lang.Throwable) iOException83);
        java.io.IOException iOException86 = new java.io.IOException((java.lang.Throwable) iOException85);
        java.io.IOException iOException88 = new java.io.IOException();
        java.io.IOException iOException89 = new java.io.IOException("hi!", (java.lang.Throwable) iOException88);
        iOException86.addSuppressed((java.lang.Throwable) iOException89);
        java.io.IOException iOException93 = new java.io.IOException();
        java.io.IOException iOException94 = new java.io.IOException("hi!", (java.lang.Throwable) iOException93);
        java.io.IOException iOException95 = new java.io.IOException("", (java.lang.Throwable) iOException93);
        java.io.IOException iOException96 = new java.io.IOException((java.lang.Throwable) iOException93);
        iOException86.addSuppressed((java.lang.Throwable) iOException96);
        java.io.IOException iOException98 = new java.io.IOException((java.lang.Throwable) iOException86);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor20.visitLdcInsn((java.lang.Object) iOException98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: java.io.IOException: java.io.IOException: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(byteVector66);
        org.junit.Assert.assertNotNull(byteVector68);
        org.junit.Assert.assertNotNull(byteVector70);
        org.junit.Assert.assertNotNull(byteVector72);
        org.junit.Assert.assertNotNull(byteVector74);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitMethodInsn(1, "L1335427656", "L1131836979", "L1432403946");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor28.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter42.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter42.visitAnnotation("hi!", false);
        classWriter42.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        classWriter59.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter42.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray67);
        methodVisitor69.visitInsn(100);
        methodVisitor69.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        java.lang.Object obj77 = label76.info;
        methodVisitor69.visitJumpInsn(3, label76);
        methodVisitor28.visitJumpInsn(1, label76);
        java.lang.Object obj80 = label76.info;
        java.lang.String str81 = label76.toString();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L807172958" + "'", str81, "L807172958");
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = annotationVisitor31.visitArray("java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = annotationVisitor31.visitArray("L43475377");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("java.io.IOException: java.io.IOException: hi!", false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter1.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute21 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int68 = classWriter63.newMethod("L1135755945", "L1131836979", "", true);
        org.mockito.asm.Attribute attribute69 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter63.visitAttribute(attribute69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 14 + "'", int68 == 14);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte((int) (byte) 1);
        int int30 = classReader26.readByte(11);
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        int int39 = classWriter33.newClass("java.io.IOException");
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter33, 92);
        int int45 = classWriter33.newField("java.io.IOException: ", "hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        byte[] byteArray57 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        java.lang.String[] strArray59 = classReader58.getInterfaces();
        int int61 = classReader58.readByte(8);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" };
        classWriter63.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray71);
        org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter63.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute79 = null;
        org.mockito.asm.Attribute[] attributeArray80 = new org.mockito.asm.Attribute[] { attribute79 };
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter63, attributeArray80, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter33, attributeArray80, (int) (short) 0);
        int int85 = classReader12.getAccess();
        char[] charArray90 = new char[] { 'a', '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = classReader12.readConst(1229931896, charArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1229931896");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 254 + "'", int28 == 254);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 14 + "'", int45 == 14);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(fieldVisitor78);
        org.junit.Assert.assertNotNull(attributeArray80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "a4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "a4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[a, 4, #]");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        int int29 = classWriter21.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int31 = classWriter21.newUTF8("hi!");
        classWriter21.visitEnd();
        classWriter21.visitEnd();
        java.lang.String[] strArray39 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter21.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(0, "L630721910", "", "L71767159", strArray39);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter44.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter44.visitAnnotation("hi!", false);
        classWriter44.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!" };
        classWriter61.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray69);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter44.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray69);
        methodVisitor71.visitInsn(100);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        label77.info = (-1);
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        methodVisitor71.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label77, label80, 8);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int87 = classWriter84.newNameType("", "java.io.IOException");
        label80.info = classWriter84;
        methodVisitor41.visitLineNumber((int) (short) -326, label80);
        java.lang.String str90 = label80.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = label80.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "L1289201664" + "'", str90, "L1289201664");
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        fieldVisitor13.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = fieldVisitor13.visitAnnotation("L616447458", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor13.visitAnnotation("java.io.IOException", true);
        java.io.IOException iOException22 = new java.io.IOException();
        java.io.IOException iOException25 = new java.io.IOException();
        java.io.IOException iOException26 = new java.io.IOException("hi!", (java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException25);
        iOException22.addSuppressed((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException22);
        java.lang.Throwable[] throwableArray30 = iOException22.getSuppressed();
        java.io.IOException iOException33 = new java.io.IOException();
        java.io.IOException iOException34 = new java.io.IOException("hi!", (java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException("", (java.lang.Throwable) iOException33);
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException35);
        java.io.IOException iOException38 = new java.io.IOException();
        java.io.IOException iOException39 = new java.io.IOException("hi!", (java.lang.Throwable) iOException38);
        iOException36.addSuppressed((java.lang.Throwable) iOException39);
        java.io.IOException iOException43 = new java.io.IOException();
        java.io.IOException iOException44 = new java.io.IOException("hi!", (java.lang.Throwable) iOException43);
        java.io.IOException iOException45 = new java.io.IOException("", (java.lang.Throwable) iOException43);
        java.io.IOException iOException46 = new java.io.IOException((java.lang.Throwable) iOException45);
        java.io.IOException iOException48 = new java.io.IOException();
        java.io.IOException iOException49 = new java.io.IOException("hi!", (java.lang.Throwable) iOException48);
        iOException46.addSuppressed((java.lang.Throwable) iOException49);
        iOException39.addSuppressed((java.lang.Throwable) iOException49);
        java.io.IOException iOException54 = new java.io.IOException();
        java.io.IOException iOException55 = new java.io.IOException("hi!", (java.lang.Throwable) iOException54);
        java.io.IOException iOException56 = new java.io.IOException("", (java.lang.Throwable) iOException54);
        java.io.IOException iOException57 = new java.io.IOException((java.lang.Throwable) iOException56);
        java.io.IOException iOException59 = new java.io.IOException();
        java.io.IOException iOException60 = new java.io.IOException("hi!", (java.lang.Throwable) iOException59);
        iOException57.addSuppressed((java.lang.Throwable) iOException60);
        java.io.IOException iOException64 = new java.io.IOException();
        java.io.IOException iOException65 = new java.io.IOException("hi!", (java.lang.Throwable) iOException64);
        java.io.IOException iOException66 = new java.io.IOException("", (java.lang.Throwable) iOException64);
        java.io.IOException iOException67 = new java.io.IOException((java.lang.Throwable) iOException66);
        java.io.IOException iOException69 = new java.io.IOException();
        java.io.IOException iOException70 = new java.io.IOException("hi!", (java.lang.Throwable) iOException69);
        iOException67.addSuppressed((java.lang.Throwable) iOException70);
        iOException60.addSuppressed((java.lang.Throwable) iOException70);
        iOException39.addSuppressed((java.lang.Throwable) iOException70);
        iOException22.addSuppressed((java.lang.Throwable) iOException70);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor20.visit("L1315789792", (java.lang.Object) iOException70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        java.lang.String str19 = classReader12.getClassName();
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(classReader12, 9);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(48640);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter23, 6553610);
        java.lang.String str26 = classReader12.getSuperName();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException" + "'", str19, "java.io.IOException");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.io.IOException: hi!" + "'", str26, "java.io.IOException: hi!");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        java.lang.Object obj65 = label64.info;
        java.lang.Object obj66 = label64.info;
        methodVisitor59.visitJumpInsn((int) '4', label64);
        methodVisitor59.visitTypeInsn(17, "L852881485");
        java.lang.Class<?> wildcardClass71 = methodVisitor59.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int14 = classWriter10.newField("hi!", "hi!", "hi!");
        annotationVisitor7.visit("java.io.IOException: ", (java.lang.Object) "hi!");
        annotationVisitor7.visitEnum("L2066229866", "L773229801", "java.io.IOException");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter19.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter19.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int41 = classWriter37.newField("hi!", "hi!", "hi!");
        classWriter37.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter48.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter48.visitAnnotation("hi!", false);
        classWriter48.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        classWriter65.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter48.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter37.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter19.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray73);
        classWriter1.visit(3, 254, "java.io.IOException: ", "", "", strArray73);
        classWriter1.visitInnerClass("L781877917", "L1603039582", "L886841972", (int) 'a');
        int int87 = classWriter1.newField("L853492882", "L656401292", "L1315789792");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 20 + "'", int87 == 20);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        int int16 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("java.io.IOException: hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = annotationVisitor19.visitArray("L1770206027");
        java.io.IOException iOException25 = new java.io.IOException();
        java.io.IOException iOException26 = new java.io.IOException("hi!", (java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException25);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException25);
        java.lang.Throwable[] throwableArray29 = iOException25.getSuppressed();
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException25);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor19.visit("L801380897", (java.lang.Object) iOException30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: java.io.IOException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        java.lang.String str18 = classReader12.getSuperName();
        long long20 = classReader12.readLong(0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3819410108757049244L) + "'", long20 == (-3819410108757049244L));
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter23.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray48);
        methodVisitor50.visitInsn(100);
        methodVisitor50.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label57 = new org.mockito.asm.Label();
        java.lang.Object obj58 = label57.info;
        methodVisitor50.visitJumpInsn(3, label57);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter61.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter61.visitAnnotation("hi!", false);
        classWriter61.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label57.info = "java.io.IOException: hi!";
        java.lang.String str74 = label57.toString();
        java.lang.Object obj75 = label57.info;
        methodVisitor20.visitLineNumber(0, label57);
        java.lang.String str77 = label57.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int78 = label57.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L388712384" + "'", str74, "L388712384");
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "java.io.IOException: hi!" + "'", obj75, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "L388712384" + "'", str77, "L388712384");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        byte[] byteArray20 = classReader12.b;
        int int21 = classReader12.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short23 = classReader12.readShort((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.mockito.asm.ClassReader classReader1 = new org.mockito.asm.ClassReader("java.io.IOException");
        int int3 = classReader1.getItem((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter6 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        classWriter6.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray14);
        byte[] byteArray16 = classWriter6.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray16, 0, 0);
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray16);
        int int21 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        classWriter24.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray32);
        byte[] byteArray34 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray34, 0, 0);
        java.lang.String str38 = classReader37.getSuperName();
        int int40 = classReader37.readInt(0);
        char[] charArray45 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj46 = classReader37.readConst(7, charArray45);
        java.lang.String str47 = classReader20.readClass(100, charArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = classReader1.readConst((int) (short) 1792, charArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 76 + "'", int3 == 76);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 92 + "'", int21 == 92);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.io.IOException: hi!" + "'", str38, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-889275714) + "'", int40 == (-889275714));
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + "java.io.IOException: hi!" + "'", obj46, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter41.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter41.visitAnnotation("hi!", false);
        classWriter41.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray66 = new java.lang.String[] { "", "hi!" };
        classWriter58.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray66);
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter41.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray66);
        methodVisitor68.visitInsn(100);
        methodVisitor68.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label75 = new org.mockito.asm.Label();
        java.lang.Object obj76 = label75.info;
        methodVisitor68.visitJumpInsn(3, label75);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter79.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter79.visitAnnotation("hi!", false);
        classWriter79.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label75.info = "java.io.IOException: hi!";
        int[] intArray92 = new int[] {};
        org.mockito.asm.Label[] labelArray93 = new org.mockito.asm.Label[] {};
        methodVisitor28.visitLookupSwitchInsn(label75, intArray92, labelArray93);
        methodVisitor28.visitIincInsn((int) (short) 10, 3);
        methodVisitor28.visitCode();
        methodVisitor28.visitCode();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[]");
        org.junit.Assert.assertNotNull(labelArray93);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte((int) (byte) 1);
        int int30 = classReader26.readByte(11);
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        int int39 = classWriter33.newClass("java.io.IOException");
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter33, 92);
        org.mockito.asm.Attribute[] attributeArray42 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter33, attributeArray42, 2);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = classReader12.readUnsignedShort((int) (short) -326);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 254 + "'", int28 == 254);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = methodVisitor28.visitAnnotation("java.io.IOException: hi!", false);
        annotationVisitor34.visitEnum("L1274768994", "L1770206027", "L717126513");
        annotationVisitor34.visitEnum("L1452494871", "L1761251411", "java.io.IOException: java.io.IOException");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitCode();
        methodVisitor28.visitFieldInsn(51966, "L1221820656", "L1124808138", "L905501896");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int9 = classWriter1.newField("", "L478252604", "java.io.IOException");
        classWriter1.visitInnerClass("L2066229866", "L643431443", "java.io.IOException: ", (int) 'a');
        classWriter1.visitInnerClass("L598330668", "L1704178553", "L478252604", 0);
        int int23 = classWriter1.newField("L886841972", "L367481933", "L717126513");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 25 + "'", int23 == 25);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        java.lang.String str15 = classReader12.getClassName();
        long long17 = classReader12.readLong(16);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        classWriter20.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray28);
        byte[] byteArray30 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray30, 0, 0);
        java.lang.String str34 = classReader33.getSuperName();
        int int36 = classReader33.readInt(0);
        char[] charArray41 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj42 = classReader33.readConst(7, charArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = classReader12.readConst(554106887, charArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 554106887");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException" + "'", str15, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7002650396846542661L + "'", long17 == 7002650396846542661L);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.io.IOException: hi!" + "'", str34, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-889275714) + "'", int36 == (-889275714));
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + "java.io.IOException: hi!" + "'", obj42, "java.io.IOException: hi!");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitMultiANewArrayInsn("java.io.IOException", (int) 'a');
        methodVisitor28.visitIincInsn((int) 'a', (int) (short) 1);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int47 = classWriter44.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        classWriter53.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter44.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray61);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!" };
        classWriter69.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray77);
        byte[] byteArray79 = classWriter69.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        int int82 = classReader80.readByte((int) (byte) 1);
        int int83 = classReader80.header;
        java.lang.String str84 = classReader80.getSuperName();
        java.lang.String[] strArray85 = classReader80.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter44.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray85);
        org.mockito.asm.Label label87 = new org.mockito.asm.Label();
        java.lang.Object obj88 = label87.info;
        java.lang.Object obj89 = label87.info;
        methodVisitor86.visitLabel(label87);
        java.lang.Object obj91 = label87.info;
        java.lang.Object obj92 = label87.info;
        methodVisitor28.visitLabel(label87);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 254 + "'", int82 == 254);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 92 + "'", int83 == 92);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.io.IOException: hi!" + "'", str84, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 2, 100);
        org.mockito.asm.ByteVector byteVector29 = byteVector6.putByte(13);
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector4.putByte(0);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        byte[] byteArray20 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray20);
        java.lang.String[] strArray22 = classReader21.getInterfaces();
        int int24 = classReader21.readByte(8);
        int int26 = classReader21.getItem((int) (byte) 1);
        byte[] byteArray27 = classReader21.b;
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        org.mockito.asm.ByteVector byteVector31 = byteVector8.putByteArray(byteArray27, 11, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray27, 17, 163);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector31);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int68 = classWriter63.newMethod("java.io.IOException: hi!", "hi!", "", true);
        classWriter63.visitOuterClass("", "java.io.IOException: hi!", "L1335427656");
        int int77 = classWriter63.newMethod("L71767159", "L71767159", "hi!", false);
        int int82 = classWriter63.newMethod("", "L1502377119", "L1502377119", true);
        classWriter63.visitSource("L801380897", "L583575715");
        classWriter63.visitEnd();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 17 + "'", int77 == 17);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 20 + "'", int82 == 20);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader12, 9);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = classReader12.readInt(25600);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newConst((java.lang.Object) 10L);
        classWriter19.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter19.visitMethod((int) (short) 4970, "L1335427656", "java.io.IOException: ", "L1335427656", strArray65);
        classWriter1.visit((int) (short) 10, 9, "hi!", "java.io.IOException", "L71767159", strArray65);
        java.lang.Object obj74 = null;
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField(17, "L478252604", "L1335427656", "L71767159", obj74);
        int int78 = classWriter1.newNameType("L180099709", "L1933677661");
        int int82 = classWriter1.newField("L630721910", "L80982279", "L852881485");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertNotNull(fieldVisitor75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 14 + "'", int78 == 14);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 20 + "'", int82 == 20);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        int int19 = classReader14.readByte(2);
        java.lang.String[] strArray20 = classReader14.getInterfaces();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter(classReader14, 1);
        classWriter22.visitEnd();
        java.io.IOException iOException31 = new java.io.IOException();
        java.io.IOException iOException32 = new java.io.IOException("hi!", (java.lang.Throwable) iOException31);
        java.io.IOException iOException33 = new java.io.IOException("", (java.lang.Throwable) iOException31);
        java.io.IOException iOException34 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException36 = new java.io.IOException();
        java.io.IOException iOException37 = new java.io.IOException("hi!", (java.lang.Throwable) iOException36);
        iOException34.addSuppressed((java.lang.Throwable) iOException37);
        java.io.IOException iOException41 = new java.io.IOException();
        java.io.IOException iOException42 = new java.io.IOException("hi!", (java.lang.Throwable) iOException41);
        java.io.IOException iOException43 = new java.io.IOException("", (java.lang.Throwable) iOException41);
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException43);
        java.io.IOException iOException46 = new java.io.IOException();
        java.io.IOException iOException47 = new java.io.IOException("hi!", (java.lang.Throwable) iOException46);
        iOException44.addSuppressed((java.lang.Throwable) iOException47);
        java.io.IOException iOException51 = new java.io.IOException();
        java.io.IOException iOException52 = new java.io.IOException("hi!", (java.lang.Throwable) iOException51);
        java.io.IOException iOException53 = new java.io.IOException("", (java.lang.Throwable) iOException51);
        java.io.IOException iOException54 = new java.io.IOException((java.lang.Throwable) iOException53);
        java.io.IOException iOException56 = new java.io.IOException();
        java.io.IOException iOException57 = new java.io.IOException("hi!", (java.lang.Throwable) iOException56);
        iOException54.addSuppressed((java.lang.Throwable) iOException57);
        iOException47.addSuppressed((java.lang.Throwable) iOException57);
        java.io.IOException iOException60 = new java.io.IOException((java.lang.Throwable) iOException47);
        iOException34.addSuppressed((java.lang.Throwable) iOException60);
        java.io.IOException iOException62 = new java.io.IOException((java.lang.Throwable) iOException60);
        java.io.IOException iOException63 = new java.io.IOException("L478252604", (java.lang.Throwable) iOException62);
        java.io.IOException iOException64 = new java.io.IOException((java.lang.Throwable) iOException63);
        java.io.IOException iOException66 = new java.io.IOException();
        java.io.IOException iOException67 = new java.io.IOException("hi!", (java.lang.Throwable) iOException66);
        java.io.IOException iOException70 = new java.io.IOException();
        java.io.IOException iOException71 = new java.io.IOException("hi!", (java.lang.Throwable) iOException70);
        java.io.IOException iOException72 = new java.io.IOException("", (java.lang.Throwable) iOException70);
        iOException66.addSuppressed((java.lang.Throwable) iOException70);
        java.io.IOException iOException76 = new java.io.IOException();
        java.io.IOException iOException77 = new java.io.IOException("hi!", (java.lang.Throwable) iOException76);
        java.lang.Throwable[] throwableArray78 = iOException77.getSuppressed();
        java.io.IOException iOException79 = new java.io.IOException("hi!", (java.lang.Throwable) iOException77);
        iOException70.addSuppressed((java.lang.Throwable) iOException79);
        iOException63.addSuppressed((java.lang.Throwable) iOException79);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter22.visitField((int) (short) 11881, "L598330668", "L1452494871", "L643431443", (java.lang.Object) iOException63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: L478252604");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 2, 100);
        org.mockito.asm.ByteVector byteVector29 = byteVector6.putUTF8("L478252604");
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int34 = classWriter31.newNameType("", "java.io.IOException");
        int int39 = classWriter31.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int41 = classWriter31.newUTF8("hi!");
        classWriter31.visitEnd();
        classWriter31.visitSource("", "hi!");
        byte[] byteArray46 = classWriter31.toByteArray();
        classWriter31.visitSource("", "L478252604");
        byte[] byteArray50 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ByteVector byteVector54 = byteVector29.putByteArray(byteArray50, (int) (short) 100, (int) (byte) 0);
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray50, 0, 256);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = classReader57.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
        org.junit.Assert.assertNotNull(byteVector54);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        short short22 = classReader12.readShort(2);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = classReader12.readByte(51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) -17730 + "'", short22 == (short) -17730);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = classReader18.getItem(393224);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 393224");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        java.lang.String str17 = classReader12.getSuperName();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException: hi!" + "'", str17, "java.io.IOException: hi!");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("", true);
        int int17 = classWriter1.newClass("java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("L1502377119", false);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int30 = classWriter26.newField("hi!", "hi!", "hi!");
        classWriter26.visitEnd();
        classWriter26.visitSource("java.io.IOException", "");
        classWriter26.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray38 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        byte[] byteArray40 = classReader39.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor41 = classWriter1.visitField(25, "L478252604", "L934461512", "L212982960", (java.lang.Object) byteArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@263b1be3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = classReader12.getItem(256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        int int13 = classWriter1.newClass("L181135275");
        int int15 = classWriter1.newClass("L1502377119");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter21.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter21.visitAnnotation("hi!", false);
        classWriter21.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!" };
        classWriter38.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray46);
        org.mockito.asm.MethodVisitor methodVisitor48 = classWriter21.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray46);
        methodVisitor48.visitInsn((int) (byte) 10);
        methodVisitor48.visitFieldInsn((int) ' ', "java.io.IOException: hi!", "java.io.IOException: ", "L1335427656");
        methodVisitor48.visitVarInsn((int) (short) 4970, 186);
        org.mockito.asm.FieldVisitor fieldVisitor59 = classWriter1.visitField(17, "", "L781877917", "L583575715", (java.lang.Object) 186);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = fieldVisitor59.visitAnnotation("L589783872", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = fieldVisitor59.visitAnnotation("java.io.IOException: ", true);
        fieldVisitor59.visitEnd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(methodVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putUTF8("");
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putUTF8("hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putInt(117);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter15.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter15.visitAnnotation("hi!", false);
        classWriter15.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter15.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        classWriter36.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray44);
        byte[] byteArray46 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        java.lang.String[] strArray48 = classReader47.getInterfaces();
        classWriter15.visit((int) (short) 4970, 5, "", "hi!", "", strArray48);
        classWriter8.visit(0, 5, "L616447458", "L616447458", "", strArray48);
        byte[] byteArray51 = classWriter8.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector54 = byteVector4.putByteArray(byteArray51, (int) (short) 25600, 1024);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 10, 76, 54, 49, 54, 52, 52, 55, 52, 53, 56, 7, 0, 1, 1, 0, 0, 7, 0, 3, 1, 0, 3, 104, 105, 33, 7, 0, 5, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 5, 0, 2, 0, 4, 0, 2, 0, 4, 0, 6, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        java.lang.String str21 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = classReader12.getItem(117);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 117");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.io.IOException: hi!" + "'", str21, "java.io.IOException: hi!");
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newUTF8("hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int39 = classWriter36.newNameType("", "java.io.IOException");
        int int44 = classWriter36.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int46 = classWriter36.newUTF8("hi!");
        classWriter36.visitEnd();
        classWriter36.visitEnd();
        java.lang.String[] strArray54 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter36.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray54);
        methodVisitor55.visitEnd();
        methodVisitor55.visitIntInsn((int) '4', 13);
        methodVisitor55.visitCode();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter64.visitEnd();
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray80 = new java.lang.String[] { "", "hi!" };
        classWriter72.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray80);
        classWriter64.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray80);
        java.lang.Object[] objArray84 = null;
        methodVisitor55.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray80, 9, objArray84);
        org.mockito.asm.MethodVisitor methodVisitor86 = classWriter19.visitMethod(186, "L1035695636", "L1145278557", "L1131836979", strArray80);
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter1.visitMethod(167837715, "java.io.IOException: hi!", "java.io.IOException", "L1635572015", strArray80);
        int int89 = classWriter1.newUTF8("L2066229866");
        classWriter1.visitInnerClass("", "L1603039582", "L781877917", (int) '#');
        classWriter1.visitInnerClass("L71767159", "L779321862", "L1524619426", 202);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor86);
        org.junit.Assert.assertNotNull(methodVisitor87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 12 + "'", int89 == 12);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("java.io.IOException: ", true);
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor12.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter22.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter22.visitAnnotation("hi!", false);
        int int30 = classWriter22.newUTF8("java.io.IOException");
        int int33 = classWriter22.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter22.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int45 = classWriter42.newNameType("", "java.io.IOException");
        int int50 = classWriter42.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int52 = classWriter42.newUTF8("hi!");
        classWriter42.visitEnd();
        classWriter42.visitEnd();
        java.lang.String[] strArray60 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter42.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter22.visitMethod(0, "L630721910", "", "L71767159", strArray60);
        annotationVisitor19.visit("L598330668", (java.lang.Object) "L71767159");
        annotationVisitor19.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = annotationVisitor19.visitArray("java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = annotationVisitor66.visitAnnotation("java.io.IOException: L1026804000", "java/io/IOException");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(annotationVisitor69);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        short short22 = classReader12.readShort(2);
        int int24 = classReader12.readInt(92);
        int int26 = classReader12.readInt(16);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        byte[] byteArray39 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray39, 0, 0);
        java.lang.String str43 = classReader42.getSuperName();
        int int45 = classReader42.readInt(0);
        char[] charArray50 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj51 = classReader42.readConst(7, charArray50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = classReader12.readClass(14, charArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24950");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) -17730 + "'", short22 == (short) -17730);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 655362 + "'", int24 == 655362);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1630431599 + "'", int26 == 1630431599);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "java.io.IOException: hi!" + "'", str43, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-889275714) + "'", int45 == (-889275714));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "java.io.IOException: hi!" + "'", obj51, "java.io.IOException: hi!");
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        java.lang.Object obj65 = label64.info;
        java.lang.Object obj66 = label64.info;
        methodVisitor59.visitJumpInsn((int) '4', label64);
        methodVisitor59.visitTypeInsn(17, "L852881485");
        methodVisitor59.visitIincInsn((-889275714), 17);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        int int16 = classWriter1.newUTF8("L939499658");
        int int19 = classWriter1.newNameType("L991437862", "L1026804000");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        int int5 = classWriter1.newField("L71767159", "L1432403946", "java.io.IOException: ");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int15 = classWriter12.newNameType("", "java.io.IOException");
        int int20 = classWriter12.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int22 = classWriter12.newUTF8("hi!");
        classWriter12.visitEnd();
        classWriter12.visitEnd();
        java.lang.String[] strArray30 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter12.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray30);
        methodVisitor31.visitEnd();
        methodVisitor31.visitIntInsn((int) '4', 13);
        methodVisitor31.visitCode();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter40.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        classWriter40.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        java.lang.Object[] objArray60 = null;
        methodVisitor31.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray56, 9, objArray60);
        classWriter1.visit(16, 106, "L853084801", "L589783872", "L781877917", strArray56);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter68.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter68.visitAnnotation("hi!", false);
        classWriter68.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter85 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray93 = new java.lang.String[] { "", "hi!" };
        classWriter85.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray93);
        org.mockito.asm.MethodVisitor methodVisitor95 = classWriter68.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray93);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor96 = classWriter1.visitMethod(27, "", "L583575715", "L578433708", strArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(methodVisitor95);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int9 = classWriter1.newField("", "L478252604", "java.io.IOException");
        classWriter1.visitOuterClass("L1635572015", "L1518273899", "L1135755945");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter19.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = classWriter19.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor25.visitAnnotation("hi!", "");
        annotationVisitor28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = annotationVisitor28.visitArray("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField(1635148078, "L843063467", "L1635572015", "L984287299", (java.lang.Object) annotationVisitor31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@428121d3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int68 = classWriter63.newMethod("java.io.IOException: hi!", "hi!", "", true);
        int int73 = classWriter63.newMethod("java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", false);
        int int75 = classWriter63.newUTF8("java.io.IOException: hi!");
        classWriter63.visitSource("L1315789792", "java.io.IOException: L1518273899");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 13 + "'", int73 == 13);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 3 + "'", int75 == 3);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int16 = classWriter13.newNameType("", "java.io.IOException");
        int int21 = classWriter13.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int23 = classWriter13.newConst((java.lang.Object) 10L);
        int int25 = classWriter13.newUTF8("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor26 = classWriter1.visitField(3, "", "L478252604", "java.io.IOException: ", (java.lang.Object) "hi!");
        java.lang.Object obj31 = null;
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField((int) ' ', "hi!", "L71767159", "L1335427656", obj31);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = fieldVisitor32.visitAnnotation("L2066229866", false);
        fieldVisitor32.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor32.visitAnnotation("L656401292", true);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor26);
        org.junit.Assert.assertNotNull(fieldVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter12.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter12.visitAnnotation("hi!", false);
        classWriter12.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter12.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter1.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray37);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor40.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor40.visitAnnotationDefault();
        annotationVisitor42.visitEnum("L598330668", "L1635572015", "L1335427656");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        methodVisitor28.visitCode();
        methodVisitor28.visitTypeInsn(48640, "L781877917");
        methodVisitor28.visitEnd();
        methodVisitor28.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = methodVisitor28.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("L717126513", false);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter21.newField("hi!", "hi!", "hi!");
        classWriter21.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter21.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter21.visitAnnotation("java.io.IOException", true);
        byte[] byteArray36 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classWriter1.newConst((java.lang.Object) classReader37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@10a30d36");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 58 + "'", int39 == 58);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        classWriter20.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray28);
        byte[] byteArray30 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray30, 0, 0);
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray30);
        int int35 = classReader34.header;
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!" };
        classWriter38.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray46);
        byte[] byteArray48 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray48, 0, 0);
        java.lang.String str52 = classReader51.getSuperName();
        int int54 = classReader51.readInt(0);
        char[] charArray59 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj60 = classReader51.readConst(7, charArray59);
        java.lang.String str61 = classReader34.readClass(100, charArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = classReader17.readUTF8(0, charArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 92 + "'", int35 == 92);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.io.IOException: hi!" + "'", str52, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-889275714) + "'", int54 == (-889275714));
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj60 + "' != '" + "java.io.IOException: hi!" + "'", obj60, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 0);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ClassReader classReader25 = new org.mockito.asm.ClassReader(byteArray24);
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray24);
        java.lang.String[] strArray27 = classReader26.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod((int) (short) 4970, "L2066229866", "L991437862", "L869511749", strArray27);
        classWriter1.visitInnerClass("L220707133", "L1367834389", "L1502377119", 2304);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray17);
        int int20 = classReader18.readInt(0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-889275714) + "'", int20 == (-889275714));
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int17 = classReader12.getAccess();
        java.lang.String str18 = classReader12.getSuperName();
        java.lang.String str19 = classReader12.getSuperName();
        byte[] byteArray20 = classReader12.b;
        byte[] byteArray21 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray21, 13, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray13, 100, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray13, 6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        classWriter13.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray21);
        byte[] byteArray23 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int26 = classReader24.readByte((int) (byte) 1);
        int int28 = classReader24.readByte(11);
        byte[] byteArray29 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int35 = classWriter31.newField("hi!", "hi!", "hi!");
        int int37 = classWriter31.newClass("java.io.IOException");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter31, 92);
        int int40 = classWriter1.newConst((java.lang.Object) 92);
        byte[] byteArray41 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        byte[] byteArray58 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        java.lang.String[] strArray60 = classReader59.getInterfaces();
        classWriter1.visit((int) (short) 1024, (int) ' ', "L616447458", "L71767159", "L1502377119", strArray60);
        classWriter1.visitInnerClass("L616447458", "java.io.IOException: java.io.IOException: ", "L180099709", 100);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("L1452494871", "L886841972", "L1526910237", (int) (short) 4970);
        classWriter1.visitOuterClass("L1267349573", "L1763941555", "L2057645265");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 254 + "'", int26 == 254);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 3, 0, 0, 0, 92, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray60);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor20.visitParameterAnnotation((int) (short) 0, "L2120157225", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotation("java.io.IOException: java.io.IOException: ", false);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter34.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        classWriter43.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray51);
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter34.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray51);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        classWriter59.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray67);
        byte[] byteArray69 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray69);
        int int72 = classReader70.readByte((int) (byte) 1);
        int int73 = classReader70.header;
        java.lang.String str74 = classReader70.getSuperName();
        java.lang.String[] strArray75 = classReader70.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter34.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray75);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        java.lang.Object obj78 = label77.info;
        java.lang.Object obj79 = label77.info;
        methodVisitor76.visitLabel(label77);
        java.lang.Object obj81 = label77.info;
        methodVisitor28.visitJumpInsn((int) (byte) 10, label77);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 254 + "'", int72 == 254);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 92 + "'", int73 == 92);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "java.io.IOException: hi!" + "'", str74, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        int int21 = classReader17.readByte((int) '#');
        byte[] byteArray22 = classReader17.b;
        int int24 = classReader17.readUnsignedShort(11);
        byte[] byteArray25 = classReader17.b;
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int30 = classWriter27.newNameType("", "java.io.IOException");
        int int35 = classWriter27.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int37 = classWriter27.newUTF8("hi!");
        classWriter27.visitEnd();
        classWriter27.visitEnd();
        classWriter27.visitInnerClass("L1035695636", "L1335427656", "java.io.IOException: hi!", (int) (byte) -1);
        classWriter27.visitOuterClass("L1704178553", "java.io.IOException: ", "L1808373495");
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter27.visitAnnotation("L1817672154", false);
        // The following exception was thrown during execution in test generation
        try {
            classReader17.accept((org.mockito.asm.ClassVisitor) classWriter27, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray13, 100, (int) (byte) 100);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray13, (int) (short) 1, (int) (short) 1024);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        org.mockito.asm.ByteVector byteVector2 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putShort((int) (short) 0);
        java.lang.Class<?> wildcardClass5 = byteVector2.getClass();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = classWriter1.newConst((java.lang.Object) wildcardClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value class org.mockito.asm.ByteVector");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException("hi!", (java.lang.Throwable) iOException13);
        java.lang.Throwable[] throwableArray15 = iOException14.getSuppressed();
        java.io.IOException iOException16 = new java.io.IOException("hi!", (java.lang.Throwable) iOException14);
        java.lang.Class<?> wildcardClass17 = iOException16.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor18 = classWriter1.visitField((int) ' ', "hi!", "hi!", "java.io.IOException: ", (java.lang.Object) wildcardClass17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value class java.io.IOException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        java.lang.Class<?> wildcardClass7 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.Attribute attribute13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader12.getItem((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute15 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        label37.info = 11;
        // The following exception was thrown during execution in test generation
        try {
            int int42 = label37.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte(0);
        char[] charArray19 = new char[] { '4', '4', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = classReader12.readConst(92, charArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 92");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 202 + "'", int14 == 202);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "444");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "444");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[4, 4, 4]");
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        java.lang.Class<?> wildcardClass16 = classReader12.getClass();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("java.io.IOException: ", false);
        org.mockito.asm.Attribute attribute17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = annotationVisitor13.visitArray("java.io.IOException: ");
        annotationVisitor13.visitEnum("java.io.IOException: ", "", "");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        char[] charArray17 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = classReader12.readClass(4, charArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        long long22 = classReader12.readLong(9);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = classReader12.readLong(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 720857498745140833L + "'", long22 == 720857498745140833L);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter41.newNameType("", "java.io.IOException");
        label37.info = classWriter41;
        // The following exception was thrown during execution in test generation
        try {
            int int46 = label37.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        fieldVisitor12.visitEnd();
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        methodVisitor20.visitFieldInsn(1, "java.io.IOException", "java.io.IOException: hi!", "");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("java.io.IOException: ", true);
        annotationVisitor15.visitEnum("", "java.io.IOException: hi!", "java.io.IOException");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader12.readUnsignedShort((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        int int40 = classReader37.header;
        java.lang.String str41 = classReader37.getSuperName();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter1.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray42);
        org.mockito.asm.Label label46 = new org.mockito.asm.Label();
        java.lang.Object obj47 = label46.info;
        org.mockito.asm.Label[] labelArray48 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor43.visitTableSwitchInsn(10, 1, label46, labelArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 92 + "'", int40 == 92);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.io.IOException: hi!" + "'", str41, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter21.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter21.visitAnnotation("hi!", false);
        int int29 = classWriter21.newUTF8("java.io.IOException");
        int int32 = classWriter21.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField((int) (byte) 10, "java.io.IOException: hi!", "hi!", "java.io.IOException", (java.lang.Object) classWriter21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@e92bc13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = label34.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        java.lang.Object obj38 = label37.info;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        methodVisitor67.visitInsn(100);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        label73.info = (-1);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        methodVisitor67.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label73, label76, 8);
        label76.info = 11;
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "java.io.IOException: ", label37, label76, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = label37.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader12.getItem((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitJumpInsn((int) (short) 10, label35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        char[] charArray22 = new char[] { 'a', '#', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = classReader12.readConst(81, charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 81");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #, a]");
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        java.lang.String str18 = classReader12.getSuperName();
        java.lang.Class<?> wildcardClass19 = classReader12.getClass();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        classWriter13.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray21);
        byte[] byteArray23 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int26 = classReader24.readByte((int) (byte) 1);
        int int28 = classReader24.readByte(11);
        byte[] byteArray29 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int35 = classWriter31.newField("hi!", "hi!", "hi!");
        int int37 = classWriter31.newClass("java.io.IOException");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter31, 92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter1.visitField((int) (short) -1, "java.io.IOException: hi!", "", "", (java.lang.Object) classWriter31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@78cd9226");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 254 + "'", int26 == 254);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter41.newNameType("", "java.io.IOException");
        int int49 = classWriter41.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter41.visitEnd();
        label34.info = classWriter41;
        // The following exception was thrown during execution in test generation
        try {
            int int52 = label34.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        int int29 = classReader12.readInt(8);
        char[] charArray35 = new char[] { '#', ' ', '#', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = classReader12.readConst((int) '4', charArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 655616 + "'", int29 == 655616);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "# # ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "# # ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#,  , #,  ]");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader14.getItem((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor28.visitAnnotation("java.io.IOException: ", true);
        org.mockito.asm.ByteVector byteVector44 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector46 = byteVector44.putUTF8("");
        org.mockito.asm.ByteVector byteVector48 = byteVector46.putByte((int) (short) 100);
        org.mockito.asm.ByteVector byteVector50 = byteVector46.putUTF8("java.io.IOException");
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor42.visit("L478252604", (java.lang.Object) byteVector50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@637a080a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(byteVector46);
        org.junit.Assert.assertNotNull(byteVector48);
        org.junit.Assert.assertNotNull(byteVector50);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        char[] charArray20 = new char[] { '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = classReader14.readConst(3, charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#]");
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector4.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector10 = byteVector4.putInt((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!" };
        classWriter12.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray20);
        byte[] byteArray22 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray22);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter25.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter25.visitAnnotation("hi!", false);
        classWriter25.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!" };
        classWriter42.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray50);
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter25.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray50);
        methodVisitor52.visitInsn(100);
        org.mockito.asm.Label label58 = new org.mockito.asm.Label();
        label58.info = (-1);
        org.mockito.asm.Label label61 = new org.mockito.asm.Label();
        methodVisitor52.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label58, label61, 8);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int68 = classWriter65.newNameType("", "java.io.IOException");
        label61.info = classWriter65;
        org.mockito.asm.Attribute[] attributeArray70 = new org.mockito.asm.Attribute[] {};
        classReader23.accept((org.mockito.asm.ClassVisitor) classWriter65, attributeArray70, 0);
        byte[] byteArray73 = classWriter65.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector76 = byteVector10.putByteArray(byteArray73, 202, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertNotNull(attributeArray70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 7, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 5, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 4, 0, 6, 0, 2, 0, 7, 0, 9, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 2, 0, 2]");
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = classReader17.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor7.visitAnnotation("hi!", "");
        annotationVisitor7.visitEnum("java.io.IOException", "java.io.IOException", "hi!");
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        classWriter20.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray28);
        org.mockito.asm.FieldVisitor fieldVisitor35 = classWriter20.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        annotationVisitor7.visit("hi!", (java.lang.Object) "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(fieldVisitor35);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitCode();
        org.mockito.asm.Attribute attribute35 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        org.mockito.asm.Attribute attribute12 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        classWriter21.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter1.visitMethod(13, "L1432403946", "java.io.IOException: ", "L478252604", strArray29);
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor31);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitCode();
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        java.lang.Object obj35 = label34.info;
        java.lang.Object obj36 = label34.info;
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        java.lang.Object obj38 = label37.info;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        methodVisitor67.visitInsn(100);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        label73.info = (-1);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        methodVisitor67.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label73, label76, 8);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        java.lang.Object obj81 = label80.info;
        org.mockito.asm.Label label82 = new org.mockito.asm.Label();
        label82.info = (-1);
        org.mockito.asm.Label[] labelArray85 = new org.mockito.asm.Label[] { label37, label73, label79, label80, label82 };
        methodVisitor28.visitTableSwitchInsn(8, (int) '4', label34, labelArray85);
        java.lang.String str87 = label34.toString();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(labelArray85);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L71767159" + "'", str87, "L71767159");
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        java.lang.Object obj40 = null;
        label34.info = obj40;
        // The following exception was thrown during execution in test generation
        try {
            int int42 = label34.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        int int28 = classReader14.header;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = classReader14.getItem(48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48640");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 92 + "'", int28 == 92);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = classReader14.readLong((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        byte[] byteArray16 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray16, 14, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 153");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        annotationVisitor15.visit("java.io.IOException", (java.lang.Object) "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray62, 655616, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        int int28 = classReader14.header;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = classReader14.getItem(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 92 + "'", int28 == 92);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        long long19 = classReader17.readLong((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray20 = classReader17.getInterfaces();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-91551935198370816L) + "'", long19 == (-91551935198370816L));
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter3 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int7 = classWriter3.newField("hi!", "hi!", "hi!");
        int int9 = classWriter3.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor15 = classWriter3.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        byte[] byteArray16 = classWriter3.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classWriter1.newConst((java.lang.Object) classWriter3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@4fa7a4a1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 10, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        int int21 = classReader17.readByte((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = classReader17.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        int int29 = classReader12.readInt(8);
        // The following exception was thrown during execution in test generation
        try {
            short short31 = classReader12.readShort((-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -889275714");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 655616 + "'", int29 == 655616);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector((int) (short) 0);
        org.mockito.asm.ByteVector byteVector3 = byteVector1.putInt((int) (short) -1);
        org.mockito.asm.ClassWriter classWriter5 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" };
        classWriter5.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray13);
        byte[] byteArray15 = classWriter5.toByteArray();
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray15, 0, 0);
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector22 = byteVector1.putByteArray(byteArray15, (int) 'a', 92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector3);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String[] strArray17 = classReader12.getInterfaces();
        char[] charArray20 = new char[] { ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = classReader12.readUTF8(3, charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48640");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ ]");
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putUTF8("");
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putShort(81);
        org.mockito.asm.ByteVector byteVector5 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector7 = byteVector5.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector9 = byteVector5.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector11 = byteVector9.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        classWriter13.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray21);
        byte[] byteArray23 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int26 = classReader24.readByte((int) (byte) 1);
        int int27 = classReader24.header;
        java.lang.String str28 = classReader24.getSuperName();
        byte[] byteArray29 = classReader24.b;
        org.mockito.asm.ByteVector byteVector32 = byteVector11.putByteArray(byteArray29, 2, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector35 = byteVector0.putByteArray(byteArray29, (int) (short) -326, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector7);
        org.junit.Assert.assertNotNull(byteVector9);
        org.junit.Assert.assertNotNull(byteVector11);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 254 + "'", int26 == 254);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 92 + "'", int27 == 92);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.io.IOException: hi!" + "'", str28, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector32);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = classReader12.readLong(655616);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 655616");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        int int18 = classWriter1.newClass("");
        org.mockito.asm.ByteVector byteVector23 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector25 = byteVector23.putUTF8("");
        org.mockito.asm.ByteVector byteVector27 = byteVector25.putByte((int) (short) 100);
        org.mockito.asm.ByteVector byteVector29 = byteVector25.putUTF8("java.io.IOException");
        org.mockito.asm.ByteVector byteVector31 = byteVector29.putUTF8("L1335427656");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField((int) (short) -326, "java.io.IOException", "L71767159", "java.io.IOException: hi!", (java.lang.Object) byteVector29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@296f7dc5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertNotNull(byteVector25);
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
        org.junit.Assert.assertNotNull(byteVector31);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector4.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector10 = byteVector4.putByte(8);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int16 = classWriter12.newField("hi!", "hi!", "hi!");
        int int18 = classWriter12.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor24 = classWriter12.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        byte[] byteArray25 = classWriter12.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector28 = byteVector10.putByteArray(byteArray25, 2, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 10, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        java.lang.String str18 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = classReader12.readByte(48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48640");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter22.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter22.visitAnnotation("hi!", false);
        classWriter22.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!" };
        classWriter39.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter22.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (short) 4970, "L1335427656", "java.io.IOException: ", "L1335427656", strArray47);
        org.mockito.asm.Attribute attribute51 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor50.visitAttribute(attribute51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter18.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter18.visitAnnotation("hi!", false);
        classWriter18.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        classWriter18.visitOuterClass("java.io.IOException: hi!", "java.io.IOException: ", "hi!");
        classWriter18.visitSource("java.io.IOException: hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor37 = classWriter1.visitField(16, "L1635572015", "java.io.IOException: hi!", "L1335427656", (java.lang.Object) classWriter18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@1c6c1309");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter21.newField("hi!", "hi!", "hi!");
        classWriter21.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter21.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int42 = classWriter39.newNameType("", "java.io.IOException");
        int int47 = classWriter39.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter39.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter39.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int61 = classWriter57.newField("hi!", "hi!", "hi!");
        classWriter57.visitEnd();
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter68.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter68.visitAnnotation("hi!", false);
        classWriter68.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter85 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray93 = new java.lang.String[] { "", "hi!" };
        classWriter85.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray93);
        org.mockito.asm.MethodVisitor methodVisitor95 = classWriter68.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray93);
        org.mockito.asm.MethodVisitor methodVisitor96 = classWriter57.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray93);
        org.mockito.asm.MethodVisitor methodVisitor97 = classWriter39.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray93);
        classWriter21.visit(0, (int) (byte) 10, "", "java.io.IOException: hi!", "java.io.IOException", strArray93);
        classWriter1.visit(655616, (int) (byte) 1, "L1335427656", "L478252604", "L1335427656", strArray93);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor32);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(methodVisitor95);
        org.junit.Assert.assertNotNull(methodVisitor96);
        org.junit.Assert.assertNotNull(methodVisitor97);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.Attribute attribute16 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putUTF8("");
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putUTF8("java.io.IOException");
        org.mockito.asm.ClassWriter classWriter6 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        classWriter6.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray14);
        byte[] byteArray16 = classWriter6.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        byte[] byteArray18 = classReader17.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector21 = byteVector2.putByteArray(byteArray18, (int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        classWriter1.visitOuterClass("java.io.IOException: hi!", "java.io.IOException: ", "hi!");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "java.io.IOException: hi!", (int) '4');
        org.mockito.asm.Attribute attribute22 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        long long19 = classReader17.readLong((int) (byte) 1);
        char[] charArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = classReader17.readClass((int) (short) 4970, charArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-91551935198370816L) + "'", long19 == (-91551935198370816L));
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int26 = classWriter23.newNameType("", "java.io.IOException");
        int int31 = classWriter23.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int33 = classWriter23.newUTF8("hi!");
        classWriter23.visitEnd();
        classWriter23.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField((-1), "L1145278557", "L1335427656", "java.io.IOException: ", (java.lang.Object) classWriter23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@6fef6fc4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        char[] charArray19 = new char[] { 'a', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = classReader14.readClass((int) (short) 1, charArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[a, #]");
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitMultiANewArrayInsn("java.io.IOException", (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor28.visitParameterAnnotation(16, "java.io.IOException: hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        java.lang.Class<?> wildcardClass12 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        classWriter1.visitOuterClass("java.io.IOException: hi!", "java.io.IOException: ", "hi!");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "java.io.IOException: hi!", (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("java.io.IOException: ", false);
        org.mockito.asm.Attribute attribute25 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = methodVisitor59.visitAnnotation("L478252604", true);
        org.mockito.asm.Attribute attribute63 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor59.visitAttribute(attribute63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int7 = classWriter1.newNameType("L1335427656", "java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.ByteVector byteVector13 = new org.mockito.asm.ByteVector();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor14 = classWriter1.visitField(48640, "", "", "L1635572015", (java.lang.Object) byteVector13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@72281967");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        int int28 = classReader14.header;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = classReader14.readUnsignedShort((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 92 + "'", int28 == 92);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        char[] charArray20 = new char[] { 'a', ' ', 'a', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = classReader14.readUTF8((int) '4', charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28788");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a,  , a, #]");
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor38 = methodVisitor28.visitParameterAnnotation(81, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        char[] charArray69 = new char[] { '#', ' ', '4', 'a', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = classReader12.readConst(5, charArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "\uaf80\000\000d\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "\uaf80\000\000d\000");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "\uaf80, \000, \000, d, \000]");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        org.mockito.asm.Attribute attribute37 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        char[] charArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = classReader12.readClass(4, charArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        java.io.IOException iOException16 = new java.io.IOException();
        java.io.IOException iOException19 = new java.io.IOException();
        java.io.IOException iOException20 = new java.io.IOException("hi!", (java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException("", (java.lang.Throwable) iOException19);
        iOException16.addSuppressed((java.lang.Throwable) iOException21);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) iOException16);
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException28 = new java.io.IOException("hi!", (java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException("", (java.lang.Throwable) iOException27);
        java.io.IOException iOException30 = new java.io.IOException("L1335427656", (java.lang.Throwable) iOException27);
        iOException23.addSuppressed((java.lang.Throwable) iOException27);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classWriter1.newConst((java.lang.Object) iOException27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(13);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int10 = classWriter7.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        org.mockito.asm.MethodVisitor methodVisitor26 = classWriter7.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter1.visitField((int) (byte) 1, "L1145278557", "java.io.IOException", "hi!", (java.lang.Object) methodVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@234523e7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(methodVisitor26);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int16 = classWriter13.newNameType("", "java.io.IOException");
        int int21 = classWriter13.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter13.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = classWriter13.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int35 = classWriter31.newField("hi!", "hi!", "hi!");
        classWriter31.visitEnd();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter42.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter42.visitAnnotation("hi!", false);
        classWriter42.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        classWriter59.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter42.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray67);
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter31.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray67);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter13.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray67);
        methodVisitor71.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor71.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        methodVisitor71.visitEnd();
        methodVisitor71.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor71.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            int int83 = classWriter1.newConst((java.lang.Object) methodVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@21067f33");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitMultiANewArrayInsn("java.io.IOException", (int) 'a');
        methodVisitor28.visitIincInsn((int) 'a', (int) (short) 1);
        methodVisitor28.visitIntInsn(8, 5);
        java.lang.Class<?> wildcardClass46 = methodVisitor28.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor24 = methodVisitor20.visitParameterAnnotation((-21316096), "java.io.IOException", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        char[] charArray17 = new char[] { '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = classReader12.readConst(10, charArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        org.mockito.asm.Attribute attribute12 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int65 = classReader12.readByte((int) (short) 4970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "hi!" };
        classWriter2.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray10);
        byte[] byteArray12 = classWriter2.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        java.lang.String[] strArray14 = classReader13.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter16.newField("hi!", "hi!", "hi!");
        int int22 = classWriter16.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter16.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray29 = null;
        classReader13.accept((org.mockito.asm.ClassVisitor) classWriter16, attributeArray29, (int) (byte) 10);
        byte[] byteArray32 = classReader13.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector35 = byteVector0.putByteArray(byteArray32, (int) (byte) 10, (int) (short) 4970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitMultiANewArrayInsn("java.io.IOException", (int) 'a');
        java.io.IOException iOException43 = new java.io.IOException();
        java.io.IOException iOException44 = new java.io.IOException("hi!", (java.lang.Throwable) iOException43);
        java.lang.Throwable[] throwableArray45 = iOException44.getSuppressed();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        byte[] byteArray58 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        int int61 = classReader59.readByte(0);
        java.lang.String[] strArray62 = classReader59.getInterfaces();
        methodVisitor28.visitFrame(12, 3, (java.lang.Object[]) throwableArray45, 81, (java.lang.Object[]) strArray62);
        methodVisitor28.visitTypeInsn((int) '#', "L1432403946");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor70 = methodVisitor28.visitParameterAnnotation(12, "L478252604", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 202 + "'", int61 == 202);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitMethodInsn(10, "hi!", "hi!", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter36.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter36.visitAnnotation("hi!", false);
        classWriter36.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        classWriter53.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter36.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray61);
        methodVisitor63.visitInsn(100);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        label69.info = (-1);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        methodVisitor63.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label69, label72, 8);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int79 = classWriter76.newNameType("", "java.io.IOException");
        label72.info = classWriter76;
        java.lang.String str81 = label72.toString();
        methodVisitor28.visitJumpInsn((-1), label72);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor28.visitParameterAnnotation((int) (short) -1, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L1696512281" + "'", str81, "L1696512281");
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        int int19 = classWriter1.newMethod("java.io.IOException: ", "java.io.IOException: hi!", "java.io.IOException", true);
        org.mockito.asm.Attribute attribute20 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            short short16 = classReader14.readShort(655616);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 655616");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(3, (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor28.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor28.visitParameterAnnotation((int) (byte) 0, "L1131836979", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        classWriter1.visitOuterClass("java.io.IOException", "java.io.IOException", "java.io.IOException: ");
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute26 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 7, 0, 9, 7, 0, 6, 7, 0, 2, 12, 0, 2, 0, 9, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 4, 0, 12, 0, 13, 0, 15, 0, 0, 0, 18, 0, 2, 0, 10, 0, 11, 0, 1, 0, 100, 0, 10, 0, 11, 0, 1, 0, 10]");
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        methodVisitor28.visitIincInsn(5, 10);
        methodVisitor28.visitMethodInsn(12, "L1145278557", "", "L630721910");
        org.mockito.asm.Label label48 = new org.mockito.asm.Label();
        int[] intArray54 = new int[] { 13, 3, 12, (byte) 10, 1 };
        org.mockito.asm.Label[] labelArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLookupSwitchInsn(label48, intArray54, labelArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[13, 3, 12, 10, 1]");
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor13.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "L1635572015", "L1635572015", 16);
        java.io.IOException iOException25 = new java.io.IOException();
        java.io.IOException iOException28 = new java.io.IOException();
        java.io.IOException iOException29 = new java.io.IOException("hi!", (java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException("", (java.lang.Throwable) iOException28);
        iOException25.addSuppressed((java.lang.Throwable) iOException30);
        java.io.IOException iOException32 = new java.io.IOException((java.lang.Throwable) iOException25);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(186, "L852881485", "L1432403946", "L1145278557", (java.lang.Object) iOException25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        int int21 = classReader17.readByte((int) '#');
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        int int31 = classWriter23.newUTF8("java.io.IOException");
        int int34 = classWriter23.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter23.visitSource("L1335427656", "");
        classWriter23.visitInnerClass("java.io.IOException: hi!", "L1635572015", "L1635572015", 16);
        // The following exception was thrown during execution in test generation
        try {
            classReader17.accept((org.mockito.asm.ClassVisitor) classWriter23, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(10);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int10 = classWriter7.newNameType("", "java.io.IOException");
        int int15 = classWriter7.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        classWriter21.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray29);
        byte[] byteArray31 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter34.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter34.visitAnnotation("hi!", false);
        classWriter34.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!" };
        classWriter51.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter34.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray59);
        methodVisitor61.visitInsn(100);
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        label67.info = (-1);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor61.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label67, label70, 8);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int77 = classWriter74.newNameType("", "java.io.IOException");
        label70.info = classWriter74;
        org.mockito.asm.Attribute[] attributeArray79 = new org.mockito.asm.Attribute[] {};
        classReader32.accept((org.mockito.asm.ClassVisitor) classWriter74, attributeArray79, 0);
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter(classReader32, (int) (short) 10);
        int int85 = classReader32.readByte(3);
        java.lang.String[] strArray86 = classReader32.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor87 = classWriter7.visitMethod((int) ' ', "L478252604", "L478252604", "L1635572015", strArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor88 = classWriter1.visitMethod((int) (short) 0, "java.io.IOException", "L478252604", "java.io.IOException", strArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(attributeArray79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 190 + "'", int85 == 190);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor87);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        java.lang.String str15 = classReader12.getClassName();
        long long17 = classReader12.readLong(16);
        char[] charArray21 = new char[] { '#', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = classReader12.readUTF8(63, charArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException" + "'", str15, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7002650396846542661L + "'", long17 == 7002650396846542661L);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "ja");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[j, a]");
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader12.getItem(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        org.mockito.asm.Attribute attribute12 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        char[] charArray21 = new char[] { 'a', 'a', '4', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = classReader12.readUTF8(48640, charArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48640");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "aa44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "aa44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a, a, 4, 4]");
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader17.readUnsignedShort((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        classWriter1.visitOuterClass("L1635572015", "L781877917", "L852881485");
        java.lang.Object obj25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = classWriter1.newConst(obj25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = methodVisitor59.visitAnnotation("L478252604", true);
        annotationVisitor62.visitEnum("L1432403946", "java.io.IOException: hi!", "");
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "hi!" };
        classWriter69.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray77);
        byte[] byteArray79 = classWriter69.toByteArray();
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        int int82 = classReader80.readByte((int) (byte) 1);
        byte[] byteArray83 = classReader80.b;
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor62.visit("L71767159", (java.lang.Object) classReader80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@585de383");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 254 + "'", int82 == 254);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        java.io.IOException iOException36 = new java.io.IOException();
        java.io.IOException iOException37 = new java.io.IOException("hi!", (java.lang.Throwable) iOException36);
        java.lang.Throwable[] throwableArray38 = iOException37.getSuppressed();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        classWriter41.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray49);
        byte[] byteArray51 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray51, 0, 0);
        java.lang.String str55 = classReader54.getSuperName();
        int int57 = classReader54.readInt(0);
        int int59 = classReader54.readByte(2);
        java.lang.String[] strArray60 = classReader54.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitFrame(0, 186, (java.lang.Object[]) throwableArray38, 11, (java.lang.Object[]) strArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.io.IOException: hi!" + "'", str55, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-889275714) + "'", int57 == (-889275714));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 186 + "'", int59 == 186);
        org.junit.Assert.assertNotNull(strArray60);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitFieldInsn((int) ' ', "java.io.IOException: hi!", "java.io.IOException: ", "L1335427656");
        methodVisitor28.visitVarInsn((int) (short) 4970, 186);
        java.io.IOException iOException39 = new java.io.IOException();
        java.io.IOException iOException42 = new java.io.IOException();
        java.io.IOException iOException43 = new java.io.IOException("hi!", (java.lang.Throwable) iOException42);
        java.io.IOException iOException44 = new java.io.IOException("", (java.lang.Throwable) iOException42);
        iOException39.addSuppressed((java.lang.Throwable) iOException44);
        java.io.IOException iOException46 = new java.io.IOException((java.lang.Throwable) iOException39);
        java.io.IOException iOException50 = new java.io.IOException();
        java.io.IOException iOException51 = new java.io.IOException("hi!", (java.lang.Throwable) iOException50);
        java.io.IOException iOException52 = new java.io.IOException("", (java.lang.Throwable) iOException50);
        java.io.IOException iOException53 = new java.io.IOException("L1335427656", (java.lang.Throwable) iOException50);
        iOException46.addSuppressed((java.lang.Throwable) iOException50);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLdcInsn((java.lang.Object) iOException46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: java.io.IOException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader12.readUnsignedShort(117);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor59.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        methodVisitor59.visitEnd();
        methodVisitor59.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = methodVisitor59.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor74 = methodVisitor59.visitParameterAnnotation(48640, "L1432403946", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor70);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray16 = classReader15.b;
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        char[] charArray24 = new char[] { 'a', ' ', '4', ' ', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = classReader17.readClass(10, charArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a 4 a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a 4 a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a,  , 4,  , a]");
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        java.lang.Class<?> wildcardClass15 = strArray14.getClass();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitInsn((int) (byte) 0);
        org.mockito.asm.Label label36 = new org.mockito.asm.Label();
        java.lang.Object obj37 = label36.info;
        java.lang.Object obj38 = label36.info;
        methodVisitor28.visitJumpInsn((int) (byte) -1, label36);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        classWriter41.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray49);
        byte[] byteArray51 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray51, 0, 0);
        java.lang.String str55 = classReader54.getSuperName();
        label36.info = classReader54;
        char[] charArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = classReader54.readUTF8(1024, charArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1024");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.io.IOException: hi!" + "'", str55, "java.io.IOException: hi!");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String str17 = classReader12.getSuperName();
        int int18 = classReader12.header;
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException: hi!" + "'", str17, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        classWriter15.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter15.visitAnnotation("L1432403946", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor34.visitArray("hi!");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter23.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray48);
        methodVisitor50.visitInsn(100);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        label56.info = (-1);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        methodVisitor50.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label56, label59, 8);
        label59.info = 11;
        org.mockito.asm.ByteVector byteVector64 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector66 = byteVector64.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector68 = byteVector64.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector70 = byteVector68.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector72 = byteVector70.putInt((int) (short) 0);
        org.mockito.asm.ByteVector byteVector74 = byteVector70.putInt(92);
        label59.info = 92;
        methodVisitor20.visitJumpInsn(81, label59);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = label59.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(byteVector66);
        org.junit.Assert.assertNotNull(byteVector68);
        org.junit.Assert.assertNotNull(byteVector70);
        org.junit.Assert.assertNotNull(byteVector72);
        org.junit.Assert.assertNotNull(byteVector74);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("hi!", "");
        annotationVisitor7.visitEnd();
        org.mockito.asm.ByteVector byteVector13 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector15 = byteVector13.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector17 = byteVector13.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector19 = byteVector17.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector21 = byteVector17.putShort((-1));
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor7.visit("L1526910237", (java.lang.Object) byteVector17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@7001a8d9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(byteVector15);
        org.junit.Assert.assertNotNull(byteVector17);
        org.junit.Assert.assertNotNull(byteVector19);
        org.junit.Assert.assertNotNull(byteVector21);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor7.visitAnnotation("hi!", "");
        annotationVisitor7.visitEnum("java.io.IOException", "java.io.IOException", "hi!");
        annotationVisitor7.visitEnum("L1635572015", "java.io.IOException: java.io.IOException: ", "hi!");
        org.mockito.asm.ByteVector byteVector23 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector25 = byteVector23.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector27 = byteVector23.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector29 = byteVector27.putByte((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor7.visit("java.io.IOException: hi!", (java.lang.Object) byteVector29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@6cd1468c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteVector25);
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        long long17 = classReader12.readLong((int) (byte) 0);
        int int19 = classReader12.readUnsignedShort(0);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter21.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter21.visitAnnotation("hi!", false);
        classWriter21.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter21.visitAnnotation("", true);
        int int37 = classWriter21.newClass("java.io.IOException: ");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter21, (-21316096));
        java.lang.String str40 = classReader12.getSuperName();
        char[] charArray45 = new char[] { '#', '4', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = classReader12.readConst(0, charArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3819410108757049244L) + "'", long17 == (-3819410108757049244L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51966 + "'", int19 == 51966);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.io.IOException: hi!" + "'", str40, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "#44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "#44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#, 4, 4]");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitCode();
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        java.lang.Object obj35 = label34.info;
        java.lang.Object obj36 = label34.info;
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        java.lang.Object obj38 = label37.info;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        methodVisitor67.visitInsn(100);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        label73.info = (-1);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        methodVisitor67.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label73, label76, 8);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        java.lang.Object obj81 = label80.info;
        org.mockito.asm.Label label82 = new org.mockito.asm.Label();
        label82.info = (-1);
        org.mockito.asm.Label[] labelArray85 = new org.mockito.asm.Label[] { label37, label73, label79, label80, label82 };
        methodVisitor28.visitTableSwitchInsn(8, (int) '4', label34, labelArray85);
        methodVisitor28.visitFieldInsn((int) (short) 0, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor28.visitParameterAnnotation(10, "java.io.IOException: hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(labelArray85);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter17.newNameType("", "java.io.IOException");
        int int25 = classWriter17.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int27 = classWriter17.newConst((java.lang.Object) 10L);
        classWriter17.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter17.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter17, 51966);
        long long39 = classReader12.readLong(81);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader12.readInt((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2624986962354548L + "'", long39 == 2624986962354548L);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        annotationVisitor7.visit("", (java.lang.Object) 0);
        org.junit.Assert.assertNotNull(annotationVisitor7);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        methodVisitor28.visitCode();
        java.lang.Class<?> wildcardClass39 = methodVisitor28.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("java.io.IOException: ", true);
        annotationVisitor15.visitEnum("java.io.IOException: hi!", "hi!", "java.io.IOException: ");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        classWriter22.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray30);
        byte[] byteArray32 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter35.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter35.visitAnnotation("hi!", false);
        classWriter35.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!" };
        classWriter52.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter35.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray60);
        methodVisitor62.visitInsn(100);
        org.mockito.asm.Label label68 = new org.mockito.asm.Label();
        label68.info = (-1);
        org.mockito.asm.Label label71 = new org.mockito.asm.Label();
        methodVisitor62.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label68, label71, 8);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int78 = classWriter75.newNameType("", "java.io.IOException");
        label71.info = classWriter75;
        org.mockito.asm.Attribute[] attributeArray80 = new org.mockito.asm.Attribute[] {};
        classReader33.accept((org.mockito.asm.ClassVisitor) classWriter75, attributeArray80, 0);
        byte[] byteArray83 = classWriter75.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor15.visit("java.io.IOException: ", (java.lang.Object) classWriter75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@32e03225");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(attributeArray80);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 7, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 5, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 8, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 4, 0, 6, 0, 2, 0, 7, 0, 9, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 2, 0, 2]");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        char[] charArray20 = new char[] { ' ', ' ', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = classReader12.readClass(5, charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "  a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "  a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ ,  , a]");
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor59.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        methodVisitor59.visitEnd();
        methodVisitor59.visitCode();
        org.mockito.asm.Label label71 = new org.mockito.asm.Label();
        java.lang.Object obj72 = label71.info;
        java.lang.Object obj73 = label71.info;
        methodVisitor59.visitJumpInsn((int) (short) 1, label71);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = label71.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "java.io.IOException: ", "java.io.IOException", "hi!" };
        classWriter1.visit(1, 254, "", "java.io.IOException: hi!", "hi!", strArray20);
        classWriter1.visitSource("java.io.IOException", "java.io.IOException: hi!");
        int int26 = classWriter1.newUTF8("L781877917");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        classWriter28.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray36);
        byte[] byteArray38 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        int int41 = classReader39.readByte((int) (byte) 1);
        int int43 = classReader39.readByte(11);
        byte[] byteArray44 = classReader39.b;
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int50 = classWriter46.newField("hi!", "hi!", "hi!");
        int int52 = classWriter46.newClass("java.io.IOException");
        classReader39.accept((org.mockito.asm.ClassVisitor) classWriter46, 92);
        int int56 = classReader39.readInt(8);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = classWriter1.newConst((java.lang.Object) classReader39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@2bb85e95");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 254 + "'", int41 == 254);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 655616 + "'", int56 == 655616);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        int int40 = classReader37.header;
        java.lang.String str41 = classReader37.getSuperName();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter1.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor47 = methodVisitor43.visitParameterAnnotation(48640, "java.io.IOException: java.io.IOException: ", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 92 + "'", int40 == 92);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.io.IOException: hi!" + "'", str41, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label35.info = "java.io.IOException: hi!";
        java.lang.String str52 = label35.toString();
        java.lang.String str53 = label35.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = label35.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(annotationVisitor45);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "L1698917174" + "'", str52, "L1698917174");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "L1698917174" + "'", str53, "L1698917174");
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int68 = classWriter63.newMethod("java.io.IOException: hi!", "hi!", "", true);
        classWriter63.visitOuterClass("", "java.io.IOException: hi!", "L1335427656");
        org.mockito.asm.Attribute attribute73 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter63.visitAttribute(attribute73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        org.mockito.asm.Attribute attribute16 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        char[] charArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = classReader12.readConst((int) (byte) 1, charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        int int16 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "", true);
        classWriter1.visitEnd();
        int int19 = classWriter1.newClass("L1432403946");
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        classWriter25.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray33);
        byte[] byteArray35 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray35, 0, 0);
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray35);
        byte[] byteArray40 = classReader39.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor41 = classWriter1.visitField((int) (short) -326, "L2066229866", "L781877917", "L1635572015", (java.lang.Object) classReader39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@1a91a8e0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 13 + "'", int19 == 13);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter18.newField("hi!", "hi!", "hi!");
        classWriter18.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor29 = classWriter18.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter18.visitAnnotation("java.io.IOException", true);
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(9, "L2066229866", "", "L2066229866", (java.lang.Object) "java.io.IOException");
        org.mockito.asm.Attribute attribute34 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(fieldVisitor33);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter28.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        classWriter45.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray53);
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter28.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray53);
        methodVisitor55.visitInsn(100);
        org.mockito.asm.Label label61 = new org.mockito.asm.Label();
        label61.info = (-1);
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        methodVisitor55.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label61, label64, 8);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int71 = classWriter68.newNameType("", "java.io.IOException");
        label64.info = classWriter68;
        org.mockito.asm.Attribute[] attributeArray73 = new org.mockito.asm.Attribute[] {};
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter68, attributeArray73, 0);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 10);
        int int79 = classReader26.readByte(3);
        java.lang.String[] strArray80 = classReader26.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter1.visitMethod((int) ' ', "L478252604", "L478252604", "L1635572015", strArray80);
        org.mockito.asm.FieldVisitor fieldVisitor87 = classWriter1.visitField(3, "L1432403946", "L1131836979", "", (java.lang.Object) "java.io.IOException: ");
        classWriter1.visitInnerClass("L1432403946", "L176482898", "java.io.IOException: hi!", 14);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertNotNull(attributeArray73);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 190 + "'", int79 == 190);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(fieldVisitor87);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putInt((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter6 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        classWriter6.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray14);
        byte[] byteArray16 = classWriter6.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray16, 0, 0);
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector23 = byteVector2.putByteArray(byteArray16, 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        label69.info = 655616;
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte((int) (byte) 1);
        int int30 = classReader26.readByte(11);
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        int int39 = classWriter33.newClass("java.io.IOException");
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter33, 92);
        int int45 = classWriter33.newField("java.io.IOException: ", "hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        byte[] byteArray57 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        java.lang.String[] strArray59 = classReader58.getInterfaces();
        int int61 = classReader58.readByte(8);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" };
        classWriter63.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray71);
        org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter63.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute79 = null;
        org.mockito.asm.Attribute[] attributeArray80 = new org.mockito.asm.Attribute[] { attribute79 };
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter63, attributeArray80, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter33, attributeArray80, (int) (short) 0);
        char[] charArray88 = new char[] { '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = classReader12.readUTF8((int) (short) -1, charArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 254 + "'", int28 == 254);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 14 + "'", int45 == 14);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(fieldVisitor78);
        org.junit.Assert.assertNotNull(attributeArray80);
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[4, #]");
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter16.newField("hi!", "hi!", "hi!");
        classWriter16.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter16.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter16.visitAnnotation("java.io.IOException", true);
        int int31 = classWriter1.newConst((java.lang.Object) true);
        java.io.IOException iOException35 = new java.io.IOException();
        java.io.IOException iOException36 = new java.io.IOException("hi!", (java.lang.Throwable) iOException35);
        java.io.IOException iOException37 = new java.io.IOException("", (java.lang.Throwable) iOException35);
        java.io.IOException iOException38 = new java.io.IOException((java.lang.Throwable) iOException37);
        java.io.IOException iOException40 = new java.io.IOException();
        java.io.IOException iOException41 = new java.io.IOException("hi!", (java.lang.Throwable) iOException40);
        iOException38.addSuppressed((java.lang.Throwable) iOException41);
        java.io.IOException iOException45 = new java.io.IOException();
        java.io.IOException iOException46 = new java.io.IOException("hi!", (java.lang.Throwable) iOException45);
        java.io.IOException iOException47 = new java.io.IOException("", (java.lang.Throwable) iOException45);
        java.io.IOException iOException48 = new java.io.IOException((java.lang.Throwable) iOException47);
        java.io.IOException iOException50 = new java.io.IOException();
        java.io.IOException iOException51 = new java.io.IOException("hi!", (java.lang.Throwable) iOException50);
        iOException48.addSuppressed((java.lang.Throwable) iOException51);
        iOException41.addSuppressed((java.lang.Throwable) iOException51);
        java.io.IOException iOException54 = new java.io.IOException("hi!", (java.lang.Throwable) iOException51);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = classWriter1.newConst((java.lang.Object) iOException51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int29 = classWriter26.newNameType("", "java.io.IOException");
        int int34 = classWriter26.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter26.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter26.visitAnnotation("hi!", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter1.visitField(2, "L1502377119", "L1035695636", "L1335427656", (java.lang.Object) classWriter26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@144ef69a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        char[] charArray65 = new char[] { ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = classReader12.readClass(4, charArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[ ]");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter18.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter18.visitAnnotation("hi!", false);
        int int26 = classWriter18.newUTF8("java.io.IOException");
        int int29 = classWriter18.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter18.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        classWriter18.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        byte[] byteArray47 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray47);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter50.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter50.visitAnnotation("hi!", false);
        classWriter50.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!" };
        classWriter67.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray75);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter50.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray75);
        methodVisitor77.visitInsn(100);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        label83.info = (-1);
        org.mockito.asm.Label label86 = new org.mockito.asm.Label();
        methodVisitor77.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label83, label86, 8);
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int93 = classWriter90.newNameType("", "java.io.IOException");
        label86.info = classWriter90;
        org.mockito.asm.Attribute[] attributeArray95 = new org.mockito.asm.Attribute[] {};
        classReader48.accept((org.mockito.asm.ClassVisitor) classWriter90, attributeArray95, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter18, attributeArray95, 8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertNotNull(attributeArray95);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader12.readUnsignedShort(51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader12.getItem((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        java.lang.String str14 = classReader12.getClassName();
        char[] charArray21 = new char[] { '#', '#', 'a', 'a', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = classReader12.readUTF8(202, charArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException" + "'", str14, "java.io.IOException");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "##aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "##aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, #, a, a,  ]");
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        byte[] byteArray31 = classReader12.b;
        char[] charArray37 = new char[] { 'a', '#', 'a', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader12.readClass(11, charArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "a#a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "a#a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[a, #, a, #]");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitMethodInsn(10, "hi!", "hi!", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter36.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter36.visitAnnotation("hi!", false);
        classWriter36.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        classWriter53.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter36.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray61);
        methodVisitor63.visitInsn(100);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        label69.info = (-1);
        org.mockito.asm.Label label72 = new org.mockito.asm.Label();
        methodVisitor63.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label69, label72, 8);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int79 = classWriter76.newNameType("", "java.io.IOException");
        label72.info = classWriter76;
        java.lang.String str81 = label72.toString();
        methodVisitor28.visitJumpInsn((-1), label72);
        methodVisitor28.visitIincInsn((int) (short) 0, 3);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L853084801" + "'", str81, "L853084801");
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(14);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("java.io.IOException", false);
        org.mockito.asm.Attribute attribute8 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int68 = classWriter63.newMethod("java.io.IOException: hi!", "hi!", "", true);
        int int73 = classWriter63.newMethod("java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", false);
        classWriter63.visitEnd();
        classWriter63.visitInnerClass("L1335427656", "L1502377119", "hi!", 1024);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 13 + "'", int73 == 13);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1432403946", true);
        annotationVisitor11.visitEnum("L616447458", "L630721910", "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor11);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        byte[] byteArray15 = classReader12.b;
        java.lang.String[] strArray16 = classReader12.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = classReader12.readLong((int) (short) -326);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -326");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        int int40 = classReader37.header;
        java.lang.String str41 = classReader37.getSuperName();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter1.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray42);
        org.mockito.asm.Label label44 = new org.mockito.asm.Label();
        java.lang.Object obj45 = label44.info;
        java.lang.Object obj46 = label44.info;
        methodVisitor43.visitLabel(label44);
        methodVisitor43.visitIntInsn(48640, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor54 = methodVisitor43.visitParameterAnnotation((int) (short) 0, "hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 92 + "'", int40 == 92);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.io.IOException: hi!" + "'", str41, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitFieldInsn((int) ' ', "java.io.IOException: hi!", "java.io.IOException: ", "L1335427656");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        byte[] byteArray47 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray47);
        int int50 = classReader48.readByte((int) (byte) 1);
        int int51 = classReader48.header;
        java.lang.String str52 = classReader48.getSuperName();
        byte[] byteArray53 = classReader48.b;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLdcInsn((java.lang.Object) classReader48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@4ddd5d21");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 254 + "'", int50 == 254);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 92 + "'", int51 == 92);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.io.IOException: hi!" + "'", str52, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.ByteVector byteVector20 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector22 = byteVector20.putUTF8("");
        org.mockito.asm.ByteVector byteVector24 = byteVector22.putByte((int) (short) 100);
        org.mockito.asm.ByteVector byteVector26 = byteVector22.putUTF8("java.io.IOException");
        org.mockito.asm.ByteVector byteVector28 = byteVector26.putUTF8("L1335427656");
        org.mockito.asm.FieldVisitor fieldVisitor29 = classWriter1.visitField(5, "", "L1145278557", "L616447458", (java.lang.Object) "L1335427656");
        org.mockito.asm.Attribute attribute30 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor29.visitAttribute(attribute30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteVector22);
        org.junit.Assert.assertNotNull(byteVector24);
        org.junit.Assert.assertNotNull(byteVector26);
        org.junit.Assert.assertNotNull(byteVector28);
        org.junit.Assert.assertNotNull(fieldVisitor29);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("L1335427656", "L852881485", "java.io.IOException", 13);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '#');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int10 = classWriter7.newNameType("", "java.io.IOException");
        int int15 = classWriter7.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter7.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter7.visitAnnotation("hi!", true);
        classWriter7.visitEnd();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int26 = classWriter22.newField("hi!", "hi!", "hi!");
        classWriter22.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter22.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter22.visitAnnotation("java.io.IOException", true);
        int int37 = classWriter7.newConst((java.lang.Object) true);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter44.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter44.visitAnnotation("hi!", false);
        classWriter44.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter44.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        classWriter65.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray73);
        byte[] byteArray75 = classWriter65.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray75);
        java.lang.String[] strArray77 = classReader76.getInterfaces();
        classWriter44.visit((int) (short) 4970, 5, "", "hi!", "", strArray77);
        classWriter7.visit((int) '#', (int) (byte) 1, "L852881485", "L1335427656", "L1131836979", strArray77);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor80 = classWriter1.visitMethod(11, "L886841972", "L71767159", "L852881485", strArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 9");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray77);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putByte(0);
        org.mockito.asm.ByteVector byteVector6 = byteVector2.putLong(5464991387954793L);
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putByte((int) (byte) 10);
        org.mockito.asm.ByteVector byteVector10 = byteVector8.putByte((int) (short) 256);
        org.mockito.asm.ByteVector byteVector12 = byteVector8.putByte(6);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int18 = classWriter14.newField("hi!", "hi!", "hi!");
        classWriter14.visitEnd();
        classWriter14.visitSource("java.io.IOException", "");
        classWriter14.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray26 = classWriter14.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        byte[] byteArray28 = classReader27.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector31 = byteVector8.putByteArray(byteArray28, 51966, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertNotNull(byteVector12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        char[] charArray19 = new char[] { '#', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = classReader12.readConst(2, charArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "ja");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[j, a]");
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(classReader12, (int) '#');
        char[] charArray20 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = classReader12.readUTF8(14, charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24950");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[]");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(3, (int) (byte) 0);
        methodVisitor28.visitInsn((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int41 = classWriter38.newNameType("", "java.io.IOException");
        int int46 = classWriter38.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter38.visitEnd();
        classWriter38.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter38.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        classWriter38.visitOuterClass("java.io.IOException", "java.io.IOException", "java.io.IOException: ");
        methodVisitor28.visitLdcInsn((java.lang.Object) "java.io.IOException: ");
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter64.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter64.visitAnnotation("hi!", false);
        int int72 = classWriter64.newUTF8("java.io.IOException");
        int int75 = classWriter64.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter64.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        classWriter64.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLdcInsn((java.lang.Object) classWriter64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@765953f8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int17 = classWriter13.newField("hi!", "hi!", "hi!");
        classWriter13.visitEnd();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter24.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter24.visitAnnotation("hi!", false);
        classWriter24.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        classWriter41.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor51 = classWriter24.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor52 = classWriter13.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray49);
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter1.visitMethod((int) (short) 100, "java.io.IOException: ", "L1635572015", "L852881485", strArray49);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor51);
        org.junit.Assert.assertNotNull(methodVisitor52);
        org.junit.Assert.assertNotNull(methodVisitor53);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        java.io.IOException iOException42 = new java.io.IOException();
        java.io.IOException iOException45 = new java.io.IOException();
        java.io.IOException iOException46 = new java.io.IOException("hi!", (java.lang.Throwable) iOException45);
        java.io.IOException iOException47 = new java.io.IOException("", (java.lang.Throwable) iOException45);
        iOException42.addSuppressed((java.lang.Throwable) iOException47);
        java.io.IOException iOException49 = new java.io.IOException((java.lang.Throwable) iOException42);
        java.lang.Throwable[] throwableArray50 = iOException42.getSuppressed();
        java.lang.Throwable[] throwableArray51 = iOException42.getSuppressed();
        java.io.IOException iOException56 = new java.io.IOException();
        java.io.IOException iOException57 = new java.io.IOException("hi!", (java.lang.Throwable) iOException56);
        java.lang.Throwable[] throwableArray58 = iOException57.getSuppressed();
        java.io.IOException iOException59 = new java.io.IOException("L1635572015", (java.lang.Throwable) iOException57);
        java.io.IOException iOException60 = new java.io.IOException("L2066229866", (java.lang.Throwable) iOException59);
        java.lang.Throwable[] throwableArray61 = iOException60.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitFrame(0, 186, (java.lang.Object[]) throwableArray51, 9, (java.lang.Object[]) throwableArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.io.IOException cannot be cast to org.mockito.asm.Label");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        java.lang.String str15 = classReader12.getClassName();
        long long17 = classReader12.readLong(16);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = classReader12.readLong(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException" + "'", str15, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7002650396846542661L + "'", long17 == 7002650396846542661L);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        classWriter16.visitEnd();
        org.mockito.asm.Attribute attribute29 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter16.visitAttribute(attribute29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        classWriter1.visitInnerClass("java.io.IOException", "", "java.io.IOException", 190);
        org.mockito.asm.Attribute attribute18 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String str17 = classReader12.getSuperName();
        char[] charArray24 = new char[] { ' ', '4', 'a', ' ', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = classReader12.readUTF8((int) ' ', charArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException: hi!" + "'", str17, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " 4a a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " 4a a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , 4, a,  , a]");
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitInsn((int) (byte) 0);
        org.mockito.asm.Label label36 = new org.mockito.asm.Label();
        java.lang.Object obj37 = label36.info;
        java.lang.Object obj38 = label36.info;
        methodVisitor28.visitJumpInsn((int) (byte) -1, label36);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        classWriter41.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray49);
        byte[] byteArray51 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray51, 0, 0);
        java.lang.String str55 = classReader54.getSuperName();
        label36.info = classReader54;
        // The following exception was thrown during execution in test generation
        try {
            short short58 = classReader54.readShort((-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -21316096");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.io.IOException: hi!" + "'", str55, "java.io.IOException: hi!");
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("L1526910237", false);
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int11 = classWriter8.newNameType("", "java.io.IOException");
        int int13 = classWriter8.newClass("java.io.IOException");
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        classWriter20.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray28);
        classWriter8.visit((int) (short) 0, (int) (byte) 1, "java.io.IOException: hi!", "java.io.IOException: hi!", "java.io.IOException", strArray28);
        classWriter1.visit(7, 10, "L1635572015", "L71767159", "L1335427656", strArray28);
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(strArray28);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = classReader12.getItem((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        long long17 = classReader12.readLong((int) (byte) 0);
        int int19 = classReader12.readUnsignedShort(0);
        int int21 = classReader12.readByte((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = classReader12.getItem(76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 76");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3819410108757049244L) + "'", long17 == (-3819410108757049244L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 51966 + "'", int19 == 51966);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter19.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter19.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int41 = classWriter37.newField("hi!", "hi!", "hi!");
        classWriter37.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter48.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter48.visitAnnotation("hi!", false);
        classWriter48.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        classWriter65.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter48.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter37.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter19.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray73);
        classWriter1.visit(0, (int) (byte) 10, "", "java.io.IOException: hi!", "java.io.IOException", strArray73);
        org.mockito.asm.Attribute attribute79 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(methodVisitor77);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader14.getItem(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter41.newNameType("", "java.io.IOException");
        int int49 = classWriter41.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter41.visitEnd();
        label34.info = classWriter41;
        byte[] byteArray52 = classWriter41.toByteArray();
        classWriter41.visitEnd();
        org.mockito.asm.Attribute attribute54 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter41.visitAttribute(attribute54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(classReader12, (int) '#');
        java.lang.String str19 = classReader12.getSuperName();
        char[] charArray27 = new char[] { '4', 'a', 'a', '4', ' ', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = classReader12.readConst(1024, charArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1024");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "4aa4  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "4aa4  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[4, a, a, 4,  ,  ]");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        java.lang.String str15 = classReader14.getSuperName();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int21 = classWriter17.newField("hi!", "hi!", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            classReader14.accept((org.mockito.asm.ClassVisitor) classWriter17, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int23 = classReader19.readByte(11);
        byte[] byteArray24 = classReader19.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 202, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        char[] charArray22 = new char[] { 'a', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = classReader12.readUTF8(254, charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 254");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #]");
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        java.lang.Object obj65 = label64.info;
        java.lang.Object obj66 = label64.info;
        methodVisitor59.visitJumpInsn((int) '4', label64);
        methodVisitor59.visitFieldInsn(17, "L1635572015", "L71767159", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor59.visitAnnotationDefault();
        java.lang.Class<?> wildcardClass74 = annotationVisitor73.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = annotationVisitor13.visitArray("java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor15.visitAnnotation("hi!", "java.io.IOException");
        annotationVisitor18.visitEnum("L717126513", "", "L1502377119");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        int int13 = classWriter1.newConst((java.lang.Object) 0L);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newUTF8("hi!");
        classWriter19.visitEnd();
        classWriter19.visitEnd();
        java.lang.String[] strArray37 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter19.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray37);
        methodVisitor38.visitEnd();
        methodVisitor38.visitIntInsn((int) '4', 13);
        methodVisitor38.visitCode();
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter47.visitEnd();
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" };
        classWriter55.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        classWriter47.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        java.lang.Object[] objArray67 = null;
        methodVisitor38.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray63, 9, objArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(4, "L71767159", "L1335427656", "java.io.IOException: hi!", strArray63);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int78 = classWriter75.newNameType("", "java.io.IOException");
        int int83 = classWriter75.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int85 = classWriter75.newUTF8("hi!");
        classWriter75.visitEnd();
        classWriter75.visitEnd();
        java.lang.String[] strArray93 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter75.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray93);
        methodVisitor94.visitEnd();
        methodVisitor94.visitIntInsn((int) '4', 13);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor99 = classWriter1.visitField(13, "L478252604", "", "java.io.IOException: ", (java.lang.Object) methodVisitor94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@507e02d3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = classReader63.readUnsignedShort(1024);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        int int13 = classWriter1.newConst((java.lang.Object) 0L);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newUTF8("hi!");
        classWriter19.visitEnd();
        classWriter19.visitEnd();
        java.lang.String[] strArray37 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter19.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray37);
        methodVisitor38.visitEnd();
        methodVisitor38.visitIntInsn((int) '4', 13);
        methodVisitor38.visitCode();
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter47.visitEnd();
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" };
        classWriter55.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        classWriter47.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        java.lang.Object[] objArray67 = null;
        methodVisitor38.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray63, 9, objArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(4, "L71767159", "L1335427656", "java.io.IOException: hi!", strArray63);
        org.mockito.asm.Attribute attribute70 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        methodVisitor60.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        java.lang.Object obj68 = label67.info;
        methodVisitor60.visitJumpInsn(3, label67);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter71.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter71.visitAnnotation("hi!", false);
        classWriter71.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label67.info = "java.io.IOException: hi!";
        java.lang.String str84 = label67.toString();
        java.lang.String str85 = label67.toString();
        methodVisitor28.visitJumpInsn(0, label67);
        methodVisitor28.visitEnd();
        org.mockito.asm.Attribute attribute88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(annotationVisitor77);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L350895103" + "'", str84, "L350895103");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L350895103" + "'", str85, "L350895103");
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        java.lang.String str15 = classReader12.getClassName();
        char[] charArray21 = new char[] { ' ', ' ', 'a', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = classReader12.readUTF8(10, charArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException" + "'", str15, "java.io.IOException");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ ,  , a,  ]");
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter14.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter35.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray43);
        byte[] byteArray45 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        java.lang.String[] strArray47 = classReader46.getInterfaces();
        classWriter14.visit((int) (short) 4970, 5, "", "hi!", "", strArray47);
        classWriter7.visit(0, 5, "L616447458", "L616447458", "", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod(48640, "L1704178553", "L1603039582", "L1603039582", strArray47);
        int int52 = classWriter1.newClass("");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitOuterClass("java.io.IOException: hi!", "L1635572015", "L1035695636");
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        int int18 = classWriter1.newClass("");
        int int21 = classWriter1.newNameType("java.io.IOException: ", "java.io.IOException: java.io.IOException: ");
        org.mockito.asm.Attribute attribute22 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        char[] charArray66 = new char[] { 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = classReader63.readUTF8(17, charArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11881");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray66), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray66), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray66), "[a]");
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = classReader12.getItem(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute13 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        java.lang.String str19 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader12.readUnsignedShort(16782186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.getAccess();
        int int16 = classReader12.getAccess();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter18.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter18.visitAnnotation("hi!", false);
        int int27 = classWriter18.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        byte[] byteArray39 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        java.lang.String[] strArray41 = classReader40.getInterfaces();
        int int43 = classReader40.readByte(8);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        classWriter45.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray53);
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter45.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute61 = null;
        org.mockito.asm.Attribute[] attributeArray62 = new org.mockito.asm.Attribute[] { attribute61 };
        classReader40.accept((org.mockito.asm.ClassVisitor) classWriter45, attributeArray62, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter18, attributeArray62, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = classReader12.readByte(655616);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 655616");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(attributeArray62);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        char[] charArray23 = new char[] { 'a', '4', '4', ' ', '4', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = classReader12.readUTF8(12, charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "a44 4 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "a44 4 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, 4, 4,  , 4,  ]");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter19.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter19.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int41 = classWriter37.newField("hi!", "hi!", "hi!");
        classWriter37.visitEnd();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter48.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter48.visitAnnotation("hi!", false);
        classWriter48.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        classWriter65.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter48.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter37.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray73);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter19.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray73);
        classWriter1.visit(3, 254, "java.io.IOException: ", "", "", strArray73);
        classWriter1.visitOuterClass("L1145278557", "L1131836979", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter1.visitAnnotation("L1335427656", false);
        annotationVisitor85.visitEnum("L616447458", "L1335427656", "L367481933");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        java.lang.String str63 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter65.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter65.visitAnnotation("hi!", false);
        int int73 = classWriter65.newUTF8("java.io.IOException");
        int int76 = classWriter65.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter65.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter65, 0);
        char[] charArray85 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = classReader12.readClass(6, charArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.io.IOException: hi!" + "'", str63, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[]");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        java.lang.Object obj22 = null;
        org.mockito.asm.FieldVisitor fieldVisitor23 = classWriter1.visitField((int) (byte) 10, "", "hi!", "L1335427656", obj22);
        org.mockito.asm.Attribute attribute24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor23.visitAttribute(attribute24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor23);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        char[] charArray18 = new char[] { ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = classReader14.readClass(186, charArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ ]");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label35.info = "java.io.IOException: hi!";
        java.lang.String str52 = label35.toString();
        java.lang.Object obj53 = label35.info;
        // The following exception was thrown during execution in test generation
        try {
            int int54 = label35.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(annotationVisitor45);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "L1522786839" + "'", str52, "L1522786839");
        org.junit.Assert.assertEquals("'" + obj53 + "' != '" + "java.io.IOException: hi!" + "'", obj53, "java.io.IOException: hi!");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.getAccess();
        short short16 = classReader12.readShort(4);
        int int17 = classReader12.getAccess();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 0 + "'", short16 == (short) 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        byte[] byteArray16 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray16, 76, 51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 214");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("L630721910", "L1145278557", "java.io.IOException", 0);
        int int16 = classWriter1.newField("", "L630721910", "L478252604");
        org.mockito.asm.Attribute attribute17 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1432403946", true);
        annotationVisitor11.visitEnum("L2066229866", "L852881485", "L643431443");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor11);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        java.lang.Object obj22 = null;
        org.mockito.asm.FieldVisitor fieldVisitor23 = classWriter1.visitField((int) (byte) 10, "", "hi!", "L1335427656", obj22);
        classWriter1.visitOuterClass("", "L71767159", "L1635572015");
        org.mockito.asm.Attribute attribute28 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor23);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        int int18 = classWriter1.newClass("");
        int int21 = classWriter1.newNameType("java.io.IOException: ", "java.io.IOException: java.io.IOException: ");
        int int24 = classWriter1.newNameType("L1035695636", "L1704178553");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        int int38 = classWriter30.newUTF8("java.io.IOException");
        int int41 = classWriter30.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int51 = classWriter48.newNameType("", "java.io.IOException");
        int int56 = classWriter48.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int58 = classWriter48.newConst((java.lang.Object) 10L);
        classWriter48.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter69.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter69.visitAnnotation("hi!", false);
        classWriter69.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray94 = new java.lang.String[] { "", "hi!" };
        classWriter86.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray94);
        org.mockito.asm.MethodVisitor methodVisitor96 = classWriter69.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray94);
        org.mockito.asm.MethodVisitor methodVisitor97 = classWriter48.visitMethod((int) (short) 4970, "L1335427656", "java.io.IOException: ", "L1335427656", strArray94);
        classWriter30.visit((int) (short) 10, 9, "hi!", "java.io.IOException", "L71767159", strArray94);
        org.mockito.asm.MethodVisitor methodVisitor99 = classWriter1.visitMethod(0, "L1603039582", "L852881485", "", strArray94);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(methodVisitor96);
        org.junit.Assert.assertNotNull(methodVisitor97);
        org.junit.Assert.assertNotNull(methodVisitor99);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putInt((int) (short) 0);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        byte[] byteArray20 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray20);
        int int23 = classReader21.readByte((int) (byte) 1);
        int int25 = classReader21.readByte(11);
        byte[] byteArray26 = classReader21.b;
        int int27 = classReader21.header;
        byte[] byteArray28 = classReader21.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector31 = byteVector6.putByteArray(byteArray28, 7, 16782186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 254 + "'", int23 == 254);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 92 + "'", int27 == 92);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        java.lang.String str63 = classReader12.getSuperName();
        char[] charArray67 = new char[] { 'a', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = classReader12.readClass(16782186, charArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16782186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.io.IOException: hi!" + "'", str63, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[a, a]");
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        java.lang.String str63 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter65.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter65.visitAnnotation("hi!", false);
        int int73 = classWriter65.newUTF8("java.io.IOException");
        int int76 = classWriter65.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter65.visitInnerClass("", "java.io.IOException: hi!", "hi!", (int) 'a');
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter65, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = classReader12.readInt(51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.io.IOException: hi!" + "'", str63, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        char[] charArray22 = new char[] { 'a', 'a', '4', ' ', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = classReader12.readConst(0, charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "aa4 #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "aa4 #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, a, 4,  , #]");
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitCode();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter29.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        classWriter29.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        java.lang.Object[] objArray49 = null;
        methodVisitor20.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray45, 9, objArray49);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int56 = classWriter52.newField("hi!", "hi!", "hi!");
        int int58 = classWriter52.newClass("java.io.IOException");
        classWriter52.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter52.visitAnnotation("L1432403946", true);
        byte[] byteArray63 = classWriter52.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor20.visitLdcInsn((java.lang.Object) classWriter52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@4f97c8fd");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 11, 76, 49, 52, 51, 50, 52, 48, 51, 57, 52, 54, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 6, 0, 1, 0, 7, 0, 0]");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        int int21 = classReader12.readByte(8);
        short short23 = classReader12.readShort(0);
        int int25 = classReader12.readInt(9);
        int int26 = classReader12.getAccess();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) -13570 + "'", short23 == (short) -13570);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 167837715 + "'", int25 == 167837715);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        byte[] byteArray15 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(classReader12, 10);
        org.mockito.asm.Attribute attribute18 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter17.visitAttribute(attribute18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        java.lang.String[] strArray12 = null;
        org.mockito.asm.MethodVisitor methodVisitor13 = classWriter1.visitMethod((int) (short) 10, "L2066229866", "L1145278557", "L616447458", strArray12);
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(methodVisitor13);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        byte[] byteArray28 = classWriter15.toByteArray();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter34.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter34.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter34.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter15.visitField(4, "L852881485", "L852881485", "java.io.IOException: ", (java.lang.Object) false);
        classWriter15.visitInnerClass("L1526910237", "L1131836979", "L71767159", 10);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, 10);
        char[] charArray56 = new char[] { ' ', ' ', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = classReader12.readClass(19, charArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28462");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 10, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(fieldVisitor44);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "   ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "   ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[ ,  ,  ]");
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitIntInsn((int) (short) 0, 12);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor28.visitParameterAnnotation((int) (short) 0, "L176482898", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int7 = classWriter1.newNameType("L1335427656", "java.io.IOException");
        int int9 = classWriter1.newClass("L1131836979");
        org.mockito.asm.Attribute attribute10 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        methodVisitor28.visitVarInsn(0, (int) (short) -1);
        org.mockito.asm.Attribute attribute86 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor59.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        methodVisitor59.visitEnd();
        methodVisitor59.visitEnd();
        org.mockito.asm.Attribute attribute70 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor59.visitAttribute(attribute70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitCode();
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        java.lang.Object obj35 = label34.info;
        java.lang.Object obj36 = label34.info;
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        java.lang.Object obj38 = label37.info;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        methodVisitor67.visitInsn(100);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        label73.info = (-1);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        methodVisitor67.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label73, label76, 8);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        java.lang.Object obj81 = label80.info;
        org.mockito.asm.Label label82 = new org.mockito.asm.Label();
        label82.info = (-1);
        org.mockito.asm.Label[] labelArray85 = new org.mockito.asm.Label[] { label37, label73, label79, label80, label82 };
        methodVisitor28.visitTableSwitchInsn(8, (int) '4', label34, labelArray85);
        methodVisitor28.visitIincInsn(15, 2);
        methodVisitor28.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor28.visitParameterAnnotation(3, "L2066229866", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(labelArray85);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = methodVisitor59.visitAnnotation("L478252604", true);
        methodVisitor59.visitIincInsn((int) ' ', (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor69 = methodVisitor59.visitParameterAnnotation(100, "L1603039582", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter10.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter10.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter22.newNameType("", "java.io.IOException");
        int int30 = classWriter22.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int32 = classWriter22.newConst((java.lang.Object) 10L);
        int int34 = classWriter22.newUTF8("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor35 = classWriter10.visitField(3, "", "L478252604", "java.io.IOException: ", (java.lang.Object) "hi!");
        java.lang.Object obj40 = null;
        org.mockito.asm.FieldVisitor fieldVisitor41 = classWriter10.visitField((int) ' ', "hi!", "L71767159", "L1335427656", obj40);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = fieldVisitor41.visitAnnotation("L2066229866", false);
        int int45 = classWriter1.newConst((java.lang.Object) false);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor35);
        org.junit.Assert.assertNotNull(fieldVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitFieldInsn(3, "L781877917", "L1432403946", "");
        java.lang.Class<?> wildcardClass42 = methodVisitor28.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" };
        classWriter63.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray71);
        byte[] byteArray73 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        java.lang.String[] strArray75 = classReader74.getInterfaces();
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int81 = classWriter77.newField("hi!", "hi!", "hi!");
        int int83 = classWriter77.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor89 = classWriter77.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray90 = null;
        classReader74.accept((org.mockito.asm.ClassVisitor) classWriter77, attributeArray90, (int) (byte) 10);
        classWriter77.visitEnd();
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter77, 202);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = classReader12.readInt((int) (short) 4970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor89);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.Attribute attribute8 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        int int63 = classWriter54.newClass("");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray73 = new java.lang.String[] { "", "hi!" };
        classWriter65.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray73);
        byte[] byteArray75 = classWriter65.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray75);
        java.lang.String[] strArray77 = classReader76.getInterfaces();
        int int78 = classReader76.header;
        byte[] byteArray79 = classReader76.b;
        org.mockito.asm.ClassReader classReader80 = new org.mockito.asm.ClassReader(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = classWriter54.newConst((java.lang.Object) byteArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@1ae38953");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 92 + "'", int78 == 92);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int16 = classWriter13.newNameType("", "java.io.IOException");
        int int21 = classWriter13.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int23 = classWriter13.newConst((java.lang.Object) 10L);
        int int25 = classWriter13.newUTF8("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor26 = classWriter1.visitField(3, "", "L478252604", "java.io.IOException: ", (java.lang.Object) "hi!");
        java.lang.Object obj31 = null;
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField((int) ' ', "hi!", "L71767159", "L1335427656", obj31);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = fieldVisitor32.visitAnnotation("L2066229866", false);
        annotationVisitor35.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = annotationVisitor35.visitAnnotation("L781877917", "");
        annotationVisitor39.visitEnum("L1131836979", "L1131836979", "L478252604");
        annotationVisitor39.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = annotationVisitor39.visitAnnotation("L1502377119", "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor26);
        org.junit.Assert.assertNotNull(fieldVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor47);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        byte[] byteArray16 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader17.readUnsignedShort(167837715);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        int int3 = classWriter1.newClass("L852881485");
        org.mockito.asm.ClassWriter classWriter5 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" };
        classWriter5.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray13);
        byte[] byteArray15 = classWriter5.toByteArray();
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter18.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter18.visitAnnotation("hi!", false);
        classWriter18.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter35.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray43);
        org.mockito.asm.MethodVisitor methodVisitor45 = classWriter18.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray43);
        methodVisitor45.visitInsn(100);
        org.mockito.asm.Label label51 = new org.mockito.asm.Label();
        label51.info = (-1);
        org.mockito.asm.Label label54 = new org.mockito.asm.Label();
        methodVisitor45.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label51, label54, 8);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int61 = classWriter58.newNameType("", "java.io.IOException");
        label54.info = classWriter58;
        org.mockito.asm.Attribute[] attributeArray63 = new org.mockito.asm.Attribute[] {};
        classReader16.accept((org.mockito.asm.ClassVisitor) classWriter58, attributeArray63, 0);
        int int69 = classWriter58.newField("hi!", "", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter58.visitAnnotation("", true);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = classWriter1.newConst((java.lang.Object) annotationVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@1a3fadd2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodVisitor45);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(attributeArray63);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader12, 81);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray17);
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray17, 202, (-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader12, 190);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader12.readInt((int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        int int21 = classReader17.readByte((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader17, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2048");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitIntInsn((int) '4', 4);
        methodVisitor28.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor28.visitAnnotation("L176482898", false);
        methodVisitor28.visitVarInsn(2, 19);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader15.readInt((-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -21316096");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 10, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putByte(0);
        org.mockito.asm.ClassWriter classWriter6 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        classWriter6.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray14);
        byte[] byteArray16 = classWriter6.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        byte[] byteArray18 = classReader17.b;
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray18, 100, (int) (byte) 100);
        org.mockito.asm.ByteVector byteVector24 = byteVector4.putByteArray(byteArray18, 17, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray18, 17, 202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector24);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray13 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray13, 58, 81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 165");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        fieldVisitor13.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = fieldVisitor13.visitAnnotation("L616447458", false);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter20.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter20.visitAnnotation("hi!", false);
        int int28 = classWriter20.newUTF8("java.io.IOException");
        int int31 = classWriter20.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter20.visitSource("L1335427656", "");
        annotationVisitor17.visit("", (java.lang.Object) "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter26.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter26.visitAnnotation("hi!", false);
        classWriter26.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        classWriter43.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray51);
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter26.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray51);
        methodVisitor53.visitInsn(100);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        label59.info = (-1);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor53.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label59, label62, 8);
        methodVisitor53.visitVarInsn((int) '#', 8);
        java.lang.Class<?> wildcardClass68 = methodVisitor53.getClass();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor20.visitLdcInsn((java.lang.Object) wildcardClass68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value class org.mockito.asm.MethodWriter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector((int) (short) 0);
        org.mockito.asm.ByteVector byteVector3 = byteVector1.putInt((int) (byte) 10);
        org.mockito.asm.ByteVector byteVector5 = byteVector1.putUTF8("L1502377119");
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int11 = classWriter7.newField("hi!", "hi!", "hi!");
        int int13 = classWriter7.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor19 = classWriter7.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        byte[] byteArray20 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector24 = byteVector1.putByteArray(byteArray20, 202, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector3);
        org.junit.Assert.assertNotNull(byteVector5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 10, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector4.putByte(0);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int13 = classWriter10.newNameType("", "java.io.IOException");
        int int18 = classWriter10.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter10.visitEnd();
        classWriter10.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter10.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        classWriter10.visitOuterClass("java.io.IOException", "java.io.IOException", "java.io.IOException: ");
        byte[] byteArray34 = classWriter10.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector37 = byteVector8.putByteArray(byteArray34, (int) (short) 0, (int) (short) 256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 7, 0, 9, 7, 0, 6, 7, 0, 2, 12, 0, 2, 0, 9, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 4, 0, 12, 0, 13, 0, 15, 0, 0, 0, 18, 0, 2, 0, 10, 0, 11, 0, 1, 0, 100, 0, 10, 0, 11, 0, 1, 0, 10]");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        long long17 = classReader12.readLong((int) (byte) 0);
        byte[] byteArray18 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray18, 6, (int) (short) -326);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 293");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3819410108757049244L) + "'", long17 == (-3819410108757049244L));
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitCode();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter29.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        classWriter29.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        java.lang.Object[] objArray49 = null;
        methodVisitor20.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray45, 9, objArray49);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = methodVisitor20.visitAnnotationDefault();
        methodVisitor20.visitTypeInsn((int) (byte) 10, "L853084801");
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = methodVisitor20.visitAnnotation("L853084801", false);
        org.mockito.asm.Attribute attribute58 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor20.visitAttribute(attribute58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor57);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("java.io.IOException: ", true);
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor12.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor12.visitAnnotation("java.io.IOException", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = fieldVisitor12.visitAnnotation("hi!", true);
        annotationVisitor25.visitEnum("L1704178553", "L1131836979", "L853084801");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        java.lang.String str38 = label35.toString();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int43 = classWriter40.newNameType("", "java.io.IOException");
        int int48 = classWriter40.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter40.visitEnd();
        classWriter40.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter40.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        classWriter40.visitOuterClass("java.io.IOException", "java.io.IOException", "java.io.IOException: ");
        classWriter40.visitOuterClass("L852881485", "L1432403946", "hi!");
        classWriter40.visitInnerClass("L886841972", "L1035695636", "L1603039582", 12);
        label35.info = "L1603039582";
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "L181135275" + "'", str38, "L181135275");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("L1432403946", true);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField((int) (short) 100, "L71767159", "hi!", "L71767159", (java.lang.Object) (-91551935198370816L));
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor17.visitAnnotation("L781877917", false);
        org.mockito.asm.Attribute attribute21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor17.visitAttribute(attribute21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        byte[] byteArray17 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader12.getItem(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        int int16 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "", true);
        classWriter1.visitEnd();
        int int19 = classWriter1.newClass("L1432403946");
        int int24 = classWriter1.newMethod("java.io.IOException: java.io.IOException: ", "L367481933", "L181135275", true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 13 + "'", int19 == 13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        byte[] byteArray15 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(classReader12, 10);
        classWriter17.visitSource("java.io.IOException: hi!", "L3070851");
        classWriter17.visitSource("L1502377119", "L852881485");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        int int40 = classReader37.header;
        java.lang.String str41 = classReader37.getSuperName();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor43 = classWriter1.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray42);
        methodVisitor43.visitCode();
        methodVisitor43.visitMaxs((-889275714), (int) (short) 256);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor51 = methodVisitor43.visitParameterAnnotation(0, "L2054713387", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 92 + "'", int40 == 92);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.io.IOException: hi!" + "'", str41, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodVisitor43);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        classWriter1.visitOuterClass("java.io.IOException", "java.io.IOException", "java.io.IOException: ");
        int int26 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter33.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!" };
        classWriter54.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray62);
        byte[] byteArray64 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String[] strArray66 = classReader65.getInterfaces();
        classWriter33.visit((int) (short) 4970, 5, "", "hi!", "", strArray66);
        classWriter1.visit(51966, (int) (short) 10, "L1131836979", "L1131836979", "L1145278557", strArray66);
        org.mockito.asm.Attribute attribute69 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray66);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(classReader12, 11);
        int int20 = classReader12.header;
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 92 + "'", int20 == 92);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        byte[] byteArray18 = classReader12.b;
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray18, (int) (short) -1, 167837715);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        classWriter54.visitSource("java.io.IOException", "L2066229866");
        org.mockito.asm.Attribute attribute65 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter54.visitAttribute(attribute65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int65 = classReader12.readByte(3);
        java.lang.String str66 = classReader12.getSuperName();
        java.lang.String str67 = classReader12.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int69 = classReader12.readInt(167837715);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 167837715");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 190 + "'", int65 == 190);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.io.IOException: hi!" + "'", str66, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.io.IOException" + "'", str67, "java.io.IOException");
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String str14 = classReader12.getClassName();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        byte[] byteArray26 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        java.lang.String[] strArray28 = classReader27.getInterfaces();
        int int30 = classReader27.readByte(8);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        classWriter32.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray40);
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter32.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute48 = null;
        org.mockito.asm.Attribute[] attributeArray49 = new org.mockito.asm.Attribute[] { attribute48 };
        classReader27.accept((org.mockito.asm.ClassVisitor) classWriter32, attributeArray49, 0);
        classWriter32.visitOuterClass("L71767159", "L1335427656", "");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter32, 202);
        java.lang.String str58 = classReader12.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            long long60 = classReader12.readLong((int) (short) -17730);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -17730");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException" + "'", str14, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(attributeArray49);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "java.io.IOException" + "'", str58, "java.io.IOException");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(9);
        classWriter1.visitInnerClass("L1145278557", "java.io.IOException: hi!", "L630721910", 0);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader15.readByte(51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(3, (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor35.visitAnnotation("java.io.IOException: java.io.IOException: ", "L1432403946");
        annotationVisitor35.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader12.getItem(51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter22.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter22.visitAnnotation("hi!", false);
        classWriter22.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!" };
        classWriter39.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter22.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (short) 4970, "L1335427656", "java.io.IOException: ", "L1335427656", strArray47);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter53.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter53.visitAnnotation("hi!", false);
        classWriter53.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray78 = new java.lang.String[] { "", "hi!" };
        classWriter70.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray78);
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter53.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray78);
        methodVisitor80.visitInsn((int) (byte) 10);
        methodVisitor80.visitLdcInsn((java.lang.Object) 12);
        methodVisitor80.visitInsn((int) (byte) 0);
        org.mockito.asm.Label label88 = new org.mockito.asm.Label();
        java.lang.Object obj89 = label88.info;
        java.lang.Object obj90 = label88.info;
        methodVisitor80.visitJumpInsn((int) (byte) -1, label88);
        methodVisitor50.visitJumpInsn(15, label88);
        org.mockito.asm.Attribute attribute93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor50.visitAttribute(attribute93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        int int5 = classWriter1.newField("L71767159", "L1432403946", "java.io.IOException: ");
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        classWriter11.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray19);
        byte[] byteArray21 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray21);
        java.lang.String[] strArray23 = classReader22.getInterfaces();
        int int24 = classReader22.header;
        byte[] byteArray25 = classReader22.b;
        java.lang.String[] strArray26 = classReader22.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor27 = classWriter1.visitMethod((int) '4', "L643431443", "L717126513", "", strArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 10");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 92 + "'", int24 == 92);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        java.lang.String str17 = classReader12.getClassName();
        java.lang.String[] strArray18 = classReader12.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = classReader12.readByte((int) (short) 4970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        int int13 = classWriter1.newConst((java.lang.Object) 0L);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newUTF8("hi!");
        classWriter19.visitEnd();
        classWriter19.visitEnd();
        java.lang.String[] strArray37 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter19.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray37);
        methodVisitor38.visitEnd();
        methodVisitor38.visitIntInsn((int) '4', 13);
        methodVisitor38.visitCode();
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter47.visitEnd();
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" };
        classWriter55.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        classWriter47.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        java.lang.Object[] objArray67 = null;
        methodVisitor38.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray63, 9, objArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(4, "L71767159", "L1335427656", "java.io.IOException: hi!", strArray63);
        org.mockito.asm.ByteVector byteVector74 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector76 = byteVector74.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector78 = byteVector76.putByte(0);
        org.mockito.asm.ByteVector byteVector80 = byteVector76.putLong(5464991387954793L);
        org.mockito.asm.ByteVector byteVector82 = byteVector80.putByte((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor83 = classWriter1.visitField(6, "L1035695636", "java.io.IOException: java.io.IOException: ", "L478252604", (java.lang.Object) byteVector80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@700968c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(byteVector76);
        org.junit.Assert.assertNotNull(byteVector78);
        org.junit.Assert.assertNotNull(byteVector80);
        org.junit.Assert.assertNotNull(byteVector82);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitTypeInsn(11, "");
        methodVisitor28.visitFieldInsn((-1), "java.io.IOException: ", "L1131836979", "L2066229866");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor28.visitParameterAnnotation(51966, "L1635572015", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int64 = classReader12.getAccess();
        char[] charArray70 = new char[] { '4', ' ', '4', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = classReader12.readUTF8(100, charArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "\001\000\003h");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "\001\000\003h");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[\001, \000, \003, h]");
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitIincInsn(3, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int39 = classWriter36.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        classWriter45.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray53);
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter36.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray53);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!" };
        classWriter61.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray69);
        byte[] byteArray71 = classWriter61.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        int int74 = classReader72.readByte((int) (byte) 1);
        int int75 = classReader72.header;
        java.lang.String str76 = classReader72.getSuperName();
        java.lang.String[] strArray77 = classReader72.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter36.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray77);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        java.lang.Object obj80 = label79.info;
        java.lang.Object obj81 = label79.info;
        methodVisitor78.visitLabel(label79);
        methodVisitor28.visitLabel(label79);
        methodVisitor28.visitTypeInsn((int) '4', "L630721910");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 254 + "'", int74 == 254);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 92 + "'", int75 == 92);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java.io.IOException: hi!" + "'", str76, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitInsn((int) (byte) 0);
        methodVisitor28.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor37 = methodVisitor28.visitParameterAnnotation((int) (short) -17730, "L1145278557", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        methodVisitor60.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        java.lang.Object obj68 = label67.info;
        methodVisitor60.visitJumpInsn(3, label67);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter71.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter71.visitAnnotation("hi!", false);
        classWriter71.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label67.info = "java.io.IOException: hi!";
        java.lang.String str84 = label67.toString();
        java.lang.String str85 = label67.toString();
        methodVisitor28.visitJumpInsn(0, label67);
        methodVisitor28.visitEnd();
        methodVisitor28.visitFieldInsn(16, "L1335427656", "", "L630721910");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(annotationVisitor77);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L984287299" + "'", str84, "L984287299");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L984287299" + "'", str85, "L984287299");
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor36 = methodVisitor28.visitParameterAnnotation((int) '4', "L598330668", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor13 = classWriter1.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor13.visitAnnotation("L478252604", true);
        fieldVisitor13.visitEnd();
        fieldVisitor13.visitEnd();
        fieldVisitor13.visitEnd();
        fieldVisitor13.visitEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        byte[] byteArray15 = classReader12.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = classReader16.readLong(254);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 254");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitFieldInsn(3, "L781877917", "L1432403946", "");
        methodVisitor28.visitInsn((-1));
        methodVisitor28.visitIincInsn(16, 81);
        methodVisitor28.visitFieldInsn((int) (byte) 100, "hi!", "", "L1502377119");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor55 = methodVisitor28.visitParameterAnnotation((-21316096), "hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        char[] charArray23 = new char[] { '#', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = classReader12.readUTF8(63, charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "ja");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[j, a]");
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor59.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        methodVisitor59.visitIincInsn((int) (short) 6, 14);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        long long22 = classReader12.readLong(9);
        char[] charArray26 = new char[] { '4', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = classReader12.readConst((int) ' ', charArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 720857498745140833L + "'", long22 == 720857498745140833L);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "44");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "44");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4, 4]");
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitMethodInsn(1, "L1335427656", "L1131836979", "L1432403946");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor28.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter42.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter42.visitAnnotation("hi!", false);
        classWriter42.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        classWriter59.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter42.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray67);
        methodVisitor69.visitInsn(100);
        methodVisitor69.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        java.lang.Object obj77 = label76.info;
        methodVisitor69.visitJumpInsn(3, label76);
        methodVisitor28.visitJumpInsn(1, label76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor28.visitParameterAnnotation(119, "java.io.IOException: java.io.IOException: ", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNull(obj77);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        byte[] byteArray15 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(classReader12, 10);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader12.readUnsignedShort((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String str14 = classReader12.getClassName();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        byte[] byteArray26 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        java.lang.String[] strArray28 = classReader27.getInterfaces();
        int int30 = classReader27.readByte(8);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        classWriter32.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray40);
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter32.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute48 = null;
        org.mockito.asm.Attribute[] attributeArray49 = new org.mockito.asm.Attribute[] { attribute48 };
        classReader27.accept((org.mockito.asm.ClassVisitor) classWriter32, attributeArray49, 0);
        classWriter32.visitOuterClass("L71767159", "L1335427656", "");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter32, 202);
        // The following exception was thrown during execution in test generation
        try {
            short short59 = classReader12.readShort((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException" + "'", str14, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(attributeArray49);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        int int15 = classReader12.header;
        int int16 = classReader12.header;
        java.lang.String str17 = classReader12.getClassName();
        java.lang.String[] strArray18 = classReader12.getInterfaces();
        java.lang.String str19 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader12.getItem((int) (short) 1024);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1024");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 92 + "'", int16 == 92);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        int int10 = classWriter1.newField("L1603039582", "L781877917", "L1526910237");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int16 = classWriter12.newField("hi!", "hi!", "hi!");
        classWriter12.visitEnd();
        classWriter12.visitSource("java.io.IOException", "");
        classWriter12.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray24 = classWriter12.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = classWriter1.newConst((java.lang.Object) byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@5b3e9b1b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putByte(0);
        org.mockito.asm.ByteVector byteVector6 = byteVector2.putLong(5464991387954793L);
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putByte((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int14 = classWriter10.newField("hi!", "hi!", "hi!");
        classWriter10.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor21 = classWriter10.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter10.visitAnnotation("java.io.IOException", true);
        byte[] byteArray25 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector29 = byteVector8.putByteArray(byteArray25, 190, 254);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        java.lang.Class<?> wildcardClass83 = label78.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int83 = label78.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter41.newNameType("", "java.io.IOException");
        int int49 = classWriter41.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter41.visitEnd();
        label34.info = classWriter41;
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter41.visitAnnotation("L478252604", true);
        org.mockito.asm.ByteVector byteVector59 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector61 = byteVector59.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector63 = byteVector61.putShort((int) '#');
        org.mockito.asm.ByteVector byteVector65 = byteVector61.putShort((int) (short) -17730);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor66 = classWriter41.visitField((int) '4', "java.io.IOException: java.io.IOException: hi!", "L181135275", "L853084801", (java.lang.Object) byteVector65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@5aff2ccf");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(byteVector61);
        org.junit.Assert.assertNotNull(byteVector63);
        org.junit.Assert.assertNotNull(byteVector65);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 100, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = classReader20.readByte(16782186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16782186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        org.mockito.asm.ByteVector byteVector28 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector30 = byteVector28.putUTF8("");
        org.mockito.asm.ByteVector byteVector32 = byteVector30.putByte((int) (short) 100);
        org.mockito.asm.ByteVector byteVector34 = byteVector32.putShort(190);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classWriter16.newConst((java.lang.Object) byteVector32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@104b0f05");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(byteVector30);
        org.junit.Assert.assertNotNull(byteVector32);
        org.junit.Assert.assertNotNull(byteVector34);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        short short22 = classReader12.readShort(2);
        byte[] byteArray23 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = classReader12.readInt((int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) -17730 + "'", short22 == (short) -17730);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String str14 = classReader12.getClassName();
        char[] charArray22 = new char[] { '#', 'a', '#', '4', 'a', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = classReader12.readConst(81, charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 81");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException" + "'", str14, "java.io.IOException");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#a#4a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#a#4a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a, #, 4, a, 4]");
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter1.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        java.lang.String[] strArray40 = classReader37.getInterfaces();
        classWriter1.visit(1, 2, "", "L598330668", "java.io.IOException", strArray40);
        java.io.IOException iOException42 = new java.io.IOException();
        java.io.IOException iOException45 = new java.io.IOException();
        java.io.IOException iOException46 = new java.io.IOException("hi!", (java.lang.Throwable) iOException45);
        java.io.IOException iOException47 = new java.io.IOException("", (java.lang.Throwable) iOException45);
        iOException42.addSuppressed((java.lang.Throwable) iOException47);
        java.io.IOException iOException49 = new java.io.IOException((java.lang.Throwable) iOException42);
        java.lang.Throwable[] throwableArray50 = iOException42.getSuppressed();
        java.io.IOException iOException53 = new java.io.IOException();
        java.io.IOException iOException54 = new java.io.IOException("hi!", (java.lang.Throwable) iOException53);
        java.io.IOException iOException55 = new java.io.IOException("", (java.lang.Throwable) iOException53);
        java.io.IOException iOException56 = new java.io.IOException((java.lang.Throwable) iOException55);
        java.lang.Throwable[] throwableArray57 = iOException55.getSuppressed();
        java.io.IOException iOException61 = new java.io.IOException();
        java.io.IOException iOException62 = new java.io.IOException("hi!", (java.lang.Throwable) iOException61);
        java.io.IOException iOException63 = new java.io.IOException("", (java.lang.Throwable) iOException61);
        java.io.IOException iOException64 = new java.io.IOException("L1335427656", (java.lang.Throwable) iOException61);
        iOException55.addSuppressed((java.lang.Throwable) iOException64);
        iOException42.addSuppressed((java.lang.Throwable) iOException55);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = classWriter1.newConst((java.lang.Object) iOException55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter54.visitAnnotation("L1704178553", true);
        org.mockito.asm.Attribute attribute65 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter54.visitAttribute(attribute65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(annotationVisitor64);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        byte[] byteArray17 = classReader12.b;
        java.lang.Class<?> wildcardClass18 = classReader12.getClass();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!" };
        classWriter7.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray15);
        byte[] byteArray17 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 0, 0);
        java.lang.String str21 = classReader20.getSuperName();
        int int23 = classReader20.readInt(0);
        int int25 = classReader20.readByte(2);
        java.lang.String[] strArray26 = classReader20.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter1.visitMethod((int) (byte) 10, "L1526910237", "java.io.IOException: java.io.IOException: hi!", "L1603039582", strArray26);
        byte[] byteArray28 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray28, 6, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 169");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.io.IOException: hi!" + "'", str21, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-889275714) + "'", int23 == (-889275714));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 186 + "'", int25 == 186);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 11, 76, 49, 53, 50, 54, 57, 49, 48, 50, 51, 55, 1, 0, 45, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 3, 104, 105, 33, 7, 0, 5, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 49, 54, 48, 51, 48, 51, 57, 53, 56, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 1, 0, 2, 0, 2, 0, 7, 0, 0, 0, 6, 0, 2, 0, 4, 0, 6, 0, 8, 0, 0, 0, 2, 0, 9, 0, 0]");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter17.newNameType("", "java.io.IOException");
        int int25 = classWriter17.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int27 = classWriter17.newConst((java.lang.Object) 10L);
        classWriter17.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter17.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter17, 51966);
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter17.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter12.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter12.visitAnnotation("hi!", false);
        classWriter12.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter12.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter1.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray37);
        int int42 = classWriter1.newUTF8("L1145278557");
        classWriter1.visitSource("", "java.io.IOException: java.io.IOException: ");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        byte[] byteArray13 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray13, (int) (short) 1, 48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2330");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String str14 = classReader12.getClassName();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        byte[] byteArray26 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        java.lang.String[] strArray28 = classReader27.getInterfaces();
        int int30 = classReader27.readByte(8);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        classWriter32.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray40);
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter32.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute48 = null;
        org.mockito.asm.Attribute[] attributeArray49 = new org.mockito.asm.Attribute[] { attribute48 };
        classReader27.accept((org.mockito.asm.ClassVisitor) classWriter32, attributeArray49, 0);
        classWriter32.visitOuterClass("L71767159", "L1335427656", "");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter32, 202);
        java.lang.Class<?> wildcardClass58 = classReader12.getClass();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.io.IOException" + "'", str14, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(attributeArray49);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        java.lang.String str18 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter20.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter20.visitAnnotation("hi!", false);
        classWriter20.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        classWriter20.visitInnerClass("java.io.IOException", "", "java.io.IOException", 190);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!" };
        classWriter38.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray46);
        byte[] byteArray48 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        java.lang.String[] strArray50 = classReader49.getInterfaces();
        int int52 = classReader49.readByte(8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!" };
        classWriter54.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray62);
        org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter54.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute70 = null;
        org.mockito.asm.Attribute[] attributeArray71 = new org.mockito.asm.Attribute[] { attribute70 };
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray71, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter20, attributeArray71, (int) '4');
        classWriter20.visitInnerClass("L1231535858", "L598330668", "java.io.IOException: hi!", 0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(fieldVisitor69);
        org.junit.Assert.assertNotNull(attributeArray71);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int19 = classReader17.readByte((int) (short) 10);
        long long21 = classReader17.readLong((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = classReader17.getItem(63);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3819410108757049244L) + "'", long21 == (-3819410108757049244L));
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("java.io.IOException: ", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor16.visitAnnotation("L1145278557", "");
        annotationVisitor19.visitEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        char[] charArray23 = new char[] { 'a', 'a', '#', '#', ' ', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = classReader12.readConst(10, charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "aa## 4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "aa## 4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[a, a, #, #,  , 4]");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray19, (int) (short) 1792, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1800");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        byte[] byteArray62 = classReader12.b;
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        int int65 = classReader63.readInt(63);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 196864 + "'", int65 == 196864);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitCode();
        methodVisitor20.visitIntInsn(1, 1024);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor32 = methodVisitor20.visitParameterAnnotation(7, "L1145278557", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 2, 100);
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray24, (int) (byte) 100, (-1));
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray24, (int) (byte) 0, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader33.readUnsignedShort(51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector27);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label35.info = "java.io.IOException: hi!";
        java.lang.String str52 = label35.toString();
        java.lang.String str53 = label35.toString();
        org.mockito.asm.Label label54 = new org.mockito.asm.Label();
        label54.info = (-1);
        label35.info = label54;
        java.lang.Object obj58 = label54.info;
        // The following exception was thrown during execution in test generation
        try {
            int int59 = label54.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(annotationVisitor45);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "L1329904590" + "'", str52, "L1329904590");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "L1329904590" + "'", str53, "L1329904590");
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + (-1) + "'", obj58, (-1));
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        short short15 = classReader12.readShort(12);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(classReader12, 15);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 4970 + "'", short15 == (short) 4970);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int19 = classReader12.header;
        byte[] byteArray20 = classReader12.b;
        byte[] byteArray21 = classReader12.b;
        int int23 = classReader12.readByte(1);
        char[] charArray27 = new char[] { '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = classReader12.readClass(81, charArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 92 + "'", int19 == 92);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 254 + "'", int23 == 254);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "Si");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "Si");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[S, i]");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter65.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter65.visitAnnotation("hi!", false);
        classWriter65.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = classWriter65.visitAnnotation("", true);
        int int81 = classWriter65.newClass("java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter65.visitAnnotation("L1502377119", false);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter65, 9);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = classReader12.readUnsignedShort(186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 7 + "'", int81 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        methodVisitor60.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        java.lang.Object obj68 = label67.info;
        methodVisitor60.visitJumpInsn(3, label67);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter71.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter71.visitAnnotation("hi!", false);
        classWriter71.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label67.info = "java.io.IOException: hi!";
        java.lang.String str84 = label67.toString();
        java.lang.String str85 = label67.toString();
        methodVisitor28.visitJumpInsn(0, label67);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = label67.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(annotationVisitor77);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L1278417015" + "'", str84, "L1278417015");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L1278417015" + "'", str85, "L1278417015");
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        byte[] byteArray15 = classReader12.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray15, (int) (short) -13570, (int) (short) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13562");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int64 = classReader12.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            long long66 = classReader12.readLong((int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        classWriter1.visitOuterClass("java.io.IOException", "java.io.IOException", "java.io.IOException: ");
        byte[] byteArray25 = classWriter1.toByteArray();
        int int27 = classWriter1.newUTF8("java.io.IOException");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 16, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 7, 0, 9, 7, 0, 6, 7, 0, 2, 12, 0, 2, 0, 9, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 14, 0, 0, 0, 4, 0, 12, 0, 13, 0, 15, 0, 0, 0, 18, 0, 2, 0, 10, 0, 11, 0, 1, 0, 100, 0, 10, 0, 11, 0, 1, 0, 10]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int17 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader12.readUnsignedShort((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 92 + "'", int17 == 92);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        int int3 = classWriter1.newUTF8("L1635572015");
        org.mockito.asm.Attribute attribute4 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = annotationVisitor13.visitArray("java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor15.visitAnnotation("hi!", "java.io.IOException");
        java.lang.Class<?> wildcardClass19 = annotationVisitor15.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitFieldInsn((int) ' ', "java.io.IOException: hi!", "java.io.IOException: ", "L1335427656");
        methodVisitor28.visitIincInsn(76, (int) (short) 1);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 100, 1);
        long long22 = classReader20.readLong(92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) -17730);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2814758357303298L + "'", long22 == 2814758357303298L);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putUTF8("");
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putByte((int) (short) 100);
        org.mockito.asm.ByteVector byteVector6 = byteVector2.putUTF8("java.io.IOException");
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putUTF8("L1335427656");
        org.mockito.asm.ByteVector byteVector10 = byteVector8.putByte((int) (short) 1);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter12.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter12.visitAnnotation("hi!", false);
        classWriter12.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter12.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray37);
        methodVisitor39.visitInsn((int) (byte) 10);
        methodVisitor39.visitLdcInsn((java.lang.Object) 12);
        methodVisitor39.visitInsn((int) (byte) 0);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        java.lang.Object obj48 = label47.info;
        java.lang.Object obj49 = label47.info;
        methodVisitor39.visitJumpInsn((int) (byte) -1, label47);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!" };
        classWriter52.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray60);
        byte[] byteArray62 = classWriter52.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray62, 0, 0);
        java.lang.String str66 = classReader65.getSuperName();
        label47.info = classReader65;
        int int68 = classReader65.getAccess();
        byte[] byteArray69 = classReader65.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector72 = byteVector10.putByteArray(byteArray69, 12, 254);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.io.IOException: hi!" + "'", str66, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitIincInsn(16, (int) (byte) 10);
        methodVisitor20.visitMethodInsn((int) (short) 4970, "L630721910", "L1335427656", "L1432403946");
        methodVisitor20.visitMethodInsn(655616, "L1635572015", "L984287299", "L1808373495");
        methodVisitor20.visitIincInsn(13, 12);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray13, 100, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = classReader16.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        int int29 = classReader12.readInt(8);
        int int31 = classReader12.readByte((int) (short) 1);
        java.lang.String str32 = classReader12.getSuperName();
        char[] charArray39 = new char[] { ' ', ' ', 'a', ' ', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = classReader12.readClass((int) (short) -13570, charArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 655616 + "'", int29 == 655616);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 254 + "'", int31 == 254);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.io.IOException: hi!" + "'", str32, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "  a  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "  a  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ ,  , a,  ,  ]");
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        int int19 = classWriter1.newMethod("java.io.IOException: ", "java.io.IOException: hi!", "java.io.IOException", true);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray38 = new java.lang.String[] { "", "hi!" };
        classWriter30.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray38);
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter21.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray38);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter43.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter43.visitAnnotation("hi!", false);
        classWriter43.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray68 = new java.lang.String[] { "", "hi!" };
        classWriter60.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray68);
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter43.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray68);
        methodVisitor70.visitInsn(100);
        methodVisitor70.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        java.lang.Object obj78 = label77.info;
        methodVisitor70.visitJumpInsn(3, label77);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter81.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = classWriter81.visitAnnotation("hi!", false);
        classWriter81.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label77.info = "java.io.IOException: hi!";
        java.lang.String str94 = label77.toString();
        java.lang.Object obj95 = label77.info;
        methodVisitor40.visitLineNumber(0, label77);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = classWriter1.newConst((java.lang.Object) label77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value L603457047");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor70);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(annotationVisitor87);
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L603457047" + "'", str94, "L603457047");
        org.junit.Assert.assertEquals("'" + obj95 + "' != '" + "java.io.IOException: hi!" + "'", obj95, "java.io.IOException: hi!");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int16 = classWriter13.newNameType("", "java.io.IOException");
        int int21 = classWriter13.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int23 = classWriter13.newConst((java.lang.Object) 10L);
        int int25 = classWriter13.newUTF8("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor26 = classWriter1.visitField(3, "", "L478252604", "java.io.IOException: ", (java.lang.Object) "hi!");
        java.lang.Object obj31 = null;
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField((int) ' ', "hi!", "L71767159", "L1335427656", obj31);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = fieldVisitor32.visitAnnotation("L2066229866", false);
        org.mockito.asm.Attribute attribute36 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor32.visitAttribute(attribute36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor26);
        org.junit.Assert.assertNotNull(fieldVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        methodVisitor28.visitVarInsn((-1107296256), (int) (short) 256);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        int int19 = classReader14.readByte(2);
        java.lang.String[] strArray20 = classReader14.getInterfaces();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter22.newNameType("", "java.io.IOException");
        int int30 = classWriter22.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int32 = classWriter22.newUTF8("hi!");
        classWriter22.visitEnd();
        classWriter22.visitSource("", "hi!");
        byte[] byteArray37 = classWriter22.toByteArray();
        classWriter22.visitSource("", "L478252604");
        org.mockito.asm.Attribute[] attributeArray41 = new org.mockito.asm.Attribute[] {};
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter22, attributeArray41, (int) 'a');
        char[] charArray47 = new char[] { 'a', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = classReader14.readUTF8(19, charArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28462");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(attributeArray41);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[a, #]");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitMethodInsn(1, "L1335427656", "L1131836979", "L1432403946");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor28.visitAnnotation("hi!", true);
        annotationVisitor39.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        byte[] byteArray16 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray16, 0, (int) (short) 1792);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = classReader20.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        int int19 = classReader14.readByte(2);
        java.lang.String[] strArray20 = classReader14.getInterfaces();
        byte[] byteArray21 = classReader14.b;
        char[] charArray23 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = classReader14.readConst((int) (short) -13570, charArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter16.newField("hi!", "hi!", "hi!");
        classWriter16.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter16.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter16.visitAnnotation("java.io.IOException", true);
        int int31 = classWriter1.newConst((java.lang.Object) true);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter38.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter38.visitAnnotation("hi!", false);
        classWriter38.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter38.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        classWriter59.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray67);
        byte[] byteArray69 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray69);
        java.lang.String[] strArray71 = classReader70.getInterfaces();
        classWriter38.visit((int) (short) 4970, 5, "", "hi!", "", strArray71);
        classWriter1.visit((int) '#', (int) (byte) 1, "L852881485", "L1335427656", "L1131836979", strArray71);
        org.mockito.asm.Attribute attribute74 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray71);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        int int16 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "", true);
        classWriter1.visitEnd();
        int int19 = classWriter1.newClass("L1432403946");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!" };
        classWriter38.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray46);
        byte[] byteArray48 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        int int51 = classReader49.readByte((int) (byte) 1);
        int int53 = classReader49.readByte(11);
        byte[] byteArray54 = classReader49.b;
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int60 = classWriter56.newField("hi!", "hi!", "hi!");
        int int62 = classWriter56.newClass("java.io.IOException");
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter56, 92);
        int int65 = classWriter26.newConst((java.lang.Object) 92);
        byte[] byteArray66 = classWriter26.toByteArray();
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray81 = new java.lang.String[] { "", "hi!" };
        classWriter73.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray81);
        byte[] byteArray83 = classWriter73.toByteArray();
        org.mockito.asm.ClassReader classReader84 = new org.mockito.asm.ClassReader(byteArray83);
        java.lang.String[] strArray85 = classReader84.getInterfaces();
        classWriter26.visit((int) (short) 1024, (int) ' ', "L616447458", "L71767159", "L1502377119", strArray85);
        classWriter1.visit(26, 196864, "L1704178553", "java.io.IOException: java.io.IOException: ", "L717126513", strArray85);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 13 + "'", int19 == 13);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 254 + "'", int51 == 254);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 3, 0, 0, 0, 92, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("L1145278557", false);
        org.mockito.asm.ByteVector byteVector23 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector25 = byteVector23.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector27 = byteVector25.putByte(0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter1.visitField((int) (short) 1, "L1808373495", "L181135275", "L2054713387", (java.lang.Object) byteVector27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@721bafd1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(byteVector25);
        org.junit.Assert.assertNotNull(byteVector27);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("L717126513", false);
        int int20 = classWriter1.newUTF8("L181135275");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        int int29 = classReader12.readInt(8);
        char[] charArray35 = new char[] { ' ', ' ', '4', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = classReader12.readClass(5, charArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 655616 + "'", int29 == 655616);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "  4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "  4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ ,  , 4, a]");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        short short22 = classReader12.readShort(2);
        byte[] byteArray23 = classReader12.b;
        char[] charArray31 = new char[] { ' ', '4', ' ', '4', '4', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = classReader12.readClass(393224, charArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 393224");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) -17730 + "'", short22 == (short) -17730);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " 4 44 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " 4 44 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , 4,  , 4, 4,  ]");
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor28.visitAnnotation("java.io.IOException: ", true);
        annotationVisitor42.visitEnd();
        annotationVisitor42.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor16.visitAttribute(attribute17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(fieldVisitor16);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        int int19 = classReader14.readByte(2);
        java.lang.String[] strArray20 = classReader14.getInterfaces();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter22.newNameType("", "java.io.IOException");
        int int30 = classWriter22.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int32 = classWriter22.newUTF8("hi!");
        classWriter22.visitEnd();
        classWriter22.visitSource("", "hi!");
        byte[] byteArray37 = classWriter22.toByteArray();
        classWriter22.visitSource("", "L478252604");
        org.mockito.asm.Attribute[] attributeArray41 = new org.mockito.asm.Attribute[] {};
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter22, attributeArray41, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int45 = classReader14.readUnsignedShort(1024);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(attributeArray41);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod(2, "java.io.IOException: hi!", "L1432403946", "java.io.IOException", strArray16);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = methodVisitor17.visitAnnotation("L176482898", true);
        methodVisitor17.visitEnd();
        methodVisitor17.visitMaxs(325738870, (int) '4');
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter26.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter26.visitAnnotation("hi!", false);
        classWriter26.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        classWriter43.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray51);
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter26.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray51);
        methodVisitor53.visitInsn(100);
        methodVisitor53.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label60 = new org.mockito.asm.Label();
        java.lang.Object obj61 = label60.info;
        methodVisitor53.visitJumpInsn(3, label60);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter64.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter64.visitAnnotation("hi!", false);
        classWriter64.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label60.info = "java.io.IOException: hi!";
        java.lang.String str77 = label60.toString();
        java.lang.Object obj78 = label60.info;
        methodVisitor17.visitLabel(label60);
        methodVisitor17.visitEnd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(annotationVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "L691331867" + "'", str77, "L691331867");
        org.junit.Assert.assertEquals("'" + obj78 + "' != '" + "java.io.IOException: hi!" + "'", obj78, "java.io.IOException: hi!");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putUTF8("");
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putShort(81);
        org.mockito.asm.ByteVector byteVector6 = byteVector0.putUTF8("L71767159");
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putShort(21);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        byte[] byteArray20 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray20, 0, 0);
        java.lang.String str24 = classReader23.getSuperName();
        int int26 = classReader23.readInt(0);
        int int28 = classReader23.readByte(2);
        java.lang.String[] strArray29 = classReader23.getInterfaces();
        byte[] byteArray30 = classReader23.b;
        byte[] byteArray31 = classReader23.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector34 = byteVector6.putByteArray(byteArray31, (int) (short) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.io.IOException: hi!" + "'", str24, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-889275714) + "'", int26 == (-889275714));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 186 + "'", int28 == 186);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor28.visitParameterAnnotation(13, "L1502517182", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor59.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor71 = methodVisitor59.visitParameterAnnotation((int) (byte) 10, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitInsn((int) (byte) 0);
        methodVisitor28.visitCode();
        methodVisitor28.visitMethodInsn(3, "L3070851", "L1335427656", "java.io.IOException: ");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor42 = methodVisitor28.visitParameterAnnotation(202, "L984287299", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label35.info = "java.io.IOException: hi!";
        java.lang.String str52 = label35.toString();
        java.lang.String str53 = label35.toString();
        org.mockito.asm.Label label54 = new org.mockito.asm.Label();
        label54.info = (-1);
        label35.info = label54;
        java.lang.String str58 = label35.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int59 = label35.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(annotationVisitor45);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "L186231852" + "'", str52, "L186231852");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "L186231852" + "'", str53, "L186231852");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "L186231852" + "'", str58, "L186231852");
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        byte[] byteArray15 = classReader12.b;
        java.lang.String[] strArray16 = classReader12.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = classReader12.readByte((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        org.mockito.asm.Attribute attribute10 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter28.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        classWriter45.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray53);
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter28.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray53);
        methodVisitor55.visitInsn(100);
        org.mockito.asm.Label label61 = new org.mockito.asm.Label();
        label61.info = (-1);
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        methodVisitor55.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label61, label64, 8);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int71 = classWriter68.newNameType("", "java.io.IOException");
        label64.info = classWriter68;
        org.mockito.asm.Attribute[] attributeArray73 = new org.mockito.asm.Attribute[] {};
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter68, attributeArray73, 0);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter(classReader26, (int) (short) 10);
        int int79 = classReader26.readByte(3);
        java.lang.String[] strArray80 = classReader26.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter1.visitMethod((int) ' ', "L478252604", "L478252604", "L1635572015", strArray80);
        methodVisitor81.visitInsn((int) '#');
        methodVisitor81.visitIntInsn(186, 7);
        methodVisitor81.visitMethodInsn((int) 'a', "L71767159", "L1808373495", "L1635572015");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertNotNull(attributeArray73);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 190 + "'", int79 == 190);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int12 = classWriter8.newField("hi!", "hi!", "hi!");
        classWriter8.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor19 = classWriter8.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor19.visitAnnotation("java.io.IOException: ", true);
        annotationVisitor22.visitEnum("L1432403946", "L1432403946", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor22.visitArray("java.io.IOException: ");
        // The following exception was thrown during execution in test generation
        try {
            int int29 = classWriter1.newConst((java.lang.Object) annotationVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@6a4d5984");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        byte[] byteArray13 = classWriter1.toByteArray();
        java.lang.Class<?> wildcardClass14 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        classWriter16.visitSource("java.io.IOException", "L852881485");
        classWriter16.visitSource("L1502377119", "L1635572015");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" };
        classWriter56.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter39.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray64);
        methodVisitor66.visitInsn(100);
        methodVisitor66.visitMaxs(254, 2);
        methodVisitor66.visitTypeInsn((int) (byte) 0, "");
        methodVisitor66.visitMultiANewArrayInsn("java.io.IOException", (int) 'a');
        methodVisitor66.visitIincInsn((int) 'a', (int) (short) 1);
        methodVisitor66.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor82 = classWriter16.visitField(5, "L1432403946", "L1502517182", "L2054713387", (java.lang.Object) methodVisitor66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@9144a7b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        java.lang.String str15 = classReader14.getSuperName();
        int int17 = classReader14.readInt(0);
        int int19 = classReader14.readByte(2);
        java.lang.String[] strArray20 = classReader14.getInterfaces();
        byte[] byteArray21 = classReader14.b;
        byte[] byteArray22 = classReader14.b;
        // The following exception was thrown during execution in test generation
        try {
            int int24 = classReader14.readUnsignedShort(1986080361);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: hi!" + "'", str15, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-889275714) + "'", int17 == (-889275714));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter17.newNameType("", "java.io.IOException");
        int int25 = classWriter17.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int27 = classWriter17.newConst((java.lang.Object) 10L);
        classWriter17.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter17.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter17, 51966);
        long long39 = classReader12.readLong(81);
        short short41 = classReader12.readShort((int) 'a');
        long long43 = classReader12.readLong((int) '#');
        char[] charArray46 = new char[] { 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj47 = classReader12.readConst((int) (short) 1792, charArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2624986962354548L + "'", long39 == 2624986962354548L);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 1024 + "'", short41 == (short) 1024);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 72084439218676014L + "'", long43 == 72084439218676014L);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[a]");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int6 = classWriter1.newClass("java.io.IOException");
        classWriter1.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        java.lang.String[] strArray16 = null;
        org.mockito.asm.MethodVisitor methodVisitor17 = classWriter1.visitMethod(2, "java.io.IOException: hi!", "L1432403946", "java.io.IOException", strArray16);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = methodVisitor17.visitAnnotation("L176482898", true);
        methodVisitor17.visitEnd();
        methodVisitor17.visitMaxs(325738870, (int) '4');
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter26.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter26.visitAnnotation("hi!", false);
        classWriter26.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        classWriter43.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray51);
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter26.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray51);
        methodVisitor53.visitInsn(100);
        methodVisitor53.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label60 = new org.mockito.asm.Label();
        java.lang.Object obj61 = label60.info;
        methodVisitor53.visitJumpInsn(3, label60);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter64.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter64.visitAnnotation("hi!", false);
        classWriter64.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label60.info = "java.io.IOException: hi!";
        java.lang.String str77 = label60.toString();
        java.lang.Object obj78 = label60.info;
        methodVisitor17.visitLabel(label60);
        java.lang.Object obj80 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor17.visitLdcInsn(obj80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(methodVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(annotationVisitor70);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "L55846816" + "'", str77, "L55846816");
        org.junit.Assert.assertEquals("'" + obj78 + "' != '" + "java.io.IOException: hi!" + "'", obj78, "java.io.IOException: hi!");
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte((int) (byte) 1);
        int int30 = classReader26.readByte(11);
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        int int39 = classWriter33.newClass("java.io.IOException");
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter33, 92);
        int int45 = classWriter33.newField("java.io.IOException: ", "hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        byte[] byteArray57 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        java.lang.String[] strArray59 = classReader58.getInterfaces();
        int int61 = classReader58.readByte(8);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" };
        classWriter63.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray71);
        org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter63.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute79 = null;
        org.mockito.asm.Attribute[] attributeArray80 = new org.mockito.asm.Attribute[] { attribute79 };
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter63, attributeArray80, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter33, attributeArray80, (int) (short) 0);
        org.mockito.asm.ByteVector byteVector89 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector91 = byteVector89.putInt(0);
        org.mockito.asm.ByteVector byteVector93 = byteVector91.putLong((long) (byte) -1);
        org.mockito.asm.ByteVector byteVector95 = byteVector93.putLong((long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor96 = classWriter33.visitField(16, "L1635572015", "java.io.IOException: java.io.IOException: ", "L1635572015", (java.lang.Object) byteVector93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@8849731");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 254 + "'", int28 == 254);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 14 + "'", int45 == 14);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(fieldVisitor78);
        org.junit.Assert.assertNotNull(attributeArray80);
        org.junit.Assert.assertNotNull(byteVector91);
        org.junit.Assert.assertNotNull(byteVector93);
        org.junit.Assert.assertNotNull(byteVector95);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(10);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int10 = classWriter7.newNameType("", "java.io.IOException");
        int int12 = classWriter7.newClass("java.io.IOException");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        classWriter19.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray27);
        classWriter7.visit((int) (short) 0, (int) (byte) 1, "java.io.IOException: hi!", "java.io.IOException: hi!", "java.io.IOException", strArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor30 = classWriter1.visitMethod(554106887, "L1502377119", "L1145278557", "L1274768994", strArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(strArray27);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor16.visitAnnotation("L801380897", false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        methodVisitor28.visitVarInsn(51966, (int) '#');
        methodVisitor28.visitInsn(1986080361);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter54.visitAnnotation("L1704178553", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter54.visitAnnotation("L176482898", true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(annotationVisitor67);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray18);
        classWriter1.visitSource("L478252604", "L853084801");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(methodVisitor20);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        java.lang.String str19 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader12.getItem((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.mockito.asm.ClassReader classReader0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter2 = new org.mockito.asm.ClassWriter(classReader0, (-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        label37.info = 11;
        org.mockito.asm.ByteVector byteVector42 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector44 = byteVector42.putUTF8("");
        org.mockito.asm.ByteVector byteVector46 = byteVector44.putByte((int) (short) 100);
        label37.info = (short) 100;
        // The following exception was thrown during execution in test generation
        try {
            int int48 = label37.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(byteVector44);
        org.junit.Assert.assertNotNull(byteVector46);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter15.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter15.visitAnnotation("hi!", false);
        int int24 = classWriter15.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        classWriter15.visitInnerClass("java.io.IOException", "java.io.IOException: ", "java.io.IOException: hi!", (int) (byte) 10);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, 10);
        classWriter15.visitOuterClass("L1603039582", "L781877917", "L630721910");
        org.mockito.asm.Attribute attribute36 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter15.visitAttribute(attribute36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" };
        classWriter33.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray41);
        byte[] byteArray43 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        java.lang.String str45 = classReader44.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter19.visitField(186, "L1335427656", "L478252604", "L1035695636", (java.lang.Object) classReader44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@28c9fb2f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.io.IOException" + "'", str45, "java.io.IOException");
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor7.visitAnnotation("hi!", "");
        annotationVisitor7.visitEnum("java.io.IOException", "java.io.IOException", "hi!");
        annotationVisitor7.visitEnum("L1635572015", "java.io.IOException: java.io.IOException: ", "hi!");
        annotationVisitor7.visitEnum("L1432403946", "L3070851", "L853084801");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor13);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        annotationVisitor31.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitFieldInsn((int) ' ', "java.io.IOException: hi!", "java.io.IOException: ", "L1335427656");
        methodVisitor28.visitVarInsn((int) (short) 4970, 186);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = methodVisitor28.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor28.visitParameterAnnotation(100, "L583575715", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = annotationVisitor7.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor12 = annotationVisitor7.visitArray("L478252604");
        annotationVisitor12.visitEnd();
        annotationVisitor12.visitEnum("L2054713387", "L1432403946", "java/io/IOException");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor12);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        int int13 = classWriter1.newConst((java.lang.Object) 0L);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newUTF8("hi!");
        classWriter19.visitEnd();
        classWriter19.visitEnd();
        java.lang.String[] strArray37 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter19.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray37);
        methodVisitor38.visitEnd();
        methodVisitor38.visitIntInsn((int) '4', 13);
        methodVisitor38.visitCode();
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter47.visitEnd();
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" };
        classWriter55.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        classWriter47.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        java.lang.Object[] objArray67 = null;
        methodVisitor38.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray63, 9, objArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod(4, "L71767159", "L1335427656", "java.io.IOException: hi!", strArray63);
        int int71 = classWriter1.newClass("L691331867");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("L269304557", true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 16 + "'", int71 == 16);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(classReader12, (int) '#');
        int int22 = classWriter18.newField("L630721910", "java.io.IOException: ", "L1145278557");
        int int27 = classWriter18.newMethod("L71767159", "L176482898", "L886841972", false);
        int int31 = classWriter18.newField("java.io.IOException: ", "L984287299", "L1502377119");
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter18.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 21 + "'", int27 == 21);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 26 + "'", int31 == 26);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(19);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray11, 92, (int) '4');
        int int18 = classReader17.header;
        char[] charArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = classReader17.readClass(15, charArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30305");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 119 + "'", int18 == 119);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter22.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter22.visitAnnotation("hi!", false);
        classWriter22.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!" };
        classWriter39.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter22.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (short) 4970, "L1335427656", "java.io.IOException: ", "L1335427656", strArray47);
        methodVisitor50.visitVarInsn((int) (byte) 100, 11);
        org.mockito.asm.Attribute attribute54 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor50.visitAttribute(attribute54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        methodVisitor28.visitVarInsn((int) '#', 8);
        org.mockito.asm.Attribute attribute43 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int21 = classWriter18.newNameType("", "java.io.IOException");
        int int26 = classWriter18.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int28 = classWriter18.newUTF8("hi!");
        int int32 = classWriter18.newField("", "L1335427656", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray42);
        byte[] byteArray44 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        java.lang.String[] strArray46 = classReader45.getInterfaces();
        int int48 = classReader45.readByte(8);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter50.visitField(1, "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.Attribute attribute66 = null;
        org.mockito.asm.Attribute[] attributeArray67 = new org.mockito.asm.Attribute[] { attribute66 };
        classReader45.accept((org.mockito.asm.ClassVisitor) classWriter50, attributeArray67, 0);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter18, attributeArray67, 63);
        // The following exception was thrown during execution in test generation
        try {
            int int73 = classReader12.getItem(655616);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 655616");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertNotNull(attributeArray67);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        java.lang.Object obj38 = label37.info;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        methodVisitor67.visitInsn(100);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        label73.info = (-1);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        methodVisitor67.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label73, label76, 8);
        label76.info = 11;
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "java.io.IOException: ", label37, label76, 0);
        methodVisitor28.visitCode();
        org.mockito.asm.Attribute attribute84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter16.newField("hi!", "hi!", "hi!");
        classWriter16.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter16.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter16.visitAnnotation("java.io.IOException", true);
        int int31 = classWriter1.newConst((java.lang.Object) true);
        java.lang.Object obj32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classWriter1.newConst(obj32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = label37.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        int int25 = classWriter19.newClass("java.io.IOException");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter19, 92);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader12, 190);
        classWriter29.visitEnd();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter1.visitInnerClass("java.io.IOException: java.io.IOException: ", "L616447458", "L852881485", 21);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter1.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        java.lang.String[] strArray40 = classReader37.getInterfaces();
        classWriter1.visit(1, 2, "", "L598330668", "java.io.IOException", strArray40);
        org.mockito.asm.Attribute attribute42 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getSuperName();
        java.lang.String str17 = classReader12.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader12.getItem(48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48640");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException" + "'", str17, "java.io.IOException");
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor37 = methodVisitor28.visitParameterAnnotation(0, "L853084801", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        short short15 = classReader12.readShort(12);
        java.lang.String[] strArray16 = classReader12.getInterfaces();
        int int18 = classReader12.readByte(3);
        int int20 = classReader12.getItem((int) (byte) 0);
        char[] charArray26 = new char[] { 'a', '#', 'a', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = classReader12.readUTF8((int) (short) 256, charArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + short15 + "' != '" + (short) 4970 + "'", short15 == (short) 4970);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 190 + "'", int18 == 190);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "a#a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "a#a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[a, #, a,  ]");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor15.visitArray("");
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter20.newNameType("", "java.io.IOException");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter20.visitMethod((int) (short) -1, "java.io.IOException", "hi!", "", strArray37);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        classWriter45.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray53);
        byte[] byteArray55 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        int int58 = classReader56.readByte((int) (byte) 1);
        int int59 = classReader56.header;
        java.lang.String str60 = classReader56.getSuperName();
        java.lang.String[] strArray61 = classReader56.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter20.visitMethod(48640, "hi!", "hi!", "java.io.IOException", strArray61);
        org.mockito.asm.Label label63 = new org.mockito.asm.Label();
        java.lang.Object obj64 = label63.info;
        java.lang.Object obj65 = label63.info;
        methodVisitor62.visitLabel(label63);
        methodVisitor62.visitIntInsn(48640, 0);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor15.visit("L71767159", (java.lang.Object) methodVisitor62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@7ba7d103");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 254 + "'", int58 == 254);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 92 + "'", int59 == 92);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "java.io.IOException: hi!" + "'", str60, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj65);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        int int21 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            long long23 = classReader12.readLong(119);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 92 + "'", int21 == 92);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 2, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray24, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector27);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("java.io.IOException: ", false);
        annotationVisitor16.visitEnum("java.io.IOException: ", "L1335427656", "java.io.IOException: ");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor16.visitAnnotation("L852881485", "L2066229866");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter26.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter26.visitAnnotation("hi!", false);
        classWriter26.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        classWriter43.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray51);
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter26.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray51);
        methodVisitor53.visitInsn(100);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        label59.info = (-1);
        org.mockito.asm.Label label62 = new org.mockito.asm.Label();
        methodVisitor53.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label59, label62, 8);
        methodVisitor53.visitMethodInsn((-889275714), "hi!", "", "java.io.IOException");
        methodVisitor53.visitMultiANewArrayInsn("java.io.IOException: ", 2);
        annotationVisitor23.visit("L180099709", (java.lang.Object) 2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(methodVisitor53);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        annotationVisitor31.visitEnd();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) '4');
        classWriter35.visitOuterClass("L1335427656", "L643431443", "L1635572015");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter35.visitAnnotation("L598330668", true);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor31.visit("L984287299", (java.lang.Object) classWriter35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@739f63ad");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor42);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((int) ' ', "L1526910237", "L1526910237", "L1635572015", (java.lang.Object) 5464991387954793L);
        classWriter1.visitOuterClass("java.io.IOException: java.io.IOException: ", "L367481933", "L3070851");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(fieldVisitor16);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int11 = classWriter7.newField("hi!", "hi!", "hi!");
        classWriter7.visitEnd();
        classWriter7.visitSource("java.io.IOException", "");
        classWriter7.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray19 = classWriter7.toByteArray();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int28 = classWriter25.newNameType("", "java.io.IOException");
        int int33 = classWriter25.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int35 = classWriter25.newUTF8("hi!");
        classWriter25.visitEnd();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int45 = classWriter42.newNameType("", "java.io.IOException");
        int int50 = classWriter42.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int52 = classWriter42.newUTF8("hi!");
        classWriter42.visitEnd();
        classWriter42.visitEnd();
        java.lang.String[] strArray60 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter42.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray60);
        methodVisitor61.visitEnd();
        methodVisitor61.visitIntInsn((int) '4', 13);
        methodVisitor61.visitCode();
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (byte) -1);
        classWriter70.visitEnd();
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray86 = new java.lang.String[] { "", "hi!" };
        classWriter78.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray86);
        classWriter70.visit(655616, (int) ' ', "hi!", "java.io.IOException", "java.io.IOException: hi!", strArray86);
        java.lang.Object[] objArray90 = null;
        methodVisitor61.visitFrame((int) (byte) 1, (int) (short) -326, (java.lang.Object[]) strArray86, 9, objArray90);
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter25.visitMethod(186, "L1035695636", "L1145278557", "L1131836979", strArray86);
        org.mockito.asm.MethodVisitor methodVisitor93 = classWriter7.visitMethod(167837715, "java.io.IOException: hi!", "java.io.IOException", "L1635572015", strArray86);
        org.mockito.asm.FieldVisitor fieldVisitor94 = classWriter1.visitField((int) '#', "L1808373495", "L630721910", "L1808373495", (java.lang.Object) "L1635572015");
        org.mockito.asm.Attribute attribute95 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor94.visitAttribute(attribute95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(methodVisitor93);
        org.junit.Assert.assertNotNull(fieldVisitor94);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        long long32 = classReader12.readLong(11);
        // The following exception was thrown during execution in test generation
        try {
            long long34 = classReader12.readLong(48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48640");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 5464991387954793L + "'", long32 == 5464991387954793L);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        int int13 = classWriter1.newConst((java.lang.Object) 0L);
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        int int12 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute15 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 2, 0, 1, 0, 4, 0, 0, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 0, 5, 0, 0, 0, 10, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0]");
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (short) 10);
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException28 = new java.io.IOException("hi!", (java.lang.Throwable) iOException27);
        java.lang.Throwable[] throwableArray29 = iOException28.getSuppressed();
        java.io.IOException iOException30 = new java.io.IOException("L1635572015", (java.lang.Throwable) iOException28);
        java.lang.Throwable[] throwableArray31 = iOException30.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField((-1107296256), "java.io.IOException: java.io.IOException: ", "L1704178553", "L1145278557", (java.lang.Object) throwableArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.Throwable;@2667f029");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitCode();
        methodVisitor28.visitIntInsn(1986080361, 167837715);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray42);
        byte[] byteArray44 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        java.lang.String[] strArray46 = classReader45.getInterfaces();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int52 = classWriter48.newField("hi!", "hi!", "hi!");
        int int54 = classWriter48.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter48.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        byte[] byteArray61 = classWriter48.toByteArray();
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter67.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter67.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter67.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter48.visitField(4, "L852881485", "L852881485", "java.io.IOException: ", (java.lang.Object) false);
        classWriter48.visitInnerClass("L1526910237", "L1131836979", "L71767159", 10);
        classReader45.accept((org.mockito.asm.ClassVisitor) classWriter48, 10);
        classWriter48.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor31.visit("L853084801", (java.lang.Object) classWriter48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@354f2d89");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 10, 0, 0, 0, 2, 0, 9, 0, 11, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(fieldVisitor77);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        java.lang.Object obj38 = label37.info;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        methodVisitor67.visitInsn(100);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        label73.info = (-1);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        methodVisitor67.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label73, label76, 8);
        label76.info = 11;
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "java.io.IOException: ", label37, label76, 0);
        methodVisitor28.visitIincInsn(48640, (-889275714));
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor28.visitParameterAnnotation(0, "L1808373495", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int20 = classWriter17.newNameType("", "java.io.IOException");
        int int25 = classWriter17.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int27 = classWriter17.newConst((java.lang.Object) 10L);
        classWriter17.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter17.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter17, 51966);
        long long39 = classReader12.readLong(81);
        short short41 = classReader12.readShort((int) 'a');
        long long43 = classReader12.readLong((int) '#');
        char[] charArray46 = new char[] { ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = classReader12.readUTF8((int) (short) 0, charArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 2624986962354548L + "'", long39 == 2624986962354548L);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 1024 + "'", short41 == (short) 1024);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 72084439218676014L + "'", long43 == 72084439218676014L);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[ ]");
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int21 = classWriter18.newNameType("", "java.io.IOException");
        int int26 = classWriter18.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter18.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter18.visitAnnotation("hi!", true);
        classWriter18.visitEnd();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        classWriter33.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter33.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter33.visitAnnotation("java.io.IOException", true);
        int int48 = classWriter18.newConst((java.lang.Object) true);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter55.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter55.visitAnnotation("hi!", false);
        classWriter55.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter55.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        classWriter76.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray84);
        byte[] byteArray86 = classWriter76.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        java.lang.String[] strArray88 = classReader87.getInterfaces();
        classWriter55.visit((int) (short) 4970, 5, "", "hi!", "", strArray88);
        classWriter18.visit((int) '#', (int) (byte) 1, "L852881485", "L1335427656", "L1131836979", strArray88);
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter1.visitMethod((int) (short) 0, "L630721910", "L71767159", "", strArray88);
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor91);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitCode();
        java.lang.Class<?> wildcardClass26 = methodVisitor20.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        int int65 = classWriter54.newField("hi!", "", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter54.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "hi!" };
        classWriter71.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray79);
        byte[] byteArray81 = classWriter71.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        int int84 = classReader82.readByte((int) (byte) 1);
        int int86 = classReader82.readByte(11);
        int int88 = classReader82.readUnsignedShort(3);
        int int90 = classReader82.getItem(9);
        short short92 = classReader82.readShort(2);
        java.lang.String[] strArray93 = classReader82.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor68.visit("java.io.IOException: ", (java.lang.Object) strArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@29de95d9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 254 + "'", int84 == 254);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 48640 + "'", int88 == 48640);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 81 + "'", int90 == 81);
        org.junit.Assert.assertTrue("'" + short92 + "' != '" + (short) -17730 + "'", short92 == (short) -17730);
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int19 = classReader12.header;
        byte[] byteArray20 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray20, (int) (byte) -1, 1986080361);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 92 + "'", int19 == 92);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor15.visitArray("");
        annotationVisitor15.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor17);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putByte((int) (byte) -1);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader19.readByte((int) (byte) 1);
        int int22 = classReader19.header;
        java.lang.String str23 = classReader19.getSuperName();
        byte[] byteArray24 = classReader19.b;
        org.mockito.asm.ByteVector byteVector27 = byteVector6.putByteArray(byteArray24, 2, 100);
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray24, (int) (byte) 100, (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader30, 8296);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 254 + "'", int21 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 92 + "'", int22 == 92);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.io.IOException: hi!" + "'", str23, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector27);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray16 = classReader15.b;
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        char[] charArray21 = new char[] { '4', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = classReader17.readConst(7, charArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "ja");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "ja");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[j, a]");
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        int int16 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("java.io.IOException: hi!", false);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int30 = classWriter26.newField("hi!", "hi!", "hi!");
        int int32 = classWriter26.newClass("java.io.IOException");
        classWriter26.visitEnd();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" };
        classWriter56.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter39.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter26.visitMethod(1, "L1432403946", "L1635572015", "L1432403946", strArray64);
        classWriter1.visit(58, (-889275714), "L1335427656", "L643431443", "java.io.IOException: hi!", strArray64);
        classWriter1.visitInnerClass("L1526910237", "L583575715", "L852881485", (int) ' ');
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNotNull(methodVisitor67);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int16 = classWriter13.newNameType("", "java.io.IOException");
        int int21 = classWriter13.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int23 = classWriter13.newConst((java.lang.Object) 10L);
        int int25 = classWriter13.newUTF8("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor26 = classWriter1.visitField(3, "", "L478252604", "java.io.IOException: ", (java.lang.Object) "hi!");
        java.lang.Object obj31 = null;
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField((int) ' ', "hi!", "L71767159", "L1335427656", obj31);
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor32.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor26);
        org.junit.Assert.assertNotNull(fieldVisitor32);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        classWriter13.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray21);
        byte[] byteArray23 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int26 = classReader24.readByte((int) (byte) 1);
        int int28 = classReader24.readByte(11);
        byte[] byteArray29 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int35 = classWriter31.newField("hi!", "hi!", "hi!");
        int int37 = classWriter31.newClass("java.io.IOException");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter31, 92);
        int int40 = classWriter1.newConst((java.lang.Object) 92);
        byte[] byteArray41 = classWriter1.toByteArray();
        int int43 = classWriter1.newUTF8("");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 254 + "'", int26 == 254);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 11, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 3, 0, 0, 0, 92, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.getAccess();
        int int17 = classReader12.getItem(2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 33 + "'", int17 == 33);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int68 = classWriter63.newMethod("java.io.IOException: hi!", "hi!", "", true);
        int int73 = classWriter63.newMethod("java.io.IOException: ", "java.io.IOException: java.io.IOException: ", "L1131836979", true);
        classWriter63.visitEnd();
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        classWriter76.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray84);
        byte[] byteArray86 = classWriter76.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        int int89 = classReader87.readByte((int) (byte) 1);
        int int90 = classReader87.header;
        java.lang.String str91 = classReader87.getSuperName();
        java.lang.String str92 = classReader87.getClassName();
        int int93 = classReader87.getAccess();
        java.lang.String[] strArray94 = classReader87.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int95 = classWriter63.newConst((java.lang.Object) strArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@29e986cd");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 17 + "'", int73 == 17);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 254 + "'", int89 == 254);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 92 + "'", int90 == 92);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "java.io.IOException: hi!" + "'", str91, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java.io.IOException" + "'", str92, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        int int16 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("java.io.IOException: hi!", false);
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitSource("L598330668", "L3070851");
        int int27 = classWriter1.newClass("L984287299");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 14 + "'", int27 == 14);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        classWriter15.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter15.visitAnnotation("L1432403946", true);
        org.mockito.asm.Attribute attribute35 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter15.visitAttribute(attribute35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitFieldInsn(3, "L781877917", "L1432403946", "");
        methodVisitor28.visitInsn((-1));
        org.mockito.asm.Label label44 = new org.mockito.asm.Label();
        label44.info = (-1);
        methodVisitor28.visitLabel(label44);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter50.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter50.visitAnnotation("hi!", false);
        classWriter50.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray75 = new java.lang.String[] { "", "hi!" };
        classWriter67.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray75);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter50.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray75);
        methodVisitor77.visitInsn(100);
        org.mockito.asm.Label label83 = new org.mockito.asm.Label();
        label83.info = (-1);
        org.mockito.asm.Label label86 = new org.mockito.asm.Label();
        methodVisitor77.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label83, label86, 8);
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int93 = classWriter90.newNameType("", "java.io.IOException");
        label86.info = classWriter90;
        java.lang.Object obj95 = label86.info;
        methodVisitor28.visitJumpInsn((int) (short) 4970, label86);
        methodVisitor28.visitVarInsn(117, 196864);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor77);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertNotNull(obj95);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader12, 81);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray17);
        char[] charArray22 = new char[] { 'a', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = classReader18.readConst(0, charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[a, #]");
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        byte[] byteArray18 = classReader12.b;
        char[] charArray21 = new char[] { 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = classReader12.readClass((int) (short) -13570, charArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[a]");
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        java.lang.String str16 = classReader12.getSuperName();
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray17);
        char[] charArray22 = new char[] { '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = classReader18.readClass(119, charArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, #]");
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        classWriter16.visitEnd();
        classWriter16.visitSource("hi!", "L1635572015");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        byte[] byteArray47 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray47, 0, 0);
        java.lang.String str51 = classReader50.getSuperName();
        int int53 = classReader50.readInt(0);
        int int55 = classReader50.readByte(2);
        java.lang.String[] strArray56 = classReader50.getInterfaces();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(classReader50, 1);
        short short60 = classReader50.readShort((int) (byte) 100);
        org.mockito.asm.FieldVisitor fieldVisitor61 = classWriter16.visitField(9, "L1145278557", "L367481933", "L852881485", (java.lang.Object) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = fieldVisitor61.visitAnnotation("L1635572015", false);
        org.mockito.asm.Attribute attribute65 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor61.visitAttribute(attribute65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.io.IOException: hi!" + "'", str51, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-889275714) + "'", int53 == (-889275714));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 186 + "'", int55 == 186);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 6 + "'", short60 == (short) 6);
        org.junit.Assert.assertNotNull(fieldVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor64);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor12 = classWriter1.visitAnnotation("L269304557", true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor12);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitOuterClass("hi!", "", "java.io.IOException: ");
        classWriter1.visitOuterClass("L478252604", "L1635572015", "L1432403946");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        classWriter26.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray34);
        byte[] byteArray36 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        int int39 = classReader37.readByte((int) (byte) 1);
        java.lang.String[] strArray40 = classReader37.getInterfaces();
        classWriter1.visit(1, 2, "", "L598330668", "java.io.IOException", strArray40);
        classWriter1.visitOuterClass("L1526910237", "java.io.IOException: java.io.IOException: ", "L598330668");
        classWriter1.visitOuterClass("L801380897", "L811708376", "");
        java.lang.String[] strArray54 = null;
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter1.visitMethod(117, "hi!", "L779321862", "L801380897", strArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor59 = methodVisitor55.visitParameterAnnotation(11, "L71767159", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 254 + "'", int39 == 254);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(methodVisitor55);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int24 = classWriter21.newNameType("", "java.io.IOException");
        int int29 = classWriter21.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int31 = classWriter21.newUTF8("hi!");
        classWriter21.visitEnd();
        classWriter21.visitEnd();
        java.lang.String[] strArray39 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter21.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(0, "L630721910", "", "L71767159", strArray39);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter44.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter44.visitAnnotation("hi!", false);
        classWriter44.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!" };
        classWriter61.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray69);
        org.mockito.asm.MethodVisitor methodVisitor71 = classWriter44.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray69);
        methodVisitor71.visitInsn(100);
        org.mockito.asm.Label label77 = new org.mockito.asm.Label();
        label77.info = (-1);
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        methodVisitor71.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label77, label80, 8);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int87 = classWriter84.newNameType("", "java.io.IOException");
        label80.info = classWriter84;
        methodVisitor41.visitLineNumber((int) (short) -326, label80);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor41.visitAnnotation("L1335427656", false);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor71);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int23 = classWriter19.newField("hi!", "hi!", "hi!");
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter30.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter30.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter19.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray55);
        methodVisitor59.visitMaxs((int) (byte) 0, (int) ' ');
        methodVisitor59.visitMethodInsn(5, "L1635572015", "L1335427656", "L1635572015");
        methodVisitor59.visitCode();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor72 = methodVisitor59.visitParameterAnnotation((int) (short) 3, "L613898026", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(methodVisitor59);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        java.lang.String str15 = classReader12.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader12.readByte(1667592308);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1667592308");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException" + "'", str15, "java.io.IOException");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        java.lang.String str21 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            short short23 = classReader12.readShort(1667592308);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1667592308");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.io.IOException: hi!" + "'", str21, "java.io.IOException: hi!");
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitCode();
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        java.lang.Object obj35 = label34.info;
        java.lang.Object obj36 = label34.info;
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        java.lang.Object obj38 = label37.info;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        methodVisitor67.visitInsn(100);
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        label73.info = (-1);
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        methodVisitor67.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label73, label76, 8);
        org.mockito.asm.Label label79 = new org.mockito.asm.Label();
        org.mockito.asm.Label label80 = new org.mockito.asm.Label();
        java.lang.Object obj81 = label80.info;
        org.mockito.asm.Label label82 = new org.mockito.asm.Label();
        label82.info = (-1);
        org.mockito.asm.Label[] labelArray85 = new org.mockito.asm.Label[] { label37, label73, label79, label80, label82 };
        methodVisitor28.visitTableSwitchInsn(8, (int) '4', label34, labelArray85);
        methodVisitor28.visitIincInsn(15, 2);
        methodVisitor28.visitEnd();
        methodVisitor28.visitVarInsn((int) (byte) 0, (int) (short) -13570);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(labelArray85);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte(0);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader12.readInt((int) (short) -326);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -326");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 202 + "'", int14 == 202);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitMultiANewArrayInsn("java.io.IOException", (int) 'a');
        java.io.IOException iOException43 = new java.io.IOException();
        java.io.IOException iOException44 = new java.io.IOException("hi!", (java.lang.Throwable) iOException43);
        java.lang.Throwable[] throwableArray45 = iOException44.getSuppressed();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        byte[] byteArray58 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        int int61 = classReader59.readByte(0);
        java.lang.String[] strArray62 = classReader59.getInterfaces();
        methodVisitor28.visitFrame(12, 3, (java.lang.Object[]) throwableArray45, 81, (java.lang.Object[]) strArray62);
        methodVisitor28.visitMaxs((int) (byte) 0, 81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor70 = methodVisitor28.visitParameterAnnotation(11, "L589783872", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 202 + "'", int61 == 202);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        byte[] byteArray16 = classWriter1.toByteArray();
        classWriter1.visitSource("", "L478252604");
        byte[] byteArray20 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = classReader21.readByte(167837715);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 167837715");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 76, 52, 55, 56, 50, 53, 50, 54, 48, 52]");
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int18 = classReader12.readUnsignedShort(3);
        int int20 = classReader12.getItem(9);
        long long22 = classReader12.readLong(9);
        int int23 = classReader12.header;
        short short25 = classReader12.readShort((int) (short) 10);
        short short27 = classReader12.readShort(8);
        int int29 = classReader12.readUnsignedShort(106);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48640 + "'", int18 == 48640);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 81 + "'", int20 == 81);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 720857498745140833L + "'", long22 == 720857498745140833L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 92 + "'", int23 == 92);
        org.junit.Assert.assertTrue("'" + short25 + "' != '" + (short) 256 + "'", short25 == (short) 256);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 10 + "'", short27 == (short) 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        byte[] byteArray20 = classReader12.b;
        int int21 = classReader12.header;
        java.lang.String str22 = classReader12.getSuperName();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 92 + "'", int21 == 92);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.io.IOException: hi!" + "'", str22, "java.io.IOException: hi!");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int15 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = classReader12.readLong((-1107296256));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1107296256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 92 + "'", int15 == 92);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader12.readInt(1986080361);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1986080361");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        byte[] byteArray26 = classWriter16.toByteArray();
        int int31 = classWriter16.newMethod("java.io.IOException: hi!", "java.io.IOException", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter16.visitAnnotation("java.io.IOException: hi!", false);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int45 = classWriter41.newField("hi!", "hi!", "hi!");
        int int47 = classWriter41.newClass("java.io.IOException");
        classWriter41.visitEnd();
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter54.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter54.visitAnnotation("hi!", false);
        classWriter54.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray79 = new java.lang.String[] { "", "hi!" };
        classWriter71.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray79);
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter54.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray79);
        org.mockito.asm.MethodVisitor methodVisitor82 = classWriter41.visitMethod(1, "L1432403946", "L1635572015", "L1432403946", strArray79);
        classWriter16.visit(58, (-889275714), "L1335427656", "L643431443", "java.io.IOException: hi!", strArray79);
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter1.visitMethod(13, "L1704178553", "L1035695636", "L1635572015", strArray79);
        methodVisitor84.visitIntInsn(26, 5);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor84.visitParameterAnnotation(14, "L1635572015", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor81);
        org.junit.Assert.assertNotNull(methodVisitor82);
        org.junit.Assert.assertNotNull(methodVisitor84);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int25 = classWriter22.newNameType("", "java.io.IOException");
        int int30 = classWriter22.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter22.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter22.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int44 = classWriter40.newField("hi!", "hi!", "hi!");
        classWriter40.visitEnd();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter51.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter51.visitAnnotation("hi!", false);
        classWriter51.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray76 = new java.lang.String[] { "", "hi!" };
        classWriter68.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray76);
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter51.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray76);
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter40.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray76);
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter22.visitMethod((-1), "java.io.IOException: hi!", "java.io.IOException: hi!", "hi!", strArray76);
        classWriter1.visit(8, 167837715, "java.io.IOException", "L853084801", "L1145278557", strArray76);
        int int84 = classWriter1.newNameType("L1502517182", "L478252604");
        int int86 = classWriter1.newClass("");
        org.mockito.asm.Attribute attribute87 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 14 + "'", int84 == 14);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 11 + "'", int86 == 11);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        java.lang.String str18 = classReader12.getSuperName();
        int int19 = classReader12.getAccess();
        int int20 = classReader12.header;
        short short22 = classReader12.readShort(1);
        char[] charArray30 = new char[] { 'a', ' ', '#', ' ', '#', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = classReader12.readUTF8((int) 'a', charArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1024");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 92 + "'", int20 == 92);
        org.junit.Assert.assertTrue("'" + short22 + "' != '" + (short) -326 + "'", short22 == (short) -326);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "a # #4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "a # #4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[a,  , #,  , #, 4]");
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!" };
        classWriter7.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray15);
        byte[] byteArray17 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray17, 0, 0);
        java.lang.String str21 = classReader20.getSuperName();
        int int23 = classReader20.readInt(0);
        int int25 = classReader20.readByte(2);
        java.lang.String[] strArray26 = classReader20.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor27 = classWriter1.visitMethod((int) (byte) 10, "L1526910237", "java.io.IOException: java.io.IOException: hi!", "L1603039582", strArray26);
        byte[] byteArray28 = classWriter1.toByteArray();
        classWriter1.visitSource("", "L1131836979");
        classWriter1.visitInnerClass("java.io.IOException", "L1526910237", "L630721910", 4);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.io.IOException: hi!" + "'", str21, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-889275714) + "'", int23 == (-889275714));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 186 + "'", int25 == 186);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 11, 76, 49, 53, 50, 54, 57, 49, 48, 50, 51, 55, 1, 0, 45, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 3, 104, 105, 33, 7, 0, 5, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 49, 54, 48, 51, 48, 51, 57, 53, 56, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 1, 0, 2, 0, 2, 0, 7, 0, 0, 0, 6, 0, 2, 0, 4, 0, 6, 0, 8, 0, 0, 0, 2, 0, 9, 0, 0]");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        java.lang.String str15 = classReader12.getClassName();
        long long17 = classReader12.readLong(16);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter(classReader12, 117);
        char[] charArray24 = new char[] { 'a', ' ', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = classReader12.readClass((int) 'a', charArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1024");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException" + "'", str15, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7002650396846542661L + "'", long17 == 7002650396846542661L);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "a a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "a a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[a,  , a]");
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        classWriter16.visitEnd();
        classWriter16.visitSource("hi!", "L1635572015");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray45);
        byte[] byteArray47 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray47, 0, 0);
        java.lang.String str51 = classReader50.getSuperName();
        int int53 = classReader50.readInt(0);
        int int55 = classReader50.readByte(2);
        java.lang.String[] strArray56 = classReader50.getInterfaces();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(classReader50, 1);
        short short60 = classReader50.readShort((int) (byte) 100);
        org.mockito.asm.FieldVisitor fieldVisitor61 = classWriter16.visitField(9, "L1145278557", "L367481933", "L852881485", (java.lang.Object) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = fieldVisitor61.visitAnnotation("L1635572015", false);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter67.visitAnnotation("L1526910237", false);
        annotationVisitor70.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor64.visit("L1131836979", (java.lang.Object) annotationVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@7ba035dd");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.io.IOException: hi!" + "'", str51, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-889275714) + "'", int53 == (-889275714));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 186 + "'", int55 == 186);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 6 + "'", short60 == (short) 6);
        org.junit.Assert.assertNotNull(fieldVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(annotationVisitor70);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putUTF8("");
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putByte((int) (short) 100);
        org.mockito.asm.ByteVector byteVector6 = byteVector2.putUTF8("java.io.IOException");
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putUTF8("L1335427656");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        classWriter10.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray18);
        byte[] byteArray20 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray20);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter23.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray48);
        methodVisitor50.visitInsn(100);
        org.mockito.asm.Label label56 = new org.mockito.asm.Label();
        label56.info = (-1);
        org.mockito.asm.Label label59 = new org.mockito.asm.Label();
        methodVisitor50.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label56, label59, 8);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int66 = classWriter63.newNameType("", "java.io.IOException");
        label59.info = classWriter63;
        org.mockito.asm.Attribute[] attributeArray68 = new org.mockito.asm.Attribute[] {};
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter63, attributeArray68, 0);
        byte[] byteArray71 = classReader21.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector74 = byteVector8.putByteArray(byteArray71, 25, 16782186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(attributeArray68);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label35 = new org.mockito.asm.Label();
        java.lang.Object obj36 = label35.info;
        methodVisitor28.visitJumpInsn(3, label35);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label35.info = "java.io.IOException: hi!";
        java.lang.Object obj52 = label35.info;
        // The following exception was thrown during execution in test generation
        try {
            int int53 = label35.getOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Label offset position has not been resolved yet");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + "java.io.IOException: hi!" + "'", obj52, "java.io.IOException: hi!");
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        byte[] byteArray19 = classReader12.b;
        int int21 = classReader12.readByte(8);
        long long23 = classReader12.readLong(58);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = classReader12.readInt(119);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2335231997363880705L + "'", long23 == 2335231997363880705L);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.Label label34 = new org.mockito.asm.Label();
        label34.info = (-1);
        org.mockito.asm.Label label37 = new org.mockito.asm.Label();
        methodVisitor28.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label34, label37, 8);
        methodVisitor28.visitVarInsn((int) '#', 8);
        methodVisitor28.visitIntInsn(2, 6);
        methodVisitor28.visitIntInsn(4, (int) (short) 1);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        byte[] byteArray60 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        java.lang.String[] strArray62 = classReader61.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitLdcInsn((java.lang.Object) strArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@3065ddd6");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("L1502377119", true);
        int int21 = classWriter1.newMethod("L1704178553", "L811708376", "java.io.IOException: ", false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 15 + "'", int21 == 15);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = fieldVisitor12.visitAnnotation("java.io.IOException: ", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor12.visitAnnotation("L2066229866", true);
        org.mockito.asm.Attribute attribute20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("", true);
        int int17 = classWriter1.newClass("java.io.IOException: ");
        int int19 = classWriter1.newClass("L616447458");
        java.io.IOException iOException24 = new java.io.IOException();
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException28 = new java.io.IOException("hi!", (java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException("", (java.lang.Throwable) iOException27);
        iOException24.addSuppressed((java.lang.Throwable) iOException29);
        java.io.IOException iOException31 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.lang.Throwable[] throwableArray32 = iOException24.getSuppressed();
        java.io.IOException iOException35 = new java.io.IOException();
        java.io.IOException iOException36 = new java.io.IOException("hi!", (java.lang.Throwable) iOException35);
        java.io.IOException iOException37 = new java.io.IOException("", (java.lang.Throwable) iOException35);
        java.io.IOException iOException38 = new java.io.IOException((java.lang.Throwable) iOException37);
        java.lang.Throwable[] throwableArray39 = iOException37.getSuppressed();
        java.io.IOException iOException43 = new java.io.IOException();
        java.io.IOException iOException44 = new java.io.IOException("hi!", (java.lang.Throwable) iOException43);
        java.io.IOException iOException45 = new java.io.IOException("", (java.lang.Throwable) iOException43);
        java.io.IOException iOException46 = new java.io.IOException("L1335427656", (java.lang.Throwable) iOException43);
        iOException37.addSuppressed((java.lang.Throwable) iOException46);
        iOException24.addSuppressed((java.lang.Throwable) iOException37);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField((int) (short) 1792, "java/io/IOException", "L991437862", "java.io.IOException: L616447458", (java.lang.Object) iOException37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray17, 119, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 127");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter39.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter39.visitAnnotation("hi!", false);
        classWriter39.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!" };
        classWriter56.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray64);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter39.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray64);
        methodVisitor66.visitInsn(100);
        methodVisitor66.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label73 = new org.mockito.asm.Label();
        java.lang.Object obj74 = label73.info;
        methodVisitor66.visitJumpInsn(3, label73);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter77.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = classWriter77.visitAnnotation("hi!", false);
        classWriter77.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label73.info = "java.io.IOException: hi!";
        methodVisitor28.visitJumpInsn((-21316096), label73);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor28.visitParameterAnnotation(33, "L1432403946", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitMaxs(254, 2);
        methodVisitor28.visitTypeInsn((int) (byte) 0, "");
        methodVisitor28.visitMultiANewArrayInsn("java.io.IOException", (int) 'a');
        methodVisitor28.visitIincInsn((int) 'a', (int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = methodVisitor28.visitAnnotationDefault();
        annotationVisitor43.visitEnd();
        annotationVisitor43.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter6 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        classWriter6.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray14);
        byte[] byteArray16 = classWriter6.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        int int19 = classReader17.readByte((int) (byte) 1);
        int int21 = classReader17.readByte(11);
        byte[] byteArray22 = classReader17.b;
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int28 = classWriter24.newField("hi!", "hi!", "hi!");
        int int30 = classWriter24.newClass("java.io.IOException");
        classReader17.accept((org.mockito.asm.ClassVisitor) classWriter24, 92);
        byte[] byteArray33 = classWriter24.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector36 = byteVector4.putByteArray(byteArray33, 16, 393224);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 254 + "'", int19 == 254);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 7, 1, 0, 0, 7, 0, 9, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 6, 0, 8, 0, 2, 0, 10, 0, 2, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0, 2, 0, 5]");
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("java.io.IOException: ", "hi!", "", (int) (byte) 100);
        classWriter1.visitSource("L1335427656", "L1131836979");
        org.mockito.asm.Attribute attribute19 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classReader12.getItem((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getSuperName();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter(classReader12, (int) '#');
        int int22 = classWriter18.newField("L630721910", "java.io.IOException: ", "L1145278557");
        int int27 = classWriter18.newMethod("L71767159", "L176482898", "L886841972", false);
        int int31 = classWriter18.newField("java.io.IOException: ", "L984287299", "L1502377119");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int42 = classWriter38.newField("hi!", "hi!", "hi!");
        classWriter38.visitEnd();
        int int45 = classWriter38.newClass("java.io.IOException: ");
        int int47 = classWriter38.newClass("");
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(0);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter61.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter61.visitAnnotation("hi!", false);
        classWriter61.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter61.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray90 = new java.lang.String[] { "", "hi!" };
        classWriter82.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray90);
        byte[] byteArray92 = classWriter82.toByteArray();
        org.mockito.asm.ClassReader classReader93 = new org.mockito.asm.ClassReader(byteArray92);
        java.lang.String[] strArray94 = classReader93.getInterfaces();
        classWriter61.visit((int) (short) 4970, 5, "", "hi!", "", strArray94);
        classWriter54.visit(0, 5, "L616447458", "L616447458", "", strArray94);
        classWriter38.visit((-1), (int) (byte) 10, "L478252604", "", "L1502517182", strArray94);
        classWriter18.visit((int) (short) 1792, 117, "java.io.IOException: java.io.IOException: ", "L616447458", "L2057645265", strArray94);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 15 + "'", int22 == 15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 21 + "'", int27 == 21);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 26 + "'", int31 == 26);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        byte[] byteArray15 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter(classReader12, 10);
        java.lang.Class<?> wildcardClass18 = classWriter17.getClass();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newConst((java.lang.Object) 10L);
        classWriter1.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter22.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter22.visitAnnotation("hi!", false);
        classWriter22.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!" };
        classWriter39.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor49 = classWriter22.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray47);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter1.visitMethod((int) (short) 4970, "L1335427656", "java.io.IOException: ", "L1335427656", strArray47);
        classWriter1.visitInnerClass("L1035695636", "java.io.IOException: hi!", "", 3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodVisitor49);
        org.junit.Assert.assertNotNull(methodVisitor50);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putInt((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putInt((int) (short) 0);
        org.mockito.asm.ByteVector byteVector10 = byteVector6.putInt(92);
        org.mockito.asm.ByteVector byteVector12 = byteVector6.putShort((int) (short) -326);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) '4');
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray28 = new java.lang.String[] { "", "hi!" };
        classWriter20.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray28);
        byte[] byteArray30 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray30, 0, 0);
        java.lang.String str34 = classReader33.getSuperName();
        int int36 = classReader33.readInt(0);
        int int38 = classReader33.readByte(2);
        java.lang.String[] strArray39 = classReader33.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter14.visitMethod((int) (byte) 10, "L1526910237", "java.io.IOException: java.io.IOException: hi!", "L1603039582", strArray39);
        byte[] byteArray41 = classWriter14.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector44 = byteVector12.putByteArray(byteArray41, (int) (short) 100, 51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertNotNull(byteVector12);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.io.IOException: hi!" + "'", str34, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-889275714) + "'", int36 == (-889275714));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 186 + "'", int38 == 186);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 11, 76, 49, 53, 50, 54, 57, 49, 48, 50, 51, 55, 1, 0, 45, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 7, 0, 3, 1, 0, 3, 104, 105, 33, 7, 0, 5, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 11, 76, 49, 54, 48, 51, 48, 51, 57, 53, 56, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 1, 0, 2, 0, 2, 0, 7, 0, 0, 0, 6, 0, 2, 0, 4, 0, 6, 0, 8, 0, 0, 0, 2, 0, 9, 0, 0]");
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int14 = classReader12.header;
        byte[] byteArray15 = classReader12.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        byte[] byteArray28 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter31.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter31.visitAnnotation("hi!", false);
        classWriter31.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter31.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray56);
        methodVisitor58.visitInsn(100);
        org.mockito.asm.Label label64 = new org.mockito.asm.Label();
        label64.info = (-1);
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        methodVisitor58.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label64, label67, 8);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int74 = classWriter71.newNameType("", "java.io.IOException");
        label67.info = classWriter71;
        org.mockito.asm.Attribute[] attributeArray76 = new org.mockito.asm.Attribute[] {};
        classReader29.accept((org.mockito.asm.ClassVisitor) classWriter71, attributeArray76, 0);
        int int80 = classWriter71.newClass("");
        classReader16.accept((org.mockito.asm.ClassVisitor) classWriter71, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter(classReader16, 167837715);
        int int88 = classWriter84.newField("L886841972", "L616447458", "java.io.IOException: L616447458");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 92 + "'", int14 == 92);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(attributeArray76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 7 + "'", int80 == 7);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 15 + "'", int88 == 15);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 0);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        classWriter16.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray24);
        classReader14.accept((org.mockito.asm.ClassVisitor) classWriter16, 14);
        classWriter16.visitSource("java.io.IOException", "L852881485");
        org.mockito.asm.Attribute attribute31 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter16.visitAttribute(attribute31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray24);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitFieldInsn(3, "L781877917", "L1432403946", "");
        org.mockito.asm.Attribute attribute42 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = methodVisitor28.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = annotationVisitor31.visitArray("java.io.IOException: ");
        java.lang.Class<?> wildcardClass34 = annotationVisitor31.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        int int20 = classReader12.readInt(76);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" };
        classWriter23.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray31);
        byte[] byteArray33 = classWriter23.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray33, 0, 0);
        java.lang.String str37 = classReader36.getSuperName();
        int int39 = classReader36.readInt(0);
        char[] charArray44 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj45 = classReader36.readConst(7, charArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = classReader12.readUTF8(58, charArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8296");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 554106887 + "'", int20 == 554106887);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.io.IOException: hi!" + "'", str37, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-889275714) + "'", int39 == (-889275714));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + "java.io.IOException: hi!" + "'", obj45, "java.io.IOException: hi!");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        java.lang.String str16 = classReader12.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = classReader12.getItem(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.io.IOException: hi!" + "'", str16, "java.io.IOException: hi!");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor28.visitAnnotationDefault();
        java.lang.Class<?> wildcardClass84 = methodVisitor28.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter12.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter12.visitAnnotation("hi!", false);
        classWriter12.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter29.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor39 = classWriter12.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray37);
        org.mockito.asm.MethodVisitor methodVisitor40 = classWriter1.visitMethod(190, "java.io.IOException", "", "java.io.IOException", strArray37);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = methodVisitor40.visitAnnotationDefault();
        org.mockito.asm.ByteVector byteVector43 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector45 = byteVector43.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector47 = byteVector43.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector49 = byteVector47.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector51 = byteVector47.putShort((-1));
        org.mockito.asm.ByteVector byteVector53 = byteVector47.putShort(0);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor41.visit("L1335427656", (java.lang.Object) byteVector47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ByteVector@19af7b7e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor39);
        org.junit.Assert.assertNotNull(methodVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(byteVector45);
        org.junit.Assert.assertNotNull(byteVector47);
        org.junit.Assert.assertNotNull(byteVector49);
        org.junit.Assert.assertNotNull(byteVector51);
        org.junit.Assert.assertNotNull(byteVector53);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = fieldVisitor12.visitAnnotation("java.io.IOException: ", true);
        fieldVisitor12.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor12.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor12.visitAnnotation("java.io.IOException", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = fieldVisitor12.visitAnnotation("hi!", true);
        org.mockito.asm.Attribute attribute26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor12.visitAttribute(attribute26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter14.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter14.visitAnnotation("hi!", false);
        classWriter14.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter31.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray39);
        org.mockito.asm.MethodVisitor methodVisitor41 = classWriter14.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray39);
        methodVisitor41.visitInsn(100);
        org.mockito.asm.Label label47 = new org.mockito.asm.Label();
        label47.info = (-1);
        org.mockito.asm.Label label50 = new org.mockito.asm.Label();
        methodVisitor41.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label47, label50, 8);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int57 = classWriter54.newNameType("", "java.io.IOException");
        label50.info = classWriter54;
        org.mockito.asm.Attribute[] attributeArray59 = new org.mockito.asm.Attribute[] {};
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter54, attributeArray59, 0);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader12, (int) (short) 10);
        int int65 = classReader12.readByte(3);
        java.lang.String str66 = classReader12.getSuperName();
        java.lang.String str67 = classReader12.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int69 = classReader12.getItem((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -13570");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(methodVisitor41);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(attributeArray59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 190 + "'", int65 == 190);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.io.IOException: hi!" + "'", str66, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.io.IOException" + "'", str67, "java.io.IOException");
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        byte[] byteArray17 = classReader12.b;
        int int18 = classReader12.header;
        java.lang.String str19 = classReader12.getClassName();
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(classReader12, 9);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(48640);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter23, 6553610);
        classWriter23.visitEnd();
        org.mockito.asm.Attribute attribute27 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter23.visitAttribute(attribute27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 92 + "'", int18 == 92);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException" + "'", str19, "java.io.IOException");
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        int int7 = classWriter1.newClass("java.io.IOException");
        java.lang.String[] strArray12 = null;
        org.mockito.asm.MethodVisitor methodVisitor13 = classWriter1.visitMethod((int) (short) 10, "L2066229866", "L1145278557", "L616447458", strArray12);
        methodVisitor13.visitFieldInsn(48640, "L1704178553", "L598330668", "L1704178553");
        methodVisitor13.visitIntInsn(0, 11);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor25 = methodVisitor13.visitParameterAnnotation(16, "L1635572015", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(methodVisitor13);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray23);
        byte[] byteArray25 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readByte((int) (byte) 1);
        int int30 = classReader26.readByte(11);
        byte[] byteArray31 = classReader26.b;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        int int39 = classWriter33.newClass("java.io.IOException");
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter33, 92);
        org.mockito.asm.Attribute[] attributeArray42 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter33, attributeArray42, 2);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        classWriter47.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray55);
        byte[] byteArray57 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray57, 0, 0);
        java.lang.String str61 = classReader60.getSuperName();
        int int63 = classReader60.readInt(0);
        char[] charArray68 = new char[] { 'a', 'a', ' ' };
        java.lang.Object obj69 = classReader60.readConst(7, charArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = classReader12.readUTF8(0, charArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 254 + "'", int28 == 254);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.io.IOException: hi!" + "'", str61, "java.io.IOException: hi!");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-889275714) + "'", int63 == (-889275714));
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "aa ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "aa ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[a, a,  ]");
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "java.io.IOException: hi!" + "'", obj69, "java.io.IOException: hi!");
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int19 = classWriter15.newField("hi!", "hi!", "hi!");
        int int21 = classWriter15.newClass("java.io.IOException");
        org.mockito.asm.FieldVisitor fieldVisitor27 = classWriter15.visitField((int) (byte) 1, "java.io.IOException: hi!", "", "java.io.IOException: hi!", (java.lang.Object) (-1.0f));
        org.mockito.asm.Attribute[] attributeArray28 = null;
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, attributeArray28, (int) (byte) 10);
        classWriter15.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter15.visitAnnotation("L1432403946", true);
        byte[] byteArray35 = classWriter15.toByteArray();
        int int40 = classWriter15.newMethod("L781877917", "L811708376", "L1933677661", true);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 16, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 5, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 0, 4, -65, -128, 0, 0, 7, 0, 7, 7, 0, 8, 1, 0, 11, 76, 49, 52, 51, 50, 52, 48, 51, 57, 52, 54, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 10, 0, 6, 0, 10, 0, 2, 0, 11, 0, 2, 0, 1, 0, 1, 0, 7, 0, 8, 0, 2, 0, 13, 0, 0, 0, 2, 0, 9, 0, 14, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 14, 0, 0, 0, 2, 0, 5, 0, 15, 0, 0, 0, 6, 0, 1, 0, 12, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 21 + "'", int40 == 21);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        classWriter1.visitSource("L1335427656", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "hi!" };
        classWriter21.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray29);
        org.mockito.asm.MethodVisitor methodVisitor31 = classWriter1.visitMethod(13, "L1432403946", "java.io.IOException: ", "L478252604", strArray29);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter38.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter38.visitAnnotation("hi!", false);
        classWriter38.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "hi!" };
        classWriter55.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray63);
        org.mockito.asm.MethodVisitor methodVisitor65 = classWriter38.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray63);
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter1.visitMethod(167837715, "L1131836979", "L1432403946", "L583575715", strArray63);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int77 = classWriter74.newNameType("", "java.io.IOException");
        int int79 = classWriter74.newClass("java.io.IOException");
        classWriter74.visitInnerClass("java.io.IOException: hi!", "", "java.io.IOException", 1);
        java.lang.String[] strArray93 = new java.lang.String[] { "java.io.IOException: ", "java.io.IOException", "hi!" };
        classWriter74.visit(1, 254, "", "java.io.IOException: hi!", "hi!", strArray93);
        classWriter1.visit(6, 190, "java.io.IOException: L616447458", "L781877917", "L1526910237", strArray93);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(methodVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(methodVisitor65);
        org.junit.Assert.assertNotNull(methodVisitor66);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int21 = classWriter18.newNameType("", "java.io.IOException");
        int int26 = classWriter18.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        classWriter18.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter18.visitAnnotation("hi!", true);
        classWriter18.visitEnd();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int37 = classWriter33.newField("hi!", "hi!", "hi!");
        classWriter33.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter33.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter33.visitAnnotation("java.io.IOException", true);
        int int48 = classWriter18.newConst((java.lang.Object) true);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter55.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter55.visitAnnotation("hi!", false);
        classWriter55.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter55.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        classWriter76.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray84);
        byte[] byteArray86 = classWriter76.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        java.lang.String[] strArray88 = classReader87.getInterfaces();
        classWriter55.visit((int) (short) 4970, 5, "", "hi!", "", strArray88);
        classWriter18.visit((int) '#', (int) (byte) 1, "L852881485", "L1335427656", "L1131836979", strArray88);
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter1.visitMethod((int) (short) 0, "L630721910", "L71767159", "", strArray88);
        methodVisitor91.visitCode();
        methodVisitor91.visitInsn(11);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor91.visitParameterAnnotation(17, "L991437862", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor91);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putUTF8("");
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putByte((int) (short) 100);
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putShort(190);
        org.mockito.asm.ByteVector byteVector7 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector9 = byteVector7.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector11 = byteVector9.putByte(0);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        classWriter13.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray21);
        byte[] byteArray23 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        byte[] byteArray25 = classReader24.b;
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray25, 100, (int) (byte) 100);
        org.mockito.asm.ByteVector byteVector31 = byteVector11.putByteArray(byteArray25, 17, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector34 = byteVector4.putByteArray(byteArray25, (int) (short) 1792, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector9);
        org.junit.Assert.assertNotNull(byteVector11);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteVector31);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        int int3 = classWriter1.newUTF8("L1635572015");
        java.lang.String[] strArray14 = new java.lang.String[] { "java.io.IOException: hi!", "java.io.IOException: hi!", "L643431443", "java.io.IOException: java.io.IOException: hi!", "L939499658", "L811708376" };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor15 = classWriter1.visitMethod((int) (byte) 10, "L1526910237", "L1145278557", "L779321862", strArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 11");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitInsn((int) (byte) 0);
        org.mockito.asm.Label label36 = new org.mockito.asm.Label();
        java.lang.Object obj37 = label36.info;
        java.lang.Object obj38 = label36.info;
        methodVisitor28.visitJumpInsn((int) (byte) -1, label36);
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("java.io.IOException", "");
        classWriter1.visitSource("java.io.IOException: ", "java.io.IOException: hi!");
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        byte[] byteArray15 = classReader14.b;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader14.getItem(76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 76");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33]");
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        int int16 = classReader12.readByte(11);
        int int17 = classReader12.getAccess();
        java.lang.String str18 = classReader12.getSuperName();
        java.lang.String str19 = classReader12.getSuperName();
        byte[] byteArray20 = classReader12.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray20, 76, 25600);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: hi!" + "'", str18, "java.io.IOException: hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: hi!" + "'", str19, "java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector4 = byteVector2.putByte(0);
        org.mockito.asm.ByteVector byteVector6 = byteVector2.putLong(5464991387954793L);
        org.mockito.asm.ByteVector byteVector8 = byteVector6.putByte(655616);
        org.mockito.asm.ByteVector byteVector10 = byteVector8.putByte((int) '4');
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray20 = new java.lang.String[] { "", "hi!" };
        classWriter12.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray20);
        byte[] byteArray22 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray22);
        int int25 = classReader23.readByte((int) (byte) 1);
        java.lang.String[] strArray26 = classReader23.getInterfaces();
        long long28 = classReader23.readLong((int) (byte) 0);
        byte[] byteArray29 = classReader23.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector32 = byteVector8.putByteArray(byteArray29, 254, (int) (short) 25600);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(byteVector8);
        org.junit.Assert.assertNotNull(byteVector10);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 254 + "'", int25 == 254);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-3819410108757049244L) + "'", long28 == (-3819410108757049244L));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        int int15 = classWriter1.newMethod("L1502377119", "java.io.IOException", "L852881485", false);
        classWriter1.visitSource("L984287299", "L1947403627");
        org.mockito.asm.ByteVector byteVector23 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector25 = byteVector23.putShort((int) (short) 0);
        org.mockito.asm.ByteVector byteVector27 = byteVector23.putUTF8("java.io.IOException: hi!");
        org.mockito.asm.ByteVector byteVector29 = byteVector27.putByte((int) (byte) -1);
        org.mockito.asm.ByteVector byteVector31 = byteVector27.putByte(0);
        org.mockito.asm.ByteVector byteVector33 = byteVector31.putUTF8("L1335427656");
        org.mockito.asm.ByteVector byteVector35 = byteVector31.putLong((long) (short) -326);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField((int) (short) 0, "L478252604", "java.io.IOException: java.io.IOException: hi!", "java/io/IOException", (java.lang.Object) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("java.io.IOException: java.io.IOException: ", true);
        annotationVisitor39.visitEnum("", "L269304557", "L583575715");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 13 + "'", int15 == 13);
        org.junit.Assert.assertNotNull(byteVector25);
        org.junit.Assert.assertNotNull(byteVector27);
        org.junit.Assert.assertNotNull(byteVector29);
        org.junit.Assert.assertNotNull(byteVector31);
        org.junit.Assert.assertNotNull(byteVector33);
        org.junit.Assert.assertNotNull(byteVector35);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String str13 = classReader12.getClassName();
        java.lang.String[] strArray14 = classReader12.getInterfaces();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter(classReader12, (int) '4');
        int int17 = classReader12.header;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader12.readByte(16782186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16782186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.io.IOException" + "'", str13, "java.io.IOException");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 92 + "'", int17 == 92);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter33.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter33.visitAnnotation("hi!", false);
        classWriter33.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter50.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray58);
        org.mockito.asm.MethodVisitor methodVisitor60 = classWriter33.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray58);
        methodVisitor60.visitInsn(100);
        org.mockito.asm.Label label66 = new org.mockito.asm.Label();
        label66.info = (-1);
        org.mockito.asm.Label label69 = new org.mockito.asm.Label();
        methodVisitor60.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label66, label69, 8);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int76 = classWriter73.newNameType("", "java.io.IOException");
        label69.info = classWriter73;
        org.mockito.asm.Label label78 = new org.mockito.asm.Label();
        label78.info = (-1);
        methodVisitor28.visitLocalVariable("hi!", "java.io.IOException: hi!", "hi!", label69, label78, (int) ' ');
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor28.visitAnnotationDefault();
        methodVisitor28.visitCode();
        methodVisitor28.visitIntInsn((int) (short) 10, 0);
        methodVisitor28.visitIntInsn(3, (int) 'a');
        org.mockito.asm.Attribute attribute91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor28.visitAttribute(attribute91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(methodVisitor60);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int5 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter1.visitAnnotation("java.io.IOException", true);
        byte[] byteArray16 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        short short19 = classReader17.readShort(21);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor12);
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 2, 0, 3, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 1, 0, 21, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 3, 0, 0, 0, 52, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 5, 0, 6, 0, 2, 0, 9, 0, 0, 0, 2, 0, 8, 0, 10, 0, 0, 0, 2, 0, 7, 0, 0, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 5, 0, 0]");
        org.junit.Assert.assertTrue("'" + short19 + "' != '" + (short) 256 + "'", short19 == (short) 256);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.mockito.asm.ByteVector byteVector0 = new org.mockito.asm.ByteVector();
        org.mockito.asm.ByteVector byteVector2 = byteVector0.putInt(0);
        org.mockito.asm.ByteVector byteVector4 = byteVector0.putInt((int) (short) 1);
        org.mockito.asm.ByteVector byteVector6 = byteVector4.putUTF8("L589783872");
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        classWriter8.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray16);
        byte[] byteArray18 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray18, 0, 0);
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray18);
        byte[] byteArray23 = classReader22.b;
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector27 = byteVector4.putByteArray(byteArray23, (int) (short) 4970, 202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector2);
        org.junit.Assert.assertNotNull(byteVector4);
        org.junit.Assert.assertNotNull(byteVector6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        methodVisitor20.visitIntInsn((int) '4', 13);
        methodVisitor20.visitIincInsn(16, (int) (byte) 10);
        methodVisitor20.visitMethodInsn((int) (short) 4970, "L630721910", "L1335427656", "L1432403946");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter34.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter34.visitAnnotation("hi!", false);
        classWriter34.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "hi!" };
        classWriter51.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray59);
        org.mockito.asm.MethodVisitor methodVisitor61 = classWriter34.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray59);
        methodVisitor61.visitInsn(100);
        org.mockito.asm.Label label67 = new org.mockito.asm.Label();
        label67.info = (-1);
        org.mockito.asm.Label label70 = new org.mockito.asm.Label();
        methodVisitor61.visitLocalVariable("", "java.io.IOException: hi!", "hi!", label67, label70, 8);
        java.lang.Object obj73 = label67.info;
        methodVisitor20.visitLabel(label67);
        java.lang.Throwable throwable75 = null;
        java.io.IOException iOException76 = new java.io.IOException(throwable75);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor20.visitLdcInsn((java.lang.Object) iOException76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value java.io.IOException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(methodVisitor61);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + (-1) + "'", obj73, (-1));
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        int int9 = classWriter1.newUTF8("java.io.IOException");
        int int12 = classWriter1.newNameType("java.io.IOException: hi!", "java.io.IOException: hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int22 = classWriter19.newNameType("", "java.io.IOException");
        int int27 = classWriter19.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int29 = classWriter19.newConst((java.lang.Object) 10L);
        classWriter19.visitInnerClass("java.io.IOException: ", "java.io.IOException", "java.io.IOException", 12);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter40.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter40.visitAnnotation("hi!", false);
        classWriter40.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray65 = new java.lang.String[] { "", "hi!" };
        classWriter57.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor67 = classWriter40.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray65);
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter19.visitMethod((int) (short) 4970, "L1335427656", "java.io.IOException: ", "L1335427656", strArray65);
        classWriter1.visit((int) (short) 10, 9, "hi!", "java.io.IOException", "L71767159", strArray65);
        java.lang.Object obj74 = null;
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField(17, "L478252604", "L1335427656", "L71767159", obj74);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = fieldVisitor75.visitAnnotation("L176482898", true);
        annotationVisitor78.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor67);
        org.junit.Assert.assertNotNull(methodVisitor68);
        org.junit.Assert.assertNotNull(fieldVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(2);
        int int4 = classWriter1.newNameType("java.io.IOException: hi!", "");
        org.mockito.asm.Attribute attribute5 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter1.visitOuterClass("", "java.io.IOException: hi!", "L1635572015");
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!" };
        classWriter7.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray15);
        byte[] byteArray17 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray17);
        int int20 = classReader18.readByte((int) (byte) 1);
        java.lang.String[] strArray21 = classReader18.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = classWriter1.newConst((java.lang.Object) strArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@7fcd975");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 254 + "'", int20 == 254);
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn((int) (byte) 10);
        methodVisitor28.visitLdcInsn((java.lang.Object) 12);
        methodVisitor28.visitIntInsn((int) (short) 0, 12);
        methodVisitor28.visitVarInsn((int) (short) 3, 19);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter42.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter42.visitAnnotation("hi!", false);
        classWriter42.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        classWriter59.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray67);
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter42.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray67);
        methodVisitor69.visitInsn(100);
        methodVisitor69.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label76 = new org.mockito.asm.Label();
        java.lang.Object obj77 = label76.info;
        methodVisitor69.visitJumpInsn(3, label76);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter80.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter80.visitAnnotation("hi!", false);
        classWriter80.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label76.info = "java.io.IOException: hi!";
        java.lang.String str93 = label76.toString();
        org.mockito.asm.Label[] labelArray94 = new org.mockito.asm.Label[] {};
        methodVisitor28.visitTableSwitchInsn(325738870, (int) (short) 256, label76, labelArray94);
        methodVisitor28.visitMultiANewArrayInsn("L886841972", 3);
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(annotationVisitor86);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "L1710339694" + "'", str93, "L1710339694");
        org.junit.Assert.assertNotNull(labelArray94);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int4 = classWriter1.newNameType("", "java.io.IOException");
        int int9 = classWriter1.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        int int11 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray19 = new java.lang.String[] { "L1432403946" };
        org.mockito.asm.MethodVisitor methodVisitor20 = classWriter1.visitMethod(81, "java.io.IOException", "java.io.IOException: ", "java.io.IOException", strArray19);
        methodVisitor20.visitEnd();
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter23.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter23.visitAnnotation("hi!", false);
        classWriter23.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter40.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray48);
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter23.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray48);
        methodVisitor50.visitInsn(100);
        methodVisitor50.visitVarInsn((int) '#', (int) '4');
        org.mockito.asm.Label label57 = new org.mockito.asm.Label();
        java.lang.Object obj58 = label57.info;
        methodVisitor50.visitJumpInsn(3, label57);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter61.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter61.visitAnnotation("hi!", false);
        classWriter61.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        label57.info = "java.io.IOException: hi!";
        java.lang.String str74 = label57.toString();
        java.lang.String str75 = label57.toString();
        methodVisitor20.visitLabel(label57);
        methodVisitor20.visitMultiANewArrayInsn("L781877917", 13);
        methodVisitor20.visitIntInsn(33, (int) (short) -17730);
        java.lang.Class<?> wildcardClass83 = methodVisitor20.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(methodVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(annotationVisitor67);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L927534614" + "'", str74, "L927534614");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L927534614" + "'", str75, "L927534614");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray13 = classReader12.getInterfaces();
        int int15 = classReader12.readByte(8);
        int int17 = classReader12.getItem((int) (byte) 1);
        int int19 = classReader12.readByte(0);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = classReader12.getItem(76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 76");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 202 + "'", int19 == 202);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.mockito.asm.ByteVector byteVector1 = new org.mockito.asm.ByteVector((int) (short) 0);
        org.mockito.asm.ByteVector byteVector3 = byteVector1.putInt((int) (byte) 10);
        org.mockito.asm.ByteVector byteVector5 = byteVector1.putUTF8("L1502377119");
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!" };
        classWriter7.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray15);
        byte[] byteArray17 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray17);
        int int20 = classReader18.readByte((int) (byte) 1);
        int int22 = classReader18.readByte(11);
        byte[] byteArray23 = classReader18.b;
        int int24 = classReader18.header;
        byte[] byteArray25 = classReader18.b;
        int int27 = classReader18.readByte(8);
        short short29 = classReader18.readShort(0);
        byte[] byteArray30 = classReader18.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ByteVector byteVector33 = byteVector1.putByteArray(byteArray30, (int) (short) 25600, (int) (short) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteVector3);
        org.junit.Assert.assertNotNull(byteVector5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 254 + "'", int20 == 254);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 92 + "'", int24 == 92);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) -13570 + "'", short29 == (short) -13570);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        int int14 = classReader12.readByte((int) (byte) 1);
        java.lang.String[] strArray15 = classReader12.getInterfaces();
        long long17 = classReader12.readLong((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader12.readUnsignedShort(186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 254 + "'", int14 == 254);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3819410108757049244L) + "'", long17 == (-3819410108757049244L));
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("java.io.IOException: hi!", "hi!", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray26);
        org.mockito.asm.MethodVisitor methodVisitor28 = classWriter1.visitMethod(100, "java.io.IOException: ", "java.io.IOException", "java.io.IOException: ", strArray26);
        methodVisitor28.visitInsn(100);
        methodVisitor28.visitVarInsn((int) '#', (int) '4');
        methodVisitor28.visitVarInsn(12, (int) (byte) 0);
        methodVisitor28.visitFieldInsn(3, "L781877917", "L1432403946", "");
        methodVisitor28.visitInsn((-1));
        org.mockito.asm.Label label44 = new org.mockito.asm.Label();
        label44.info = (-1);
        methodVisitor28.visitLabel(label44);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int53 = classWriter49.newField("hi!", "hi!", "hi!");
        classWriter49.visitEnd();
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter49.visitField(1, "java.io.IOException", "java.io.IOException: hi!", "java.io.IOException: ", (java.lang.Object) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = fieldVisitor60.visitAnnotation("java.io.IOException: ", true);
        label44.info = true;
        java.lang.Object obj65 = label44.info;
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(methodVisitor28);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + true + "'", obj65, true);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray9);
        byte[] byteArray11 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter15.visitSource("java.io.IOException: hi!", "java.io.IOException");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter15.visitAnnotation("hi!", false);
        int int24 = classWriter15.newNameType("java.io.IOException: hi!", "java.io.IOException: ");
        classWriter15.visitInnerClass("java.io.IOException", "java.io.IOException: ", "java.io.IOException: hi!", (int) (byte) 10);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter15, 10);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int36 = classWriter33.newNameType("", "java.io.IOException");
        int int41 = classWriter33.newMethod("java.io.IOException: hi!", "java.io.IOException", "hi!", true);
        byte[] byteArray42 = classWriter33.toByteArray();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 100);
        java.lang.String[] strArray56 = new java.lang.String[] { "", "hi!" };
        classWriter48.visit((int) (short) 100, 10, "java.io.IOException", "java.io.IOException", "java.io.IOException: hi!", strArray56);
        byte[] byteArray58 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        int int61 = classReader59.readByte((int) (byte) 1);
        int int63 = classReader59.readByte(11);
        byte[] byteArray64 = classReader59.b;
        int int65 = classReader59.header;
        byte[] byteArray66 = classReader59.b;
        int int68 = classReader59.readByte(8);
        org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter33.visitField(1024, "L1274768994", "L1274768994", "L71767159", (java.lang.Object) int68);
        classReader12.accept((org.mockito.asm.ClassVisitor) classWriter33, 6);
        org.mockito.asm.Attribute attribute72 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter33.visitAttribute(attribute72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 1, 0, 2, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 4, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 6, 11, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 254 + "'", int61 == 254);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 92 + "'", int65 == 92);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 10, 1, 0, 19, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 1, 1, 0, 24, 106, 97, 118, 97, 46, 105, 111, 46, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 104, 105, 33, 7, 0, 3, 1, 0, 0, 7, 0, 5, 1, 0, 3, 104, 105, 33, 7, 0, 7, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 10, 0, 2, 0, 4, 0, 2, 0, 6, 0, 8, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 2, 0, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor69);
    }
}
